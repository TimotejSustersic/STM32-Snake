
STM32H7-Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800ba54  0800ba54  0001ba54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb20  0800bb20  0001bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb28  0800bb28  0001bb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb2c  0800bb2c  0001bb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800bb30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800bb90  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800bbf0  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e7c  24000120  0800bc50  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000f9c  0800bc50  00020f9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e11d  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057fc  00000000  00000000  0004e2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020c8  00000000  00000000  00053ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000193f  00000000  00000000  00055b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000433b3  00000000  00000000  000574b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030ba9  00000000  00000000  0009a86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019b63b  00000000  00000000  000cb413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091f4  00000000  00000000  00266a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0026fc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ba3c 	.word	0x0800ba3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800ba3c 	.word	0x0800ba3c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]
 80006ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b0:	4b30      	ldr	r3, [pc, #192]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006b2:	4a31      	ldr	r2, [pc, #196]	; (8000778 <MX_ADC1_Init+0xec>)
 80006b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006cc:	2204      	movs	r2, #4
 80006ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006de:	2201      	movs	r2, #1
 80006e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_ADC1_Init+0xe8>)
 8000702:	2200      	movs	r2, #0
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_ADC1_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070e:	4819      	ldr	r0, [pc, #100]	; (8000774 <MX_ADC1_Init+0xe8>)
 8000710:	f002 fb34 	bl	8002d7c <HAL_ADC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800071a:	f001 fa61 	bl	8001be0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4812      	ldr	r0, [pc, #72]	; (8000774 <MX_ADC1_Init+0xe8>)
 800072a:	f003 f949 	bl	80039c0 <HAL_ADCEx_MultiModeConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000734:	f001 fa54 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000738:	2301      	movs	r3, #1
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073c:	2306      	movs	r3, #6
 800073e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000744:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000748:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800074a:	2304      	movs	r3, #4
 800074c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_ADC1_Init+0xe8>)
 800075c:	f002 fcb0 	bl	80030c0 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000766:	f001 fa3b 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	; 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2400013c 	.word	0x2400013c
 8000778:	40022000 	.word	0x40022000

0800077c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_ADC2_Init+0xc0>)
 8000796:	4a2a      	ldr	r2, [pc, #168]	; (8000840 <MX_ADC2_Init+0xc4>)
 8000798:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_ADC2_Init+0xc0>)
 800079c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_ADC2_Init+0xc0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC2_Init+0xc0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_ADC2_Init+0xc0>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_ADC2_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_ADC2_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_ADC2_Init+0xc0>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_ADC2_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_ADC2_Init+0xc0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_ADC2_Init+0xc0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_ADC2_Init+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_ADC2_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_ADC2_Init+0xc0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_ADC2_Init+0xc0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <MX_ADC2_Init+0xc0>)
 80007f4:	f002 fac2 	bl	8002d7c <HAL_ADC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80007fe:	f001 f9ef 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000802:	2301      	movs	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000806:	2306      	movs	r3, #6
 8000808:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800080e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000812:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000814:	2304      	movs	r3, #4
 8000816:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_ADC2_Init+0xc0>)
 8000826:	f002 fc4b 	bl	80030c0 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000830:	f001 f9d6 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240001a0 	.word	0x240001a0
 8000840:	40022100 	.word	0x40022100

08000844 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <MX_ADC3_Init+0xb8>)
 800085e:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_ADC3_Init+0xbc>)
 8000860:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_ADC3_Init+0xb8>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <MX_ADC3_Init+0xb8>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_ADC3_Init+0xb8>)
 8000870:	2204      	movs	r2, #4
 8000872:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_ADC3_Init+0xb8>)
 8000876:	2200      	movs	r2, #0
 8000878:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_ADC3_Init+0xb8>)
 800087c:	2200      	movs	r2, #0
 800087e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_ADC3_Init+0xb8>)
 8000882:	2201      	movs	r2, #1
 8000884:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_ADC3_Init+0xb8>)
 8000888:	2200      	movs	r2, #0
 800088a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_ADC3_Init+0xb8>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_ADC3_Init+0xb8>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_ADC3_Init+0xb8>)
 800089a:	2200      	movs	r2, #0
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_ADC3_Init+0xb8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_ADC3_Init+0xb8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_ADC3_Init+0xb8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008b2:	4812      	ldr	r0, [pc, #72]	; (80008fc <MX_ADC3_Init+0xb8>)
 80008b4:	f002 fa62 	bl	8002d7c <HAL_ADC_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80008be:	f001 f98f 	bl	8001be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_ADC3_Init+0xc0>)
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c6:	2306      	movs	r3, #6
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008d2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d4:	2304      	movs	r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_ADC3_Init+0xb8>)
 80008e6:	f002 fbeb 	bl	80030c0 <HAL_ADC_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008f0:	f001 f976 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24000204 	.word	0x24000204
 8000900:	58026000 	.word	0x58026000
 8000904:	1d500080 	.word	0x1d500080

08000908 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b090      	sub	sp, #64	; 0x40
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a72      	ldr	r2, [pc, #456]	; (8000af0 <HAL_ADC_MspInit+0x1e8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d14e      	bne.n	80009c8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800092a:	4b72      	ldr	r3, [pc, #456]	; (8000af4 <HAL_ADC_MspInit+0x1ec>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	4a70      	ldr	r2, [pc, #448]	; (8000af4 <HAL_ADC_MspInit+0x1ec>)
 8000932:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000934:	4b6f      	ldr	r3, [pc, #444]	; (8000af4 <HAL_ADC_MspInit+0x1ec>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d10e      	bne.n	800095a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800093c:	4b6e      	ldr	r3, [pc, #440]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 800093e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000942:	4a6d      	ldr	r2, [pc, #436]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000944:	f043 0320 	orr.w	r3, r3, #32
 8000948:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800094c:	4b6a      	ldr	r3, [pc, #424]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 800094e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000952:	f003 0320 	and.w	r3, r3, #32
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
 8000958:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	4a65      	ldr	r2, [pc, #404]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096a:	4b63      	ldr	r3, [pc, #396]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b5f      	ldr	r3, [pc, #380]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	4a5e      	ldr	r2, [pc, #376]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000988:	4b5b      	ldr	r3, [pc, #364]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	623b      	str	r3, [r7, #32]
 8000994:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000996:	2301      	movs	r3, #1
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099a:	2303      	movs	r3, #3
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009a6:	4619      	mov	r1, r3
 80009a8:	4854      	ldr	r0, [pc, #336]	; (8000afc <HAL_ADC_MspInit+0x1f4>)
 80009aa:	f004 f953 	bl	8004c54 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80009ae:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80009b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80009b6:	f002 f83f 	bl	8002a38 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80009ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80009be:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80009c2:	f002 f839 	bl	8002a38 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009c6:	e08f      	b.n	8000ae8 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a4c      	ldr	r2, [pc, #304]	; (8000b00 <HAL_ADC_MspInit+0x1f8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d133      	bne.n	8000a3a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009d2:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <HAL_ADC_MspInit+0x1ec>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a46      	ldr	r2, [pc, #280]	; (8000af4 <HAL_ADC_MspInit+0x1ec>)
 80009da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009dc:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <HAL_ADC_MspInit+0x1ec>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10e      	bne.n	8000a02 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009e4:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 80009e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009ea:	4a43      	ldr	r2, [pc, #268]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 80009ec:	f043 0320 	orr.w	r3, r3, #32
 80009f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009f4:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 80009f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009fa:	f003 0320 	and.w	r3, r3, #32
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	4a3b      	ldr	r2, [pc, #236]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a12:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000a20:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000a24:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000a28:	f002 f806 	bl	8002a38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000a2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000a30:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000a34:	f002 f800 	bl	8002a38 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000a38:	e056      	b.n	8000ae8 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC3)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a31      	ldr	r2, [pc, #196]	; (8000b04 <HAL_ADC_MspInit+0x1fc>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d151      	bne.n	8000ae8 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a2b      	ldr	r2, [pc, #172]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a6a:	f043 0320 	orr.w	r3, r3, #32
 8000a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	f003 0320 	and.w	r3, r3, #32
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_ADC_MspInit+0x1f0>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4815      	ldr	r0, [pc, #84]	; (8000b08 <HAL_ADC_MspInit+0x200>)
 8000ab4:	f004 f8ce 	bl	8004c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000abc:	2303      	movs	r3, #3
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <HAL_ADC_MspInit+0x1f4>)
 8000acc:	f004 f8c2 	bl	8004c54 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000ad4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ad8:	f001 ffae 	bl	8002a38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000adc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000ae4:	f001 ffa8 	bl	8002a38 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000ae8:	bf00      	nop
 8000aea:	3740      	adds	r7, #64	; 0x40
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40022000 	.word	0x40022000
 8000af4:	24000268 	.word	0x24000268
 8000af8:	58024400 	.word	0x58024400
 8000afc:	58020800 	.word	0x58020800
 8000b00:	40022100 	.word	0x40022100
 8000b04:	58026000 	.word	0x58026000
 8000b08:	58021400 	.word	0x58021400

08000b0c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_ETH_Init+0x80>)
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <MX_ETH_Init+0x84>)
 8000b14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_ETH_Init+0x88>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_ETH_Init+0x88>)
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_ETH_Init+0x88>)
 8000b24:	22e1      	movs	r2, #225	; 0xe1
 8000b26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_ETH_Init+0x88>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_ETH_Init+0x88>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_ETH_Init+0x88>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_ETH_Init+0x80>)
 8000b3c:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <MX_ETH_Init+0x88>)
 8000b3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_ETH_Init+0x80>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_ETH_Init+0x80>)
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <MX_ETH_Init+0x8c>)
 8000b4a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_ETH_Init+0x80>)
 8000b4e:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <MX_ETH_Init+0x90>)
 8000b50:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_ETH_Init+0x80>)
 8000b54:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b58:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_ETH_Init+0x80>)
 8000b5c:	f003 f8f2 	bl	8003d44 <HAL_ETH_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b66:	f001 f83b 	bl	8001be0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b6a:	2238      	movs	r2, #56	; 0x38
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_ETH_Init+0x94>)
 8000b70:	f00a fae0 	bl	800b134 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_ETH_Init+0x94>)
 8000b76:	2221      	movs	r2, #33	; 0x21
 8000b78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_ETH_Init+0x94>)
 8000b7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_ETH_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	240002a4 	.word	0x240002a4
 8000b90:	40028000 	.word	0x40028000
 8000b94:	24000354 	.word	0x24000354
 8000b98:	240000c0 	.word	0x240000c0
 8000b9c:	24000060 	.word	0x24000060
 8000ba0:	2400026c 	.word	0x2400026c

08000ba4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b092      	sub	sp, #72	; 0x48
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a87      	ldr	r2, [pc, #540]	; (8000de0 <HAL_ETH_MspInit+0x23c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	f040 8108 	bne.w	8000dd8 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000bc8:	4b86      	ldr	r3, [pc, #536]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bce:	4a85      	ldr	r2, [pc, #532]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd8:	4b82      	ldr	r3, [pc, #520]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
 8000be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000be6:	4b7f      	ldr	r3, [pc, #508]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000be8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bec:	4a7d      	ldr	r2, [pc, #500]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bf6:	4b7b      	ldr	r3, [pc, #492]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c04:	4b77      	ldr	r3, [pc, #476]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c0a:	4a76      	ldr	r2, [pc, #472]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c14:	4b73      	ldr	r3, [pc, #460]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c20:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	4b70      	ldr	r3, [pc, #448]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a6e      	ldr	r2, [pc, #440]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b6c      	ldr	r3, [pc, #432]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c40:	4b68      	ldr	r3, [pc, #416]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a67      	ldr	r2, [pc, #412]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b64      	ldr	r3, [pc, #400]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c5e:	4b61      	ldr	r3, [pc, #388]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	4a5f      	ldr	r2, [pc, #380]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6e:	4b5d      	ldr	r3, [pc, #372]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7c:	4b59      	ldr	r3, [pc, #356]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	4a58      	ldr	r2, [pc, #352]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8c:	4b55      	ldr	r3, [pc, #340]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	4b52      	ldr	r3, [pc, #328]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	4a50      	ldr	r2, [pc, #320]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000caa:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a49      	ldr	r2, [pc, #292]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b46      	ldr	r3, [pc, #280]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b43      	ldr	r3, [pc, #268]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	4a41      	ldr	r2, [pc, #260]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce6:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <HAL_ETH_MspInit+0x240>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000cf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d06:	230b      	movs	r3, #11
 8000d08:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4835      	ldr	r0, [pc, #212]	; (8000de8 <HAL_ETH_MspInit+0x244>)
 8000d12:	f003 ff9f 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000d16:	2304      	movs	r3, #4
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d26:	230b      	movs	r3, #11
 8000d28:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d2e:	4619      	mov	r1, r3
 8000d30:	482e      	ldr	r0, [pc, #184]	; (8000dec <HAL_ETH_MspInit+0x248>)
 8000d32:	f003 ff8f 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8000d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d50:	4619      	mov	r1, r3
 8000d52:	4827      	ldr	r0, [pc, #156]	; (8000df0 <HAL_ETH_MspInit+0x24c>)
 8000d54:	f003 ff7e 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8000d58:	233e      	movs	r3, #62	; 0x3e
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d68:	230b      	movs	r3, #11
 8000d6a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d70:	4619      	mov	r1, r3
 8000d72:	4820      	ldr	r0, [pc, #128]	; (8000df4 <HAL_ETH_MspInit+0x250>)
 8000d74:	f003 ff6e 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d90:	4619      	mov	r1, r3
 8000d92:	4819      	ldr	r0, [pc, #100]	; (8000df8 <HAL_ETH_MspInit+0x254>)
 8000d94:	f003 ff5e 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8000d98:	2386      	movs	r3, #134	; 0x86
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da8:	230b      	movs	r3, #11
 8000daa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000db0:	4619      	mov	r1, r3
 8000db2:	4812      	ldr	r0, [pc, #72]	; (8000dfc <HAL_ETH_MspInit+0x258>)
 8000db4:	f003 ff4e 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8000db8:	2303      	movs	r3, #3
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc8:	230b      	movs	r3, #11
 8000dca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <HAL_ETH_MspInit+0x25c>)
 8000dd4:	f003 ff3e 	bl	8004c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3748      	adds	r7, #72	; 0x48
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40028000 	.word	0x40028000
 8000de4:	58024400 	.word	0x58024400
 8000de8:	58021800 	.word	0x58021800
 8000dec:	58021000 	.word	0x58021000
 8000df0:	58022000 	.word	0x58022000
 8000df4:	58020800 	.word	0x58020800
 8000df8:	58021c00 	.word	0x58021c00
 8000dfc:	58020000 	.word	0x58020000
 8000e00:	58020400 	.word	0x58020400

08000e04 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <MX_FDCAN1_Init+0xc4>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e2e:	2210      	movs	r2, #16
 8000e30:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e76:	2204      	movs	r2, #4
 8000e78:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e8e:	2204      	movs	r2, #4
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_FDCAN1_Init+0xc0>)
 8000eb2:	f003 fb6b 	bl	800458c <HAL_FDCAN_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ebc:	f000 fe90 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2400035c 	.word	0x2400035c
 8000ec8:	4000a000 	.word	0x4000a000

08000ecc <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <MX_FDCAN2_Init+0xc4>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000eee:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f3e:	2204      	movs	r2, #4
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f56:	2204      	movs	r2, #4
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f74:	2204      	movs	r2, #4
 8000f76:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_FDCAN2_Init+0xc0>)
 8000f7a:	f003 fb07 	bl	800458c <HAL_FDCAN_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000f84:	f000 fe2c 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	240003fc 	.word	0x240003fc
 8000f90:	4000a400 	.word	0x4000a400

08000f94 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ba      	sub	sp, #232	; 0xe8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	22bc      	movs	r2, #188	; 0xbc
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f00a f8bd 	bl	800b134 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a54      	ldr	r2, [pc, #336]	; (8001110 <HAL_FDCAN_MspInit+0x17c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d14e      	bne.n	8001062 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000fca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd2:	f107 0318 	add.w	r3, r7, #24
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f005 fcce 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000fe2:	f000 fdfd 	bl	8001be0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <HAL_FDCAN_MspInit+0x180>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4a49      	ldr	r2, [pc, #292]	; (8001114 <HAL_FDCAN_MspInit+0x180>)
 8000fee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ff0:	4b48      	ldr	r3, [pc, #288]	; (8001114 <HAL_FDCAN_MspInit+0x180>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d10e      	bne.n	8001016 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ff8:	4b47      	ldr	r3, [pc, #284]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 8000ffa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ffe:	4a46      	ldr	r2, [pc, #280]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 800100a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	4b40      	ldr	r3, [pc, #256]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	4a3e      	ldr	r2, [pc, #248]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 800101e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001026:	4b3c      	ldr	r3, [pc, #240]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001034:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800104e:	2309      	movs	r3, #9
 8001050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001054:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001058:	4619      	mov	r1, r3
 800105a:	4830      	ldr	r0, [pc, #192]	; (800111c <HAL_FDCAN_MspInit+0x188>)
 800105c:	f003 fdfa 	bl	8004c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001060:	e052      	b.n	8001108 <HAL_FDCAN_MspInit+0x174>
  else if(fdcanHandle->Instance==FDCAN2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <HAL_FDCAN_MspInit+0x18c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d14d      	bne.n	8001108 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800106c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001070:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001072:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001076:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	4618      	mov	r0, r3
 8001080:	f005 fc7a 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 800108a:	f000 fda9 	bl	8001be0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <HAL_FDCAN_MspInit+0x180>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <HAL_FDCAN_MspInit+0x180>)
 8001096:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <HAL_FDCAN_MspInit+0x180>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10e      	bne.n	80010be <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 80010a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 80010b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_FDCAN_MspInit+0x184>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 80010dc:	f242 0320 	movw	r3, #8224	; 0x2020
 80010e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80010f6:	2309      	movs	r3, #9
 80010f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001100:	4619      	mov	r1, r3
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <HAL_FDCAN_MspInit+0x190>)
 8001104:	f003 fda6 	bl	8004c54 <HAL_GPIO_Init>
}
 8001108:	bf00      	nop
 800110a:	37e8      	adds	r7, #232	; 0xe8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	4000a000 	.word	0x4000a000
 8001114:	2400049c 	.word	0x2400049c
 8001118:	58024400 	.word	0x58024400
 800111c:	58021c00 	.word	0x58021c00
 8001120:	4000a400 	.word	0x4000a400
 8001124:	58020400 	.word	0x58020400

08001128 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_FMC_Init+0x94>)
 8001142:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <MX_FMC_Init+0x98>)
 8001144:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_FMC_Init+0x94>)
 8001148:	2201      	movs	r2, #1
 800114a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <MX_FMC_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_FMC_Init+0x94>)
 8001154:	2204      	movs	r2, #4
 8001156:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <MX_FMC_Init+0x94>)
 800115a:	2210      	movs	r2, #16
 800115c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_FMC_Init+0x94>)
 8001160:	2240      	movs	r2, #64	; 0x40
 8001162:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <MX_FMC_Init+0x94>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_FMC_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_FMC_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_FMC_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_FMC_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001182:	2310      	movs	r3, #16
 8001184:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001186:	2310      	movs	r3, #16
 8001188:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800118a:	2310      	movs	r3, #16
 800118c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800118e:	2310      	movs	r3, #16
 8001190:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001192:	2310      	movs	r3, #16
 8001194:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001196:	2310      	movs	r3, #16
 8001198:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800119a:	2310      	movs	r3, #16
 800119c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_FMC_Init+0x94>)
 80011a4:	f008 f95e 	bl	8009464 <HAL_SDRAM_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80011ae:	f000 fd17 	bl	8001be0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011b2:	bf00      	nop
 80011b4:	3720      	adds	r7, #32
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	240004a0 	.word	0x240004a0
 80011c0:	52004140 	.word	0x52004140

080011c4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0b6      	sub	sp, #216	; 0xd8
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011da:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <HAL_FMC_MspInit+0x154>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 8096 	bne.w	8001310 <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 80011e4:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <HAL_FMC_MspInit+0x154>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	22bc      	movs	r2, #188	; 0xbc
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f009 ff9e 	bl	800b134 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80011f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80011fe:	2300      	movs	r3, #0
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	4618      	mov	r0, r3
 8001208:	f005 fbb6 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 8001212:	f000 fce5 	bl	8001be0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001216:	4b41      	ldr	r3, [pc, #260]	; (800131c <HAL_FMC_MspInit+0x158>)
 8001218:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800121c:	4a3f      	ldr	r2, [pc, #252]	; (800131c <HAL_FMC_MspInit+0x158>)
 800121e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001222:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001226:	4b3d      	ldr	r3, [pc, #244]	; (800131c <HAL_FMC_MspInit+0x158>)
 8001228:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800122c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001234:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001238:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800124e:	230c      	movs	r3, #12
 8001250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001254:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001258:	4619      	mov	r1, r3
 800125a:	4831      	ldr	r0, [pc, #196]	; (8001320 <HAL_FMC_MspInit+0x15c>)
 800125c:	f003 fcfa 	bl	8004c54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001260:	f248 1333 	movw	r3, #33075	; 0x8133
 8001264:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800127a:	230c      	movs	r3, #12
 800127c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001280:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001284:	4619      	mov	r1, r3
 8001286:	4827      	ldr	r0, [pc, #156]	; (8001324 <HAL_FMC_MspInit+0x160>)
 8001288:	f003 fce4 	bl	8004c54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800128c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a6:	230c      	movs	r3, #12
 80012a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012b0:	4619      	mov	r1, r3
 80012b2:	481d      	ldr	r0, [pc, #116]	; (8001328 <HAL_FMC_MspInit+0x164>)
 80012b4:	f003 fcce 	bl	8004c54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80012b8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012d2:	230c      	movs	r3, #12
 80012d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012dc:	4619      	mov	r1, r3
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <HAL_FMC_MspInit+0x168>)
 80012e0:	f003 fcb8 	bl	8004c54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012e4:	23e0      	movs	r3, #224	; 0xe0
 80012e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012fc:	230c      	movs	r3, #12
 80012fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001302:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001306:	4619      	mov	r1, r3
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <HAL_FMC_MspInit+0x16c>)
 800130a:	f003 fca3 	bl	8004c54 <HAL_GPIO_Init>
 800130e:	e000      	b.n	8001312 <HAL_FMC_MspInit+0x14e>
    return;
 8001310:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001312:	37d8      	adds	r7, #216	; 0xd8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	240004d4 	.word	0x240004d4
 800131c:	58024400 	.word	0x58024400
 8001320:	58021000 	.word	0x58021000
 8001324:	58021800 	.word	0x58021800
 8001328:	58020c00 	.word	0x58020c00
 800132c:	58021400 	.word	0x58021400
 8001330:	58021c00 	.word	0x58021c00

08001334 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800133c:	f7ff ff42 	bl	80011c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PA6   ------> S_TIM13_CH1
*/
void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b090      	sub	sp, #64	; 0x40
 800134c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800135e:	4bba      	ldr	r3, [pc, #744]	; (8001648 <MX_GPIO_Init+0x300>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4ab8      	ldr	r2, [pc, #736]	; (8001648 <MX_GPIO_Init+0x300>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4bb6      	ldr	r3, [pc, #728]	; (8001648 <MX_GPIO_Init+0x300>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4bb2      	ldr	r3, [pc, #712]	; (8001648 <MX_GPIO_Init+0x300>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4ab1      	ldr	r2, [pc, #708]	; (8001648 <MX_GPIO_Init+0x300>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4bae      	ldr	r3, [pc, #696]	; (8001648 <MX_GPIO_Init+0x300>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800139a:	4bab      	ldr	r3, [pc, #684]	; (8001648 <MX_GPIO_Init+0x300>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	4aa9      	ldr	r2, [pc, #676]	; (8001648 <MX_GPIO_Init+0x300>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013aa:	4ba7      	ldr	r3, [pc, #668]	; (8001648 <MX_GPIO_Init+0x300>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	623b      	str	r3, [r7, #32]
 80013b6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013b8:	4ba3      	ldr	r3, [pc, #652]	; (8001648 <MX_GPIO_Init+0x300>)
 80013ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013be:	4aa2      	ldr	r2, [pc, #648]	; (8001648 <MX_GPIO_Init+0x300>)
 80013c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c8:	4b9f      	ldr	r3, [pc, #636]	; (8001648 <MX_GPIO_Init+0x300>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b9c      	ldr	r3, [pc, #624]	; (8001648 <MX_GPIO_Init+0x300>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	4a9a      	ldr	r2, [pc, #616]	; (8001648 <MX_GPIO_Init+0x300>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e6:	4b98      	ldr	r3, [pc, #608]	; (8001648 <MX_GPIO_Init+0x300>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f4:	4b94      	ldr	r3, [pc, #592]	; (8001648 <MX_GPIO_Init+0x300>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	4a93      	ldr	r2, [pc, #588]	; (8001648 <MX_GPIO_Init+0x300>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001404:	4b90      	ldr	r3, [pc, #576]	; (8001648 <MX_GPIO_Init+0x300>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001412:	4b8d      	ldr	r3, [pc, #564]	; (8001648 <MX_GPIO_Init+0x300>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a8b      	ldr	r2, [pc, #556]	; (8001648 <MX_GPIO_Init+0x300>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b89      	ldr	r3, [pc, #548]	; (8001648 <MX_GPIO_Init+0x300>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b85      	ldr	r3, [pc, #532]	; (8001648 <MX_GPIO_Init+0x300>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	4a84      	ldr	r2, [pc, #528]	; (8001648 <MX_GPIO_Init+0x300>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001440:	4b81      	ldr	r3, [pc, #516]	; (8001648 <MX_GPIO_Init+0x300>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	4b7e      	ldr	r3, [pc, #504]	; (8001648 <MX_GPIO_Init+0x300>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	4a7c      	ldr	r2, [pc, #496]	; (8001648 <MX_GPIO_Init+0x300>)
 8001456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145e:	4b7a      	ldr	r3, [pc, #488]	; (8001648 <MX_GPIO_Init+0x300>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b76      	ldr	r3, [pc, #472]	; (8001648 <MX_GPIO_Init+0x300>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	4a75      	ldr	r2, [pc, #468]	; (8001648 <MX_GPIO_Init+0x300>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147c:	4b72      	ldr	r3, [pc, #456]	; (8001648 <MX_GPIO_Init+0x300>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800148a:	4b6f      	ldr	r3, [pc, #444]	; (8001648 <MX_GPIO_Init+0x300>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a6d      	ldr	r2, [pc, #436]	; (8001648 <MX_GPIO_Init+0x300>)
 8001492:	f043 0320 	orr.w	r3, r3, #32
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <MX_GPIO_Init+0x300>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0320 	and.w	r3, r3, #32
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ae:	4867      	ldr	r0, [pc, #412]	; (800164c <MX_GPIO_Init+0x304>)
 80014b0:	f003 fd80 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2104      	movs	r1, #4
 80014b8:	4865      	ldr	r0, [pc, #404]	; (8001650 <MX_GPIO_Init+0x308>)
 80014ba:	f003 fd7b 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c4:	4863      	ldr	r0, [pc, #396]	; (8001654 <MX_GPIO_Init+0x30c>)
 80014c6:	f003 fd75 	bl	8004fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014dc:	2303      	movs	r3, #3
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e4:	4619      	mov	r1, r3
 80014e6:	485c      	ldr	r0, [pc, #368]	; (8001658 <MX_GPIO_Init+0x310>)
 80014e8:	f003 fbb4 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fc:	4619      	mov	r1, r3
 80014fe:	4857      	ldr	r0, [pc, #348]	; (800165c <MX_GPIO_Init+0x314>)
 8001500:	f003 fba8 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001504:	2330      	movs	r3, #48	; 0x30
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001514:	230a      	movs	r3, #10
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151c:	4619      	mov	r1, r3
 800151e:	4850      	ldr	r0, [pc, #320]	; (8001660 <MX_GPIO_Init+0x318>)
 8001520:	f003 fb98 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8001524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001536:	4619      	mov	r1, r3
 8001538:	484a      	ldr	r0, [pc, #296]	; (8001664 <MX_GPIO_Init+0x31c>)
 800153a:	f003 fb8b 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001550:	4619      	mov	r1, r3
 8001552:	4845      	ldr	r0, [pc, #276]	; (8001668 <MX_GPIO_Init+0x320>)
 8001554:	f003 fb7e 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800156a:	2301      	movs	r3, #1
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001572:	4619      	mov	r1, r3
 8001574:	483b      	ldr	r0, [pc, #236]	; (8001664 <MX_GPIO_Init+0x31c>)
 8001576:	f003 fb6d 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001590:	4619      	mov	r1, r3
 8001592:	482e      	ldr	r0, [pc, #184]	; (800164c <MX_GPIO_Init+0x304>)
 8001594:	f003 fb5e 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001598:	2304      	movs	r3, #4
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	482f      	ldr	r0, [pc, #188]	; (800166c <MX_GPIO_Init+0x324>)
 80015ae:	f003 fb51 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80015b2:	2301      	movs	r3, #1
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c2:	4619      	mov	r1, r3
 80015c4:	482a      	ldr	r0, [pc, #168]	; (8001670 <MX_GPIO_Init+0x328>)
 80015c6:	f003 fb45 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80015ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015de:	4619      	mov	r1, r3
 80015e0:	481d      	ldr	r0, [pc, #116]	; (8001658 <MX_GPIO_Init+0x310>)
 80015e2:	f003 fb37 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015e6:	2340      	movs	r3, #64	; 0x40
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80015f6:	2309      	movs	r3, #9
 80015f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fe:	4619      	mov	r1, r3
 8001600:	4818      	ldr	r0, [pc, #96]	; (8001664 <MX_GPIO_Init+0x31c>)
 8001602:	f003 fb27 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001606:	2304      	movs	r3, #4
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161a:	4619      	mov	r1, r3
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <MX_GPIO_Init+0x308>)
 800161e:	f003 fb19 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_GPIO_Init+0x30c>)
 800163c:	f003 fb0a 	bl	8004c54 <HAL_GPIO_Init>

}
 8001640:	bf00      	nop
 8001642:	3740      	adds	r7, #64	; 0x40
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	58024400 	.word	0x58024400
 800164c:	58022000 	.word	0x58022000
 8001650:	58022400 	.word	0x58022400
 8001654:	58020400 	.word	0x58020400
 8001658:	58021c00 	.word	0x58021c00
 800165c:	58020c00 	.word	0x58020c00
 8001660:	58021000 	.word	0x58021000
 8001664:	58020000 	.word	0x58020000
 8001668:	58020800 	.word	0x58020800
 800166c:	58021800 	.word	0x58021800
 8001670:	58022800 	.word	0x58022800

08001674 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b09a      	sub	sp, #104	; 0x68
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800167a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800167e:	2234      	movs	r2, #52	; 0x34
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f009 fd56 	bl	800b134 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2234      	movs	r2, #52	; 0x34
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f009 fd50 	bl	800b134 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001694:	4b4e      	ldr	r3, [pc, #312]	; (80017d0 <MX_LTDC_Init+0x15c>)
 8001696:	4a4f      	ldr	r2, [pc, #316]	; (80017d4 <MX_LTDC_Init+0x160>)
 8001698:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800169a:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <MX_LTDC_Init+0x15c>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016a0:	4b4b      	ldr	r3, [pc, #300]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016a6:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016ac:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80016b8:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016ba:	2203      	movs	r2, #3
 80016bc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80016be:	4b44      	ldr	r3, [pc, #272]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016c0:	220e      	movs	r2, #14
 80016c2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80016c4:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016c6:	2205      	movs	r2, #5
 80016c8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016cc:	f240 228e 	movw	r2, #654	; 0x28e
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016d4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016dc:	f44f 7225 	mov.w	r2, #660	; 0x294
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016e4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80016fa:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001702:	4833      	ldr	r0, [pc, #204]	; (80017d0 <MX_LTDC_Init+0x15c>)
 8001704:	f003 fc8a 	bl	800501c <HAL_LTDC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800170e:	f000 fa67 	bl	8001be0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001722:	2300      	movs	r3, #0
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001732:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001734:	2305      	movs	r3, #5
 8001736:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001756:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	481c      	ldr	r0, [pc, #112]	; (80017d0 <MX_LTDC_Init+0x15c>)
 8001760:	f003 fd2c 	bl	80051bc <HAL_LTDC_ConfigLayer>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800176a:	f000 fa39 	bl	8001be0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800178a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001790:	2305      	movs	r3, #5
 8001792:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80017b2:	463b      	mov	r3, r7
 80017b4:	2201      	movs	r2, #1
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_LTDC_Init+0x15c>)
 80017ba:	f003 fcff 	bl	80051bc <HAL_LTDC_ConfigLayer>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80017c4:	f000 fa0c 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3768      	adds	r7, #104	; 0x68
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	240004d8 	.word	0x240004d8
 80017d4:	50001000 	.word	0x50001000

080017d8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0bc      	sub	sp, #240	; 0xf0
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f0:	f107 0320 	add.w	r3, r7, #32
 80017f4:	22bc      	movs	r2, #188	; 0xbc
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f009 fc9b 	bl	800b134 <memset>
  if(ltdcHandle->Instance==LTDC)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a64      	ldr	r2, [pc, #400]	; (8001994 <HAL_LTDC_MspInit+0x1bc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	f040 80c1 	bne.w	800198c <HAL_LTDC_MspInit+0x1b4>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800180a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800180e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001810:	2320      	movs	r3, #32
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001814:	23c0      	movs	r3, #192	; 0xc0
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001818:	2302      	movs	r3, #2
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800181c:	2302      	movs	r3, #2
 800181e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001820:	2302      	movs	r3, #2
 8001822:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001824:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001828:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800182a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	4618      	mov	r0, r3
 800183a:	f005 f89d 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_LTDC_MspInit+0x70>
    {
      Error_Handler();
 8001844:	f000 f9cc 	bl	8001be0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 800184a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800184e:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001858:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 800185a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001866:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186c:	4a4a      	ldr	r2, [pc, #296]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 800186e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001876:	4b48      	ldr	r3, [pc, #288]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 8001878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001884:	4b44      	ldr	r3, [pc, #272]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188a:	4a43      	ldr	r2, [pc, #268]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001894:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 80018aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c0:	4b35      	ldr	r3, [pc, #212]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_LTDC_MspInit+0x1c0>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80018de:	23fc      	movs	r3, #252	; 0xfc
 80018e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018f6:	230e      	movs	r3, #14
 80018f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001900:	4619      	mov	r1, r3
 8001902:	4826      	ldr	r0, [pc, #152]	; (800199c <HAL_LTDC_MspInit+0x1c4>)
 8001904:	f003 f9a6 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001908:	f24d 2303 	movw	r3, #53763	; 0xd203
 800190c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001922:	230e      	movs	r3, #14
 8001924:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001928:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800192c:	4619      	mov	r1, r3
 800192e:	481c      	ldr	r0, [pc, #112]	; (80019a0 <HAL_LTDC_MspInit+0x1c8>)
 8001930:	f003 f990 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001934:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001938:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800194e:	230e      	movs	r3, #14
 8001950:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001954:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001958:	4619      	mov	r1, r3
 800195a:	4812      	ldr	r0, [pc, #72]	; (80019a4 <HAL_LTDC_MspInit+0x1cc>)
 800195c:	f003 f97a 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	2302      	movs	r3, #2
 800196a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800197a:	230e      	movs	r3, #14
 800197c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001980:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001984:	4619      	mov	r1, r3
 8001986:	4808      	ldr	r0, [pc, #32]	; (80019a8 <HAL_LTDC_MspInit+0x1d0>)
 8001988:	f003 f964 	bl	8004c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800198c:	bf00      	nop
 800198e:	37f0      	adds	r7, #240	; 0xf0
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	50001000 	.word	0x50001000
 8001998:	58024400 	.word	0x58024400
 800199c:	58022800 	.word	0x58022800
 80019a0:	58022000 	.word	0x58022000
 80019a4:	58022400 	.word	0x58022400
 80019a8:	58021c00 	.word	0x58021c00

080019ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b0:	f000 ff6c 	bl	800288c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b4:	f000 f85c 	bl	8001a70 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019b8:	f000 f8e6 	bl	8001b88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019bc:	f7ff fcc4 	bl	8001348 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019c0:	f7fe fe64 	bl	800068c <MX_ADC1_Init>
  MX_ADC2_Init();
 80019c4:	f7fe feda 	bl	800077c <MX_ADC2_Init>
  MX_ADC3_Init();
 80019c8:	f7fe ff3c 	bl	8000844 <MX_ADC3_Init>
  MX_ETH_Init();
 80019cc:	f7ff f89e 	bl	8000b0c <MX_ETH_Init>
  MX_FDCAN1_Init();
 80019d0:	f7ff fa18 	bl	8000e04 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80019d4:	f7ff fa7a 	bl	8000ecc <MX_FDCAN2_Init>
  MX_FMC_Init();
 80019d8:	f7ff fba6 	bl	8001128 <MX_FMC_Init>
  MX_LTDC_Init();
 80019dc:	f7ff fe4a 	bl	8001674 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80019e0:	f000 f904 	bl	8001bec <MX_QUADSPI_Init>
  MX_RTC_Init();
 80019e4:	f000 f9f8 	bl	8001dd8 <MX_RTC_Init>
  MX_SAI2_Init();
 80019e8:	f000 fa4e 	bl	8001e88 <MX_SAI2_Init>
//  MX_SDMMC1_MMC_Init();
  MX_SPI2_Init();
 80019ec:	f000 fba8 	bl	8002140 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80019f0:	f000 fdc4 	bl	800257c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019f4:	f000 fe74 	bl	80026e0 <MX_USB_OTG_FS_PCD_Init>

  // USB_OTG_FS_PCD, USART3, SDMMC1, RTC, LTDC, FMC don't work from RAM !!!!
  // SDMMC1 doesn't work from FLASH !!!!


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13,1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019fe:	4816      	ldr	r0, [pc, #88]	; (8001a58 <main+0xac>)
 8001a00:	f003 fad8 	bl	8004fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2,0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2104      	movs	r1, #4
 8001a08:	4814      	ldr	r0, [pc, #80]	; (8001a5c <main+0xb0>)
 8001a0a:	f003 fad3 	bl	8004fb4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8001a0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a12:	4811      	ldr	r0, [pc, #68]	; (8001a58 <main+0xac>)
 8001a14:	f003 fae7 	bl	8004fe6 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_2);
 8001a18:	2104      	movs	r1, #4
 8001a1a:	4810      	ldr	r0, [pc, #64]	; (8001a5c <main+0xb0>)
 8001a1c:	f003 fae3 	bl	8004fe6 <HAL_GPIO_TogglePin>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    snprintf (SendBuffer,BUFSIZE,"USART3:%d secs\r\n",Cnt);
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <main+0xb4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <main+0xb8>)
 8001a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a2a:	480f      	ldr	r0, [pc, #60]	; (8001a68 <main+0xbc>)
 8001a2c:	f009 fb4e 	bl	800b0cc <sniprintf>
	    HAL_UART_Transmit(&huart3,SendBuffer,strlen(SendBuffer),1);
 8001a30:	480d      	ldr	r0, [pc, #52]	; (8001a68 <main+0xbc>)
 8001a32:	f7fe fc55 	bl	80002e0 <strlen>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	490a      	ldr	r1, [pc, #40]	; (8001a68 <main+0xbc>)
 8001a3e:	480b      	ldr	r0, [pc, #44]	; (8001a6c <main+0xc0>)
 8001a40:	f007 febd 	bl	80097be <HAL_UART_Transmit>

	    HAL_Delay(1000);
 8001a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a48:	f000 ffb2 	bl	80029b0 <HAL_Delay>
	    Cnt++;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <main+0xb4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <main+0xb4>)
 8001a54:	6013      	str	r3, [r2, #0]
  {
 8001a56:	e7da      	b.n	8001a0e <main+0x62>
 8001a58:	58022000 	.word	0x58022000
 8001a5c:	58022400 	.word	0x58022400
 8001a60:	24000580 	.word	0x24000580
 8001a64:	0800ba54 	.word	0x0800ba54
 8001a68:	24000584 	.word	0x24000584
 8001a6c:	240008b4 	.word	0x240008b4

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b09c      	sub	sp, #112	; 0x70
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	224c      	movs	r2, #76	; 0x4c
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f009 fb58 	bl	800b134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2220      	movs	r2, #32
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f009 fb52 	bl	800b134 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f003 feb3 	bl	80057fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4b38      	ldr	r3, [pc, #224]	; (8001b7c <SystemClock_Config+0x10c>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	4a37      	ldr	r2, [pc, #220]	; (8001b7c <SystemClock_Config+0x10c>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001aa6:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <SystemClock_Config+0x10c>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <SystemClock_Config+0x110>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ab8:	4a31      	ldr	r2, [pc, #196]	; (8001b80 <SystemClock_Config+0x110>)
 8001aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <SystemClock_Config+0x110>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001acc:	bf00      	nop
 8001ace:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <SystemClock_Config+0x110>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ada:	d1f8      	bne.n	8001ace <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <SystemClock_Config+0x114>)
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	f023 0303 	bic.w	r3, r3, #3
 8001ae4:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <SystemClock_Config+0x114>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001aec:	230b      	movs	r3, #11
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001af0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001afa:	2340      	movs	r3, #64	; 0x40
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001afe:	2301      	movs	r3, #1
 8001b00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b02:	2302      	movs	r3, #2
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b06:	2302      	movs	r3, #2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8001b0a:	2316      	movs	r3, #22
 8001b0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8001b0e:	23a9      	movs	r3, #169	; 0xa9
 8001b10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b12:	2302      	movs	r3, #2
 8001b14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b16:	2304      	movs	r3, #4
 8001b18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 ff68 	bl	8005a04 <HAL_RCC_OscConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001b3a:	f000 f851 	bl	8001be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3e:	233f      	movs	r3, #63	; 0x3f
 8001b40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2101      	movs	r1, #1
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 fb7c 	bl	8006260 <HAL_RCC_ClockConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8001b6e:	f000 f837 	bl	8001be0 <Error_Handler>
  }
}
 8001b72:	bf00      	nop
 8001b74:	3770      	adds	r7, #112	; 0x70
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	58000400 	.word	0x58000400
 8001b80:	58024800 	.word	0x58024800
 8001b84:	58024400 	.word	0x58024400

08001b88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0b0      	sub	sp, #192	; 0xc0
 8001b8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	22bc      	movs	r2, #188	; 0xbc
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f009 facd 	bl	800b134 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b9e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001ba8:	2305      	movs	r3, #5
 8001baa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001bac:	2302      	movs	r3, #2
 8001bae:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bb4:	23c0      	movs	r3, #192	; 0xc0
 8001bb6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 fed5 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8001bd4:	f000 f804 	bl	8001be0 <Error_Handler>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	37c0      	adds	r7, #192	; 0xc0
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
}
 8001be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <Error_Handler+0x8>
	...

08001bec <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001bf2:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <MX_QUADSPI_Init+0x54>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001bf8:	22ff      	movs	r2, #255	; 0xff
 8001bfa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_QUADSPI_Init+0x50>)
 8001c28:	f003 fe32 	bl	8005890 <HAL_QSPI_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001c32:	f7ff ffd5 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	24000684 	.word	0x24000684
 8001c40:	52005000 	.word	0x52005000

08001c44 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ba      	sub	sp, #232	; 0xe8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5c:	f107 0318 	add.w	r3, r7, #24
 8001c60:	22bc      	movs	r2, #188	; 0xbc
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 fa65 	bl	800b134 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a55      	ldr	r2, [pc, #340]	; (8001dc4 <HAL_QSPI_MspInit+0x180>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f040 80a2 	bne.w	8001dba <HAL_QSPI_MspInit+0x176>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f004 fe77 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8001c90:	f7ff ffa6 	bl	8001be0 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c94:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001c96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c9a:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001ca4:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001ca6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b45      	ldr	r3, [pc, #276]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	4a43      	ldr	r2, [pc, #268]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	4a3c      	ldr	r2, [pc, #240]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001cd8:	f043 0320 	orr.w	r3, r3, #32
 8001cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce0:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cee:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	4a34      	ldr	r2, [pc, #208]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfe:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_QSPI_MspInit+0x184>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d0c:	2340      	movs	r3, #64	; 0x40
 8001d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d24:	230a      	movs	r3, #10
 8001d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4826      	ldr	r0, [pc, #152]	; (8001dcc <HAL_QSPI_MspInit+0x188>)
 8001d32:	f002 ff8f 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001d36:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d50:	2309      	movs	r3, #9
 8001d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481c      	ldr	r0, [pc, #112]	; (8001dd0 <HAL_QSPI_MspInit+0x18c>)
 8001d5e:	f002 ff79 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d82:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <HAL_QSPI_MspInit+0x18c>)
 8001d8a:	f002 ff63 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001da8:	2309      	movs	r3, #9
 8001daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001db2:	4619      	mov	r1, r3
 8001db4:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <HAL_QSPI_MspInit+0x190>)
 8001db6:	f002 ff4d 	bl	8004c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001dba:	bf00      	nop
 8001dbc:	37e8      	adds	r7, #232	; 0xe8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	52005000 	.word	0x52005000
 8001dc8:	58024400 	.word	0x58024400
 8001dcc:	58020400 	.word	0x58020400
 8001dd0:	58021400 	.word	0x58021400
 8001dd4:	58020c00 	.word	0x58020c00

08001dd8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_RTC_Init+0x48>)
 8001dde:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <MX_RTC_Init+0x4c>)
 8001de0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_RTC_Init+0x48>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <MX_RTC_Init+0x48>)
 8001dea:	227f      	movs	r2, #127	; 0x7f
 8001dec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_RTC_Init+0x48>)
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <MX_RTC_Init+0x48>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_RTC_Init+0x48>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <MX_RTC_Init+0x48>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_RTC_Init+0x48>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <MX_RTC_Init+0x48>)
 8001e0e:	f006 ff3f 	bl	8008c90 <HAL_RTC_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001e18:	f7ff fee2 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	240006d0 	.word	0x240006d0
 8001e24:	58004000 	.word	0x58004000

08001e28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0b2      	sub	sp, #200	; 0xc8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	22bc      	movs	r2, #188	; 0xbc
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f009 f97b 	bl	800b134 <memset>
  if(rtcHandle->Instance==RTC)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_RTC_MspInit+0x58>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d116      	bne.n	8001e76 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 fd8c 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001e66:	f7ff febb 	bl	8001be0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RTC_MspInit+0x5c>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <HAL_RTC_MspInit+0x5c>)
 8001e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e74:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	37c8      	adds	r7, #200	; 0xc8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	58004000 	.word	0x58004000
 8001e84:	58024400 	.word	0x58024400

08001e88 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001e8e:	4a59      	ldr	r2, [pc, #356]	; (8001ff4 <MX_SAI2_Init+0x16c>)
 8001e90:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e92:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e98:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001e9e:	4b54      	ldr	r3, [pc, #336]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ea4:	4b52      	ldr	r3, [pc, #328]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001eaa:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001eb6:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001ec2:	4b4b      	ldr	r3, [pc, #300]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001ec8:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001eca:	4a4b      	ldr	r2, [pc, #300]	; (8001ff8 <MX_SAI2_Init+0x170>)
 8001ecc:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ece:	4b48      	ldr	r3, [pc, #288]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ed4:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001eda:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ee0:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001ee6:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001eee:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001ef4:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001efc:	4b3c      	ldr	r3, [pc, #240]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001efe:	2208      	movs	r2, #8
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001f02:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001f08:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f0e:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001f14:	4b36      	ldr	r3, [pc, #216]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001f1a:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f20:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001f26:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001f2c:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001f32:	482f      	ldr	r0, [pc, #188]	; (8001ff0 <MX_SAI2_Init+0x168>)
 8001f34:	f006 ffbc 	bl	8008eb0 <HAL_SAI_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8001f3e:	f7ff fe4f 	bl	8001be0 <Error_Handler>
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001f42:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f44:	4a2e      	ldr	r2, [pc, #184]	; (8002000 <MX_SAI2_Init+0x178>)
 8001f46:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f48:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001f4e:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f50:	2203      	movs	r2, #3
 8001f52:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001f60:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f6c:	4b23      	ldr	r3, [pc, #140]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fa8:	2208      	movs	r2, #8
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001fdc:	4807      	ldr	r0, [pc, #28]	; (8001ffc <MX_SAI2_Init+0x174>)
 8001fde:	f006 ff67 	bl	8008eb0 <HAL_SAI_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001fe8:	f7ff fdfa 	bl	8001be0 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	240006f4 	.word	0x240006f4
 8001ff4:	40015c04 	.word	0x40015c04
 8001ff8:	0002ee00 	.word	0x0002ee00
 8001ffc:	2400078c 	.word	0x2400078c
 8002000:	40015c24 	.word	0x40015c24

08002004 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b0b8      	sub	sp, #224	; 0xe0
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	22bc      	movs	r2, #188	; 0xbc
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f009 f88d 	bl	800b134 <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a42      	ldr	r2, [pc, #264]	; (8002128 <HAL_SAI_MspInit+0x124>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d13b      	bne.n	800209c <HAL_SAI_MspInit+0x98>
    {
    /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002028:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800202a:	2300      	movs	r3, #0
 800202c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fca0 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 800203e:	f7ff fdcf 	bl	8001be0 <Error_Handler>
    }

    if (SAI2_client == 0)
 8002042:	4b3a      	ldr	r3, [pc, #232]	; (800212c <HAL_SAI_MspInit+0x128>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10e      	bne.n	8002068 <HAL_SAI_MspInit+0x64>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_SAI_MspInit+0x12c>)
 800204c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002050:	4a37      	ldr	r2, [pc, #220]	; (8002130 <HAL_SAI_MspInit+0x12c>)
 8002052:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002056:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800205a:	4b35      	ldr	r3, [pc, #212]	; (8002130 <HAL_SAI_MspInit+0x12c>)
 800205c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_SAI_MspInit+0x128>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	4a2f      	ldr	r2, [pc, #188]	; (800212c <HAL_SAI_MspInit+0x128>)
 8002070:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8002072:	23f0      	movs	r3, #240	; 0xf0
 8002074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800208a:	230a      	movs	r3, #10
 800208c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002090:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002094:	4619      	mov	r1, r3
 8002096:	4827      	ldr	r0, [pc, #156]	; (8002134 <HAL_SAI_MspInit+0x130>)
 8002098:	f002 fddc 	bl	8004c54 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a25      	ldr	r2, [pc, #148]	; (8002138 <HAL_SAI_MspInit+0x134>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d13c      	bne.n	8002120 <HAL_SAI_MspInit+0x11c>
    {
      /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80020a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 fc5f 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_SAI_MspInit+0xc0>
    {
      Error_Handler();
 80020c0:	f7ff fd8e 	bl	8001be0 <Error_Handler>
    }

      if (SAI2_client == 0)
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_SAI_MspInit+0x128>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10e      	bne.n	80020ea <HAL_SAI_MspInit+0xe6>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_SAI_MspInit+0x12c>)
 80020ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_SAI_MspInit+0x12c>)
 80020d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_SAI_MspInit+0x12c>)
 80020de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_SAI_MspInit+0x128>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_SAI_MspInit+0x128>)
 80020f2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800210e:	230a      	movs	r3, #10
 8002110:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002114:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002118:	4619      	mov	r1, r3
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <HAL_SAI_MspInit+0x138>)
 800211c:	f002 fd9a 	bl	8004c54 <HAL_GPIO_Init>

    }
}
 8002120:	bf00      	nop
 8002122:	37e0      	adds	r7, #224	; 0xe0
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40015c04 	.word	0x40015c04
 800212c:	24000824 	.word	0x24000824
 8002130:	58024400 	.word	0x58024400
 8002134:	58022000 	.word	0x58022000
 8002138:	40015c24 	.word	0x40015c24
 800213c:	58021800 	.word	0x58021800

08002140 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002144:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <MX_SPI2_Init+0xa0>)
 8002146:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <MX_SPI2_Init+0xa4>)
 8002148:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800214a:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <MX_SPI2_Init+0xa0>)
 800214c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002150:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <MX_SPI2_Init+0xa0>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <MX_SPI2_Init+0xa0>)
 800215a:	2203      	movs	r2, #3
 800215c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <MX_SPI2_Init+0xa0>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002164:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <MX_SPI2_Init+0xa0>)
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <MX_SPI2_Init+0xa0>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <MX_SPI2_Init+0xa0>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_SPI2_Init+0xa0>)
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_SPI2_Init+0xa0>)
 800217e:	2200      	movs	r2, #0
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_SPI2_Init+0xa0>)
 8002184:	2200      	movs	r2, #0
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <MX_SPI2_Init+0xa0>)
 800218a:	2200      	movs	r2, #0
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_SPI2_Init+0xa0>)
 8002190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <MX_SPI2_Init+0xa0>)
 8002198:	2200      	movs	r2, #0
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <MX_SPI2_Init+0xa0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_SPI2_Init+0xa0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <MX_SPI2_Init+0xa0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_SPI2_Init+0xa0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <MX_SPI2_Init+0xa0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_SPI2_Init+0xa0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <MX_SPI2_Init+0xa0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_SPI2_Init+0xa0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <MX_SPI2_Init+0xa0>)
 80021ce:	f007 f985 	bl	80094dc <HAL_SPI_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 80021d8:	f7ff fd02 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	24000828 	.word	0x24000828
 80021e4:	40003800 	.word	0x40003800

080021e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0ba      	sub	sp, #232	; 0xe8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002200:	f107 0318 	add.w	r3, r7, #24
 8002204:	22bc      	movs	r2, #188	; 0xbc
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f008 ff93 	bl	800b134 <memset>
  if(spiHandle->Instance==SPI2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a54      	ldr	r2, [pc, #336]	; (8002364 <HAL_SPI_MspInit+0x17c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	f040 80a0 	bne.w	800235a <HAL_SPI_MspInit+0x172>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800221a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002220:	2300      	movs	r3, #0
 8002222:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002224:	f107 0318 	add.w	r3, r7, #24
 8002228:	4618      	mov	r0, r3
 800222a:	f004 fba5 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8002234:	f7ff fcd4 	bl	8001be0 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002238:	4b4b      	ldr	r3, [pc, #300]	; (8002368 <HAL_SPI_MspInit+0x180>)
 800223a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800223e:	4a4a      	ldr	r2, [pc, #296]	; (8002368 <HAL_SPI_MspInit+0x180>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002248:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_SPI_MspInit+0x180>)
 800224a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_SPI_MspInit+0x180>)
 8002258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <HAL_SPI_MspInit+0x180>)
 800225e:	f043 0302 	orr.w	r3, r3, #2
 8002262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002266:	4b40      	ldr	r3, [pc, #256]	; (8002368 <HAL_SPI_MspInit+0x180>)
 8002268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002274:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <HAL_SPI_MspInit+0x180>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <HAL_SPI_MspInit+0x180>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002284:	4b38      	ldr	r3, [pc, #224]	; (8002368 <HAL_SPI_MspInit+0x180>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002292:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_SPI_MspInit+0x180>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002298:	4a33      	ldr	r2, [pc, #204]	; (8002368 <HAL_SPI_MspInit+0x180>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_SPI_MspInit+0x180>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022b0:	2310      	movs	r3, #16
 80022b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80022c8:	2307      	movs	r3, #7
 80022ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4825      	ldr	r0, [pc, #148]	; (800236c <HAL_SPI_MspInit+0x184>)
 80022d6:	f002 fcbd 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022da:	2308      	movs	r3, #8
 80022dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022f2:	2305      	movs	r3, #5
 80022f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022fc:	4619      	mov	r1, r3
 80022fe:	481c      	ldr	r0, [pc, #112]	; (8002370 <HAL_SPI_MspInit+0x188>)
 8002300:	f002 fca8 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002304:	2304      	movs	r3, #4
 8002306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800231c:	2305      	movs	r3, #5
 800231e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002322:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002326:	4619      	mov	r1, r3
 8002328:	4812      	ldr	r0, [pc, #72]	; (8002374 <HAL_SPI_MspInit+0x18c>)
 800232a:	f002 fc93 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800232e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002348:	2305      	movs	r3, #5
 800234a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <HAL_SPI_MspInit+0x184>)
 8002356:	f002 fc7d 	bl	8004c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800235a:	bf00      	nop
 800235c:	37e8      	adds	r7, #232	; 0xe8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40003800 	.word	0x40003800
 8002368:	58024400 	.word	0x58024400
 800236c:	58020400 	.word	0x58020400
 8002370:	58020c00 	.word	0x58020c00
 8002374:	58022000 	.word	0x58022000

08002378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_MspInit+0x30>)
 8002380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002384:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_MspInit+0x30>)
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_MspInit+0x30>)
 8002390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	58024400 	.word	0x58024400

080023ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <NMI_Handler+0x4>

080023b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b6:	e7fe      	b.n	80023b6 <HardFault_Handler+0x4>

080023b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <MemManage_Handler+0x4>

080023be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <BusFault_Handler+0x4>

080023c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <UsageFault_Handler+0x4>

080023ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f8:	f000 faba 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f008 fe88 	bl	800b144 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24080000 	.word	0x24080000
 8002460:	00000400 	.word	0x00000400
 8002464:	240008b0 	.word	0x240008b0
 8002468:	24000fa0 	.word	0x24000fa0

0800246c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002470:	4b37      	ldr	r3, [pc, #220]	; (8002550 <SystemInit+0xe4>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a36      	ldr	r2, [pc, #216]	; (8002550 <SystemInit+0xe4>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002480:	4b34      	ldr	r3, [pc, #208]	; (8002554 <SystemInit+0xe8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	2b06      	cmp	r3, #6
 800248a:	d807      	bhi.n	800249c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800248c:	4b31      	ldr	r3, [pc, #196]	; (8002554 <SystemInit+0xe8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 030f 	bic.w	r3, r3, #15
 8002494:	4a2f      	ldr	r2, [pc, #188]	; (8002554 <SystemInit+0xe8>)
 8002496:	f043 0307 	orr.w	r3, r3, #7
 800249a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800249c:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <SystemInit+0xec>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <SystemInit+0xec>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <SystemInit+0xec>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024ae:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <SystemInit+0xec>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	4929      	ldr	r1, [pc, #164]	; (8002558 <SystemInit+0xec>)
 80024b4:	4b29      	ldr	r3, [pc, #164]	; (800255c <SystemInit+0xf0>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <SystemInit+0xe8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024c6:	4b23      	ldr	r3, [pc, #140]	; (8002554 <SystemInit+0xe8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 030f 	bic.w	r3, r3, #15
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <SystemInit+0xe8>)
 80024d0:	f043 0307 	orr.w	r3, r3, #7
 80024d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <SystemInit+0xec>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <SystemInit+0xec>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <SystemInit+0xec>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <SystemInit+0xec>)
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <SystemInit+0xf4>)
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <SystemInit+0xec>)
 80024f0:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <SystemInit+0xf8>)
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <SystemInit+0xec>)
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <SystemInit+0xfc>)
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <SystemInit+0xec>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <SystemInit+0xec>)
 8002502:	4a19      	ldr	r2, [pc, #100]	; (8002568 <SystemInit+0xfc>)
 8002504:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <SystemInit+0xec>)
 8002508:	2200      	movs	r2, #0
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <SystemInit+0xec>)
 800250e:	4a16      	ldr	r2, [pc, #88]	; (8002568 <SystemInit+0xfc>)
 8002510:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <SystemInit+0xec>)
 8002514:	2200      	movs	r2, #0
 8002516:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <SystemInit+0xec>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <SystemInit+0xec>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <SystemInit+0xec>)
 8002526:	2200      	movs	r2, #0
 8002528:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <SystemInit+0x100>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <SystemInit+0x104>)
 8002530:	4013      	ands	r3, r2
 8002532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002536:	d202      	bcs.n	800253e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <SystemInit+0x108>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <SystemInit+0x10c>)
 8002540:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002544:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00
 8002554:	52002000 	.word	0x52002000
 8002558:	58024400 	.word	0x58024400
 800255c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002560:	02020200 	.word	0x02020200
 8002564:	01ff0000 	.word	0x01ff0000
 8002568:	01010280 	.word	0x01010280
 800256c:	5c001000 	.word	0x5c001000
 8002570:	ffff0000 	.word	0xffff0000
 8002574:	51008108 	.word	0x51008108
 8002578:	52004000 	.word	0x52004000

0800257c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <MX_USART3_UART_Init+0x90>)
 8002582:	4a23      	ldr	r2, [pc, #140]	; (8002610 <MX_USART3_UART_Init+0x94>)
 8002584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <MX_USART3_UART_Init+0x90>)
 8002588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800258c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <MX_USART3_UART_Init+0x90>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002594:	4b1d      	ldr	r3, [pc, #116]	; (800260c <MX_USART3_UART_Init+0x90>)
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <MX_USART3_UART_Init+0x90>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025a2:	220c      	movs	r2, #12
 80025a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025c4:	4811      	ldr	r0, [pc, #68]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025c6:	f007 f8aa 	bl	800971e <HAL_UART_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80025d0:	f7ff fb06 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d4:	2100      	movs	r1, #0
 80025d6:	480d      	ldr	r0, [pc, #52]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025d8:	f008 f8de 	bl	800a798 <HAL_UARTEx_SetTxFifoThreshold>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80025e2:	f7ff fafd 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e6:	2100      	movs	r1, #0
 80025e8:	4808      	ldr	r0, [pc, #32]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025ea:	f008 f913 	bl	800a814 <HAL_UARTEx_SetRxFifoThreshold>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80025f4:	f7ff faf4 	bl	8001be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80025f8:	4804      	ldr	r0, [pc, #16]	; (800260c <MX_USART3_UART_Init+0x90>)
 80025fa:	f008 f894 	bl	800a726 <HAL_UARTEx_DisableFifoMode>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002604:	f7ff faec 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	240008b4 	.word	0x240008b4
 8002610:	40004800 	.word	0x40004800

08002614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b0b8      	sub	sp, #224	; 0xe0
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	22bc      	movs	r2, #188	; 0xbc
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f008 fd7d 	bl	800b134 <memset>
  if(uartHandle->Instance==USART3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <HAL_UART_MspInit+0xc0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d142      	bne.n	80026ca <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002644:	2302      	movs	r3, #2
 8002646:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800264e:	f107 0310 	add.w	r3, r7, #16
 8002652:	4618      	mov	r0, r3
 8002654:	f004 f990 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800265e:	f7ff fabf 	bl	8001be0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_UART_MspInit+0xc4>)
 8002664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <HAL_UART_MspInit+0xc4>)
 800266a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_UART_MspInit+0xc4>)
 8002674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_UART_MspInit+0xc4>)
 8002682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_UART_MspInit+0xc4>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_UART_MspInit+0xc4>)
 8002692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800269e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026b8:	2307      	movs	r3, #7
 80026ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <HAL_UART_MspInit+0xc8>)
 80026c6:	f002 fac5 	bl	8004c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026ca:	bf00      	nop
 80026cc:	37e0      	adds	r7, #224	; 0xe0
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40004800 	.word	0x40004800
 80026d8:	58024400 	.word	0x58024400
 80026dc:	58020400 	.word	0x58020400

080026e0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026e6:	4a16      	ldr	r2, [pc, #88]	; (8002740 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80026e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026ec:	2209      	movs	r2, #9
 80026ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026f2:	2202      	movs	r2, #2
 80026f4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026fe:	2202      	movs	r2, #2
 8002700:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002704:	2200      	movs	r2, #0
 8002706:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800270a:	2200      	movs	r2, #0
 800270c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002710:	2200      	movs	r2, #0
 8002712:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002716:	2201      	movs	r2, #1
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800271c:	2201      	movs	r2, #1
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002722:	2200      	movs	r2, #0
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002728:	f002 ff20 	bl	800556c <HAL_PCD_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002732:	f7ff fa55 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	24000944 	.word	0x24000944
 8002740:	40080000 	.word	0x40080000

08002744 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b0b8      	sub	sp, #224	; 0xe0
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	22bc      	movs	r2, #188	; 0xbc
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f008 fce5 	bl	800b134 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2f      	ldr	r2, [pc, #188]	; (800282c <HAL_PCD_MspInit+0xe8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d156      	bne.n	8002822 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002774:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002778:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800277a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800277e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002782:	f107 0310 	add.w	r3, r7, #16
 8002786:	4618      	mov	r0, r3
 8002788:	f004 f8f6 	bl	8006978 <HAL_RCCEx_PeriphCLKConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8002792:	f7ff fa25 	bl	8001be0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002796:	f003 f86b 	bl	8005870 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	4b25      	ldr	r3, [pc, #148]	; (8002830 <HAL_PCD_MspInit+0xec>)
 800279c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a0:	4a23      	ldr	r2, [pc, #140]	; (8002830 <HAL_PCD_MspInit+0xec>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_PCD_MspInit+0xec>)
 80027ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 80027b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 80027cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027d0:	4619      	mov	r1, r3
 80027d2:	4818      	ldr	r0, [pc, #96]	; (8002834 <HAL_PCD_MspInit+0xf0>)
 80027d4:	f002 fa3e 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 80027d8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80027f2:	230a      	movs	r3, #10
 80027f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027fc:	4619      	mov	r1, r3
 80027fe:	480d      	ldr	r0, [pc, #52]	; (8002834 <HAL_PCD_MspInit+0xf0>)
 8002800:	f002 fa28 	bl	8004c54 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_PCD_MspInit+0xec>)
 8002806:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <HAL_PCD_MspInit+0xec>)
 800280c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002810:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_PCD_MspInit+0xec>)
 8002816:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800281a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002822:	bf00      	nop
 8002824:	37e0      	adds	r7, #224	; 0xe0
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40080000 	.word	0x40080000
 8002830:	58024400 	.word	0x58024400
 8002834:	58020000 	.word	0x58020000

08002838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002870 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800283c:	f7ff fe16 	bl	800246c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002840:	480c      	ldr	r0, [pc, #48]	; (8002874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002842:	490d      	ldr	r1, [pc, #52]	; (8002878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002848:	e002      	b.n	8002850 <LoopCopyDataInit>

0800284a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800284c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284e:	3304      	adds	r3, #4

08002850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002854:	d3f9      	bcc.n	800284a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002858:	4c0a      	ldr	r4, [pc, #40]	; (8002884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800285c:	e001      	b.n	8002862 <LoopFillZerobss>

0800285e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002860:	3204      	adds	r2, #4

08002862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002864:	d3fb      	bcc.n	800285e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002866:	f008 fc73 	bl	800b150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800286a:	f7ff f89f 	bl	80019ac <main>
  bx  lr
 800286e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002870:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002874:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002878:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800287c:	0800bb30 	.word	0x0800bb30
  ldr r2, =_sbss
 8002880:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8002884:	24000f9c 	.word	0x24000f9c

08002888 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002888:	e7fe      	b.n	8002888 <ADC3_IRQHandler>
	...

0800288c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002892:	2003      	movs	r0, #3
 8002894:	f001 fa24 	bl	8003ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002898:	f003 fe98 	bl	80065cc <HAL_RCC_GetSysClockFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_Init+0x68>)
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	4913      	ldr	r1, [pc, #76]	; (80028f8 <HAL_Init+0x6c>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028b6:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <HAL_Init+0x68>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <HAL_Init+0x6c>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <HAL_Init+0x70>)
 80028ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028d0:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <HAL_Init+0x74>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d6:	2000      	movs	r0, #0
 80028d8:	f000 f814 	bl	8002904 <HAL_InitTick>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e002      	b.n	80028ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028e6:	f7ff fd47 	bl	8002378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	58024400 	.word	0x58024400
 80028f8:	0800bab4 	.word	0x0800bab4
 80028fc:	24000004 	.word	0x24000004
 8002900:	24000000 	.word	0x24000000

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_InitTick+0x60>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e021      	b.n	800295c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_InitTick+0x64>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_InitTick+0x60>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002926:	fbb3 f3f1 	udiv	r3, r3, r1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f001 f9fb 	bl	8003d2a <HAL_SYSTICK_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00e      	b.n	800295c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d80a      	bhi.n	800295a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002944:	2200      	movs	r2, #0
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f001 f9d3 	bl	8003cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <HAL_InitTick+0x68>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2400000c 	.word	0x2400000c
 8002968:	24000000 	.word	0x24000000
 800296c:	24000008 	.word	0x24000008

08002970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	2400000c 	.word	0x2400000c
 8002994:	24000e50 	.word	0x24000e50

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	24000e50 	.word	0x24000e50

080029b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff ffee 	bl	8002998 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d005      	beq.n	80029d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_Delay+0x44>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029d6:	bf00      	nop
 80029d8:	f7ff ffde 	bl	8002998 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f7      	bhi.n	80029d8 <HAL_Delay+0x28>
  {
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2400000c 	.word	0x2400000c

080029f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_GetREVID+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	0c1b      	lsrs	r3, r3, #16
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	5c001000 	.word	0x5c001000

08002a10 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a20:	4904      	ldr	r1, [pc, #16]	; (8002a34 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	58000400 	.word	0x58000400

08002a38 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	4904      	ldr	r1, [pc, #16]	; (8002a60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	58000400 	.word	0x58000400

08002a64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3360      	adds	r3, #96	; 0x60
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	611a      	str	r2, [r3, #16]
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3360      	adds	r3, #96	; 0x60
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	601a      	str	r2, [r3, #0]
  }
}
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3330      	adds	r3, #48	; 0x30
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f003 030c 	and.w	r3, r3, #12
 8002b90:	4413      	add	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	211f      	movs	r1, #31
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	f003 011f 	and.w	r1, r3, #31
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3314      	adds	r3, #20
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	0e5b      	lsrs	r3, r3, #25
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	4413      	add	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	0d1b      	lsrs	r3, r3, #20
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2107      	movs	r1, #7
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	401a      	ands	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0d1b      	lsrs	r3, r3, #20
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	431a      	orrs	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0318 	and.w	r3, r3, #24
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c48:	40d9      	lsrs	r1, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	400b      	ands	r3, r1
 8002c4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	000fffff 	.word	0x000fffff

08002c6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6093      	str	r3, [r2, #8]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	5fffffc0 	.word	0x5fffffc0

08002c90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca4:	d101      	bne.n	8002caa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <LL_ADC_EnableInternalRegulator+0x24>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	6fffffc0 	.word	0x6fffffc0

08002ce0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf4:	d101      	bne.n	8002cfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <LL_ADC_IsEnabled+0x18>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <LL_ADC_IsEnabled+0x1a>
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d101      	bne.n	8002d46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d101      	bne.n	8002d6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e18f      	b.n	80030b6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fd fdaf 	bl	8000908 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff67 	bl	8002c90 <LL_ADC_IsDeepPowerDownEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff4d 	bl	8002c6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ff82 	bl	8002ce0 <LL_ADC_IsInternalRegulatorEnabled>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d114      	bne.n	8002e0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff66 	bl	8002cb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dec:	4b87      	ldr	r3, [pc, #540]	; (800300c <HAL_ADC_Init+0x290>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	4a87      	ldr	r2, [pc, #540]	; (8003010 <HAL_ADC_Init+0x294>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dfe:	e002      	b.n	8002e06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f9      	bne.n	8002e00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff65 	bl	8002ce0 <LL_ADC_IsInternalRegulatorEnabled>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10d      	bne.n	8002e38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	f043 0210 	orr.w	r2, r3, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff76 	bl	8002d2e <LL_ADC_REG_IsConversionOngoing>
 8002e42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f040 8129 	bne.w	80030a4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8125 	bne.w	80030a4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e62:	f043 0202 	orr.w	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff4a 	bl	8002d08 <LL_ADC_IsEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d136      	bne.n	8002ee8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a65      	ldr	r2, [pc, #404]	; (8003014 <HAL_ADC_Init+0x298>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_ADC_Init+0x112>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a63      	ldr	r2, [pc, #396]	; (8003018 <HAL_ADC_Init+0x29c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10e      	bne.n	8002eac <HAL_ADC_Init+0x130>
 8002e8e:	4861      	ldr	r0, [pc, #388]	; (8003014 <HAL_ADC_Init+0x298>)
 8002e90:	f7ff ff3a 	bl	8002d08 <LL_ADC_IsEnabled>
 8002e94:	4604      	mov	r4, r0
 8002e96:	4860      	ldr	r0, [pc, #384]	; (8003018 <HAL_ADC_Init+0x29c>)
 8002e98:	f7ff ff36 	bl	8002d08 <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e008      	b.n	8002ebe <HAL_ADC_Init+0x142>
 8002eac:	485b      	ldr	r0, [pc, #364]	; (800301c <HAL_ADC_Init+0x2a0>)
 8002eae:	f7ff ff2b 	bl	8002d08 <LL_ADC_IsEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a53      	ldr	r2, [pc, #332]	; (8003014 <HAL_ADC_Init+0x298>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_ADC_Init+0x15a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a51      	ldr	r2, [pc, #324]	; (8003018 <HAL_ADC_Init+0x29c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_Init+0x15e>
 8002ed6:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_ADC_Init+0x2a4>)
 8002ed8:	e000      	b.n	8002edc <HAL_ADC_Init+0x160>
 8002eda:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_ADC_Init+0x2a8>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f7ff fdbe 	bl	8002a64 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ee8:	f7ff fd86 	bl	80029f8 <HAL_GetREVID>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d914      	bls.n	8002f20 <HAL_ADC_Init+0x1a4>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d110      	bne.n	8002f20 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7d5b      	ldrb	r3, [r3, #21]
 8002f02:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f08:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f0e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7f1b      	ldrb	r3, [r3, #28]
 8002f14:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f16:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f18:	f043 030c 	orr.w	r3, r3, #12
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	e00d      	b.n	8002f3c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7d5b      	ldrb	r3, [r3, #21]
 8002f24:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f2a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f30:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7f1b      	ldrb	r3, [r3, #28]
 8002f36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7f1b      	ldrb	r3, [r3, #28]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d106      	bne.n	8002f52 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	045b      	lsls	r3, r3, #17
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <HAL_ADC_Init+0x2ac>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	69b9      	ldr	r1, [r7, #24]
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fed1 	bl	8002d2e <LL_ADC_REG_IsConversionOngoing>
 8002f8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fede 	bl	8002d54 <LL_ADC_INJ_IsConversionOngoing>
 8002f98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d15f      	bne.n	8003060 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d15c      	bne.n	8003060 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7d1b      	ldrb	r3, [r3, #20]
 8002faa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <HAL_ADC_Init+0x2b0>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	69b9      	ldr	r1, [r7, #24]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d130      	bne.n	8003034 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_ADC_Init+0x2b4>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	0411      	lsls	r1, r2, #16
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ff4:	4311      	orrs	r1, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	611a      	str	r2, [r3, #16]
 8003008:	e01c      	b.n	8003044 <HAL_ADC_Init+0x2c8>
 800300a:	bf00      	nop
 800300c:	24000000 	.word	0x24000000
 8003010:	053e2d63 	.word	0x053e2d63
 8003014:	40022000 	.word	0x40022000
 8003018:	40022100 	.word	0x40022100
 800301c:	58026000 	.word	0x58026000
 8003020:	40022300 	.word	0x40022300
 8003024:	58026300 	.word	0x58026300
 8003028:	fff0c003 	.word	0xfff0c003
 800302c:	ffffbffc 	.word	0xffffbffc
 8003030:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fb80 	bl	8003760 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10c      	bne.n	8003082 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f023 010f 	bic.w	r1, r3, #15
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	1e5a      	subs	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
 8003080:	e007      	b.n	8003092 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 020f 	bic.w	r2, r2, #15
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
 80030a2:	e007      	b.n	80030b4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f043 0210 	orr.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3724      	adds	r7, #36	; 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd90      	pop	{r4, r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b0a1      	sub	sp, #132	; 0x84
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a9d      	ldr	r2, [pc, #628]	; (8003350 <HAL_ADC_ConfigChannel+0x290>)
 80030da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x2a>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e321      	b.n	800372e <HAL_ADC_ConfigChannel+0x66e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fe19 	bl	8002d2e <LL_ADC_REG_IsConversionOngoing>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 8306 	bne.w	8003710 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800310c:	2b00      	cmp	r3, #0
 800310e:	d108      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x62>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	0e9b      	lsrs	r3, r3, #26
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2201      	movs	r2, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	e016      	b.n	8003150 <HAL_ADC_ConfigChannel+0x90>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003132:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e003      	b.n	8003146 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800313e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2201      	movs	r2, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	69d1      	ldr	r1, [r2, #28]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	430b      	orrs	r3, r1
 800315c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	f7ff fd02 	bl	8002b74 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fdda 	bl	8002d2e <LL_ADC_REG_IsConversionOngoing>
 800317a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fde7 	bl	8002d54 <LL_ADC_INJ_IsConversionOngoing>
 8003186:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 80b3 	bne.w	80032f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 80af 	bne.w	80032f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	461a      	mov	r2, r3
 80031a6:	f7ff fd11 	bl	8002bcc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031aa:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_ADC_ConfigChannel+0x294>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80031b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031b6:	d10b      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x110>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	e01d      	b.n	800320c <HAL_ADC_ConfigChannel+0x14c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x136>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	e00a      	b.n	800320c <HAL_ADC_ConfigChannel+0x14c>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b04      	cmp	r3, #4
 8003214:	d027      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6919      	ldr	r1, [r3, #16]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003224:	f7ff fc52 	bl	8002acc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6919      	ldr	r1, [r3, #16]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	7e5b      	ldrb	r3, [r3, #25]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d102      	bne.n	800323e <HAL_ADC_ConfigChannel+0x17e>
 8003238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800323c:	e000      	b.n	8003240 <HAL_ADC_ConfigChannel+0x180>
 800323e:	2300      	movs	r3, #0
 8003240:	461a      	mov	r2, r3
 8003242:	f7ff fc7c 	bl	8002b3e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6919      	ldr	r1, [r3, #16]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	7e1b      	ldrb	r3, [r3, #24]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d102      	bne.n	800325c <HAL_ADC_ConfigChannel+0x19c>
 8003256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800325a:	e000      	b.n	800325e <HAL_ADC_ConfigChannel+0x19e>
 800325c:	2300      	movs	r3, #0
 800325e:	461a      	mov	r2, r3
 8003260:	f7ff fc54 	bl	8002b0c <LL_ADC_SetDataRightShift>
 8003264:	e047      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	069b      	lsls	r3, r3, #26
 8003276:	429a      	cmp	r2, r3
 8003278:	d107      	bne.n	800328a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003288:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	069b      	lsls	r3, r3, #26
 800329a:	429a      	cmp	r2, r3
 800329c:	d107      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	069b      	lsls	r3, r3, #26
 80032be:	429a      	cmp	r2, r3
 80032c0:	d107      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	069b      	lsls	r3, r3, #26
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d107      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fd04 	bl	8002d08 <LL_ADC_IsEnabled>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 820d 	bne.w	8003722 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	6819      	ldr	r1, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	461a      	mov	r2, r3
 8003316:	f7ff fc85 	bl	8002c24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <HAL_ADC_ConfigChannel+0x290>)
 8003320:	4293      	cmp	r3, r2
 8003322:	f040 8133 	bne.w	800358c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003332:	2b00      	cmp	r3, #0
 8003334:	d110      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x298>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	3301      	adds	r3, #1
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2b09      	cmp	r3, #9
 8003344:	bf94      	ite	ls
 8003346:	2301      	movls	r3, #1
 8003348:	2300      	movhi	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e01e      	b.n	800338c <HAL_ADC_ConfigChannel+0x2cc>
 800334e:	bf00      	nop
 8003350:	47ff0000 	.word	0x47ff0000
 8003354:	5c001000 	.word	0x5c001000
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003368:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	e003      	b.n	800337c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2b09      	cmp	r3, #9
 8003384:	bf94      	ite	ls
 8003386:	2301      	movls	r3, #1
 8003388:	2300      	movhi	r3, #0
 800338a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800338c:	2b00      	cmp	r3, #0
 800338e:	d079      	beq.n	8003484 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003398:	2b00      	cmp	r3, #0
 800339a:	d107      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x2ec>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	3301      	adds	r3, #1
 80033a4:	069b      	lsls	r3, r3, #26
 80033a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033aa:	e015      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x318>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80033ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80033be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e003      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80033c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	069b      	lsls	r3, r3, #26
 80033d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x338>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	3301      	adds	r3, #1
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	e017      	b.n	8003428 <HAL_ADC_ConfigChannel+0x368>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003408:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800340a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003410:	2320      	movs	r3, #32
 8003412:	e003      	b.n	800341c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3301      	adds	r3, #1
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	ea42 0103 	orr.w	r1, r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <HAL_ADC_ConfigChannel+0x38e>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0e9b      	lsrs	r3, r3, #26
 800343e:	3301      	adds	r3, #1
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	051b      	lsls	r3, r3, #20
 800344c:	e018      	b.n	8003480 <HAL_ADC_ConfigChannel+0x3c0>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e003      	b.n	8003472 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003480:	430b      	orrs	r3, r1
 8003482:	e07e      	b.n	8003582 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x3e0>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	3301      	adds	r3, #1
 8003498:	069b      	lsls	r3, r3, #26
 800349a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349e:	e015      	b.n	80034cc <HAL_ADC_ConfigChannel+0x40c>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e003      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	069b      	lsls	r3, r3, #26
 80034c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x42c>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0e9b      	lsrs	r3, r3, #26
 80034de:	3301      	adds	r3, #1
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	e017      	b.n	800351c <HAL_ADC_ConfigChannel+0x45c>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	61bb      	str	r3, [r7, #24]
  return result;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003504:	2320      	movs	r3, #32
 8003506:	e003      	b.n	8003510 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3301      	adds	r3, #1
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	ea42 0103 	orr.w	r1, r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10d      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x488>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0e9b      	lsrs	r3, r3, #26
 8003532:	3301      	adds	r3, #1
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	3b1e      	subs	r3, #30
 8003540:	051b      	lsls	r3, r3, #20
 8003542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003546:	e01b      	b.n	8003580 <HAL_ADC_ConfigChannel+0x4c0>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	60fb      	str	r3, [r7, #12]
  return result;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e003      	b.n	800356c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f003 021f 	and.w	r2, r3, #31
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	3b1e      	subs	r3, #30
 800357a:	051b      	lsls	r3, r3, #20
 800357c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003580:	430b      	orrs	r3, r1
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	6892      	ldr	r2, [r2, #8]
 8003586:	4619      	mov	r1, r3
 8003588:	f7ff fb20 	bl	8002bcc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f280 80c6 	bge.w	8003722 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a67      	ldr	r2, [pc, #412]	; (8003738 <HAL_ADC_ConfigChannel+0x678>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d004      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x4ea>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a65      	ldr	r2, [pc, #404]	; (800373c <HAL_ADC_ConfigChannel+0x67c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x4ee>
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <HAL_ADC_ConfigChannel+0x680>)
 80035ac:	e000      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x4f0>
 80035ae:	4b65      	ldr	r3, [pc, #404]	; (8003744 <HAL_ADC_ConfigChannel+0x684>)
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fa7d 	bl	8002ab0 <LL_ADC_GetCommonPathInternalCh>
 80035b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5e      	ldr	r2, [pc, #376]	; (8003738 <HAL_ADC_ConfigChannel+0x678>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_ADC_ConfigChannel+0x50c>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5d      	ldr	r2, [pc, #372]	; (800373c <HAL_ADC_ConfigChannel+0x67c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10e      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x52a>
 80035cc:	485a      	ldr	r0, [pc, #360]	; (8003738 <HAL_ADC_ConfigChannel+0x678>)
 80035ce:	f7ff fb9b 	bl	8002d08 <LL_ADC_IsEnabled>
 80035d2:	4604      	mov	r4, r0
 80035d4:	4859      	ldr	r0, [pc, #356]	; (800373c <HAL_ADC_ConfigChannel+0x67c>)
 80035d6:	f7ff fb97 	bl	8002d08 <LL_ADC_IsEnabled>
 80035da:	4603      	mov	r3, r0
 80035dc:	4323      	orrs	r3, r4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bf0c      	ite	eq
 80035e2:	2301      	moveq	r3, #1
 80035e4:	2300      	movne	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	e008      	b.n	80035fc <HAL_ADC_ConfigChannel+0x53c>
 80035ea:	4857      	ldr	r0, [pc, #348]	; (8003748 <HAL_ADC_ConfigChannel+0x688>)
 80035ec:	f7ff fb8c 	bl	8002d08 <LL_ADC_IsEnabled>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d07d      	beq.n	80036fc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a51      	ldr	r2, [pc, #324]	; (800374c <HAL_ADC_ConfigChannel+0x68c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d130      	bne.n	800366c <HAL_ADC_ConfigChannel+0x5ac>
 800360a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d12b      	bne.n	800366c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a4b      	ldr	r2, [pc, #300]	; (8003748 <HAL_ADC_ConfigChannel+0x688>)
 800361a:	4293      	cmp	r3, r2
 800361c:	f040 8081 	bne.w	8003722 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a44      	ldr	r2, [pc, #272]	; (8003738 <HAL_ADC_ConfigChannel+0x678>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_ADC_ConfigChannel+0x574>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a43      	ldr	r2, [pc, #268]	; (800373c <HAL_ADC_ConfigChannel+0x67c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x578>
 8003634:	4a42      	ldr	r2, [pc, #264]	; (8003740 <HAL_ADC_ConfigChannel+0x680>)
 8003636:	e000      	b.n	800363a <HAL_ADC_ConfigChannel+0x57a>
 8003638:	4a42      	ldr	r2, [pc, #264]	; (8003744 <HAL_ADC_ConfigChannel+0x684>)
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7ff fa21 	bl	8002a8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_ADC_ConfigChannel+0x690>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	4a41      	ldr	r2, [pc, #260]	; (8003754 <HAL_ADC_ConfigChannel+0x694>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	099b      	lsrs	r3, r3, #6
 8003656:	3301      	adds	r3, #1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800365c:	e002      	b.n	8003664 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3b01      	subs	r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f9      	bne.n	800365e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800366a:	e05a      	b.n	8003722 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a39      	ldr	r2, [pc, #228]	; (8003758 <HAL_ADC_ConfigChannel+0x698>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d11e      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x5f4>
 8003676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d119      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a30      	ldr	r2, [pc, #192]	; (8003748 <HAL_ADC_ConfigChannel+0x688>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d14b      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2a      	ldr	r2, [pc, #168]	; (8003738 <HAL_ADC_ConfigChannel+0x678>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d004      	beq.n	800369e <HAL_ADC_ConfigChannel+0x5de>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a28      	ldr	r2, [pc, #160]	; (800373c <HAL_ADC_ConfigChannel+0x67c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x5e2>
 800369e:	4a28      	ldr	r2, [pc, #160]	; (8003740 <HAL_ADC_ConfigChannel+0x680>)
 80036a0:	e000      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x5e4>
 80036a2:	4a28      	ldr	r2, [pc, #160]	; (8003744 <HAL_ADC_ConfigChannel+0x684>)
 80036a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7ff f9ec 	bl	8002a8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036b2:	e036      	b.n	8003722 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a28      	ldr	r2, [pc, #160]	; (800375c <HAL_ADC_ConfigChannel+0x69c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d131      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x662>
 80036be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d12c      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <HAL_ADC_ConfigChannel+0x688>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d127      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a18      	ldr	r2, [pc, #96]	; (8003738 <HAL_ADC_ConfigChannel+0x678>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_ADC_ConfigChannel+0x626>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a16      	ldr	r2, [pc, #88]	; (800373c <HAL_ADC_ConfigChannel+0x67c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x62a>
 80036e6:	4a16      	ldr	r2, [pc, #88]	; (8003740 <HAL_ADC_ConfigChannel+0x680>)
 80036e8:	e000      	b.n	80036ec <HAL_ADC_ConfigChannel+0x62c>
 80036ea:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_ADC_ConfigChannel+0x684>)
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f7ff f9c8 	bl	8002a8a <LL_ADC_SetCommonPathInternalCh>
 80036fa:	e012      	b.n	8003722 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800370e:	e008      	b.n	8003722 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800372a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800372e:	4618      	mov	r0, r3
 8003730:	3784      	adds	r7, #132	; 0x84
 8003732:	46bd      	mov	sp, r7
 8003734:	bd90      	pop	{r4, r7, pc}
 8003736:	bf00      	nop
 8003738:	40022000 	.word	0x40022000
 800373c:	40022100 	.word	0x40022100
 8003740:	40022300 	.word	0x40022300
 8003744:	58026300 	.word	0x58026300
 8003748:	58026000 	.word	0x58026000
 800374c:	cb840000 	.word	0xcb840000
 8003750:	24000000 	.word	0x24000000
 8003754:	053e2d63 	.word	0x053e2d63
 8003758:	c7520000 	.word	0xc7520000
 800375c:	cfb80000 	.word	0xcfb80000

08003760 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a79      	ldr	r2, [pc, #484]	; (8003954 <ADC_ConfigureBoostMode+0x1f4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <ADC_ConfigureBoostMode+0x1c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a78      	ldr	r2, [pc, #480]	; (8003958 <ADC_ConfigureBoostMode+0x1f8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d109      	bne.n	8003790 <ADC_ConfigureBoostMode+0x30>
 800377c:	4b77      	ldr	r3, [pc, #476]	; (800395c <ADC_ConfigureBoostMode+0x1fc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e008      	b.n	80037a2 <ADC_ConfigureBoostMode+0x42>
 8003790:	4b73      	ldr	r3, [pc, #460]	; (8003960 <ADC_ConfigureBoostMode+0x200>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01c      	beq.n	80037e0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80037a6:	f003 f88b 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 80037aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037b4:	d010      	beq.n	80037d8 <ADC_ConfigureBoostMode+0x78>
 80037b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037ba:	d871      	bhi.n	80038a0 <ADC_ConfigureBoostMode+0x140>
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d002      	beq.n	80037c8 <ADC_ConfigureBoostMode+0x68>
 80037c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c6:	d16b      	bne.n	80038a0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	60fb      	str	r3, [r7, #12]
        break;
 80037d6:	e066      	b.n	80038a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	60fb      	str	r3, [r7, #12]
        break;
 80037de:	e062      	b.n	80038a6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80037e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80037e4:	f004 f80e 	bl	8007804 <HAL_RCCEx_GetPeriphCLKFreq>
 80037e8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80037f2:	d051      	beq.n	8003898 <ADC_ConfigureBoostMode+0x138>
 80037f4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80037f8:	d854      	bhi.n	80038a4 <ADC_ConfigureBoostMode+0x144>
 80037fa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80037fe:	d047      	beq.n	8003890 <ADC_ConfigureBoostMode+0x130>
 8003800:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003804:	d84e      	bhi.n	80038a4 <ADC_ConfigureBoostMode+0x144>
 8003806:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800380a:	d03d      	beq.n	8003888 <ADC_ConfigureBoostMode+0x128>
 800380c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003810:	d848      	bhi.n	80038a4 <ADC_ConfigureBoostMode+0x144>
 8003812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003816:	d033      	beq.n	8003880 <ADC_ConfigureBoostMode+0x120>
 8003818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381c:	d842      	bhi.n	80038a4 <ADC_ConfigureBoostMode+0x144>
 800381e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003822:	d029      	beq.n	8003878 <ADC_ConfigureBoostMode+0x118>
 8003824:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003828:	d83c      	bhi.n	80038a4 <ADC_ConfigureBoostMode+0x144>
 800382a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800382e:	d01a      	beq.n	8003866 <ADC_ConfigureBoostMode+0x106>
 8003830:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003834:	d836      	bhi.n	80038a4 <ADC_ConfigureBoostMode+0x144>
 8003836:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800383a:	d014      	beq.n	8003866 <ADC_ConfigureBoostMode+0x106>
 800383c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003840:	d830      	bhi.n	80038a4 <ADC_ConfigureBoostMode+0x144>
 8003842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003846:	d00e      	beq.n	8003866 <ADC_ConfigureBoostMode+0x106>
 8003848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384c:	d82a      	bhi.n	80038a4 <ADC_ConfigureBoostMode+0x144>
 800384e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003852:	d008      	beq.n	8003866 <ADC_ConfigureBoostMode+0x106>
 8003854:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003858:	d824      	bhi.n	80038a4 <ADC_ConfigureBoostMode+0x144>
 800385a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800385e:	d002      	beq.n	8003866 <ADC_ConfigureBoostMode+0x106>
 8003860:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003864:	d11e      	bne.n	80038a4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	0c9b      	lsrs	r3, r3, #18
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	60fb      	str	r3, [r7, #12]
        break;
 8003876:	e016      	b.n	80038a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	60fb      	str	r3, [r7, #12]
        break;
 800387e:	e012      	b.n	80038a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	60fb      	str	r3, [r7, #12]
        break;
 8003886:	e00e      	b.n	80038a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	60fb      	str	r3, [r7, #12]
        break;
 800388e:	e00a      	b.n	80038a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	09db      	lsrs	r3, r3, #7
 8003894:	60fb      	str	r3, [r7, #12]
        break;
 8003896:	e006      	b.n	80038a6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	60fb      	str	r3, [r7, #12]
        break;
 800389e:	e002      	b.n	80038a6 <ADC_ConfigureBoostMode+0x146>
        break;
 80038a0:	bf00      	nop
 80038a2:	e000      	b.n	80038a6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80038a4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80038a6:	f7ff f8a7 	bl	80029f8 <HAL_GetREVID>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d815      	bhi.n	80038e0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4a2b      	ldr	r2, [pc, #172]	; (8003964 <ADC_ConfigureBoostMode+0x204>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d908      	bls.n	80038ce <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80038cc:	e03e      	b.n	800394c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038dc:	609a      	str	r2, [r3, #8]
}
 80038de:	e035      	b.n	800394c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <ADC_ConfigureBoostMode+0x208>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d808      	bhi.n	8003900 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038fc:	609a      	str	r2, [r3, #8]
}
 80038fe:	e025      	b.n	800394c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a1a      	ldr	r2, [pc, #104]	; (800396c <ADC_ConfigureBoostMode+0x20c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d80a      	bhi.n	800391e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	e016      	b.n	800394c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a13      	ldr	r2, [pc, #76]	; (8003970 <ADC_ConfigureBoostMode+0x210>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d80a      	bhi.n	800393c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003938:	609a      	str	r2, [r3, #8]
}
 800393a:	e007      	b.n	800394c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800394a:	609a      	str	r2, [r3, #8]
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40022000 	.word	0x40022000
 8003958:	40022100 	.word	0x40022100
 800395c:	40022300 	.word	0x40022300
 8003960:	58026300 	.word	0x58026300
 8003964:	01312d00 	.word	0x01312d00
 8003968:	005f5e10 	.word	0x005f5e10
 800396c:	00bebc20 	.word	0x00bebc20
 8003970:	017d7840 	.word	0x017d7840

08003974 <LL_ADC_IsEnabled>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <LL_ADC_IsEnabled+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_ADC_IsEnabled+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_ADC_REG_IsConversionOngoing>:
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d101      	bne.n	80039b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b09f      	sub	sp, #124	; 0x7c
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039da:	2302      	movs	r3, #2
 80039dc:	e0be      	b.n	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80039e6:	2300      	movs	r3, #0
 80039e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a5c      	ldr	r2, [pc, #368]	; (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d102      	bne.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039f8:	4b5b      	ldr	r3, [pc, #364]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	e001      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e09d      	b.n	8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ffb9 	bl	800399a <LL_ADC_REG_IsConversionOngoing>
 8003a28:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff ffb3 	bl	800399a <LL_ADC_REG_IsConversionOngoing>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d17f      	bne.n	8003b3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d17c      	bne.n	8003b3a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a47      	ldr	r2, [pc, #284]	; (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003a54:	4b45      	ldr	r3, [pc, #276]	; (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a56:	e000      	b.n	8003a5a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a58:	4b45      	ldr	r3, [pc, #276]	; (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d039      	beq.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a74:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3a      	ldr	r2, [pc, #232]	; (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a38      	ldr	r2, [pc, #224]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10e      	bne.n	8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a8a:	4836      	ldr	r0, [pc, #216]	; (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a8c:	f7ff ff72 	bl	8003974 <LL_ADC_IsEnabled>
 8003a90:	4604      	mov	r4, r0
 8003a92:	4835      	ldr	r0, [pc, #212]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a94:	f7ff ff6e 	bl	8003974 <LL_ADC_IsEnabled>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4323      	orrs	r3, r4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	e008      	b.n	8003aba <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003aa8:	4832      	ldr	r0, [pc, #200]	; (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003aaa:	f7ff ff63 	bl	8003974 <LL_ADC_IsEnabled>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d047      	beq.n	8003b4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	6811      	ldr	r1, [r2, #0]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ad6:	e03a      	b.n	8003b4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d10e      	bne.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003af8:	481a      	ldr	r0, [pc, #104]	; (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003afa:	f7ff ff3b 	bl	8003974 <LL_ADC_IsEnabled>
 8003afe:	4604      	mov	r4, r0
 8003b00:	4819      	ldr	r0, [pc, #100]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b02:	f7ff ff37 	bl	8003974 <LL_ADC_IsEnabled>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4323      	orrs	r3, r4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	bf0c      	ite	eq
 8003b0e:	2301      	moveq	r3, #1
 8003b10:	2300      	movne	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e008      	b.n	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003b16:	4817      	ldr	r0, [pc, #92]	; (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b18:	f7ff ff2c 	bl	8003974 <LL_ADC_IsEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d010      	beq.n	8003b4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b36:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b38:	e009      	b.n	8003b4e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003b4c:	e000      	b.n	8003b50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b4e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	377c      	adds	r7, #124	; 0x7c
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd90      	pop	{r4, r7, pc}
 8003b64:	40022000 	.word	0x40022000
 8003b68:	40022100 	.word	0x40022100
 8003b6c:	40022300 	.word	0x40022300
 8003b70:	58026300 	.word	0x58026300
 8003b74:	58026000 	.word	0x58026000
 8003b78:	fffff0e0 	.word	0xfffff0e0

08003b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <__NVIC_SetPriorityGrouping+0x40>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003baa:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <__NVIC_SetPriorityGrouping+0x40>)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	60d3      	str	r3, [r2, #12]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00
 8003bc0:	05fa0000 	.word	0x05fa0000

08003bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <__NVIC_GetPriorityGrouping+0x18>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	f003 0307 	and.w	r3, r3, #7
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	6039      	str	r1, [r7, #0]
 8003bea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	db0a      	blt.n	8003c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	490c      	ldr	r1, [pc, #48]	; (8003c2c <__NVIC_SetPriority+0x4c>)
 8003bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bfe:	0112      	lsls	r2, r2, #4
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	440b      	add	r3, r1
 8003c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c08:	e00a      	b.n	8003c20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4908      	ldr	r1, [pc, #32]	; (8003c30 <__NVIC_SetPriority+0x50>)
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	3b04      	subs	r3, #4
 8003c18:	0112      	lsls	r2, r2, #4
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	761a      	strb	r2, [r3, #24]
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000e100 	.word	0xe000e100
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b089      	sub	sp, #36	; 0x24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f1c3 0307 	rsb	r3, r3, #7
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	bf28      	it	cs
 8003c52:	2304      	movcs	r3, #4
 8003c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	d902      	bls.n	8003c64 <NVIC_EncodePriority+0x30>
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3b03      	subs	r3, #3
 8003c62:	e000      	b.n	8003c66 <NVIC_EncodePriority+0x32>
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43da      	mvns	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	401a      	ands	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	43d9      	mvns	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c8c:	4313      	orrs	r3, r2
         );
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3724      	adds	r7, #36	; 0x24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cac:	d301      	bcc.n	8003cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e00f      	b.n	8003cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <SysTick_Config+0x40>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cba:	210f      	movs	r1, #15
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	f7ff ff8e 	bl	8003be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <SysTick_Config+0x40>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <SysTick_Config+0x40>)
 8003ccc:	2207      	movs	r2, #7
 8003cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	e000e010 	.word	0xe000e010

08003ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff47 	bl	8003b7c <__NVIC_SetPriorityGrouping>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d04:	f7ff ff5e 	bl	8003bc4 <__NVIC_GetPriorityGrouping>
 8003d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	6978      	ldr	r0, [r7, #20]
 8003d10:	f7ff ff90 	bl	8003c34 <NVIC_EncodePriority>
 8003d14:	4602      	mov	r2, r0
 8003d16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff ff5f 	bl	8003be0 <__NVIC_SetPriority>
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ffb2 	bl	8003c9c <SysTick_Config>
 8003d38:	4603      	mov	r3, r0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0cf      	b.n	8003ef6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2223      	movs	r2, #35	; 0x23
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7fc ff1b 	bl	8000ba4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6e:	4b64      	ldr	r3, [pc, #400]	; (8003f00 <HAL_ETH_Init+0x1bc>)
 8003d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d74:	4a62      	ldr	r2, [pc, #392]	; (8003f00 <HAL_ETH_Init+0x1bc>)
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d7e:	4b60      	ldr	r3, [pc, #384]	; (8003f00 <HAL_ETH_Init+0x1bc>)
 8003d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7a1b      	ldrb	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7fe fe3b 	bl	8002a10 <HAL_SYSCFG_ETHInterfaceSelect>
 8003d9a:	e003      	b.n	8003da4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003d9c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003da0:	f7fe fe36 	bl	8002a10 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003da4:	4b57      	ldr	r3, [pc, #348]	; (8003f04 <HAL_ETH_Init+0x1c0>)
 8003da6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dc0:	f7fe fdea 	bl	8002998 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003dc6:	e011      	b.n	8003dec <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003dc8:	f7fe fde6 	bl	8002998 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dd6:	d909      	bls.n	8003dec <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	22e0      	movs	r2, #224	; 0xe0
 8003de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e084      	b.n	8003ef6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e4      	bne.n	8003dc8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f886 	bl	8003f10 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003e04:	f002 fd5c 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	4a3f      	ldr	r2, [pc, #252]	; (8003f08 <HAL_ETH_Init+0x1c4>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	0c9a      	lsrs	r2, r3, #18
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3a01      	subs	r2, #1
 8003e18:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fa71 	bl	8004304 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e2e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e3e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	22e0      	movs	r2, #224	; 0xe0
 8003e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e049      	b.n	8003ef6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003e6e:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <HAL_ETH_Init+0x1c8>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6952      	ldr	r2, [r2, #20]
 8003e76:	0051      	lsls	r1, r2, #1
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e82:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fad9 	bl	800443e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fb1f 	bl	80044d0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	3305      	adds	r3, #5
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	021a      	lsls	r2, r3, #8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	3303      	adds	r3, #3
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	061a      	lsls	r2, r3, #24
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ed0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003ede:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003ee0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
 8003f04:	58000400 	.word	0x58000400
 8003f08:	431bde83 	.word	0x431bde83
 8003f0c:	ffff8001 	.word	0xffff8001

08003f10 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f2a:	f002 fcc9 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8003f2e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d908      	bls.n	8003f4a <HAL_ETH_SetMDIOClockRange+0x3a>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d804      	bhi.n	8003f4a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e027      	b.n	8003f9a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4a18      	ldr	r2, [pc, #96]	; (8003fb0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d908      	bls.n	8003f64 <HAL_ETH_SetMDIOClockRange+0x54>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d204      	bcs.n	8003f64 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e01a      	b.n	8003f9a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d303      	bcc.n	8003f74 <HAL_ETH_SetMDIOClockRange+0x64>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d911      	bls.n	8003f98 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a10      	ldr	r2, [pc, #64]	; (8003fb8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d908      	bls.n	8003f8e <HAL_ETH_SetMDIOClockRange+0x7e>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4a0f      	ldr	r2, [pc, #60]	; (8003fbc <HAL_ETH_SetMDIOClockRange+0xac>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d804      	bhi.n	8003f8e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e005      	b.n	8003f9a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e000      	b.n	8003f9a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003f98:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	01312cff 	.word	0x01312cff
 8003fb0:	02160ebf 	.word	0x02160ebf
 8003fb4:	03938700 	.word	0x03938700
 8003fb8:	05f5e0ff 	.word	0x05f5e0ff
 8003fbc:	08f0d17f 	.word	0x08f0d17f

08003fc0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003fd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003fda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	7b1b      	ldrb	r3, [r3, #12]
 8003fe0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003fe2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	7b5b      	ldrb	r3, [r3, #13]
 8003fe8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003fea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	7b9b      	ldrb	r3, [r3, #14]
 8003ff0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003ff2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	7bdb      	ldrb	r3, [r3, #15]
 8003ff8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ffa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	7c12      	ldrb	r2, [r2, #16]
 8004000:	2a00      	cmp	r2, #0
 8004002:	d102      	bne.n	800400a <ETH_SetMACConfig+0x4a>
 8004004:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004008:	e000      	b.n	800400c <ETH_SetMACConfig+0x4c>
 800400a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800400c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	7c52      	ldrb	r2, [r2, #17]
 8004012:	2a00      	cmp	r2, #0
 8004014:	d102      	bne.n	800401c <ETH_SetMACConfig+0x5c>
 8004016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800401a:	e000      	b.n	800401e <ETH_SetMACConfig+0x5e>
 800401c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800401e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	7c9b      	ldrb	r3, [r3, #18]
 8004024:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004026:	431a      	orrs	r2, r3
               macconf->Speed |
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800402c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004032:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	7f1b      	ldrb	r3, [r3, #28]
 8004038:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800403a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	7f5b      	ldrb	r3, [r3, #29]
 8004040:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004042:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	7f92      	ldrb	r2, [r2, #30]
 8004048:	2a00      	cmp	r2, #0
 800404a:	d102      	bne.n	8004052 <ETH_SetMACConfig+0x92>
 800404c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004050:	e000      	b.n	8004054 <ETH_SetMACConfig+0x94>
 8004052:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004054:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	7fdb      	ldrb	r3, [r3, #31]
 800405a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800405c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004064:	2a00      	cmp	r2, #0
 8004066:	d102      	bne.n	800406e <ETH_SetMACConfig+0xae>
 8004068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800406c:	e000      	b.n	8004070 <ETH_SetMACConfig+0xb0>
 800406e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004070:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004076:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004080:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b56      	ldr	r3, [pc, #344]	; (80041ec <ETH_SetMACConfig+0x22c>)
 8004092:	4013      	ands	r3, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	68f9      	ldr	r1, [r7, #12]
 800409a:	430b      	orrs	r3, r1
 800409c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80040b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040be:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80040c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80040c8:	2a00      	cmp	r2, #0
 80040ca:	d102      	bne.n	80040d2 <ETH_SetMACConfig+0x112>
 80040cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040d0:	e000      	b.n	80040d4 <ETH_SetMACConfig+0x114>
 80040d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80040d4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	4b42      	ldr	r3, [pc, #264]	; (80041f0 <ETH_SetMACConfig+0x230>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	68f9      	ldr	r1, [r7, #12]
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <ETH_SetMACConfig+0x234>)
 800410a:	4013      	ands	r3, r2
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	430b      	orrs	r3, r1
 8004114:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800411c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004122:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800412a:	2a00      	cmp	r2, #0
 800412c:	d101      	bne.n	8004132 <ETH_SetMACConfig+0x172>
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	e000      	b.n	8004134 <ETH_SetMACConfig+0x174>
 8004132:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004134:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004146:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	430b      	orrs	r3, r1
 8004154:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800415c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004164:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f023 0103 	bic.w	r1, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	430a      	orrs	r2, r1
 800417e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800418a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80041a6:	2a00      	cmp	r2, #0
 80041a8:	d101      	bne.n	80041ae <ETH_SetMACConfig+0x1ee>
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	e000      	b.n	80041b0 <ETH_SetMACConfig+0x1f0>
 80041ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80041b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80041b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80041ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80041c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80041d0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	430a      	orrs	r2, r1
 80041dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	00048083 	.word	0x00048083
 80041f0:	c0f88000 	.word	0xc0f88000
 80041f4:	fffffef0 	.word	0xfffffef0

080041f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <ETH_SetDMAConfig+0xf8>)
 800420e:	4013      	ands	r3, r2
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	6811      	ldr	r1, [r2, #0]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	430b      	orrs	r3, r1
 800421a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800421e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	791b      	ldrb	r3, [r3, #4]
 8004224:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800422a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	7b1b      	ldrb	r3, [r3, #12]
 8004230:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <ETH_SetDMAConfig+0xfc>)
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	68f9      	ldr	r1, [r7, #12]
 800424a:	430b      	orrs	r3, r1
 800424c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004250:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	7b5b      	ldrb	r3, [r3, #13]
 8004256:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004268:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800426c:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <ETH_SetDMAConfig+0x100>)
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	430b      	orrs	r3, r1
 8004278:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800427c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	7d1b      	ldrb	r3, [r3, #20]
 8004288:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800428a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	7f5b      	ldrb	r3, [r3, #29]
 8004290:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80042a2:	4b16      	ldr	r3, [pc, #88]	; (80042fc <ETH_SetDMAConfig+0x104>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	68f9      	ldr	r1, [r7, #12]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042b2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	7f1b      	ldrb	r3, [r3, #28]
 80042ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <ETH_SetDMAConfig+0x108>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	68f9      	ldr	r1, [r7, #12]
 80042da:	430b      	orrs	r3, r1
 80042dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042e0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	ffff87fd 	.word	0xffff87fd
 80042f4:	ffff2ffe 	.word	0xffff2ffe
 80042f8:	fffec000 	.word	0xfffec000
 80042fc:	ffc0efef 	.word	0xffc0efef
 8004300:	7fc0ffff 	.word	0x7fc0ffff

08004304 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b0a4      	sub	sp, #144	; 0x90
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004312:	2300      	movs	r3, #0
 8004314:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004316:	2300      	movs	r3, #0
 8004318:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004344:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800434c:	2300      	movs	r3, #0
 800434e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004350:	2300      	movs	r3, #0
 8004352:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004356:	2300      	movs	r3, #0
 8004358:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800435c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004360:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004362:	2300      	movs	r3, #0
 8004364:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004368:	2300      	movs	r3, #0
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004378:	2300      	movs	r3, #0
 800437a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800437e:	2300      	movs	r3, #0
 8004380:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004382:	2300      	movs	r3, #0
 8004384:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004386:	2300      	movs	r3, #0
 8004388:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800438a:	2300      	movs	r3, #0
 800438c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004390:	2300      	movs	r3, #0
 8004392:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800439c:	2320      	movs	r3, #32
 800439e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80043ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80043b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043b8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80043c0:	2302      	movs	r3, #2
 80043c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80043d8:	2301      	movs	r3, #1
 80043da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80043de:	2300      	movs	r3, #0
 80043e0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80043e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff fde6 	bl	8003fc0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80043f4:	2301      	movs	r3, #1
 80043f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80043f8:	2301      	movs	r3, #1
 80043fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004406:	2300      	movs	r3, #0
 8004408:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800440a:	2300      	movs	r3, #0
 800440c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800440e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004412:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004414:	2300      	movs	r3, #0
 8004416:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004418:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800441c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004424:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004428:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fee1 	bl	80041f8 <ETH_SetDMAConfig>
}
 8004436:	bf00      	nop
 8004438:	3790      	adds	r7, #144	; 0x90
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	e01d      	b.n	8004488 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68d9      	ldr	r1, [r3, #12]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	440b      	add	r3, r1
 800445c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2200      	movs	r2, #0
 800446e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2200      	movs	r2, #0
 8004474:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	3206      	adds	r2, #6
 800447e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3301      	adds	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b03      	cmp	r3, #3
 800448c:	d9de      	bls.n	800444c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449c:	461a      	mov	r2, r3
 800449e:	2303      	movs	r3, #3
 80044a0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e023      	b.n	8004526 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6919      	ldr	r1, [r3, #16]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4413      	add	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	440b      	add	r3, r1
 80044ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2200      	movs	r2, #0
 80044fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2200      	movs	r2, #0
 8004506:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2200      	movs	r2, #0
 8004512:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	3212      	adds	r2, #18
 800451c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3301      	adds	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d9d8      	bls.n	80044de <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004552:	461a      	mov	r2, r3
 8004554:	2303      	movs	r3, #3
 8004556:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b098      	sub	sp, #96	; 0x60
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004594:	4a84      	ldr	r2, [pc, #528]	; (80047a8 <HAL_FDCAN_Init+0x21c>)
 8004596:	f107 030c 	add.w	r3, r7, #12
 800459a:	4611      	mov	r1, r2
 800459c:	224c      	movs	r2, #76	; 0x4c
 800459e:	4618      	mov	r0, r3
 80045a0:	f006 fdfc 	bl	800b19c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e1c6      	b.n	800493c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7e      	ldr	r2, [pc, #504]	; (80047ac <HAL_FDCAN_Init+0x220>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d106      	bne.n	80045c6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fcda 	bl	8000f94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0210 	bic.w	r2, r2, #16
 80045ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045f0:	f7fe f9d2 	bl	8002998 <HAL_GetTick>
 80045f4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045f6:	e014      	b.n	8004622 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80045f8:	f7fe f9ce 	bl	8002998 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b0a      	cmp	r3, #10
 8004604:	d90d      	bls.n	8004622 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800460c:	f043 0201 	orr.w	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2203      	movs	r2, #3
 800461a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e18c      	b.n	800493c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b08      	cmp	r3, #8
 800462e:	d0e3      	beq.n	80045f8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004640:	f7fe f9aa 	bl	8002998 <HAL_GetTick>
 8004644:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004646:	e014      	b.n	8004672 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004648:	f7fe f9a6 	bl	8002998 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b0a      	cmp	r3, #10
 8004654:	d90d      	bls.n	8004672 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800465c:	f043 0201 	orr.w	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2203      	movs	r2, #3
 800466a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e164      	b.n	800493c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0e3      	beq.n	8004648 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0202 	orr.w	r2, r2, #2
 800468e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	7c1b      	ldrb	r3, [r3, #16]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d108      	bne.n	80046aa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a6:	619a      	str	r2, [r3, #24]
 80046a8:	e007      	b.n	80046ba <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699a      	ldr	r2, [r3, #24]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7c5b      	ldrb	r3, [r3, #17]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d108      	bne.n	80046d4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699a      	ldr	r2, [r3, #24]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d0:	619a      	str	r2, [r3, #24]
 80046d2:	e007      	b.n	80046e4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7c9b      	ldrb	r3, [r3, #18]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d108      	bne.n	80046fe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046fa:	619a      	str	r2, [r3, #24]
 80046fc:	e007      	b.n	800470e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800470c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004732:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0210 	bic.w	r2, r2, #16
 8004742:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d108      	bne.n	800475e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0204 	orr.w	r2, r2, #4
 800475a:	619a      	str	r2, [r3, #24]
 800475c:	e030      	b.n	80047c0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d02c      	beq.n	80047c0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d020      	beq.n	80047b0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800477c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0210 	orr.w	r2, r2, #16
 800478c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d114      	bne.n	80047c0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0220 	orr.w	r2, r2, #32
 80047a4:	619a      	str	r2, [r3, #24]
 80047a6:	e00b      	b.n	80047c0 <HAL_FDCAN_Init+0x234>
 80047a8:	0800ba68 	.word	0x0800ba68
 80047ac:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0220 	orr.w	r2, r2, #32
 80047be:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047d0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80047d8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80047e8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80047ea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f4:	d115      	bne.n	8004822 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	3b01      	subs	r3, #1
 8004802:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004804:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	3b01      	subs	r3, #1
 800480c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800480e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	3b01      	subs	r3, #1
 8004818:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800481e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004820:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004848:	4413      	add	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d011      	beq.n	8004872 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004856:	f023 0107 	bic.w	r1, r3, #7
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	3360      	adds	r3, #96	; 0x60
 8004862:	443b      	add	r3, r7
 8004864:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d011      	beq.n	800489e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004882:	f023 0107 	bic.w	r1, r3, #7
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	3360      	adds	r3, #96	; 0x60
 800488e:	443b      	add	r3, r7
 8004890:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d012      	beq.n	80048cc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048ae:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	3360      	adds	r3, #96	; 0x60
 80048ba:	443b      	add	r3, r7
 80048bc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80048c0:	011a      	lsls	r2, r3, #4
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d012      	beq.n	80048fa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048dc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	3360      	adds	r3, #96	; 0x60
 80048e8:	443b      	add	r3, r7
 80048ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80048ee:	021a      	lsls	r2, r3, #8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a11      	ldr	r2, [pc, #68]	; (8004944 <HAL_FDCAN_Init+0x3b8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d107      	bne.n	8004914 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f022 0203 	bic.w	r2, r2, #3
 8004912:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f80b 	bl	8004948 <FDCAN_CalcultateRamBlockAddresses>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004938:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800493c:	4618      	mov	r0, r3
 800493e:	3760      	adds	r7, #96	; 0x60
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	4000a000 	.word	0x4000a000

08004948 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800495e:	4ba7      	ldr	r3, [pc, #668]	; (8004bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004960:	4013      	ands	r3, r2
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0091      	lsls	r1, r2, #2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	430b      	orrs	r3, r1
 800496c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004978:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	041a      	lsls	r2, r3, #16
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	4413      	add	r3, r2
 8004994:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800499e:	4b97      	ldr	r3, [pc, #604]	; (8004bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	0091      	lsls	r1, r2, #2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	430b      	orrs	r3, r1
 80049ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c0:	041a      	lsls	r2, r3, #16
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80049e0:	4b86      	ldr	r3, [pc, #536]	; (8004bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	0091      	lsls	r1, r2, #2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	430b      	orrs	r3, r1
 80049ee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049fa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	041a      	lsls	r2, r3, #16
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a28:	4b74      	ldr	r3, [pc, #464]	; (8004bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	0091      	lsls	r1, r2, #2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	430b      	orrs	r3, r1
 8004a36:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a42:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4a:	041a      	lsls	r2, r3, #16
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	4413      	add	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004a70:	4b62      	ldr	r3, [pc, #392]	; (8004bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	0091      	lsls	r1, r2, #2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004a9c:	4b57      	ldr	r3, [pc, #348]	; (8004bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	0091      	lsls	r1, r2, #2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ab6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	041a      	lsls	r2, r3, #16
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004ade:	4b47      	ldr	r3, [pc, #284]	; (8004bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0091      	lsls	r1, r2, #2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	430b      	orrs	r3, r1
 8004aec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004af8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b00:	041a      	lsls	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b14:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	061a      	lsls	r2, r3, #24
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2c:	4b34      	ldr	r3, [pc, #208]	; (8004c00 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004b2e:	4413      	add	r3, r2
 8004b30:	009a      	lsls	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	441a      	add	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8004b62:	fb01 f303 	mul.w	r3, r1, r3
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	441a      	add	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	441a      	add	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004bde:	fb01 f303 	mul.w	r3, r1, r3
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d915      	bls.n	8004c24 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004bf8:	e006      	b.n	8004c08 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004bfa:	bf00      	nop
 8004bfc:	ffff0003 	.word	0xffff0003
 8004c00:	10002b00 	.word	0x10002b00
 8004c04:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e010      	b.n	8004c46 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	e005      	b.n	8004c38 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3304      	adds	r3, #4
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d3f3      	bcc.n	8004c2c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop

08004c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b089      	sub	sp, #36	; 0x24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c62:	4b89      	ldr	r3, [pc, #548]	; (8004e88 <HAL_GPIO_Init+0x234>)
 8004c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c66:	e194      	b.n	8004f92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8186 	beq.w	8004f8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d005      	beq.n	8004c98 <HAL_GPIO_Init+0x44>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d130      	bne.n	8004cfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4013      	ands	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cce:	2201      	movs	r2, #1
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 0201 	and.w	r2, r3, #1
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d017      	beq.n	8004d36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	2203      	movs	r2, #3
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d123      	bne.n	8004d8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	08da      	lsrs	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3208      	adds	r2, #8
 8004d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	220f      	movs	r2, #15
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4013      	ands	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	08da      	lsrs	r2, r3, #3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3208      	adds	r2, #8
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	2203      	movs	r2, #3
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 0203 	and.w	r2, r3, #3
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80e0 	beq.w	8004f8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <HAL_GPIO_Init+0x238>)
 8004dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dd2:	4a2e      	ldr	r2, [pc, #184]	; (8004e8c <HAL_GPIO_Init+0x238>)
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ddc:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <HAL_GPIO_Init+0x238>)
 8004dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dea:	4a29      	ldr	r2, [pc, #164]	; (8004e90 <HAL_GPIO_Init+0x23c>)
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	089b      	lsrs	r3, r3, #2
 8004df0:	3302      	adds	r3, #2
 8004df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	220f      	movs	r2, #15
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <HAL_GPIO_Init+0x240>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d052      	beq.n	8004ebc <HAL_GPIO_Init+0x268>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <HAL_GPIO_Init+0x244>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d031      	beq.n	8004e82 <HAL_GPIO_Init+0x22e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <HAL_GPIO_Init+0x248>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d02b      	beq.n	8004e7e <HAL_GPIO_Init+0x22a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	; (8004ea0 <HAL_GPIO_Init+0x24c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d025      	beq.n	8004e7a <HAL_GPIO_Init+0x226>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1c      	ldr	r2, [pc, #112]	; (8004ea4 <HAL_GPIO_Init+0x250>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01f      	beq.n	8004e76 <HAL_GPIO_Init+0x222>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1b      	ldr	r2, [pc, #108]	; (8004ea8 <HAL_GPIO_Init+0x254>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d019      	beq.n	8004e72 <HAL_GPIO_Init+0x21e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1a      	ldr	r2, [pc, #104]	; (8004eac <HAL_GPIO_Init+0x258>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_GPIO_Init+0x21a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <HAL_GPIO_Init+0x25c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00d      	beq.n	8004e6a <HAL_GPIO_Init+0x216>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a18      	ldr	r2, [pc, #96]	; (8004eb4 <HAL_GPIO_Init+0x260>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <HAL_GPIO_Init+0x212>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <HAL_GPIO_Init+0x264>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d101      	bne.n	8004e62 <HAL_GPIO_Init+0x20e>
 8004e5e:	2309      	movs	r3, #9
 8004e60:	e02d      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e62:	230a      	movs	r3, #10
 8004e64:	e02b      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e66:	2308      	movs	r3, #8
 8004e68:	e029      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e6a:	2307      	movs	r3, #7
 8004e6c:	e027      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e6e:	2306      	movs	r3, #6
 8004e70:	e025      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e72:	2305      	movs	r3, #5
 8004e74:	e023      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e76:	2304      	movs	r3, #4
 8004e78:	e021      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e01f      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e01d      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e01b      	b.n	8004ebe <HAL_GPIO_Init+0x26a>
 8004e86:	bf00      	nop
 8004e88:	58000080 	.word	0x58000080
 8004e8c:	58024400 	.word	0x58024400
 8004e90:	58000400 	.word	0x58000400
 8004e94:	58020000 	.word	0x58020000
 8004e98:	58020400 	.word	0x58020400
 8004e9c:	58020800 	.word	0x58020800
 8004ea0:	58020c00 	.word	0x58020c00
 8004ea4:	58021000 	.word	0x58021000
 8004ea8:	58021400 	.word	0x58021400
 8004eac:	58021800 	.word	0x58021800
 8004eb0:	58021c00 	.word	0x58021c00
 8004eb4:	58022000 	.word	0x58022000
 8004eb8:	58022400 	.word	0x58022400
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	f002 0203 	and.w	r2, r2, #3
 8004ec4:	0092      	lsls	r2, r2, #2
 8004ec6:	4093      	lsls	r3, r2
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ece:	4938      	ldr	r1, [pc, #224]	; (8004fb0 <HAL_GPIO_Init+0x35c>)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	089b      	lsrs	r3, r3, #2
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4013      	ands	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f47f ae63 	bne.w	8004c68 <HAL_GPIO_Init+0x14>
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	3724      	adds	r7, #36	; 0x24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	58000400 	.word	0x58000400

08004fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fc4:	787b      	ldrb	r3, [r7, #1]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004fd0:	e003      	b.n	8004fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	041a      	lsls	r2, r3, #16
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	619a      	str	r2, [r3, #24]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ff8:	887a      	ldrh	r2, [r7, #2]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	041a      	lsls	r2, r3, #16
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	43d9      	mvns	r1, r3
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	400b      	ands	r3, r1
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	619a      	str	r2, [r3, #24]
}
 800500e:	bf00      	nop
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0bf      	b.n	80051ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fc fbc8 	bl	80017d8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800505e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6999      	ldr	r1, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005074:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6899      	ldr	r1, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b4a      	ldr	r3, [pc, #296]	; (80051b8 <HAL_LTDC_Init+0x19c>)
 8005090:	400b      	ands	r3, r1
 8005092:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6899      	ldr	r1, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68d9      	ldr	r1, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <HAL_LTDC_Init+0x19c>)
 80050be:	400b      	ands	r3, r1
 80050c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	041b      	lsls	r3, r3, #16
 80050c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68d9      	ldr	r1, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6919      	ldr	r1, [r3, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b33      	ldr	r3, [pc, #204]	; (80051b8 <HAL_LTDC_Init+0x19c>)
 80050ec:	400b      	ands	r3, r1
 80050ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6919      	ldr	r1, [r3, #16]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6959      	ldr	r1, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <HAL_LTDC_Init+0x19c>)
 800511a:	400b      	ands	r3, r1
 800511c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6959      	ldr	r1, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800515e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0206 	orr.w	r2, r2, #6
 800518a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	f000f800 	.word	0xf000f800

080051bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80051bc:	b5b0      	push	{r4, r5, r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_LTDC_ConfigLayer+0x1a>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e02c      	b.n	8005230 <HAL_LTDC_ConfigLayer+0x74>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2134      	movs	r1, #52	; 0x34
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4614      	mov	r4, r2
 80051fa:	461d      	mov	r5, r3
 80051fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f811 	bl	8005238 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2201      	movs	r2, #1
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bdb0      	pop	{r4, r5, r7, pc}

08005238 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005238:	b480      	push	{r7}
 800523a:	b089      	sub	sp, #36	; 0x24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005254:	4413      	add	r3, r2
 8005256:	041b      	lsls	r3, r3, #16
 8005258:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	01db      	lsls	r3, r3, #7
 8005264:	4413      	add	r3, r2
 8005266:	3384      	adds	r3, #132	; 0x84
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	6812      	ldr	r2, [r2, #0]
 800526e:	4611      	mov	r1, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	01d2      	lsls	r2, r2, #7
 8005274:	440a      	add	r2, r1
 8005276:	3284      	adds	r2, #132	; 0x84
 8005278:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800527c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800528e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005290:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4619      	mov	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	01db      	lsls	r3, r3, #7
 800529c:	440b      	add	r3, r1
 800529e:	3384      	adds	r3, #132	; 0x84
 80052a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80052a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052b6:	4413      	add	r3, r2
 80052b8:	041b      	lsls	r3, r3, #16
 80052ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	01db      	lsls	r3, r3, #7
 80052c6:	4413      	add	r3, r2
 80052c8:	3384      	adds	r3, #132	; 0x84
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	4611      	mov	r1, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	01d2      	lsls	r2, r2, #7
 80052d6:	440a      	add	r2, r1
 80052d8:	3284      	adds	r2, #132	; 0x84
 80052da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ee:	4413      	add	r3, r2
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4619      	mov	r1, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	01db      	lsls	r3, r3, #7
 80052fc:	440b      	add	r3, r1
 80052fe:	3384      	adds	r3, #132	; 0x84
 8005300:	4619      	mov	r1, r3
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4313      	orrs	r3, r2
 8005306:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	01db      	lsls	r3, r3, #7
 8005312:	4413      	add	r3, r2
 8005314:	3384      	adds	r3, #132	; 0x84
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	4611      	mov	r1, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	01d2      	lsls	r2, r2, #7
 8005322:	440a      	add	r2, r1
 8005324:	3284      	adds	r2, #132	; 0x84
 8005326:	f023 0307 	bic.w	r3, r3, #7
 800532a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	01db      	lsls	r3, r3, #7
 8005336:	4413      	add	r3, r2
 8005338:	3384      	adds	r3, #132	; 0x84
 800533a:	461a      	mov	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005352:	041b      	lsls	r3, r3, #16
 8005354:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	061b      	lsls	r3, r3, #24
 800535c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	01db      	lsls	r3, r3, #7
 8005368:	4413      	add	r3, r2
 800536a:	3384      	adds	r3, #132	; 0x84
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	01db      	lsls	r3, r3, #7
 8005378:	4413      	add	r3, r2
 800537a:	3384      	adds	r3, #132	; 0x84
 800537c:	461a      	mov	r2, r3
 800537e:	2300      	movs	r3, #0
 8005380:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005388:	461a      	mov	r2, r3
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	431a      	orrs	r2, r3
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4619      	mov	r1, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	01db      	lsls	r3, r3, #7
 800539c:	440b      	add	r3, r1
 800539e:	3384      	adds	r3, #132	; 0x84
 80053a0:	4619      	mov	r1, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	01db      	lsls	r3, r3, #7
 80053b2:	4413      	add	r3, r2
 80053b4:	3384      	adds	r3, #132	; 0x84
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	4611      	mov	r1, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	01d2      	lsls	r2, r2, #7
 80053c2:	440a      	add	r2, r1
 80053c4:	3284      	adds	r2, #132	; 0x84
 80053c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	01db      	lsls	r3, r3, #7
 80053d6:	4413      	add	r3, r2
 80053d8:	3384      	adds	r3, #132	; 0x84
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	01db      	lsls	r3, r3, #7
 80053ec:	4413      	add	r3, r2
 80053ee:	3384      	adds	r3, #132	; 0x84
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4619      	mov	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	01db      	lsls	r3, r3, #7
 80053fc:	440b      	add	r3, r1
 80053fe:	3384      	adds	r3, #132	; 0x84
 8005400:	4619      	mov	r1, r3
 8005402:	4b58      	ldr	r3, [pc, #352]	; (8005564 <LTDC_SetConfig+0x32c>)
 8005404:	4013      	ands	r3, r2
 8005406:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	68f9      	ldr	r1, [r7, #12]
 8005412:	6809      	ldr	r1, [r1, #0]
 8005414:	4608      	mov	r0, r1
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	01c9      	lsls	r1, r1, #7
 800541a:	4401      	add	r1, r0
 800541c:	3184      	adds	r1, #132	; 0x84
 800541e:	4313      	orrs	r3, r2
 8005420:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	01db      	lsls	r3, r3, #7
 800542c:	4413      	add	r3, r2
 800542e:	3384      	adds	r3, #132	; 0x84
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	01db      	lsls	r3, r3, #7
 800543c:	4413      	add	r3, r2
 800543e:	3384      	adds	r3, #132	; 0x84
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	01db      	lsls	r3, r3, #7
 8005450:	4413      	add	r3, r2
 8005452:	3384      	adds	r3, #132	; 0x84
 8005454:	461a      	mov	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005464:	2304      	movs	r3, #4
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	e01b      	b.n	80054a2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d102      	bne.n	8005478 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005472:	2303      	movs	r3, #3
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	e014      	b.n	80054a2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b04      	cmp	r3, #4
 800547e:	d00b      	beq.n	8005498 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005484:	2b02      	cmp	r3, #2
 8005486:	d007      	beq.n	8005498 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800548c:	2b03      	cmp	r3, #3
 800548e:	d003      	beq.n	8005498 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005494:	2b07      	cmp	r3, #7
 8005496:	d102      	bne.n	800549e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005498:	2302      	movs	r3, #2
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	e001      	b.n	80054a2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800549e:	2301      	movs	r3, #1
 80054a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	01db      	lsls	r3, r3, #7
 80054ac:	4413      	add	r3, r2
 80054ae:	3384      	adds	r3, #132	; 0x84
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	4611      	mov	r1, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	01d2      	lsls	r2, r2, #7
 80054bc:	440a      	add	r2, r1
 80054be:	3284      	adds	r2, #132	; 0x84
 80054c0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80054c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	fb02 f303 	mul.w	r3, r2, r3
 80054d0:	041a      	lsls	r2, r3, #16
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6859      	ldr	r1, [r3, #4]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	1acb      	subs	r3, r1, r3
 80054dc:	69f9      	ldr	r1, [r7, #28]
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	3307      	adds	r3, #7
 80054e4:	68f9      	ldr	r1, [r7, #12]
 80054e6:	6809      	ldr	r1, [r1, #0]
 80054e8:	4608      	mov	r0, r1
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	01c9      	lsls	r1, r1, #7
 80054ee:	4401      	add	r1, r0
 80054f0:	3184      	adds	r1, #132	; 0x84
 80054f2:	4313      	orrs	r3, r2
 80054f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	01db      	lsls	r3, r3, #7
 8005500:	4413      	add	r3, r2
 8005502:	3384      	adds	r3, #132	; 0x84
 8005504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4619      	mov	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	01db      	lsls	r3, r3, #7
 8005510:	440b      	add	r3, r1
 8005512:	3384      	adds	r3, #132	; 0x84
 8005514:	4619      	mov	r1, r3
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <LTDC_SetConfig+0x330>)
 8005518:	4013      	ands	r3, r2
 800551a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	01db      	lsls	r3, r3, #7
 8005526:	4413      	add	r3, r2
 8005528:	3384      	adds	r3, #132	; 0x84
 800552a:	461a      	mov	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	01db      	lsls	r3, r3, #7
 800553c:	4413      	add	r3, r2
 800553e:	3384      	adds	r3, #132	; 0x84
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	4611      	mov	r1, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	01d2      	lsls	r2, r2, #7
 800554c:	440a      	add	r2, r1
 800554e:	3284      	adds	r2, #132	; 0x84
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	6013      	str	r3, [r2, #0]
}
 8005556:	bf00      	nop
 8005558:	3724      	adds	r7, #36	; 0x24
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	fffff8f8 	.word	0xfffff8f8
 8005568:	fffff800 	.word	0xfffff800

0800556c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800556c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800556e:	b08f      	sub	sp, #60	; 0x3c
 8005570:	af0a      	add	r7, sp, #40	; 0x28
 8005572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e116      	b.n	80057ac <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d106      	bne.n	800559e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fd f8d3 	bl	8002744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2203      	movs	r2, #3
 80055a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d102      	bne.n	80055b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f005 fae9 	bl	800ab94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	687e      	ldr	r6, [r7, #4]
 80055ca:	466d      	mov	r5, sp
 80055cc:	f106 0410 	add.w	r4, r6, #16
 80055d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80055e0:	1d33      	adds	r3, r6, #4
 80055e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e4:	6838      	ldr	r0, [r7, #0]
 80055e6:	f005 fa67 	bl	800aab8 <USB_CoreInit>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0d7      	b.n	80057ac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f005 fad7 	bl	800abb6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005608:	2300      	movs	r3, #0
 800560a:	73fb      	strb	r3, [r7, #15]
 800560c:	e04a      	b.n	80056a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800560e:	7bfa      	ldrb	r2, [r7, #15]
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	333d      	adds	r3, #61	; 0x3d
 800561e:	2201      	movs	r2, #1
 8005620:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005622:	7bfa      	ldrb	r2, [r7, #15]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	333c      	adds	r3, #60	; 0x3c
 8005632:	7bfa      	ldrb	r2, [r7, #15]
 8005634:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005636:	7bfa      	ldrb	r2, [r7, #15]
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	b298      	uxth	r0, r3
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	3344      	adds	r3, #68	; 0x44
 800564a:	4602      	mov	r2, r0
 800564c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800564e:	7bfa      	ldrb	r2, [r7, #15]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	3340      	adds	r3, #64	; 0x40
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005662:	7bfa      	ldrb	r2, [r7, #15]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3348      	adds	r3, #72	; 0x48
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005676:	7bfa      	ldrb	r2, [r7, #15]
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	334c      	adds	r3, #76	; 0x4c
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800568a:	7bfa      	ldrb	r2, [r7, #15]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	3354      	adds	r3, #84	; 0x54
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	3301      	adds	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	7bfa      	ldrb	r2, [r7, #15]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d3af      	bcc.n	800560e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
 80056b2:	e044      	b.n	800573e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056b4:	7bfa      	ldrb	r2, [r7, #15]
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056ca:	7bfa      	ldrb	r2, [r7, #15]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	4413      	add	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80056dc:	7bfa      	ldrb	r2, [r7, #15]
 80056de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056f6:	7bfa      	ldrb	r2, [r7, #15]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800570c:	7bfa      	ldrb	r2, [r7, #15]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	3301      	adds	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
 800573e:	7bfa      	ldrb	r2, [r7, #15]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d3b5      	bcc.n	80056b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	687e      	ldr	r6, [r7, #4]
 8005750:	466d      	mov	r5, sp
 8005752:	f106 0410 	add.w	r4, r6, #16
 8005756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800575a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800575c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800575e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005762:	e885 0003 	stmia.w	r5, {r0, r1}
 8005766:	1d33      	adds	r3, r6, #4
 8005768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800576a:	6838      	ldr	r0, [r7, #0]
 800576c:	f005 fa70 	bl	800ac50 <USB_DevInit>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e014      	b.n	80057ac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2b01      	cmp	r3, #1
 8005798:	d102      	bne.n	80057a0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f80a 	bl	80057b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f005 fc2e 	bl	800b006 <USB_DevDisconnect>

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	10000003 	.word	0x10000003

080057fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d00a      	beq.n	8005826 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005810:	4b16      	ldr	r3, [pc, #88]	; (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	429a      	cmp	r2, r3
 800581c:	d001      	beq.n	8005822 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e01f      	b.n	8005862 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e01d      	b.n	8005862 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f023 0207 	bic.w	r2, r3, #7
 800582e:	490f      	ldr	r1, [pc, #60]	; (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4313      	orrs	r3, r2
 8005834:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005836:	f7fd f8af 	bl	8002998 <HAL_GetTick>
 800583a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800583c:	e009      	b.n	8005852 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800583e:	f7fd f8ab 	bl	8002998 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800584c:	d901      	bls.n	8005852 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e007      	b.n	8005862 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_PWREx_ConfigSupply+0x70>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800585a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585e:	d1ee      	bne.n	800583e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	58024800 	.word	0x58024800

08005870 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800587a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587e:	60d3      	str	r3, [r2, #12]
}
 8005880:	bf00      	nop
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	58024800 	.word	0x58024800

08005890 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af02      	add	r7, sp, #8
 8005896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005898:	f7fd f87e 	bl	8002998 <HAL_GetTick>
 800589c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e05f      	b.n	8005968 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d107      	bne.n	80058c4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fc f9c5 	bl	8001c44 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80058ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f85a 	bl	8005978 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	021a      	lsls	r2, r3, #8
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	2120      	movs	r1, #32
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f852 	bl	8005994 <QSPI_WaitFlagStateUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80058f4:	7afb      	ldrb	r3, [r7, #11]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d135      	bne.n	8005966 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <HAL_QSPI_Init+0xe0>)
 8005902:	4013      	ands	r3, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6852      	ldr	r2, [r2, #4]
 8005908:	0611      	lsls	r1, r2, #24
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68d2      	ldr	r2, [r2, #12]
 800590e:	4311      	orrs	r1, r2
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	69d2      	ldr	r2, [r2, #28]
 8005914:	4311      	orrs	r1, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6a12      	ldr	r2, [r2, #32]
 800591a:	4311      	orrs	r1, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	430b      	orrs	r3, r1
 8005922:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	4b12      	ldr	r3, [pc, #72]	; (8005974 <HAL_QSPI_Init+0xe4>)
 800592c:	4013      	ands	r3, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6912      	ldr	r2, [r2, #16]
 8005932:	0411      	lsls	r1, r2, #16
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6952      	ldr	r2, [r2, #20]
 8005938:	4311      	orrs	r1, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6992      	ldr	r2, [r2, #24]
 800593e:	4311      	orrs	r1, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	430b      	orrs	r3, r1
 8005946:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005966:	7afb      	ldrb	r3, [r7, #11]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	00ffff2f 	.word	0x00ffff2f
 8005974:	ffe0f8fe 	.word	0xffe0f8fe

08005978 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80059a4:	e01a      	b.n	80059dc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d016      	beq.n	80059dc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ae:	f7fc fff3 	bl	8002998 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2204      	movs	r2, #4
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d0:	f043 0201 	orr.w	r2, r3, #1
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e00e      	b.n	80059fa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bf14      	ite	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	2300      	moveq	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1d6      	bne.n	80059a6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08c      	sub	sp, #48	; 0x30
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f000 bc1d 	b.w	8006252 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 8087 	beq.w	8005b34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a26:	4b99      	ldr	r3, [pc, #612]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a30:	4b96      	ldr	r3, [pc, #600]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d007      	beq.n	8005a4c <HAL_RCC_OscConfig+0x48>
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	2b18      	cmp	r3, #24
 8005a40:	d110      	bne.n	8005a64 <HAL_RCC_OscConfig+0x60>
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d10b      	bne.n	8005a64 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4c:	4b8f      	ldr	r3, [pc, #572]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d06c      	beq.n	8005b32 <HAL_RCC_OscConfig+0x12e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d168      	bne.n	8005b32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e3f6      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d106      	bne.n	8005a7c <HAL_RCC_OscConfig+0x78>
 8005a6e:	4b87      	ldr	r3, [pc, #540]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a86      	ldr	r2, [pc, #536]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e02e      	b.n	8005ada <HAL_RCC_OscConfig+0xd6>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10c      	bne.n	8005a9e <HAL_RCC_OscConfig+0x9a>
 8005a84:	4b81      	ldr	r3, [pc, #516]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a80      	ldr	r2, [pc, #512]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	4b7e      	ldr	r3, [pc, #504]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a7d      	ldr	r2, [pc, #500]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	e01d      	b.n	8005ada <HAL_RCC_OscConfig+0xd6>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_RCC_OscConfig+0xbe>
 8005aa8:	4b78      	ldr	r3, [pc, #480]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a77      	ldr	r2, [pc, #476]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	4b75      	ldr	r3, [pc, #468]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a74      	ldr	r2, [pc, #464]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	e00b      	b.n	8005ada <HAL_RCC_OscConfig+0xd6>
 8005ac2:	4b72      	ldr	r3, [pc, #456]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a71      	ldr	r2, [pc, #452]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	4b6f      	ldr	r3, [pc, #444]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a6e      	ldr	r2, [pc, #440]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d013      	beq.n	8005b0a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae2:	f7fc ff59 	bl	8002998 <HAL_GetTick>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aea:	f7fc ff55 	bl	8002998 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b64      	cmp	r3, #100	; 0x64
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e3aa      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005afc:	4b63      	ldr	r3, [pc, #396]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0xe6>
 8005b08:	e014      	b.n	8005b34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0a:	f7fc ff45 	bl	8002998 <HAL_GetTick>
 8005b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b12:	f7fc ff41 	bl	8002998 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b64      	cmp	r3, #100	; 0x64
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e396      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b24:	4b59      	ldr	r3, [pc, #356]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f0      	bne.n	8005b12 <HAL_RCC_OscConfig+0x10e>
 8005b30:	e000      	b.n	8005b34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80cb 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b42:	4b52      	ldr	r3, [pc, #328]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b4a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b4c:	4b4f      	ldr	r3, [pc, #316]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_RCC_OscConfig+0x164>
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	2b18      	cmp	r3, #24
 8005b5c:	d156      	bne.n	8005c0c <HAL_RCC_OscConfig+0x208>
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	f003 0303 	and.w	r3, r3, #3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d151      	bne.n	8005c0c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b68:	4b48      	ldr	r3, [pc, #288]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <HAL_RCC_OscConfig+0x17c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e368      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b80:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f023 0219 	bic.w	r2, r3, #25
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	493f      	ldr	r1, [pc, #252]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b92:	f7fc ff01 	bl	8002998 <HAL_GetTick>
 8005b96:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b9a:	f7fc fefd 	bl	8002998 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e352      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bac:	4b37      	ldr	r3, [pc, #220]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0f0      	beq.n	8005b9a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb8:	f7fc ff1e 	bl	80029f8 <HAL_GetREVID>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d817      	bhi.n	8005bf6 <HAL_RCC_OscConfig+0x1f2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d108      	bne.n	8005be0 <HAL_RCC_OscConfig+0x1dc>
 8005bce:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005bd6:	4a2d      	ldr	r2, [pc, #180]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bdc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bde:	e07b      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be0:	4b2a      	ldr	r3, [pc, #168]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	4927      	ldr	r1, [pc, #156]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bf4:	e070      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf6:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	4921      	ldr	r1, [pc, #132]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c0a:	e065      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d048      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c14:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f023 0219 	bic.w	r2, r3, #25
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	491a      	ldr	r1, [pc, #104]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c26:	f7fc feb7 	bl	8002998 <HAL_GetTick>
 8005c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c2e:	f7fc feb3 	bl	8002998 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e308      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c40:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4c:	f7fc fed4 	bl	80029f8 <HAL_GetREVID>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d81a      	bhi.n	8005c90 <HAL_RCC_OscConfig+0x28c>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d108      	bne.n	8005c74 <HAL_RCC_OscConfig+0x270>
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c6a:	4a08      	ldr	r2, [pc, #32]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c70:	6053      	str	r3, [r2, #4]
 8005c72:	e031      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	031b      	lsls	r3, r3, #12
 8005c82:	4902      	ldr	r1, [pc, #8]	; (8005c8c <HAL_RCC_OscConfig+0x288>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	604b      	str	r3, [r1, #4]
 8005c88:	e026      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
 8005c8a:	bf00      	nop
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	4b9a      	ldr	r3, [pc, #616]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	061b      	lsls	r3, r3, #24
 8005c9e:	4997      	ldr	r1, [pc, #604]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	604b      	str	r3, [r1, #4]
 8005ca4:	e018      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ca6:	4b95      	ldr	r3, [pc, #596]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a94      	ldr	r2, [pc, #592]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fc fe71 	bl	8002998 <HAL_GetTick>
 8005cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cba:	f7fc fe6d 	bl	8002998 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e2c2      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ccc:	4b8b      	ldr	r3, [pc, #556]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f0      	bne.n	8005cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80a9 	beq.w	8005e38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce6:	4b85      	ldr	r3, [pc, #532]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cf0:	4b82      	ldr	r3, [pc, #520]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d007      	beq.n	8005d0c <HAL_RCC_OscConfig+0x308>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b18      	cmp	r3, #24
 8005d00:	d13a      	bne.n	8005d78 <HAL_RCC_OscConfig+0x374>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d135      	bne.n	8005d78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d0c:	4b7b      	ldr	r3, [pc, #492]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_OscConfig+0x320>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	2b80      	cmp	r3, #128	; 0x80
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e296      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d24:	f7fc fe68 	bl	80029f8 <HAL_GetREVID>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d817      	bhi.n	8005d62 <HAL_RCC_OscConfig+0x35e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d108      	bne.n	8005d4c <HAL_RCC_OscConfig+0x348>
 8005d3a:	4b70      	ldr	r3, [pc, #448]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d42:	4a6e      	ldr	r2, [pc, #440]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d4a:	e075      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d4c:	4b6b      	ldr	r3, [pc, #428]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	069b      	lsls	r3, r3, #26
 8005d5a:	4968      	ldr	r1, [pc, #416]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d60:	e06a      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d62:	4b66      	ldr	r3, [pc, #408]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	4962      	ldr	r1, [pc, #392]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d76:	e05f      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d042      	beq.n	8005e06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d80:	4b5e      	ldr	r3, [pc, #376]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5d      	ldr	r2, [pc, #372]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fc fe04 	bl	8002998 <HAL_GetTick>
 8005d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d94:	f7fc fe00 	bl	8002998 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e255      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005da6:	4b55      	ldr	r3, [pc, #340]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f0      	beq.n	8005d94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005db2:	f7fc fe21 	bl	80029f8 <HAL_GetREVID>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d817      	bhi.n	8005df0 <HAL_RCC_OscConfig+0x3ec>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d108      	bne.n	8005dda <HAL_RCC_OscConfig+0x3d6>
 8005dc8:	4b4c      	ldr	r3, [pc, #304]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005dd0:	4a4a      	ldr	r2, [pc, #296]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dd6:	6053      	str	r3, [r2, #4]
 8005dd8:	e02e      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
 8005dda:	4b48      	ldr	r3, [pc, #288]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	069b      	lsls	r3, r3, #26
 8005de8:	4944      	ldr	r1, [pc, #272]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	604b      	str	r3, [r1, #4]
 8005dee:	e023      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
 8005df0:	4b42      	ldr	r3, [pc, #264]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	493f      	ldr	r1, [pc, #252]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60cb      	str	r3, [r1, #12]
 8005e04:	e018      	b.n	8005e38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e06:	4b3d      	ldr	r3, [pc, #244]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e12:	f7fc fdc1 	bl	8002998 <HAL_GetTick>
 8005e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e1a:	f7fc fdbd 	bl	8002998 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e212      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e2c:	4b33      	ldr	r3, [pc, #204]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f0      	bne.n	8005e1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d036      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d019      	beq.n	8005e80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e4c:	4b2b      	ldr	r3, [pc, #172]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e50:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fc fd9e 	bl	8002998 <HAL_GetTick>
 8005e5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e60:	f7fc fd9a 	bl	8002998 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e1ef      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e72:	4b22      	ldr	r3, [pc, #136]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x45c>
 8005e7e:	e018      	b.n	8005eb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e80:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e84:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fc fd84 	bl	8002998 <HAL_GetTick>
 8005e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fc fd80 	bl	8002998 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e1d5      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ea6:	4b15      	ldr	r3, [pc, #84]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d039      	beq.n	8005f32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01c      	beq.n	8005f00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a0c      	ldr	r2, [pc, #48]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ed0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ed2:	f7fc fd61 	bl	8002998 <HAL_GetTick>
 8005ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005eda:	f7fc fd5d 	bl	8002998 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e1b2      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005eec:	4b03      	ldr	r3, [pc, #12]	; (8005efc <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x4d6>
 8005ef8:	e01b      	b.n	8005f32 <HAL_RCC_OscConfig+0x52e>
 8005efa:	bf00      	nop
 8005efc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f00:	4b9b      	ldr	r3, [pc, #620]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a9a      	ldr	r2, [pc, #616]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f0c:	f7fc fd44 	bl	8002998 <HAL_GetTick>
 8005f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005f14:	f7fc fd40 	bl	8002998 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e195      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f26:	4b92      	ldr	r3, [pc, #584]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8081 	beq.w	8006042 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f40:	4b8c      	ldr	r3, [pc, #560]	; (8006174 <HAL_RCC_OscConfig+0x770>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a8b      	ldr	r2, [pc, #556]	; (8006174 <HAL_RCC_OscConfig+0x770>)
 8005f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f4c:	f7fc fd24 	bl	8002998 <HAL_GetTick>
 8005f50:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f54:	f7fc fd20 	bl	8002998 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b64      	cmp	r3, #100	; 0x64
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e175      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f66:	4b83      	ldr	r3, [pc, #524]	; (8006174 <HAL_RCC_OscConfig+0x770>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d106      	bne.n	8005f88 <HAL_RCC_OscConfig+0x584>
 8005f7a:	4b7d      	ldr	r3, [pc, #500]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	4a7c      	ldr	r2, [pc, #496]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	6713      	str	r3, [r2, #112]	; 0x70
 8005f86:	e02d      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5e0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10c      	bne.n	8005faa <HAL_RCC_OscConfig+0x5a6>
 8005f90:	4b77      	ldr	r3, [pc, #476]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a76      	ldr	r2, [pc, #472]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9c:	4b74      	ldr	r3, [pc, #464]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a73      	ldr	r2, [pc, #460]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fa2:	f023 0304 	bic.w	r3, r3, #4
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa8:	e01c      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5e0>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x5c8>
 8005fb2:	4b6f      	ldr	r3, [pc, #444]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	4a6e      	ldr	r2, [pc, #440]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	f043 0304 	orr.w	r3, r3, #4
 8005fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fbe:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	4a6b      	ldr	r2, [pc, #428]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fca:	e00b      	b.n	8005fe4 <HAL_RCC_OscConfig+0x5e0>
 8005fcc:	4b68      	ldr	r3, [pc, #416]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	4a67      	ldr	r2, [pc, #412]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd8:	4b65      	ldr	r3, [pc, #404]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fdc:	4a64      	ldr	r2, [pc, #400]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8005fde:	f023 0304 	bic.w	r3, r3, #4
 8005fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d015      	beq.n	8006018 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fc fcd4 	bl	8002998 <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ff2:	e00a      	b.n	800600a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff4:	f7fc fcd0 	bl	8002998 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e123      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800600a:	4b59      	ldr	r3, [pc, #356]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0ee      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x5f0>
 8006016:	e014      	b.n	8006042 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006018:	f7fc fcbe 	bl	8002998 <HAL_GetTick>
 800601c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800601e:	e00a      	b.n	8006036 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006020:	f7fc fcba 	bl	8002998 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	; 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e10d      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006036:	4b4e      	ldr	r3, [pc, #312]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1ee      	bne.n	8006020 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 8102 	beq.w	8006250 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800604c:	4b48      	ldr	r3, [pc, #288]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006054:	2b18      	cmp	r3, #24
 8006056:	f000 80bd 	beq.w	80061d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2b02      	cmp	r3, #2
 8006060:	f040 809e 	bne.w	80061a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006064:	4b42      	ldr	r3, [pc, #264]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a41      	ldr	r2, [pc, #260]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800606a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fc fc92 	bl	8002998 <HAL_GetTick>
 8006074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006078:	f7fc fc8e 	bl	8002998 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e0e3      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800608a:	4b39      	ldr	r3, [pc, #228]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006096:	4b36      	ldr	r3, [pc, #216]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800609a:	4b37      	ldr	r3, [pc, #220]	; (8006178 <HAL_RCC_OscConfig+0x774>)
 800609c:	4013      	ands	r3, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	430a      	orrs	r2, r1
 80060aa:	4931      	ldr	r1, [pc, #196]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	628b      	str	r3, [r1, #40]	; 0x28
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	3b01      	subs	r3, #1
 80060b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	3b01      	subs	r3, #1
 80060c0:	025b      	lsls	r3, r3, #9
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	3b01      	subs	r3, #1
 80060cc:	041b      	lsls	r3, r3, #16
 80060ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d8:	3b01      	subs	r3, #1
 80060da:	061b      	lsls	r3, r3, #24
 80060dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060e0:	4923      	ldr	r1, [pc, #140]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80060e6:	4b22      	ldr	r3, [pc, #136]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ea:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060f2:	4b1f      	ldr	r3, [pc, #124]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 80060f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f6:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_RCC_OscConfig+0x778>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060fe:	00d2      	lsls	r2, r2, #3
 8006100:	491b      	ldr	r1, [pc, #108]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006102:	4313      	orrs	r3, r2
 8006104:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	f023 020c 	bic.w	r2, r3, #12
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	4917      	ldr	r1, [pc, #92]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006118:	4b15      	ldr	r3, [pc, #84]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	f023 0202 	bic.w	r2, r3, #2
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006124:	4912      	ldr	r1, [pc, #72]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006126:	4313      	orrs	r3, r2
 8006128:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800612a:	4b11      	ldr	r3, [pc, #68]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	4a10      	ldr	r2, [pc, #64]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006134:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	4a0d      	ldr	r2, [pc, #52]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800613c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006140:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006142:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800614c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800614e:	4b08      	ldr	r3, [pc, #32]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	4a07      	ldr	r2, [pc, #28]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a04      	ldr	r2, [pc, #16]	; (8006170 <HAL_RCC_OscConfig+0x76c>)
 8006160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006166:	f7fc fc17 	bl	8002998 <HAL_GetTick>
 800616a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800616c:	e011      	b.n	8006192 <HAL_RCC_OscConfig+0x78e>
 800616e:	bf00      	nop
 8006170:	58024400 	.word	0x58024400
 8006174:	58024800 	.word	0x58024800
 8006178:	fffffc0c 	.word	0xfffffc0c
 800617c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006180:	f7fc fc0a 	bl	8002998 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e05f      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006192:	4b32      	ldr	r3, [pc, #200]	; (800625c <HAL_RCC_OscConfig+0x858>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x77c>
 800619e:	e057      	b.n	8006250 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a0:	4b2e      	ldr	r3, [pc, #184]	; (800625c <HAL_RCC_OscConfig+0x858>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a2d      	ldr	r2, [pc, #180]	; (800625c <HAL_RCC_OscConfig+0x858>)
 80061a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fc fbf4 	bl	8002998 <HAL_GetTick>
 80061b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fc fbf0 	bl	8002998 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e045      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061c6:	4b25      	ldr	r3, [pc, #148]	; (800625c <HAL_RCC_OscConfig+0x858>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x7b0>
 80061d2:	e03d      	b.n	8006250 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061d4:	4b21      	ldr	r3, [pc, #132]	; (800625c <HAL_RCC_OscConfig+0x858>)
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061da:	4b20      	ldr	r3, [pc, #128]	; (800625c <HAL_RCC_OscConfig+0x858>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d031      	beq.n	800624c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f003 0203 	and.w	r2, r3, #3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d12a      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d122      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d11a      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	0a5b      	lsrs	r3, r3, #9
 800621a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006222:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d111      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	0c1b      	lsrs	r3, r3, #16
 800622c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d108      	bne.n	800624c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	0e1b      	lsrs	r3, r3, #24
 800623e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3730      	adds	r7, #48	; 0x30
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	58024400 	.word	0x58024400

08006260 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e19c      	b.n	80065ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006274:	4b8a      	ldr	r3, [pc, #552]	; (80064a0 <HAL_RCC_ClockConfig+0x240>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d910      	bls.n	80062a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b87      	ldr	r3, [pc, #540]	; (80064a0 <HAL_RCC_ClockConfig+0x240>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f023 020f 	bic.w	r2, r3, #15
 800628a:	4985      	ldr	r1, [pc, #532]	; (80064a0 <HAL_RCC_ClockConfig+0x240>)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	4313      	orrs	r3, r2
 8006290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	4b83      	ldr	r3, [pc, #524]	; (80064a0 <HAL_RCC_ClockConfig+0x240>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e184      	b.n	80065ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d010      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	4b7b      	ldr	r3, [pc, #492]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062bc:	429a      	cmp	r2, r3
 80062be:	d908      	bls.n	80062d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062c0:	4b78      	ldr	r3, [pc, #480]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	4975      	ldr	r1, [pc, #468]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d010      	beq.n	8006300 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	4b70      	ldr	r3, [pc, #448]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d908      	bls.n	8006300 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062ee:	4b6d      	ldr	r3, [pc, #436]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	496a      	ldr	r1, [pc, #424]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	d010      	beq.n	800632e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699a      	ldr	r2, [r3, #24]
 8006310:	4b64      	ldr	r3, [pc, #400]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006318:	429a      	cmp	r2, r3
 800631a:	d908      	bls.n	800632e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800631c:	4b61      	ldr	r3, [pc, #388]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	495e      	ldr	r1, [pc, #376]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 800632a:	4313      	orrs	r3, r2
 800632c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0320 	and.w	r3, r3, #32
 8006336:	2b00      	cmp	r3, #0
 8006338:	d010      	beq.n	800635c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69da      	ldr	r2, [r3, #28]
 800633e:	4b59      	ldr	r3, [pc, #356]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006346:	429a      	cmp	r2, r3
 8006348:	d908      	bls.n	800635c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800634a:	4b56      	ldr	r3, [pc, #344]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	4953      	ldr	r1, [pc, #332]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 8006358:	4313      	orrs	r3, r2
 800635a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	4b4d      	ldr	r3, [pc, #308]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	429a      	cmp	r2, r3
 8006376:	d908      	bls.n	800638a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006378:	4b4a      	ldr	r3, [pc, #296]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f023 020f 	bic.w	r2, r3, #15
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4947      	ldr	r1, [pc, #284]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 8006386:	4313      	orrs	r3, r2
 8006388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d055      	beq.n	8006442 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006396:	4b43      	ldr	r3, [pc, #268]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	4940      	ldr	r1, [pc, #256]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d107      	bne.n	80063c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063b0:	4b3c      	ldr	r3, [pc, #240]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d121      	bne.n	8006400 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0f6      	b.n	80065ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d107      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063c8:	4b36      	ldr	r3, [pc, #216]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d115      	bne.n	8006400 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0ea      	b.n	80065ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d107      	bne.n	80063f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063e0:	4b30      	ldr	r3, [pc, #192]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d109      	bne.n	8006400 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0de      	b.n	80065ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063f0:	4b2c      	ldr	r3, [pc, #176]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0d6      	b.n	80065ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006400:	4b28      	ldr	r3, [pc, #160]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f023 0207 	bic.w	r2, r3, #7
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	4925      	ldr	r1, [pc, #148]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 800640e:	4313      	orrs	r3, r2
 8006410:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006412:	f7fc fac1 	bl	8002998 <HAL_GetTick>
 8006416:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006418:	e00a      	b.n	8006430 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800641a:	f7fc fabd 	bl	8002998 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	f241 3288 	movw	r2, #5000	; 0x1388
 8006428:	4293      	cmp	r3, r2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e0be      	b.n	80065ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006430:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	429a      	cmp	r2, r3
 8006440:	d1eb      	bne.n	800641a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	4b14      	ldr	r3, [pc, #80]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	429a      	cmp	r2, r3
 800645c:	d208      	bcs.n	8006470 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f023 020f 	bic.w	r2, r3, #15
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	490e      	ldr	r1, [pc, #56]	; (80064a4 <HAL_RCC_ClockConfig+0x244>)
 800646c:	4313      	orrs	r3, r2
 800646e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <HAL_RCC_ClockConfig+0x240>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d214      	bcs.n	80064a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647e:	4b08      	ldr	r3, [pc, #32]	; (80064a0 <HAL_RCC_ClockConfig+0x240>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f023 020f 	bic.w	r2, r3, #15
 8006486:	4906      	ldr	r1, [pc, #24]	; (80064a0 <HAL_RCC_ClockConfig+0x240>)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	4313      	orrs	r3, r2
 800648c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800648e:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <HAL_RCC_ClockConfig+0x240>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d005      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e086      	b.n	80065ae <HAL_RCC_ClockConfig+0x34e>
 80064a0:	52002000 	.word	0x52002000
 80064a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d010      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	4b3f      	ldr	r3, [pc, #252]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d208      	bcs.n	80064d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064c4:	4b3c      	ldr	r3, [pc, #240]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	4939      	ldr	r1, [pc, #228]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d010      	beq.n	8006504 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	4b34      	ldr	r3, [pc, #208]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d208      	bcs.n	8006504 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064f2:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	492e      	ldr	r1, [pc, #184]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 8006500:	4313      	orrs	r3, r2
 8006502:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	4b28      	ldr	r3, [pc, #160]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800651c:	429a      	cmp	r2, r3
 800651e:	d208      	bcs.n	8006532 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006520:	4b25      	ldr	r3, [pc, #148]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	4922      	ldr	r1, [pc, #136]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 800652e:	4313      	orrs	r3, r2
 8006530:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	d010      	beq.n	8006560 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69da      	ldr	r2, [r3, #28]
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800654a:	429a      	cmp	r2, r3
 800654c:	d208      	bcs.n	8006560 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800654e:	4b1a      	ldr	r3, [pc, #104]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	4917      	ldr	r1, [pc, #92]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 800655c:	4313      	orrs	r3, r2
 800655e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006560:	f000 f834 	bl	80065cc <HAL_RCC_GetSysClockFreq>
 8006564:	4602      	mov	r2, r0
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	4912      	ldr	r1, [pc, #72]	; (80065bc <HAL_RCC_ClockConfig+0x35c>)
 8006572:	5ccb      	ldrb	r3, [r1, r3]
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	fa22 f303 	lsr.w	r3, r2, r3
 800657c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800657e:	4b0e      	ldr	r3, [pc, #56]	; (80065b8 <HAL_RCC_ClockConfig+0x358>)
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	4a0d      	ldr	r2, [pc, #52]	; (80065bc <HAL_RCC_ClockConfig+0x35c>)
 8006588:	5cd3      	ldrb	r3, [r2, r3]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <HAL_RCC_ClockConfig+0x360>)
 8006596:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006598:	4a0a      	ldr	r2, [pc, #40]	; (80065c4 <HAL_RCC_ClockConfig+0x364>)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <HAL_RCC_ClockConfig+0x368>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fc f9ae 	bl	8002904 <HAL_InitTick>
 80065a8:	4603      	mov	r3, r0
 80065aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	58024400 	.word	0x58024400
 80065bc:	0800bab4 	.word	0x0800bab4
 80065c0:	24000004 	.word	0x24000004
 80065c4:	24000000 	.word	0x24000000
 80065c8:	24000008 	.word	0x24000008

080065cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b089      	sub	sp, #36	; 0x24
 80065d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065d2:	4bb3      	ldr	r3, [pc, #716]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065da:	2b18      	cmp	r3, #24
 80065dc:	f200 8155 	bhi.w	800688a <HAL_RCC_GetSysClockFreq+0x2be>
 80065e0:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80065e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e6:	bf00      	nop
 80065e8:	0800664d 	.word	0x0800664d
 80065ec:	0800688b 	.word	0x0800688b
 80065f0:	0800688b 	.word	0x0800688b
 80065f4:	0800688b 	.word	0x0800688b
 80065f8:	0800688b 	.word	0x0800688b
 80065fc:	0800688b 	.word	0x0800688b
 8006600:	0800688b 	.word	0x0800688b
 8006604:	0800688b 	.word	0x0800688b
 8006608:	08006673 	.word	0x08006673
 800660c:	0800688b 	.word	0x0800688b
 8006610:	0800688b 	.word	0x0800688b
 8006614:	0800688b 	.word	0x0800688b
 8006618:	0800688b 	.word	0x0800688b
 800661c:	0800688b 	.word	0x0800688b
 8006620:	0800688b 	.word	0x0800688b
 8006624:	0800688b 	.word	0x0800688b
 8006628:	08006679 	.word	0x08006679
 800662c:	0800688b 	.word	0x0800688b
 8006630:	0800688b 	.word	0x0800688b
 8006634:	0800688b 	.word	0x0800688b
 8006638:	0800688b 	.word	0x0800688b
 800663c:	0800688b 	.word	0x0800688b
 8006640:	0800688b 	.word	0x0800688b
 8006644:	0800688b 	.word	0x0800688b
 8006648:	0800667f 	.word	0x0800667f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800664c:	4b94      	ldr	r3, [pc, #592]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d009      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006658:	4b91      	ldr	r3, [pc, #580]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	08db      	lsrs	r3, r3, #3
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	4a90      	ldr	r2, [pc, #576]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
 8006668:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800666a:	e111      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800666c:	4b8d      	ldr	r3, [pc, #564]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800666e:	61bb      	str	r3, [r7, #24]
    break;
 8006670:	e10e      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006672:	4b8d      	ldr	r3, [pc, #564]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006674:	61bb      	str	r3, [r7, #24]
    break;
 8006676:	e10b      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006678:	4b8c      	ldr	r3, [pc, #560]	; (80068ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800667a:	61bb      	str	r3, [r7, #24]
    break;
 800667c:	e108      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800667e:	4b88      	ldr	r3, [pc, #544]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006688:	4b85      	ldr	r3, [pc, #532]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	091b      	lsrs	r3, r3, #4
 800668e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006692:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006694:	4b82      	ldr	r3, [pc, #520]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800669e:	4b80      	ldr	r3, [pc, #512]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a2:	08db      	lsrs	r3, r3, #3
 80066a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	fb02 f303 	mul.w	r3, r2, r3
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80e1 	beq.w	8006884 <HAL_RCC_GetSysClockFreq+0x2b8>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	f000 8083 	beq.w	80067d0 <HAL_RCC_GetSysClockFreq+0x204>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	f200 80a1 	bhi.w	8006814 <HAL_RCC_GetSysClockFreq+0x248>
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCC_GetSysClockFreq+0x114>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d056      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0x1c0>
 80066de:	e099      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066e0:	4b6f      	ldr	r3, [pc, #444]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d02d      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066ec:	4b6c      	ldr	r3, [pc, #432]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	08db      	lsrs	r3, r3, #3
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	4a6b      	ldr	r2, [pc, #428]	; (80068a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066f8:	fa22 f303 	lsr.w	r3, r2, r3
 80066fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	ee07 3a90 	vmov	s15, r3
 8006704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	ee07 3a90 	vmov	s15, r3
 800670e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006716:	4b62      	ldr	r3, [pc, #392]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006726:	ed97 6a02 	vldr	s12, [r7, #8]
 800672a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80068b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800672e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800673a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800673e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006742:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006746:	e087      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006752:	eddf 6a58 	vldr	s13, [pc, #352]	; 80068b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675a:	4b51      	ldr	r3, [pc, #324]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676a:	ed97 6a02 	vldr	s12, [r7, #8]
 800676e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80068b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800677e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800678a:	e065      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006796:	eddf 6a48 	vldr	s13, [pc, #288]	; 80068b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800679a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679e:	4b40      	ldr	r3, [pc, #256]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a6:	ee07 3a90 	vmov	s15, r3
 80067aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80067b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80068b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067ce:	e043      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80068bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80067de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e2:	4b2f      	ldr	r3, [pc, #188]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80068b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006812:	e021      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80068b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006826:	4b1e      	ldr	r3, [pc, #120]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006836:	ed97 6a02 	vldr	s12, [r7, #8]
 800683a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80068b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800683e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800684a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006856:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006858:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	0a5b      	lsrs	r3, r3, #9
 800685e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006862:	3301      	adds	r3, #1
 8006864:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006870:	edd7 6a07 	vldr	s13, [r7, #28]
 8006874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800687c:	ee17 3a90 	vmov	r3, s15
 8006880:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006882:	e005      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	61bb      	str	r3, [r7, #24]
    break;
 8006888:	e002      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800688c:	61bb      	str	r3, [r7, #24]
    break;
 800688e:	bf00      	nop
  }

  return sysclockfreq;
 8006890:	69bb      	ldr	r3, [r7, #24]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3724      	adds	r7, #36	; 0x24
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	58024400 	.word	0x58024400
 80068a4:	03d09000 	.word	0x03d09000
 80068a8:	003d0900 	.word	0x003d0900
 80068ac:	017d7840 	.word	0x017d7840
 80068b0:	46000000 	.word	0x46000000
 80068b4:	4c742400 	.word	0x4c742400
 80068b8:	4a742400 	.word	0x4a742400
 80068bc:	4bbebc20 	.word	0x4bbebc20

080068c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80068c6:	f7ff fe81 	bl	80065cc <HAL_RCC_GetSysClockFreq>
 80068ca:	4602      	mov	r2, r0
 80068cc:	4b10      	ldr	r3, [pc, #64]	; (8006910 <HAL_RCC_GetHCLKFreq+0x50>)
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	0a1b      	lsrs	r3, r3, #8
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	490f      	ldr	r1, [pc, #60]	; (8006914 <HAL_RCC_GetHCLKFreq+0x54>)
 80068d8:	5ccb      	ldrb	r3, [r1, r3]
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	fa22 f303 	lsr.w	r3, r2, r3
 80068e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068e4:	4b0a      	ldr	r3, [pc, #40]	; (8006910 <HAL_RCC_GetHCLKFreq+0x50>)
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f003 030f 	and.w	r3, r3, #15
 80068ec:	4a09      	ldr	r2, [pc, #36]	; (8006914 <HAL_RCC_GetHCLKFreq+0x54>)
 80068ee:	5cd3      	ldrb	r3, [r2, r3]
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	fa22 f303 	lsr.w	r3, r2, r3
 80068fa:	4a07      	ldr	r2, [pc, #28]	; (8006918 <HAL_RCC_GetHCLKFreq+0x58>)
 80068fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068fe:	4a07      	ldr	r2, [pc, #28]	; (800691c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006904:	4b04      	ldr	r3, [pc, #16]	; (8006918 <HAL_RCC_GetHCLKFreq+0x58>)
 8006906:	681b      	ldr	r3, [r3, #0]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	58024400 	.word	0x58024400
 8006914:	0800bab4 	.word	0x0800bab4
 8006918:	24000004 	.word	0x24000004
 800691c:	24000000 	.word	0x24000000

08006920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006924:	f7ff ffcc 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8006928:	4602      	mov	r2, r0
 800692a:	4b06      	ldr	r3, [pc, #24]	; (8006944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	091b      	lsrs	r3, r3, #4
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	4904      	ldr	r1, [pc, #16]	; (8006948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006936:	5ccb      	ldrb	r3, [r1, r3]
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	58024400 	.word	0x58024400
 8006948:	0800bab4 	.word	0x0800bab4

0800694c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006950:	f7ff ffb6 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 8006954:	4602      	mov	r2, r0
 8006956:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	0a1b      	lsrs	r3, r3, #8
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	4904      	ldr	r1, [pc, #16]	; (8006974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006962:	5ccb      	ldrb	r3, [r1, r3]
 8006964:	f003 031f 	and.w	r3, r3, #31
 8006968:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800696c:	4618      	mov	r0, r3
 800696e:	bd80      	pop	{r7, pc}
 8006970:	58024400 	.word	0x58024400
 8006974:	0800bab4 	.word	0x0800bab4

08006978 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006980:	2300      	movs	r3, #0
 8006982:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006984:	2300      	movs	r3, #0
 8006986:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d03f      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006998:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800699c:	d02a      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800699e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069a2:	d824      	bhi.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069a8:	d018      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069ae:	d81e      	bhi.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80069b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b8:	d007      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80069ba:	e018      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069bc:	4ba3      	ldr	r3, [pc, #652]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	4aa2      	ldr	r2, [pc, #648]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069c8:	e015      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3304      	adds	r3, #4
 80069ce:	2102      	movs	r1, #2
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 fff9 	bl	80089c8 <RCCEx_PLL2_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069da:	e00c      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3324      	adds	r3, #36	; 0x24
 80069e0:	2102      	movs	r1, #2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f002 f8a2 	bl	8008b2c <RCCEx_PLL3_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069ec:	e003      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	75fb      	strb	r3, [r7, #23]
      break;
 80069f2:	e000      	b.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80069f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d109      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069fc:	4b93      	ldr	r3, [pc, #588]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80069fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a08:	4990      	ldr	r1, [pc, #576]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	650b      	str	r3, [r1, #80]	; 0x50
 8006a0e:	e001      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a10:	7dfb      	ldrb	r3, [r7, #23]
 8006a12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d03d      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d826      	bhi.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a45 	.word	0x08006a45
 8006a34:	08006a53 	.word	0x08006a53
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	08006a7d 	.word	0x08006a7d
 8006a40:	08006a7d 	.word	0x08006a7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a44:	4b81      	ldr	r3, [pc, #516]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	4a80      	ldr	r2, [pc, #512]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a50:	e015      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3304      	adds	r3, #4
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 ffb5 	bl	80089c8 <RCCEx_PLL2_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a62:	e00c      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3324      	adds	r3, #36	; 0x24
 8006a68:	2100      	movs	r1, #0
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f002 f85e 	bl	8008b2c <RCCEx_PLL3_Config>
 8006a70:	4603      	mov	r3, r0
 8006a72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a74:	e003      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7a:	e000      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a84:	4b71      	ldr	r3, [pc, #452]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a88:	f023 0207 	bic.w	r2, r3, #7
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a90:	496e      	ldr	r1, [pc, #440]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	650b      	str	r3, [r1, #80]	; 0x50
 8006a96:	e001      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d042      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab0:	d02b      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab6:	d825      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ab8:	2bc0      	cmp	r3, #192	; 0xc0
 8006aba:	d028      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006abc:	2bc0      	cmp	r3, #192	; 0xc0
 8006abe:	d821      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ac0:	2b80      	cmp	r3, #128	; 0x80
 8006ac2:	d016      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006ac4:	2b80      	cmp	r3, #128	; 0x80
 8006ac6:	d81d      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	d007      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006ad0:	e018      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad2:	4b5e      	ldr	r3, [pc, #376]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	4a5d      	ldr	r2, [pc, #372]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006adc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006ade:	e017      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 ff6e 	bl	80089c8 <RCCEx_PLL2_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006af0:	e00e      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3324      	adds	r3, #36	; 0x24
 8006af6:	2100      	movs	r1, #0
 8006af8:	4618      	mov	r0, r3
 8006afa:	f002 f817 	bl	8008b2c <RCCEx_PLL3_Config>
 8006afe:	4603      	mov	r3, r0
 8006b00:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006b02:	e005      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	75fb      	strb	r3, [r7, #23]
      break;
 8006b08:	e002      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e000      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006b16:	4b4d      	ldr	r3, [pc, #308]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b22:	494a      	ldr	r1, [pc, #296]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	650b      	str	r3, [r1, #80]	; 0x50
 8006b28:	e001      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d049      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b44:	d030      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b4a:	d82a      	bhi.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b4c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b50:	d02c      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006b52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b56:	d824      	bhi.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b5c:	d018      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b62:	d81e      	bhi.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b6c:	d007      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006b6e:	e018      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b70:	4b36      	ldr	r3, [pc, #216]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	4a35      	ldr	r2, [pc, #212]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b7c:	e017      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3304      	adds	r3, #4
 8006b82:	2100      	movs	r1, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 ff1f 	bl	80089c8 <RCCEx_PLL2_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b8e:	e00e      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3324      	adds	r3, #36	; 0x24
 8006b94:	2100      	movs	r1, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 ffc8 	bl	8008b2c <RCCEx_PLL3_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ba0:	e005      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba6:	e002      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006bb4:	4b25      	ldr	r3, [pc, #148]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bc2:	4922      	ldr	r1, [pc, #136]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	658b      	str	r3, [r1, #88]	; 0x58
 8006bc8:	e001      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d04b      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006be4:	d030      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bea:	d82a      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006bec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bf0:	d02e      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006bf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bf6:	d824      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bfc:	d018      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c02:	d81e      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c0c:	d007      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006c0e:	e018      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c10:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c1c:	e019      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 fecf 	bl	80089c8 <RCCEx_PLL2_Config>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006c2e:	e010      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3324      	adds	r3, #36	; 0x24
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 ff78 	bl	8008b2c <RCCEx_PLL3_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c40:	e007      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
      break;
 8006c46:	e004      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006c48:	bf00      	nop
 8006c4a:	e002      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006c4c:	58024400 	.word	0x58024400
      break;
 8006c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c58:	4b99      	ldr	r3, [pc, #612]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c66:	4996      	ldr	r1, [pc, #600]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	658b      	str	r3, [r1, #88]	; 0x58
 8006c6c:	e001      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d032      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c82:	2b30      	cmp	r3, #48	; 0x30
 8006c84:	d01c      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006c86:	2b30      	cmp	r3, #48	; 0x30
 8006c88:	d817      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d00c      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d813      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d016      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006c96:	2b10      	cmp	r3, #16
 8006c98:	d10f      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c9a:	4b89      	ldr	r3, [pc, #548]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9e:	4a88      	ldr	r2, [pc, #544]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006ca6:	e00e      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3304      	adds	r3, #4
 8006cac:	2102      	movs	r1, #2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fe8a 	bl	80089c8 <RCCEx_PLL2_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006cb8:	e005      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cbe:	e002      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d109      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ccc:	4b7c      	ldr	r3, [pc, #496]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd8:	4979      	ldr	r1, [pc, #484]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cde:	e001      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d047      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf8:	d030      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cfe:	d82a      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d04:	d02c      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006d06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d0a:	d824      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d10:	d018      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d16:	d81e      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d20:	d007      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006d22:	e018      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d24:	4b66      	ldr	r3, [pc, #408]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	4a65      	ldr	r2, [pc, #404]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d30:	e017      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3304      	adds	r3, #4
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 fe45 	bl	80089c8 <RCCEx_PLL2_Config>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d42:	e00e      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3324      	adds	r3, #36	; 0x24
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 feee 	bl	8008b2c <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006d54:	e005      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5a:	e002      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006d5c:	bf00      	nop
 8006d5e:	e000      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d68:	4b55      	ldr	r3, [pc, #340]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d74:	4952      	ldr	r1, [pc, #328]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	650b      	str	r3, [r1, #80]	; 0x50
 8006d7a:	e001      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d049      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d94:	d02e      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006d96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d9a:	d828      	bhi.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006da0:	d02a      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006da2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006da6:	d822      	bhi.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006da8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dac:	d026      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006dae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006db2:	d81c      	bhi.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db8:	d010      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dbe:	d816      	bhi.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01d      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc8:	d111      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 fdf9 	bl	80089c8 <RCCEx_PLL2_Config>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006dda:	e012      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3324      	adds	r3, #36	; 0x24
 8006de0:	2101      	movs	r1, #1
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 fea2 	bl	8008b2c <RCCEx_PLL3_Config>
 8006de8:	4603      	mov	r3, r0
 8006dea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006dec:	e009      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	75fb      	strb	r3, [r7, #23]
      break;
 8006df2:	e006      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006df4:	bf00      	nop
 8006df6:	e004      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006df8:	bf00      	nop
 8006dfa:	e002      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006dfc:	bf00      	nop
 8006dfe:	e000      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e08:	4b2d      	ldr	r3, [pc, #180]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e14:	492a      	ldr	r1, [pc, #168]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	650b      	str	r3, [r1, #80]	; 0x50
 8006e1a:	e001      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d04d      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e36:	d02e      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e3c:	d828      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e42:	d02a      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e48:	d822      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e4e:	d026      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006e50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e54:	d81c      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e5a:	d010      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e60:	d816      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01d      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e6a:	d111      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	2101      	movs	r1, #1
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fda8 	bl	80089c8 <RCCEx_PLL2_Config>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e7c:	e012      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3324      	adds	r3, #36	; 0x24
 8006e82:	2101      	movs	r1, #1
 8006e84:	4618      	mov	r0, r3
 8006e86:	f001 fe51 	bl	8008b2c <RCCEx_PLL3_Config>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e8e:	e009      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	75fb      	strb	r3, [r7, #23]
      break;
 8006e94:	e006      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006e96:	bf00      	nop
 8006e98:	e004      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006e9a:	bf00      	nop
 8006e9c:	e002      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006eb8:	4901      	ldr	r1, [pc, #4]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	658b      	str	r3, [r1, #88]	; 0x58
 8006ebe:	e003      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
 8006ec6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d02f      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006edc:	d00e      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee2:	d814      	bhi.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d015      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eec:	d10f      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eee:	4baf      	ldr	r3, [pc, #700]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	4aae      	ldr	r2, [pc, #696]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006efa:	e00c      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3304      	adds	r3, #4
 8006f00:	2101      	movs	r1, #1
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 fd60 	bl	80089c8 <RCCEx_PLL2_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006f0c:	e003      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
      break;
 8006f12:	e000      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f1c:	4ba3      	ldr	r3, [pc, #652]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f28:	49a0      	ldr	r1, [pc, #640]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f2e:	e001      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d032      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d81b      	bhi.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f87 	.word	0x08006f87
 8006f54:	08006f61 	.word	0x08006f61
 8006f58:	08006f6f 	.word	0x08006f6f
 8006f5c:	08006f87 	.word	0x08006f87
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f60:	4b92      	ldr	r3, [pc, #584]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	4a91      	ldr	r2, [pc, #580]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f6c:	e00c      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3304      	adds	r3, #4
 8006f72:	2102      	movs	r1, #2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fd27 	bl	80089c8 <RCCEx_PLL2_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f7e:	e003      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
      break;
 8006f84:	e000      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f8e:	4b87      	ldr	r3, [pc, #540]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f92:	f023 0203 	bic.w	r2, r3, #3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9a:	4984      	ldr	r1, [pc, #528]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fa0:	e001      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 8086 	beq.w	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fb4:	4b7e      	ldr	r3, [pc, #504]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a7d      	ldr	r2, [pc, #500]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fc0:	f7fb fcea 	bl	8002998 <HAL_GetTick>
 8006fc4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fc6:	e009      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc8:	f7fb fce6 	bl	8002998 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b64      	cmp	r3, #100	; 0x64
 8006fd4:	d902      	bls.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	75fb      	strb	r3, [r7, #23]
        break;
 8006fda:	e005      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fdc:	4b74      	ldr	r3, [pc, #464]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0ef      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d166      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fee:	4b6f      	ldr	r3, [pc, #444]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ff0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ff8:	4053      	eors	r3, r2
 8006ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d013      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007002:	4b6a      	ldr	r3, [pc, #424]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800700c:	4b67      	ldr	r3, [pc, #412]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800700e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007010:	4a66      	ldr	r2, [pc, #408]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007016:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007018:	4b64      	ldr	r3, [pc, #400]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701c:	4a63      	ldr	r2, [pc, #396]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800701e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007022:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007024:	4a61      	ldr	r2, [pc, #388]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007034:	d115      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007036:	f7fb fcaf 	bl	8002998 <HAL_GetTick>
 800703a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800703c:	e00b      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800703e:	f7fb fcab 	bl	8002998 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	f241 3288 	movw	r2, #5000	; 0x1388
 800704c:	4293      	cmp	r3, r2
 800704e:	d902      	bls.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	75fb      	strb	r3, [r7, #23]
            break;
 8007054:	e005      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007056:	4b55      	ldr	r3, [pc, #340]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0ed      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d126      	bne.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800706e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007076:	d10d      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007078:	4b4c      	ldr	r3, [pc, #304]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007086:	0919      	lsrs	r1, r3, #4
 8007088:	4b4a      	ldr	r3, [pc, #296]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800708a:	400b      	ands	r3, r1
 800708c:	4947      	ldr	r1, [pc, #284]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800708e:	4313      	orrs	r3, r2
 8007090:	610b      	str	r3, [r1, #16]
 8007092:	e005      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007094:	4b45      	ldr	r3, [pc, #276]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	4a44      	ldr	r2, [pc, #272]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800709a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800709e:	6113      	str	r3, [r2, #16]
 80070a0:	4b42      	ldr	r3, [pc, #264]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80070a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ae:	493f      	ldr	r1, [pc, #252]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	670b      	str	r3, [r1, #112]	; 0x70
 80070b4:	e004      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
 80070b8:	75bb      	strb	r3, [r7, #22]
 80070ba:	e001      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8085 	beq.w	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070d2:	2b28      	cmp	r3, #40	; 0x28
 80070d4:	d866      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	080071b9 	.word	0x080071b9
 80070e0:	080071a5 	.word	0x080071a5
 80070e4:	080071a5 	.word	0x080071a5
 80070e8:	080071a5 	.word	0x080071a5
 80070ec:	080071a5 	.word	0x080071a5
 80070f0:	080071a5 	.word	0x080071a5
 80070f4:	080071a5 	.word	0x080071a5
 80070f8:	080071a5 	.word	0x080071a5
 80070fc:	08007181 	.word	0x08007181
 8007100:	080071a5 	.word	0x080071a5
 8007104:	080071a5 	.word	0x080071a5
 8007108:	080071a5 	.word	0x080071a5
 800710c:	080071a5 	.word	0x080071a5
 8007110:	080071a5 	.word	0x080071a5
 8007114:	080071a5 	.word	0x080071a5
 8007118:	080071a5 	.word	0x080071a5
 800711c:	08007193 	.word	0x08007193
 8007120:	080071a5 	.word	0x080071a5
 8007124:	080071a5 	.word	0x080071a5
 8007128:	080071a5 	.word	0x080071a5
 800712c:	080071a5 	.word	0x080071a5
 8007130:	080071a5 	.word	0x080071a5
 8007134:	080071a5 	.word	0x080071a5
 8007138:	080071a5 	.word	0x080071a5
 800713c:	080071b9 	.word	0x080071b9
 8007140:	080071a5 	.word	0x080071a5
 8007144:	080071a5 	.word	0x080071a5
 8007148:	080071a5 	.word	0x080071a5
 800714c:	080071a5 	.word	0x080071a5
 8007150:	080071a5 	.word	0x080071a5
 8007154:	080071a5 	.word	0x080071a5
 8007158:	080071a5 	.word	0x080071a5
 800715c:	080071b9 	.word	0x080071b9
 8007160:	080071a5 	.word	0x080071a5
 8007164:	080071a5 	.word	0x080071a5
 8007168:	080071a5 	.word	0x080071a5
 800716c:	080071a5 	.word	0x080071a5
 8007170:	080071a5 	.word	0x080071a5
 8007174:	080071a5 	.word	0x080071a5
 8007178:	080071a5 	.word	0x080071a5
 800717c:	080071b9 	.word	0x080071b9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3304      	adds	r3, #4
 8007184:	2101      	movs	r1, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f001 fc1e 	bl	80089c8 <RCCEx_PLL2_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007190:	e013      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3324      	adds	r3, #36	; 0x24
 8007196:	2101      	movs	r1, #1
 8007198:	4618      	mov	r0, r3
 800719a:	f001 fcc7 	bl	8008b2c <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80071a2:	e00a      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	75fb      	strb	r3, [r7, #23]
      break;
 80071a8:	e007      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 80071aa:	bf00      	nop
 80071ac:	58024400 	.word	0x58024400
 80071b0:	58024800 	.word	0x58024800
 80071b4:	00ffffcf 	.word	0x00ffffcf
      break;
 80071b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d109      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071c0:	4b96      	ldr	r3, [pc, #600]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071cc:	4993      	ldr	r1, [pc, #588]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	654b      	str	r3, [r1, #84]	; 0x54
 80071d2:	e001      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d038      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e8:	2b05      	cmp	r3, #5
 80071ea:	d821      	bhi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80071ec:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007237 	.word	0x08007237
 80071f8:	0800720d 	.word	0x0800720d
 80071fc:	0800721f 	.word	0x0800721f
 8007200:	08007237 	.word	0x08007237
 8007204:	08007237 	.word	0x08007237
 8007208:	08007237 	.word	0x08007237
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	2101      	movs	r1, #1
 8007212:	4618      	mov	r0, r3
 8007214:	f001 fbd8 	bl	80089c8 <RCCEx_PLL2_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800721c:	e00c      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3324      	adds	r3, #36	; 0x24
 8007222:	2101      	movs	r1, #1
 8007224:	4618      	mov	r0, r3
 8007226:	f001 fc81 	bl	8008b2c <RCCEx_PLL3_Config>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800722e:	e003      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	75fb      	strb	r3, [r7, #23]
      break;
 8007234:	e000      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800723e:	4b77      	ldr	r3, [pc, #476]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007242:	f023 0207 	bic.w	r2, r3, #7
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800724a:	4974      	ldr	r1, [pc, #464]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800724c:	4313      	orrs	r3, r2
 800724e:	654b      	str	r3, [r1, #84]	; 0x54
 8007250:	e001      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d03a      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007268:	2b05      	cmp	r3, #5
 800726a:	d821      	bhi.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800726c:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800726e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007272:	bf00      	nop
 8007274:	080072b7 	.word	0x080072b7
 8007278:	0800728d 	.word	0x0800728d
 800727c:	0800729f 	.word	0x0800729f
 8007280:	080072b7 	.word	0x080072b7
 8007284:	080072b7 	.word	0x080072b7
 8007288:	080072b7 	.word	0x080072b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	2101      	movs	r1, #1
 8007292:	4618      	mov	r0, r3
 8007294:	f001 fb98 	bl	80089c8 <RCCEx_PLL2_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800729c:	e00c      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3324      	adds	r3, #36	; 0x24
 80072a2:	2101      	movs	r1, #1
 80072a4:	4618      	mov	r0, r3
 80072a6:	f001 fc41 	bl	8008b2c <RCCEx_PLL3_Config>
 80072aa:	4603      	mov	r3, r0
 80072ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80072ae:	e003      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
      break;
 80072b4:	e000      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80072b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10a      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072be:	4b57      	ldr	r3, [pc, #348]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c2:	f023 0207 	bic.w	r2, r3, #7
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072cc:	4953      	ldr	r1, [pc, #332]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	658b      	str	r3, [r1, #88]	; 0x58
 80072d2:	e001      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d04b      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ee:	d02e      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80072f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072f4:	d828      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80072f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fa:	d02a      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007300:	d822      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007306:	d026      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800730c:	d81c      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800730e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007312:	d010      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007318:	d816      	bhi.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01d      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800731e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007322:	d111      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3304      	adds	r3, #4
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f001 fb4c 	bl	80089c8 <RCCEx_PLL2_Config>
 8007330:	4603      	mov	r3, r0
 8007332:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007334:	e012      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3324      	adds	r3, #36	; 0x24
 800733a:	2102      	movs	r1, #2
 800733c:	4618      	mov	r0, r3
 800733e:	f001 fbf5 	bl	8008b2c <RCCEx_PLL3_Config>
 8007342:	4603      	mov	r3, r0
 8007344:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007346:	e009      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	75fb      	strb	r3, [r7, #23]
      break;
 800734c:	e006      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800734e:	bf00      	nop
 8007350:	e004      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007352:	bf00      	nop
 8007354:	e002      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007356:	bf00      	nop
 8007358:	e000      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800735a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007362:	4b2e      	ldr	r3, [pc, #184]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007370:	492a      	ldr	r1, [pc, #168]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007372:	4313      	orrs	r3, r2
 8007374:	654b      	str	r3, [r1, #84]	; 0x54
 8007376:	e001      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d04d      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800738e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007392:	d02e      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007394:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007398:	d828      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d02a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80073a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a4:	d822      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80073a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073aa:	d026      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80073ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073b0:	d81c      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80073b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073b6:	d010      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80073b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073bc:	d816      	bhi.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01d      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c6:	d111      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 fafa 	bl	80089c8 <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073d8:	e012      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3324      	adds	r3, #36	; 0x24
 80073de:	2102      	movs	r1, #2
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 fba3 	bl	8008b2c <RCCEx_PLL3_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80073ea:	e009      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
      break;
 80073f0:	e006      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073f2:	bf00      	nop
 80073f4:	e004      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073f6:	bf00      	nop
 80073f8:	e002      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80073fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10c      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007414:	4901      	ldr	r1, [pc, #4]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007416:	4313      	orrs	r3, r2
 8007418:	658b      	str	r3, [r1, #88]	; 0x58
 800741a:	e003      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800741c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742c:	2b00      	cmp	r3, #0
 800742e:	d04b      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007436:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800743a:	d02e      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800743c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007440:	d828      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007446:	d02a      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800744c:	d822      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800744e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007452:	d026      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007454:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007458:	d81c      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800745a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800745e:	d010      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007464:	d816      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01d      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800746a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800746e:	d111      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3304      	adds	r3, #4
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f001 faa6 	bl	80089c8 <RCCEx_PLL2_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007480:	e012      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3324      	adds	r3, #36	; 0x24
 8007486:	2102      	movs	r1, #2
 8007488:	4618      	mov	r0, r3
 800748a:	f001 fb4f 	bl	8008b2c <RCCEx_PLL3_Config>
 800748e:	4603      	mov	r3, r0
 8007490:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007492:	e009      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	75fb      	strb	r3, [r7, #23]
      break;
 8007498:	e006      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800749a:	bf00      	nop
 800749c:	e004      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800749e:	bf00      	nop
 80074a0:	e002      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80074a2:	bf00      	nop
 80074a4:	e000      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80074a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80074ae:	4b9d      	ldr	r3, [pc, #628]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074bc:	4999      	ldr	r1, [pc, #612]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	658b      	str	r3, [r1, #88]	; 0x58
 80074c2:	e001      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01a      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074de:	d10a      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3324      	adds	r3, #36	; 0x24
 80074e4:	2102      	movs	r1, #2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f001 fb20 	bl	8008b2c <RCCEx_PLL3_Config>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80074f6:	4b8b      	ldr	r3, [pc, #556]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80074f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007504:	4987      	ldr	r1, [pc, #540]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007506:	4313      	orrs	r3, r2
 8007508:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01a      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800751c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007520:	d10a      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3324      	adds	r3, #36	; 0x24
 8007526:	2102      	movs	r1, #2
 8007528:	4618      	mov	r0, r3
 800752a:	f001 faff 	bl	8008b2c <RCCEx_PLL3_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007538:	4b7a      	ldr	r3, [pc, #488]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800753a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007546:	4977      	ldr	r1, [pc, #476]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007548:	4313      	orrs	r3, r2
 800754a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d034      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800755e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007562:	d01d      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007568:	d817      	bhi.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800756e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007572:	d009      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007574:	e011      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3304      	adds	r3, #4
 800757a:	2100      	movs	r1, #0
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fa23 	bl	80089c8 <RCCEx_PLL2_Config>
 8007582:	4603      	mov	r3, r0
 8007584:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007586:	e00c      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3324      	adds	r3, #36	; 0x24
 800758c:	2102      	movs	r1, #2
 800758e:	4618      	mov	r0, r3
 8007590:	f001 facc 	bl	8008b2c <RCCEx_PLL3_Config>
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007598:	e003      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	75fb      	strb	r3, [r7, #23]
      break;
 800759e:	e000      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80075a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075a8:	4b5e      	ldr	r3, [pc, #376]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075b6:	495b      	ldr	r1, [pc, #364]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	658b      	str	r3, [r1, #88]	; 0x58
 80075bc:	e001      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d033      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075d8:	d01c      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80075da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80075de:	d816      	bhi.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80075e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e4:	d003      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80075e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075ea:	d007      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80075ec:	e00f      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ee:	4b4d      	ldr	r3, [pc, #308]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	4a4c      	ldr	r2, [pc, #304]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80075f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80075fa:	e00c      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3324      	adds	r3, #36	; 0x24
 8007600:	2101      	movs	r1, #1
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fa92 	bl	8008b2c <RCCEx_PLL3_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800760c:	e003      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
      break;
 8007612:	e000      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800761c:	4b41      	ldr	r3, [pc, #260]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800762a:	493e      	ldr	r1, [pc, #248]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800762c:	4313      	orrs	r3, r2
 800762e:	654b      	str	r3, [r1, #84]	; 0x54
 8007630:	e001      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d029      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800764a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800764e:	d007      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007650:	e00f      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007652:	4b34      	ldr	r3, [pc, #208]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	4a33      	ldr	r2, [pc, #204]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800765c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800765e:	e00b      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	2102      	movs	r1, #2
 8007666:	4618      	mov	r0, r3
 8007668:	f001 f9ae 	bl	80089c8 <RCCEx_PLL2_Config>
 800766c:	4603      	mov	r3, r0
 800766e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007670:	e002      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	75fb      	strb	r3, [r7, #23]
      break;
 8007676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d109      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800767e:	4b29      	ldr	r3, [pc, #164]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007682:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768a:	4926      	ldr	r1, [pc, #152]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800768c:	4313      	orrs	r3, r2
 800768e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007690:	e001      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3324      	adds	r3, #36	; 0x24
 80076a6:	2102      	movs	r1, #2
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 fa3f 	bl	8008b2c <RCCEx_PLL3_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d033      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076cc:	d017      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80076ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076d2:	d811      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80076d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d8:	d013      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80076da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076de:	d80b      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d010      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80076e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e8:	d106      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ea:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ee:	4a0d      	ldr	r2, [pc, #52]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80076f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80076f6:	e007      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	75fb      	strb	r3, [r7, #23]
      break;
 80076fc:	e004      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10c      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771a:	4902      	ldr	r1, [pc, #8]	; (8007724 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800771c:	4313      	orrs	r3, r2
 800771e:	654b      	str	r3, [r1, #84]	; 0x54
 8007720:	e004      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007722:	bf00      	nop
 8007724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007738:	4b31      	ldr	r3, [pc, #196]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800773a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007744:	492e      	ldr	r1, [pc, #184]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007746:	4313      	orrs	r3, r2
 8007748:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d009      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007756:	4b2a      	ldr	r3, [pc, #168]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007764:	4926      	ldr	r1, [pc, #152]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007766:	4313      	orrs	r3, r2
 8007768:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d008      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007776:	4b22      	ldr	r3, [pc, #136]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007782:	491f      	ldr	r1, [pc, #124]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007784:	4313      	orrs	r3, r2
 8007786:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00d      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007794:	4b1a      	ldr	r3, [pc, #104]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	4a19      	ldr	r2, [pc, #100]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800779a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800779e:	6113      	str	r3, [r2, #16]
 80077a0:	4b17      	ldr	r3, [pc, #92]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80077aa:	4915      	ldr	r1, [pc, #84]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	da08      	bge.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80077b8:	4b11      	ldr	r3, [pc, #68]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c4:	490e      	ldr	r1, [pc, #56]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d009      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077d6:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e4:	4906      	ldr	r1, [pc, #24]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80077ea:	7dbb      	ldrb	r3, [r7, #22]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	e000      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	58024400 	.word	0x58024400

08007804 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b090      	sub	sp, #64	; 0x40
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007812:	f040 8095 	bne.w	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007816:	4b97      	ldr	r3, [pc, #604]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	2b04      	cmp	r3, #4
 8007824:	f200 8088 	bhi.w	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007845 	.word	0x08007845
 8007834:	0800786d 	.word	0x0800786d
 8007838:	08007895 	.word	0x08007895
 800783c:	08007931 	.word	0x08007931
 8007840:	080078bd 	.word	0x080078bd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007844:	4b8b      	ldr	r3, [pc, #556]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007850:	d108      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007856:	4618      	mov	r0, r3
 8007858:	f000 ff64 	bl	8008724 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007860:	f000 bc94 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007868:	f000 bc90 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800786c:	4b81      	ldr	r3, [pc, #516]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007878:	d108      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800787a:	f107 0318 	add.w	r3, r7, #24
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fca8 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007888:	f000 bc80 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007890:	f000 bc7c 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007894:	4b77      	ldr	r3, [pc, #476]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800789c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078a0:	d108      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078a2:	f107 030c 	add.w	r3, r7, #12
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 fde8 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80078b0:	f000 bc6c 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078b8:	f000 bc68 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078bc:	4b6d      	ldr	r3, [pc, #436]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078c6:	4b6b      	ldr	r3, [pc, #428]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d10c      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80078d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d109      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078d8:	4b66      	ldr	r3, [pc, #408]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	08db      	lsrs	r3, r3, #3
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	4a65      	ldr	r2, [pc, #404]	; (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80078e4:	fa22 f303 	lsr.w	r3, r2, r3
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ea:	e01f      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ec:	4b61      	ldr	r3, [pc, #388]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f8:	d106      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80078fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007900:	d102      	bne.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007902:	4b5e      	ldr	r3, [pc, #376]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007906:	e011      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007908:	4b5a      	ldr	r3, [pc, #360]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007914:	d106      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8007916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791c:	d102      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800791e:	4b58      	ldr	r3, [pc, #352]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007922:	e003      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007928:	f000 bc30 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800792c:	f000 bc2e 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007930:	4b54      	ldr	r3, [pc, #336]	; (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007932:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007934:	f000 bc2a 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800793c:	f000 bc26 	b.w	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007946:	f040 809f 	bne.w	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800794a:	4b4a      	ldr	r3, [pc, #296]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800794c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800794e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007952:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795a:	d04d      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007962:	f200 8084 	bhi.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	2bc0      	cmp	r3, #192	; 0xc0
 800796a:	d07d      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	2bc0      	cmp	r3, #192	; 0xc0
 8007970:	d87d      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	2b80      	cmp	r3, #128	; 0x80
 8007976:	d02d      	beq.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	2b80      	cmp	r3, #128	; 0x80
 800797c:	d877      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	d012      	beq.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800798a:	e070      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800798c:	4b39      	ldr	r3, [pc, #228]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007998:	d107      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800799a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fec0 	bl	8008724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079a8:	e3f0      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ae:	e3ed      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079b0:	4b30      	ldr	r3, [pc, #192]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079bc:	d107      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079be:	f107 0318 	add.w	r3, r7, #24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fc06 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079cc:	e3de      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80079ce:	2300      	movs	r3, #0
 80079d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d2:	e3db      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079d4:	4b27      	ldr	r3, [pc, #156]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079e0:	d107      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e2:	f107 030c 	add.w	r3, r7, #12
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fd48 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079f0:	e3cc      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079f6:	e3c9      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079f8:	4b1e      	ldr	r3, [pc, #120]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80079fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a02:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d10c      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d109      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a14:	4b17      	ldr	r3, [pc, #92]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	08db      	lsrs	r3, r3, #3
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	4a16      	ldr	r2, [pc, #88]	; (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007a20:	fa22 f303 	lsr.w	r3, r2, r3
 8007a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a26:	e01e      	b.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a28:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a34:	d106      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a3c:	d102      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007a3e:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a42:	e010      	b.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a44:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a50:	d106      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a58:	d102      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a5e:	e002      	b.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a64:	e392      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007a66:	e391      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a68:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a6c:	e38e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a72:	e38b      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007a74:	58024400 	.word	0x58024400
 8007a78:	03d09000 	.word	0x03d09000
 8007a7c:	003d0900 	.word	0x003d0900
 8007a80:	017d7840 	.word	0x017d7840
 8007a84:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a8e:	f040 809c 	bne.w	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007a92:	4b9d      	ldr	r3, [pc, #628]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a96:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007a9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aa2:	d054      	beq.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007aaa:	f200 808b 	bhi.w	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ab4:	f000 8083 	beq.w	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007abe:	f200 8081 	bhi.w	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ac8:	d02f      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad0:	d878      	bhi.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d004      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ade:	d012      	beq.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007ae0:	e070      	b.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ae2:	4b89      	ldr	r3, [pc, #548]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007aee:	d107      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fe15 	bl	8008724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007afe:	e345      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b04:	e342      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b06:	4b80      	ldr	r3, [pc, #512]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b12:	d107      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b14:	f107 0318 	add.w	r3, r7, #24
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 fb5b 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b22:	e333      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b28:	e330      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b2a:	4b77      	ldr	r3, [pc, #476]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b36:	d107      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b38:	f107 030c 	add.w	r3, r7, #12
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fc9d 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b46:	e321      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b4c:	e31e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b4e:	4b6e      	ldr	r3, [pc, #440]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b56:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b58:	4b6b      	ldr	r3, [pc, #428]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	d10c      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b6a:	4b67      	ldr	r3, [pc, #412]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	08db      	lsrs	r3, r3, #3
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	4a65      	ldr	r2, [pc, #404]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007b76:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b7c:	e01e      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b7e:	4b62      	ldr	r3, [pc, #392]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8a:	d106      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b92:	d102      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b94:	4b5e      	ldr	r3, [pc, #376]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b98:	e010      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b9a:	4b5b      	ldr	r3, [pc, #364]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ba6:	d106      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bae:	d102      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007bb0:	4b58      	ldr	r3, [pc, #352]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bb4:	e002      	b.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007bba:	e2e7      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007bbc:	e2e6      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bbe:	4b56      	ldr	r3, [pc, #344]	; (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc2:	e2e3      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc8:	e2e0      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd0:	f040 80a7 	bne.w	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007bd4:	4b4c      	ldr	r3, [pc, #304]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007bdc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007be4:	d055      	beq.n	8007c92 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bec:	f200 8096 	bhi.w	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bf6:	f000 8084 	beq.w	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c00:	f200 808c 	bhi.w	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c0a:	d030      	beq.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c12:	f200 8083 	bhi.w	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c22:	d012      	beq.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8007c24:	e07a      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c26:	4b38      	ldr	r3, [pc, #224]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c32:	d107      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fd73 	bl	8008724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c42:	e2a3      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c48:	e2a0      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c4a:	4b2f      	ldr	r3, [pc, #188]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c56:	d107      	bne.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c58:	f107 0318 	add.w	r3, r7, #24
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fab9 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8007c66:	e291      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c6c:	e28e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c6e:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c7a:	d107      	bne.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c7c:	f107 030c 	add.w	r3, r7, #12
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fbfb 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c8a:	e27f      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c90:	e27c      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c92:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c9c:	4b1a      	ldr	r3, [pc, #104]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	d10c      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cae:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	08db      	lsrs	r3, r3, #3
 8007cb4:	f003 0303 	and.w	r3, r3, #3
 8007cb8:	4a14      	ldr	r2, [pc, #80]	; (8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8007cba:	fa22 f303 	lsr.w	r3, r2, r3
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cc0:	e01e      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007cc2:	4b11      	ldr	r3, [pc, #68]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cce:	d106      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8007cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cd6:	d102      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007cd8:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cdc:	e010      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cea:	d106      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cf2:	d102      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007cf4:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf8:	e002      	b.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007cfe:	e245      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007d00:	e244      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d02:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d06:	e241      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007d08:	58024400 	.word	0x58024400
 8007d0c:	03d09000 	.word	0x03d09000
 8007d10:	003d0900 	.word	0x003d0900
 8007d14:	017d7840 	.word	0x017d7840
 8007d18:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d20:	e234      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d28:	f040 809c 	bne.w	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007d2c:	4b9b      	ldr	r3, [pc, #620]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d30:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d34:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d3c:	d054      	beq.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d44:	f200 808b 	bhi.w	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d4e:	f000 8083 	beq.w	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d58:	f200 8081 	bhi.w	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d62:	d02f      	beq.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6a:	d878      	bhi.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d004      	beq.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d78:	d012      	beq.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007d7a:	e070      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d7c:	4b87      	ldr	r3, [pc, #540]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d88:	d107      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fcc8 	bl	8008724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d98:	e1f8      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d9e:	e1f5      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007da0:	4b7e      	ldr	r3, [pc, #504]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dac:	d107      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dae:	f107 0318 	add.w	r3, r7, #24
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fa0e 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007dbc:	e1e6      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc2:	e1e3      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007dc4:	4b75      	ldr	r3, [pc, #468]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd0:	d107      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dd2:	f107 030c 	add.w	r3, r7, #12
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fb50 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007de0:	e1d4      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de6:	e1d1      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007de8:	4b6c      	ldr	r3, [pc, #432]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007df0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007df2:	4b6a      	ldr	r3, [pc, #424]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d10c      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d109      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e04:	4b65      	ldr	r3, [pc, #404]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	08db      	lsrs	r3, r3, #3
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	4a64      	ldr	r2, [pc, #400]	; (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007e10:	fa22 f303 	lsr.w	r3, r2, r3
 8007e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e16:	e01e      	b.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e18:	4b60      	ldr	r3, [pc, #384]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e24:	d106      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8007e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e2c:	d102      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e2e:	4b5d      	ldr	r3, [pc, #372]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e32:	e010      	b.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e34:	4b59      	ldr	r3, [pc, #356]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e40:	d106      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8007e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e48:	d102      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e4a:	4b57      	ldr	r3, [pc, #348]	; (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e4e:	e002      	b.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e54:	e19a      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007e56:	e199      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e58:	4b54      	ldr	r3, [pc, #336]	; (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e5c:	e196      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e62:	e193      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e6a:	d173      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007e6c:	4b4b      	ldr	r3, [pc, #300]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e7c:	d02f      	beq.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e84:	d863      	bhi.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d004      	beq.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e92:	d012      	beq.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007e94:	e05b      	b.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e96:	4b41      	ldr	r3, [pc, #260]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea2:	d107      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea4:	f107 0318 	add.w	r3, r7, #24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 f993 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007eb2:	e16b      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb8:	e168      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eba:	4b38      	ldr	r3, [pc, #224]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec6:	d107      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec8:	f107 030c 	add.w	r3, r7, #12
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fad5 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ed6:	e159      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007edc:	e156      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ede:	4b2f      	ldr	r3, [pc, #188]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ee8:	4b2c      	ldr	r3, [pc, #176]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d10c      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d109      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007efa:	4b28      	ldr	r3, [pc, #160]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	08db      	lsrs	r3, r3, #3
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	4a26      	ldr	r2, [pc, #152]	; (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f0c:	e01e      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f0e:	4b23      	ldr	r3, [pc, #140]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1a:	d106      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8007f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f22:	d102      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f24:	4b1f      	ldr	r3, [pc, #124]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f28:	e010      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f36:	d106      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8007f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f3e:	d102      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f40:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f44:	e002      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f4a:	e11f      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007f4c:	e11e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f52:	e11b      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5a:	d13e      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d004      	beq.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f72:	d01d      	beq.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007f74:	e02e      	b.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f76:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f82:	d107      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fbcb 	bl	8008724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f92:	e0fb      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f98:	e0f8      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007f9a:	bf00      	nop
 8007f9c:	58024400 	.word	0x58024400
 8007fa0:	03d09000 	.word	0x03d09000
 8007fa4:	003d0900 	.word	0x003d0900
 8007fa8:	017d7840 	.word	0x017d7840
 8007fac:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fb0:	4b79      	ldr	r3, [pc, #484]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fbc:	d107      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fbe:	f107 0318 	add.w	r3, r7, #24
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f906 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fcc:	e0de      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fd2:	e0db      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fd8:	e0d8      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fe0:	f040 8085 	bne.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007fe4:	4b6c      	ldr	r3, [pc, #432]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007fec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ff4:	d06b      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ffc:	d874      	bhi.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008004:	d056      	beq.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800c:	d86c      	bhi.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008014:	d03b      	beq.n	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008018:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800801c:	d864      	bhi.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008024:	d021      	beq.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800802c:	d85c      	bhi.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800803a:	d004      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800803c:	e054      	b.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800803e:	f000 f8b3 	bl	80081a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008042:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008044:	e0a2      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008046:	4b54      	ldr	r3, [pc, #336]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800804e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008052:	d107      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008054:	f107 0318 	add.w	r3, r7, #24
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f8bb 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008062:	e093      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008068:	e090      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800806a:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008076:	d107      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008078:	f107 030c 	add.w	r3, r7, #12
 800807c:	4618      	mov	r0, r3
 800807e:	f000 f9fd 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008086:	e081      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800808c:	e07e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800808e:	4b42      	ldr	r3, [pc, #264]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b04      	cmp	r3, #4
 8008098:	d109      	bne.n	80080ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800809a:	4b3f      	ldr	r3, [pc, #252]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	08db      	lsrs	r3, r3, #3
 80080a0:	f003 0303 	and.w	r3, r3, #3
 80080a4:	4a3d      	ldr	r2, [pc, #244]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80080a6:	fa22 f303 	lsr.w	r3, r2, r3
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080ac:	e06e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b2:	e06b      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80080b4:	4b38      	ldr	r3, [pc, #224]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c0:	d102      	bne.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80080c2:	4b37      	ldr	r3, [pc, #220]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080c6:	e061      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080cc:	e05e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080ce:	4b32      	ldr	r3, [pc, #200]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080da:	d102      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80080dc:	4b31      	ldr	r3, [pc, #196]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080e0:	e054      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e6:	e051      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ec:	e04e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f4:	d148      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80080f6:	4b28      	ldr	r3, [pc, #160]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008106:	d02a      	beq.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810e:	d838      	bhi.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	2b00      	cmp	r3, #0
 8008114:	d004      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8008116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800811c:	d00d      	beq.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800811e:	e030      	b.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008120:	4b1d      	ldr	r3, [pc, #116]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800812c:	d102      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800812e:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008132:	e02b      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008138:	e028      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800813a:	4b17      	ldr	r3, [pc, #92]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008146:	d107      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fae9 	bl	8008724 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008156:	e019      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800815c:	e016      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800815e:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800816a:	d107      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800816c:	f107 0318 	add.w	r3, r7, #24
 8008170:	4618      	mov	r0, r3
 8008172:	f000 f82f 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800817a:	e007      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008180:	e004      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008186:	e001      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800818c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800818e:	4618      	mov	r0, r3
 8008190:	3740      	adds	r7, #64	; 0x40
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	58024400 	.word	0x58024400
 800819c:	03d09000 	.word	0x03d09000
 80081a0:	003d0900 	.word	0x003d0900
 80081a4:	017d7840 	.word	0x017d7840

080081a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081ac:	f7fe fb88 	bl	80068c0 <HAL_RCC_GetHCLKFreq>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	091b      	lsrs	r3, r3, #4
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	4904      	ldr	r1, [pc, #16]	; (80081d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80081be:	5ccb      	ldrb	r3, [r1, r3]
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	58024400 	.word	0x58024400
 80081d0:	0800bab4 	.word	0x0800bab4

080081d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b089      	sub	sp, #36	; 0x24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081dc:	4ba1      	ldr	r3, [pc, #644]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081e6:	4b9f      	ldr	r3, [pc, #636]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	0b1b      	lsrs	r3, r3, #12
 80081ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081f2:	4b9c      	ldr	r3, [pc, #624]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	091b      	lsrs	r3, r3, #4
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081fe:	4b99      	ldr	r3, [pc, #612]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008202:	08db      	lsrs	r3, r3, #3
 8008204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8111 	beq.w	8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b02      	cmp	r3, #2
 8008226:	f000 8083 	beq.w	8008330 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b02      	cmp	r3, #2
 800822e:	f200 80a1 	bhi.w	8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d056      	beq.n	80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800823e:	e099      	b.n	8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008240:	4b88      	ldr	r3, [pc, #544]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d02d      	beq.n	80082a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800824c:	4b85      	ldr	r3, [pc, #532]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	08db      	lsrs	r3, r3, #3
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	4a84      	ldr	r2, [pc, #528]	; (8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008258:	fa22 f303 	lsr.w	r3, r2, r3
 800825c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008276:	4b7b      	ldr	r3, [pc, #492]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008286:	ed97 6a03 	vldr	s12, [r7, #12]
 800828a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800828e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800829a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082a6:	e087      	b.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008470 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80082b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ba:	4b6a      	ldr	r3, [pc, #424]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ea:	e065      	b.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fe:	4b59      	ldr	r3, [pc, #356]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008312:	eddf 5a56 	vldr	s11, [pc, #344]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800832e:	e043      	b.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800833e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008342:	4b48      	ldr	r3, [pc, #288]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008352:	ed97 6a03 	vldr	s12, [r7, #12]
 8008356:	eddf 5a45 	vldr	s11, [pc, #276]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800835a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008372:	e021      	b.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b37      	ldr	r3, [pc, #220]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80083b8:	4b2a      	ldr	r3, [pc, #168]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	0a5b      	lsrs	r3, r3, #9
 80083be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083de:	ee17 2a90 	vmov	r2, s15
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083e6:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	0c1b      	lsrs	r3, r3, #16
 80083ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008400:	edd7 6a07 	vldr	s13, [r7, #28]
 8008404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840c:	ee17 2a90 	vmov	r2, s15
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	0e1b      	lsrs	r3, r3, #24
 800841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800842a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800843a:	ee17 2a90 	vmov	r2, s15
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008442:	e008      	b.n	8008456 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	609a      	str	r2, [r3, #8]
}
 8008456:	bf00      	nop
 8008458:	3724      	adds	r7, #36	; 0x24
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	58024400 	.word	0x58024400
 8008468:	03d09000 	.word	0x03d09000
 800846c:	46000000 	.word	0x46000000
 8008470:	4c742400 	.word	0x4c742400
 8008474:	4a742400 	.word	0x4a742400
 8008478:	4bbebc20 	.word	0x4bbebc20

0800847c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800847c:	b480      	push	{r7}
 800847e:	b089      	sub	sp, #36	; 0x24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008484:	4ba1      	ldr	r3, [pc, #644]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008488:	f003 0303 	and.w	r3, r3, #3
 800848c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800848e:	4b9f      	ldr	r3, [pc, #636]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008492:	0d1b      	lsrs	r3, r3, #20
 8008494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008498:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800849a:	4b9c      	ldr	r3, [pc, #624]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80084a6:	4b99      	ldr	r3, [pc, #612]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	08db      	lsrs	r3, r3, #3
 80084ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	fb02 f303 	mul.w	r3, r2, r3
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 8111 	beq.w	80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	f000 8083 	beq.w	80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	f200 80a1 	bhi.w	800861c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d056      	beq.n	8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084e6:	e099      	b.n	800861c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e8:	4b88      	ldr	r3, [pc, #544]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d02d      	beq.n	8008550 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084f4:	4b85      	ldr	r3, [pc, #532]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	08db      	lsrs	r3, r3, #3
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	4a84      	ldr	r2, [pc, #528]	; (8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008500:	fa22 f303 	lsr.w	r3, r2, r3
 8008504:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	ee07 3a90 	vmov	s15, r3
 800850c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851e:	4b7b      	ldr	r3, [pc, #492]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008532:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800854e:	e087      	b.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008718 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800855e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008562:	4b6a      	ldr	r3, [pc, #424]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	ed97 6a03 	vldr	s12, [r7, #12]
 8008576:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800857a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008592:	e065      	b.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a6:	4b59      	ldr	r3, [pc, #356]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085d6:	e043      	b.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ea:	4b48      	ldr	r3, [pc, #288]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800860e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800861a:	e021      	b.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008626:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800862a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862e:	4b37      	ldr	r3, [pc, #220]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008642:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800865e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008660:	4b2a      	ldr	r3, [pc, #168]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	0a5b      	lsrs	r3, r3, #9
 8008666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800867a:	edd7 6a07 	vldr	s13, [r7, #28]
 800867e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008686:	ee17 2a90 	vmov	r2, s15
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800868e:	4b1f      	ldr	r3, [pc, #124]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	0c1b      	lsrs	r3, r3, #16
 8008694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b4:	ee17 2a90 	vmov	r2, s15
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80086bc:	4b13      	ldr	r3, [pc, #76]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	0e1b      	lsrs	r3, r3, #24
 80086c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e2:	ee17 2a90 	vmov	r2, s15
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086ea:	e008      	b.n	80086fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	609a      	str	r2, [r3, #8]
}
 80086fe:	bf00      	nop
 8008700:	3724      	adds	r7, #36	; 0x24
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	58024400 	.word	0x58024400
 8008710:	03d09000 	.word	0x03d09000
 8008714:	46000000 	.word	0x46000000
 8008718:	4c742400 	.word	0x4c742400
 800871c:	4a742400 	.word	0x4a742400
 8008720:	4bbebc20 	.word	0x4bbebc20

08008724 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008724:	b480      	push	{r7}
 8008726:	b089      	sub	sp, #36	; 0x24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800872c:	4ba0      	ldr	r3, [pc, #640]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800872e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008736:	4b9e      	ldr	r3, [pc, #632]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	091b      	lsrs	r3, r3, #4
 800873c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008740:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008742:	4b9b      	ldr	r3, [pc, #620]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800874c:	4b98      	ldr	r3, [pc, #608]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800874e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	fb02 f303 	mul.w	r3, r2, r3
 800875c:	ee07 3a90 	vmov	s15, r3
 8008760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008764:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 8111 	beq.w	8008992 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	2b02      	cmp	r3, #2
 8008774:	f000 8083 	beq.w	800887e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b02      	cmp	r3, #2
 800877c:	f200 80a1 	bhi.w	80088c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d056      	beq.n	800883a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800878c:	e099      	b.n	80088c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800878e:	4b88      	ldr	r3, [pc, #544]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d02d      	beq.n	80087f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800879a:	4b85      	ldr	r3, [pc, #532]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	08db      	lsrs	r3, r3, #3
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	4a83      	ldr	r2, [pc, #524]	; (80089b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80087a6:	fa22 f303 	lsr.w	r3, r2, r3
 80087aa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	ee07 3a90 	vmov	s15, r3
 80087bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c4:	4b7a      	ldr	r3, [pc, #488]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087cc:	ee07 3a90 	vmov	s15, r3
 80087d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80087d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80087f4:	e087      	b.n	8008906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008800:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80089bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008808:	4b69      	ldr	r3, [pc, #420]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800880a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008810:	ee07 3a90 	vmov	s15, r3
 8008814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008818:	ed97 6a03 	vldr	s12, [r7, #12]
 800881c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800882c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008834:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008838:	e065      	b.n	8008906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	ee07 3a90 	vmov	s15, r3
 8008840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008844:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884c:	4b58      	ldr	r3, [pc, #352]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800884e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008860:	eddf 5a55 	vldr	s11, [pc, #340]	; 80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008878:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800887c:	e043      	b.n	8008906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	ee07 3a90 	vmov	s15, r3
 8008884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008888:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80089c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800888c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008890:	4b47      	ldr	r3, [pc, #284]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008898:	ee07 3a90 	vmov	s15, r3
 800889c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80088a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088c0:	e021      	b.n	8008906 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	ee07 3a90 	vmov	s15, r3
 80088c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80089bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d4:	4b36      	ldr	r3, [pc, #216]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088dc:	ee07 3a90 	vmov	s15, r3
 80088e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008900:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008904:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008906:	4b2a      	ldr	r3, [pc, #168]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	0a5b      	lsrs	r3, r3, #9
 800890c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008910:	ee07 3a90 	vmov	s15, r3
 8008914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800891c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008920:	edd7 6a07 	vldr	s13, [r7, #28]
 8008924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800892c:	ee17 2a90 	vmov	r2, s15
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008934:	4b1e      	ldr	r3, [pc, #120]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	0c1b      	lsrs	r3, r3, #16
 800893a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800894a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800894e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800895a:	ee17 2a90 	vmov	r2, s15
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008962:	4b13      	ldr	r3, [pc, #76]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	0e1b      	lsrs	r3, r3, #24
 8008968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800897c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008988:	ee17 2a90 	vmov	r2, s15
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008990:	e008      	b.n	80089a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	609a      	str	r2, [r3, #8]
}
 80089a4:	bf00      	nop
 80089a6:	3724      	adds	r7, #36	; 0x24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	58024400 	.word	0x58024400
 80089b4:	03d09000 	.word	0x03d09000
 80089b8:	46000000 	.word	0x46000000
 80089bc:	4c742400 	.word	0x4c742400
 80089c0:	4a742400 	.word	0x4a742400
 80089c4:	4bbebc20 	.word	0x4bbebc20

080089c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089d6:	4b53      	ldr	r3, [pc, #332]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d101      	bne.n	80089e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e099      	b.n	8008b1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80089e6:	4b4f      	ldr	r3, [pc, #316]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a4e      	ldr	r2, [pc, #312]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 80089ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089f2:	f7f9 ffd1 	bl	8002998 <HAL_GetTick>
 80089f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089f8:	e008      	b.n	8008a0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80089fa:	f7f9 ffcd 	bl	8002998 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d901      	bls.n	8008a0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e086      	b.n	8008b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a0c:	4b45      	ldr	r3, [pc, #276]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1f0      	bne.n	80089fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a18:	4b42      	ldr	r3, [pc, #264]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	031b      	lsls	r3, r3, #12
 8008a26:	493f      	ldr	r1, [pc, #252]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	628b      	str	r3, [r1, #40]	; 0x28
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	025b      	lsls	r3, r3, #9
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	431a      	orrs	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	041b      	lsls	r3, r3, #16
 8008a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	061b      	lsls	r3, r3, #24
 8008a58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a5c:	4931      	ldr	r1, [pc, #196]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a62:	4b30      	ldr	r3, [pc, #192]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	492d      	ldr	r1, [pc, #180]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a74:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	f023 0220 	bic.w	r2, r3, #32
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	4928      	ldr	r1, [pc, #160]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a86:	4b27      	ldr	r3, [pc, #156]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	4a26      	ldr	r2, [pc, #152]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a8c:	f023 0310 	bic.w	r3, r3, #16
 8008a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a92:	4b24      	ldr	r3, [pc, #144]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a96:	4b24      	ldr	r3, [pc, #144]	; (8008b28 <RCCEx_PLL2_Config+0x160>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	69d2      	ldr	r2, [r2, #28]
 8008a9e:	00d2      	lsls	r2, r2, #3
 8008aa0:	4920      	ldr	r1, [pc, #128]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008aa6:	4b1f      	ldr	r3, [pc, #124]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	4a1e      	ldr	r2, [pc, #120]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008aac:	f043 0310 	orr.w	r3, r3, #16
 8008ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d106      	bne.n	8008ac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ab8:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	4a19      	ldr	r2, [pc, #100]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ac4:	e00f      	b.n	8008ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d106      	bne.n	8008ada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008acc:	4b15      	ldr	r3, [pc, #84]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	4a14      	ldr	r2, [pc, #80]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ad8:	e005      	b.n	8008ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ada:	4b12      	ldr	r3, [pc, #72]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ade:	4a11      	ldr	r2, [pc, #68]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a0e      	ldr	r2, [pc, #56]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008af2:	f7f9 ff51 	bl	8002998 <HAL_GetTick>
 8008af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008af8:	e008      	b.n	8008b0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008afa:	f7f9 ff4d 	bl	8002998 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e006      	b.n	8008b1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b0c:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <RCCEx_PLL2_Config+0x15c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0f0      	beq.n	8008afa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	58024400 	.word	0x58024400
 8008b28:	ffff0007 	.word	0xffff0007

08008b2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b3a:	4b53      	ldr	r3, [pc, #332]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d101      	bne.n	8008b4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e099      	b.n	8008c7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b4a:	4b4f      	ldr	r3, [pc, #316]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a4e      	ldr	r2, [pc, #312]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b56:	f7f9 ff1f 	bl	8002998 <HAL_GetTick>
 8008b5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b5c:	e008      	b.n	8008b70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b5e:	f7f9 ff1b 	bl	8002998 <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d901      	bls.n	8008b70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e086      	b.n	8008c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b70:	4b45      	ldr	r3, [pc, #276]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1f0      	bne.n	8008b5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b7c:	4b42      	ldr	r3, [pc, #264]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	051b      	lsls	r3, r3, #20
 8008b8a:	493f      	ldr	r1, [pc, #252]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	025b      	lsls	r3, r3, #9
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	041b      	lsls	r3, r3, #16
 8008bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	061b      	lsls	r3, r3, #24
 8008bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bc0:	4931      	ldr	r1, [pc, #196]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008bc6:	4b30      	ldr	r3, [pc, #192]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	492d      	ldr	r1, [pc, #180]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008bd8:	4b2b      	ldr	r3, [pc, #172]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	4928      	ldr	r1, [pc, #160]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008bea:	4b27      	ldr	r3, [pc, #156]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	4a26      	ldr	r2, [pc, #152]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bf6:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bfa:	4b24      	ldr	r3, [pc, #144]	; (8008c8c <RCCEx_PLL3_Config+0x160>)
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	69d2      	ldr	r2, [r2, #28]
 8008c02:	00d2      	lsls	r2, r2, #3
 8008c04:	4920      	ldr	r1, [pc, #128]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c0a:	4b1f      	ldr	r3, [pc, #124]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0e:	4a1e      	ldr	r2, [pc, #120]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d106      	bne.n	8008c2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	4a19      	ldr	r2, [pc, #100]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c28:	e00f      	b.n	8008c4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d106      	bne.n	8008c3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c30:	4b15      	ldr	r3, [pc, #84]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	4a14      	ldr	r2, [pc, #80]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c3c:	e005      	b.n	8008c4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c3e:	4b12      	ldr	r3, [pc, #72]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	4a11      	ldr	r2, [pc, #68]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c4a:	4b0f      	ldr	r3, [pc, #60]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a0e      	ldr	r2, [pc, #56]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c56:	f7f9 fe9f 	bl	8002998 <HAL_GetTick>
 8008c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c5c:	e008      	b.n	8008c70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c5e:	f7f9 fe9b 	bl	8002998 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d901      	bls.n	8008c70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e006      	b.n	8008c7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c70:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <RCCEx_PLL3_Config+0x15c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0f0      	beq.n	8008c5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	58024400 	.word	0x58024400
 8008c8c:	ffff0007 	.word	0xffff0007

08008c90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d067      	beq.n	8008d72 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7f9 f8b6 	bl	8001e28 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	22ca      	movs	r2, #202	; 0xca
 8008cca:	625a      	str	r2, [r3, #36]	; 0x24
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2253      	movs	r2, #83	; 0x53
 8008cd2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f879 	bl	8008dcc <RTC_EnterInitMode>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d13b      	bne.n	8008d5c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6899      	ldr	r1, [r3, #8]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	4b23      	ldr	r3, [pc, #140]	; (8008d7c <HAL_RTC_Init+0xec>)
 8008cf0:	400b      	ands	r3, r1
 8008cf2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6899      	ldr	r1, [r3, #8]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	0419      	lsls	r1, r3, #16
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	430a      	orrs	r2, r1
 8008d22:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f885 	bl	8008e34 <RTC_ExitInitMode>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d113      	bne.n	8008d5c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f022 0203 	bic.w	r2, r2, #3
 8008d42:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69da      	ldr	r2, [r3, #28]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	22ff      	movs	r2, #255	; 0xff
 8008d62:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d103      	bne.n	8008d72 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	ff8fffbf 	.word	0xff8fffbf

08008d80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d96:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008d98:	f7f9 fdfe 	bl	8002998 <HAL_GetTick>
 8008d9c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d9e:	e009      	b.n	8008db4 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008da0:	f7f9 fdfa 	bl	8002998 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dae:	d901      	bls.n	8008db4 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e007      	b.n	8008dc4 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0ee      	beq.n	8008da0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d120      	bne.n	8008e28 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f04f 32ff 	mov.w	r2, #4294967295
 8008dee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008df0:	f7f9 fdd2 	bl	8002998 <HAL_GetTick>
 8008df4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008df6:	e00d      	b.n	8008e14 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008df8:	f7f9 fdce 	bl	8002998 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e06:	d905      	bls.n	8008e14 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2203      	movs	r2, #3
 8008e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d102      	bne.n	8008e28 <RTC_EnterInitMode+0x5c>
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d1e7      	bne.n	8008df8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8008e40:	4b1a      	ldr	r3, [pc, #104]	; (8008eac <RTC_ExitInitMode+0x78>)
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	4a19      	ldr	r2, [pc, #100]	; (8008eac <RTC_ExitInitMode+0x78>)
 8008e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e4a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e4c:	4b17      	ldr	r3, [pc, #92]	; (8008eac <RTC_ExitInitMode+0x78>)
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f003 0320 	and.w	r3, r3, #32
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10c      	bne.n	8008e72 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff ff91 	bl	8008d80 <HAL_RTC_WaitForSynchro>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01e      	beq.n	8008ea2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2203      	movs	r2, #3
 8008e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	73fb      	strb	r3, [r7, #15]
 8008e70:	e017      	b.n	8008ea2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e72:	4b0e      	ldr	r3, [pc, #56]	; (8008eac <RTC_ExitInitMode+0x78>)
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	4a0d      	ldr	r2, [pc, #52]	; (8008eac <RTC_ExitInitMode+0x78>)
 8008e78:	f023 0320 	bic.w	r3, r3, #32
 8008e7c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff ff7e 	bl	8008d80 <HAL_RTC_WaitForSynchro>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d005      	beq.n	8008e96 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2203      	movs	r2, #3
 8008e8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e96:	4b05      	ldr	r3, [pc, #20]	; (8008eac <RTC_ExitInitMode+0x78>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	4a04      	ldr	r2, [pc, #16]	; (8008eac <RTC_ExitInitMode+0x78>)
 8008e9c:	f043 0320 	orr.w	r3, r3, #32
 8008ea0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	58004000 	.word	0x58004000

08008eb0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08a      	sub	sp, #40	; 0x28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e283      	b.n	80093ca <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008ec2:	f7f9 fd99 	bl	80029f8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d113      	bne.n	8008ef8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a94      	ldr	r2, [pc, #592]	; (8009128 <HAL_SAI_Init+0x278>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d004      	beq.n	8008ee4 <HAL_SAI_Init+0x34>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a93      	ldr	r2, [pc, #588]	; (800912c <HAL_SAI_Init+0x27c>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d107      	bne.n	8008ef4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d103      	bne.n	8008ef4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e268      	b.n	80093ca <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a8a      	ldr	r2, [pc, #552]	; (8009128 <HAL_SAI_Init+0x278>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d004      	beq.n	8008f0c <HAL_SAI_Init+0x5c>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a8a      	ldr	r2, [pc, #552]	; (8009130 <HAL_SAI_Init+0x280>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d102      	bne.n	8008f12 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8008f0c:	4b89      	ldr	r3, [pc, #548]	; (8009134 <HAL_SAI_Init+0x284>)
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	e028      	b.n	8008f64 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a88      	ldr	r2, [pc, #544]	; (8009138 <HAL_SAI_Init+0x288>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d004      	beq.n	8008f26 <HAL_SAI_Init+0x76>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a86      	ldr	r2, [pc, #536]	; (800913c <HAL_SAI_Init+0x28c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d102      	bne.n	8008f2c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8008f26:	4b86      	ldr	r3, [pc, #536]	; (8009140 <HAL_SAI_Init+0x290>)
 8008f28:	61bb      	str	r3, [r7, #24]
 8008f2a:	e01b      	b.n	8008f64 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a84      	ldr	r2, [pc, #528]	; (8009144 <HAL_SAI_Init+0x294>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d004      	beq.n	8008f40 <HAL_SAI_Init+0x90>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a83      	ldr	r2, [pc, #524]	; (8009148 <HAL_SAI_Init+0x298>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d102      	bne.n	8008f46 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8008f40:	4b82      	ldr	r3, [pc, #520]	; (800914c <HAL_SAI_Init+0x29c>)
 8008f42:	61bb      	str	r3, [r7, #24]
 8008f44:	e00e      	b.n	8008f64 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a78      	ldr	r2, [pc, #480]	; (800912c <HAL_SAI_Init+0x27c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d004      	beq.n	8008f5a <HAL_SAI_Init+0xaa>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a7e      	ldr	r2, [pc, #504]	; (8009150 <HAL_SAI_Init+0x2a0>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d102      	bne.n	8008f60 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8008f5a:	4b7e      	ldr	r3, [pc, #504]	; (8009154 <HAL_SAI_Init+0x2a4>)
 8008f5c:	61bb      	str	r3, [r7, #24]
 8008f5e:	e001      	b.n	8008f64 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e232      	b.n	80093ca <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d106      	bne.n	8008f7e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7f9 f843 	bl	8002004 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fa36 	bl	80093f0 <SAI_Disable>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e21d      	b.n	80093ca <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2202      	movs	r2, #2
 8008f92:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d00c      	beq.n	8008fb8 <HAL_SAI_Init+0x108>
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d80d      	bhi.n	8008fbe <HAL_SAI_Init+0x10e>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <HAL_SAI_Init+0xfc>
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d003      	beq.n	8008fb2 <HAL_SAI_Init+0x102>
 8008faa:	e008      	b.n	8008fbe <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008fb0:	e008      	b.n	8008fc4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008fb2:	2310      	movs	r3, #16
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008fb6:	e005      	b.n	8008fc4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008fb8:	2320      	movs	r3, #32
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008fbc:	e002      	b.n	8008fc4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008fc2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	2b05      	cmp	r3, #5
 8008fca:	d832      	bhi.n	8009032 <HAL_SAI_Init+0x182>
 8008fcc:	a201      	add	r2, pc, #4	; (adr r2, 8008fd4 <HAL_SAI_Init+0x124>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	08008fed 	.word	0x08008fed
 8008fd8:	08008ff3 	.word	0x08008ff3
 8008fdc:	08008ffb 	.word	0x08008ffb
 8008fe0:	08009003 	.word	0x08009003
 8008fe4:	08009013 	.word	0x08009013
 8008fe8:	08009023 	.word	0x08009023
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	61fb      	str	r3, [r7, #28]
      break;
 8008ff0:	e022      	b.n	8009038 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff6:	61fb      	str	r3, [r7, #28]
      break;
 8008ff8:	e01e      	b.n	8009038 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ffe:	61fb      	str	r3, [r7, #28]
      break;
 8009000:	e01a      	b.n	8009038 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009002:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009006:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	f043 0301 	orr.w	r3, r3, #1
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009010:	e012      	b.n	8009038 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009016:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	f043 0302 	orr.w	r3, r3, #2
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009020:	e00a      	b.n	8009038 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009026:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	f043 0303 	orr.w	r3, r3, #3
 800902e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009030:	e002      	b.n	8009038 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009032:	2300      	movs	r3, #0
 8009034:	61fb      	str	r3, [r7, #28]
      break;
 8009036:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 80ba 	beq.w	80091bc <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a35      	ldr	r2, [pc, #212]	; (8009128 <HAL_SAI_Init+0x278>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d004      	beq.n	8009060 <HAL_SAI_Init+0x1b0>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a35      	ldr	r2, [pc, #212]	; (8009130 <HAL_SAI_Init+0x280>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d104      	bne.n	800906a <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009060:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009064:	f7fe fbce 	bl	8007804 <HAL_RCCEx_GetPeriphCLKFreq>
 8009068:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a32      	ldr	r2, [pc, #200]	; (8009138 <HAL_SAI_Init+0x288>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d004      	beq.n	800907e <HAL_SAI_Init+0x1ce>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a30      	ldr	r2, [pc, #192]	; (800913c <HAL_SAI_Init+0x28c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d104      	bne.n	8009088 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800907e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009082:	f7fe fbbf 	bl	8007804 <HAL_RCCEx_GetPeriphCLKFreq>
 8009086:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a2d      	ldr	r2, [pc, #180]	; (8009144 <HAL_SAI_Init+0x294>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d004      	beq.n	800909c <HAL_SAI_Init+0x1ec>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a2c      	ldr	r2, [pc, #176]	; (8009148 <HAL_SAI_Init+0x298>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d104      	bne.n	80090a6 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800909c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80090a0:	f7fe fbb0 	bl	8007804 <HAL_RCCEx_GetPeriphCLKFreq>
 80090a4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a20      	ldr	r2, [pc, #128]	; (800912c <HAL_SAI_Init+0x27c>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d104      	bne.n	80090ba <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80090b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80090b4:	f7fe fba6 	bl	8007804 <HAL_RCCEx_GetPeriphCLKFreq>
 80090b8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a24      	ldr	r2, [pc, #144]	; (8009150 <HAL_SAI_Init+0x2a0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d104      	bne.n	80090ce <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80090c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80090c8:	f7fe fb9c 	bl	8007804 <HAL_RCCEx_GetPeriphCLKFreq>
 80090cc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090d6:	d120      	bne.n	800911a <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d102      	bne.n	80090e6 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80090e0:	2340      	movs	r3, #64	; 0x40
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e00a      	b.n	80090fc <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ea:	2b08      	cmp	r3, #8
 80090ec:	d103      	bne.n	80090f6 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80090ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	e002      	b.n	80090fc <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	4619      	mov	r1, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	fb02 f303 	mul.w	r3, r2, r3
 8009112:	fbb1 f3f3 	udiv	r3, r1, r3
 8009116:	613b      	str	r3, [r7, #16]
 8009118:	e02f      	b.n	800917a <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009122:	d119      	bne.n	8009158 <HAL_SAI_Init+0x2a8>
 8009124:	2302      	movs	r3, #2
 8009126:	e018      	b.n	800915a <HAL_SAI_Init+0x2aa>
 8009128:	40015804 	.word	0x40015804
 800912c:	58005404 	.word	0x58005404
 8009130:	40015824 	.word	0x40015824
 8009134:	40015800 	.word	0x40015800
 8009138:	40015c04 	.word	0x40015c04
 800913c:	40015c24 	.word	0x40015c24
 8009140:	40015c00 	.word	0x40015c00
 8009144:	40016004 	.word	0x40016004
 8009148:	40016024 	.word	0x40016024
 800914c:	40016000 	.word	0x40016000
 8009150:	58005424 	.word	0x58005424
 8009154:	58005400 	.word	0x58005400
 8009158:	2301      	movs	r3, #1
 800915a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	005b      	lsls	r3, r3, #1
 8009166:	4619      	mov	r1, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	fb02 f303 	mul.w	r3, r2, r3
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	fbb1 f3f3 	udiv	r3, r1, r3
 8009178:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	4a95      	ldr	r2, [pc, #596]	; (80093d4 <HAL_SAI_Init+0x524>)
 800917e:	fba2 2303 	umull	r2, r3, r2, r3
 8009182:	08da      	lsrs	r2, r3, #3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009188:	6939      	ldr	r1, [r7, #16]
 800918a:	4b92      	ldr	r3, [pc, #584]	; (80093d4 <HAL_SAI_Init+0x524>)
 800918c:	fba3 2301 	umull	r2, r3, r3, r1
 8009190:	08da      	lsrs	r2, r3, #3
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	1aca      	subs	r2, r1, r3
 800919c:	2a08      	cmp	r2, #8
 800919e:	d904      	bls.n	80091aa <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ae:	2b04      	cmp	r3, #4
 80091b0:	d104      	bne.n	80091bc <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	085a      	lsrs	r2, r3, #1
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d003      	beq.n	80091cc <HAL_SAI_Init+0x31c>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d109      	bne.n	80091e0 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d101      	bne.n	80091d8 <HAL_SAI_Init+0x328>
 80091d4:	2300      	movs	r3, #0
 80091d6:	e001      	b.n	80091dc <HAL_SAI_Init+0x32c>
 80091d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091dc:	623b      	str	r3, [r7, #32]
 80091de:	e008      	b.n	80091f2 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d102      	bne.n	80091ee <HAL_SAI_Init+0x33e>
 80091e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091ec:	e000      	b.n	80091f0 <HAL_SAI_Init+0x340>
 80091ee:	2300      	movs	r3, #0
 80091f0:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80091f2:	f7f9 fc01 	bl	80029f8 <HAL_GetREVID>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091fc:	d331      	bcc.n	8009262 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6819      	ldr	r1, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	4b73      	ldr	r3, [pc, #460]	; (80093d8 <HAL_SAI_Init+0x528>)
 800920a:	400b      	ands	r3, r1
 800920c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6819      	ldr	r1, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009222:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009228:	431a      	orrs	r2, r3
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009236:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009242:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	051b      	lsls	r3, r3, #20
 800924a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009250:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	e02d      	b.n	80092be <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6819      	ldr	r1, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b5b      	ldr	r3, [pc, #364]	; (80093dc <HAL_SAI_Init+0x52c>)
 800926e:	400b      	ands	r3, r1
 8009270:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6819      	ldr	r1, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009280:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009286:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800928c:	431a      	orrs	r2, r3
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800929a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092a6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ac:	051b      	lsls	r3, r3, #20
 80092ae:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80092b4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6859      	ldr	r1, [r3, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	4b45      	ldr	r3, [pc, #276]	; (80093e0 <HAL_SAI_Init+0x530>)
 80092ca:	400b      	ands	r3, r1
 80092cc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6859      	ldr	r1, [r3, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	69da      	ldr	r2, [r3, #28]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092dc:	431a      	orrs	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	430a      	orrs	r2, r1
 80092ea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6899      	ldr	r1, [r3, #8]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	4b3b      	ldr	r3, [pc, #236]	; (80093e4 <HAL_SAI_Init+0x534>)
 80092f8:	400b      	ands	r3, r1
 80092fa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6899      	ldr	r1, [r3, #8]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009306:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800930c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8009312:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009318:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800931e:	3b01      	subs	r3, #1
 8009320:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009322:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68d9      	ldr	r1, [r3, #12]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	f24f 0320 	movw	r3, #61472	; 0xf020
 800933a:	400b      	ands	r3, r1
 800933c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68d9      	ldr	r1, [r3, #12]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009352:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009354:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935a:	3b01      	subs	r3, #1
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	430a      	orrs	r2, r1
 8009366:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a1e      	ldr	r2, [pc, #120]	; (80093e8 <HAL_SAI_Init+0x538>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d004      	beq.n	800937c <HAL_SAI_Init+0x4cc>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a1d      	ldr	r2, [pc, #116]	; (80093ec <HAL_SAI_Init+0x53c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d119      	bne.n	80093b0 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009380:	f023 0201 	bic.w	r2, r3, #1
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800938e:	2b01      	cmp	r3, #1
 8009390:	d10e      	bne.n	80093b0 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939a:	3b01      	subs	r3, #1
 800939c:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800939e:	431a      	orrs	r2, r3
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a8:	f043 0201 	orr.w	r2, r3, #1
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3728      	adds	r7, #40	; 0x28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	cccccccd 	.word	0xcccccccd
 80093d8:	f005c010 	.word	0xf005c010
 80093dc:	f805c010 	.word	0xf805c010
 80093e0:	ffff1ff0 	.word	0xffff1ff0
 80093e4:	fff88000 	.word	0xfff88000
 80093e8:	40015804 	.word	0x40015804
 80093ec:	58005404 	.word	0x58005404

080093f0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80093f8:	4b18      	ldr	r3, [pc, #96]	; (800945c <SAI_Disable+0x6c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a18      	ldr	r2, [pc, #96]	; (8009460 <SAI_Disable+0x70>)
 80093fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009402:	0b1b      	lsrs	r3, r3, #12
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800941a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10a      	bne.n	8009438 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	72fb      	strb	r3, [r7, #11]
      break;
 8009436:	e009      	b.n	800944c <SAI_Disable+0x5c>
    }
    count--;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	3b01      	subs	r3, #1
 800943c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e7      	bne.n	800941c <SAI_Disable+0x2c>

  return status;
 800944c:	7afb      	ldrb	r3, [r7, #11]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	24000000 	.word	0x24000000
 8009460:	95cbec1b 	.word	0x95cbec1b

08009464 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e02b      	b.n	80094d0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d106      	bne.n	8009492 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f7f7 ff51 	bl	8001334 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2202      	movs	r2, #2
 8009496:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3304      	adds	r3, #4
 80094a2:	4619      	mov	r1, r3
 80094a4:	4610      	mov	r0, r2
 80094a6:	f001 fa41 	bl	800a92c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	461a      	mov	r2, r3
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	f001 fa95 	bl	800a9e4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80094ba:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <HAL_SDRAM_Init+0x74>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a06      	ldr	r2, [pc, #24]	; (80094d8 <HAL_SDRAM_Init+0x74>)
 80094c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094c4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	52004000 	.word	0x52004000

080094dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e0f1      	b.n	80096d2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a78      	ldr	r2, [pc, #480]	; (80096dc <HAL_SPI_Init+0x200>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00f      	beq.n	800951e <HAL_SPI_Init+0x42>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a77      	ldr	r2, [pc, #476]	; (80096e0 <HAL_SPI_Init+0x204>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00a      	beq.n	800951e <HAL_SPI_Init+0x42>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a75      	ldr	r2, [pc, #468]	; (80096e4 <HAL_SPI_Init+0x208>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d005      	beq.n	800951e <HAL_SPI_Init+0x42>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	2b0f      	cmp	r3, #15
 8009518:	d901      	bls.n	800951e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e0d9      	b.n	80096d2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f8e2 	bl	80096e8 <SPI_GetPacketSize>
 8009524:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a6c      	ldr	r2, [pc, #432]	; (80096dc <HAL_SPI_Init+0x200>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00c      	beq.n	800954a <HAL_SPI_Init+0x6e>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a6a      	ldr	r2, [pc, #424]	; (80096e0 <HAL_SPI_Init+0x204>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d007      	beq.n	800954a <HAL_SPI_Init+0x6e>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a69      	ldr	r2, [pc, #420]	; (80096e4 <HAL_SPI_Init+0x208>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d002      	beq.n	800954a <HAL_SPI_Init+0x6e>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b08      	cmp	r3, #8
 8009548:	d811      	bhi.n	800956e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800954e:	4a63      	ldr	r2, [pc, #396]	; (80096dc <HAL_SPI_Init+0x200>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d009      	beq.n	8009568 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a61      	ldr	r2, [pc, #388]	; (80096e0 <HAL_SPI_Init+0x204>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d004      	beq.n	8009568 <HAL_SPI_Init+0x8c>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a60      	ldr	r2, [pc, #384]	; (80096e4 <HAL_SPI_Init+0x208>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d104      	bne.n	8009572 <HAL_SPI_Init+0x96>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b10      	cmp	r3, #16
 800956c:	d901      	bls.n	8009572 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e0af      	b.n	80096d2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7f8 fe2e 	bl	80021e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f022 0201 	bic.w	r2, r2, #1
 80095a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80095ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095b8:	d119      	bne.n	80095ee <HAL_SPI_Init+0x112>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095c2:	d103      	bne.n	80095cc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d008      	beq.n	80095de <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10c      	bne.n	80095ee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80095d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095dc:	d107      	bne.n	80095ee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	69da      	ldr	r2, [r3, #28]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f6:	431a      	orrs	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009600:	ea42 0103 	orr.w	r1, r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	431a      	orrs	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	431a      	orrs	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	695b      	ldr	r3, [r3, #20]
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	431a      	orrs	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	431a      	orrs	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	431a      	orrs	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800964e:	ea42 0103 	orr.w	r1, r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d113      	bne.n	800968e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009678:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800968c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0201 	bic.w	r2, r2, #1
 800969c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	40013000 	.word	0x40013000
 80096e0:	40003800 	.word	0x40003800
 80096e4:	40003c00 	.word	0x40003c00

080096e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f4:	095b      	lsrs	r3, r3, #5
 80096f6:	3301      	adds	r3, #1
 80096f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	3307      	adds	r3, #7
 8009706:	08db      	lsrs	r3, r3, #3
 8009708:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e042      	b.n	80097b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7f8 ff66 	bl	8002614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2224      	movs	r2, #36	; 0x24
 800974c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0201 	bic.w	r2, r2, #1
 800975e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f8c3 	bl	80098ec <UART_SetConfig>
 8009766:	4603      	mov	r3, r0
 8009768:	2b01      	cmp	r3, #1
 800976a:	d101      	bne.n	8009770 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e022      	b.n	80097b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fe1f 	bl	800a3bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800978c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800979c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0201 	orr.w	r2, r2, #1
 80097ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fea6 	bl	800a500 <UART_CheckIdleState>
 80097b4:	4603      	mov	r3, r0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b08a      	sub	sp, #40	; 0x28
 80097c2:	af02      	add	r7, sp, #8
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	603b      	str	r3, [r7, #0]
 80097ca:	4613      	mov	r3, r2
 80097cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	f040 8083 	bne.w	80098e0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <HAL_UART_Transmit+0x28>
 80097e0:	88fb      	ldrh	r3, [r7, #6]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e07b      	b.n	80098e2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d101      	bne.n	80097f8 <HAL_UART_Transmit+0x3a>
 80097f4:	2302      	movs	r3, #2
 80097f6:	e074      	b.n	80098e2 <HAL_UART_Transmit+0x124>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2221      	movs	r2, #33	; 0x21
 800980c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009810:	f7f9 f8c2 	bl	8002998 <HAL_GetTick>
 8009814:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	88fa      	ldrh	r2, [r7, #6]
 800981a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	88fa      	ldrh	r2, [r7, #6]
 8009822:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800982e:	d108      	bne.n	8009842 <HAL_UART_Transmit+0x84>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d104      	bne.n	8009842 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	61bb      	str	r3, [r7, #24]
 8009840:	e003      	b.n	800984a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009846:	2300      	movs	r3, #0
 8009848:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009852:	e02c      	b.n	80098ae <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	2200      	movs	r2, #0
 800985c:	2180      	movs	r1, #128	; 0x80
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 fe99 	bl	800a596 <UART_WaitOnFlagUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800986a:	2303      	movs	r3, #3
 800986c:	e039      	b.n	80098e2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10b      	bne.n	800988c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	461a      	mov	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009882:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	3302      	adds	r3, #2
 8009888:	61bb      	str	r3, [r7, #24]
 800988a:	e007      	b.n	800989c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	781a      	ldrb	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	3301      	adds	r3, #1
 800989a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	3b01      	subs	r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1cc      	bne.n	8009854 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2200      	movs	r2, #0
 80098c2:	2140      	movs	r1, #64	; 0x40
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 fe66 	bl	800a596 <UART_WaitOnFlagUntilTimeout>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e006      	b.n	80098e2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2220      	movs	r2, #32
 80098d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	e000      	b.n	80098e2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80098e0:	2302      	movs	r3, #2
  }
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3720      	adds	r7, #32
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098f0:	b092      	sub	sp, #72	; 0x48
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	431a      	orrs	r2, r3
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	431a      	orrs	r2, r3
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	4313      	orrs	r3, r2
 8009912:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	4bbe      	ldr	r3, [pc, #760]	; (8009c14 <UART_SetConfig+0x328>)
 800991c:	4013      	ands	r3, r2
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	6812      	ldr	r2, [r2, #0]
 8009922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009924:	430b      	orrs	r3, r1
 8009926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	68da      	ldr	r2, [r3, #12]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4ab3      	ldr	r2, [pc, #716]	; (8009c18 <UART_SetConfig+0x32c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d004      	beq.n	8009958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009954:	4313      	orrs	r3, r2
 8009956:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689a      	ldr	r2, [r3, #8]
 800995e:	4baf      	ldr	r3, [pc, #700]	; (8009c1c <UART_SetConfig+0x330>)
 8009960:	4013      	ands	r3, r2
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	6812      	ldr	r2, [r2, #0]
 8009966:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009968:	430b      	orrs	r3, r1
 800996a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	f023 010f 	bic.w	r1, r3, #15
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4aa6      	ldr	r2, [pc, #664]	; (8009c20 <UART_SetConfig+0x334>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d177      	bne.n	8009a7c <UART_SetConfig+0x190>
 800998c:	4ba5      	ldr	r3, [pc, #660]	; (8009c24 <UART_SetConfig+0x338>)
 800998e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009994:	2b28      	cmp	r3, #40	; 0x28
 8009996:	d86d      	bhi.n	8009a74 <UART_SetConfig+0x188>
 8009998:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0xb4>)
 800999a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999e:	bf00      	nop
 80099a0:	08009a45 	.word	0x08009a45
 80099a4:	08009a75 	.word	0x08009a75
 80099a8:	08009a75 	.word	0x08009a75
 80099ac:	08009a75 	.word	0x08009a75
 80099b0:	08009a75 	.word	0x08009a75
 80099b4:	08009a75 	.word	0x08009a75
 80099b8:	08009a75 	.word	0x08009a75
 80099bc:	08009a75 	.word	0x08009a75
 80099c0:	08009a4d 	.word	0x08009a4d
 80099c4:	08009a75 	.word	0x08009a75
 80099c8:	08009a75 	.word	0x08009a75
 80099cc:	08009a75 	.word	0x08009a75
 80099d0:	08009a75 	.word	0x08009a75
 80099d4:	08009a75 	.word	0x08009a75
 80099d8:	08009a75 	.word	0x08009a75
 80099dc:	08009a75 	.word	0x08009a75
 80099e0:	08009a55 	.word	0x08009a55
 80099e4:	08009a75 	.word	0x08009a75
 80099e8:	08009a75 	.word	0x08009a75
 80099ec:	08009a75 	.word	0x08009a75
 80099f0:	08009a75 	.word	0x08009a75
 80099f4:	08009a75 	.word	0x08009a75
 80099f8:	08009a75 	.word	0x08009a75
 80099fc:	08009a75 	.word	0x08009a75
 8009a00:	08009a5d 	.word	0x08009a5d
 8009a04:	08009a75 	.word	0x08009a75
 8009a08:	08009a75 	.word	0x08009a75
 8009a0c:	08009a75 	.word	0x08009a75
 8009a10:	08009a75 	.word	0x08009a75
 8009a14:	08009a75 	.word	0x08009a75
 8009a18:	08009a75 	.word	0x08009a75
 8009a1c:	08009a75 	.word	0x08009a75
 8009a20:	08009a65 	.word	0x08009a65
 8009a24:	08009a75 	.word	0x08009a75
 8009a28:	08009a75 	.word	0x08009a75
 8009a2c:	08009a75 	.word	0x08009a75
 8009a30:	08009a75 	.word	0x08009a75
 8009a34:	08009a75 	.word	0x08009a75
 8009a38:	08009a75 	.word	0x08009a75
 8009a3c:	08009a75 	.word	0x08009a75
 8009a40:	08009a6d 	.word	0x08009a6d
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4a:	e222      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009a4c:	2304      	movs	r3, #4
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e21e      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009a54:	2308      	movs	r3, #8
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5a:	e21a      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009a5c:	2310      	movs	r3, #16
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a62:	e216      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009a64:	2320      	movs	r3, #32
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6a:	e212      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009a6c:	2340      	movs	r3, #64	; 0x40
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a72:	e20e      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009a74:	2380      	movs	r3, #128	; 0x80
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7a:	e20a      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a69      	ldr	r2, [pc, #420]	; (8009c28 <UART_SetConfig+0x33c>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d130      	bne.n	8009ae8 <UART_SetConfig+0x1fc>
 8009a86:	4b67      	ldr	r3, [pc, #412]	; (8009c24 <UART_SetConfig+0x338>)
 8009a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	d826      	bhi.n	8009ae0 <UART_SetConfig+0x1f4>
 8009a92:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <UART_SetConfig+0x1ac>)
 8009a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a98:	08009ab1 	.word	0x08009ab1
 8009a9c:	08009ab9 	.word	0x08009ab9
 8009aa0:	08009ac1 	.word	0x08009ac1
 8009aa4:	08009ac9 	.word	0x08009ac9
 8009aa8:	08009ad1 	.word	0x08009ad1
 8009aac:	08009ad9 	.word	0x08009ad9
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab6:	e1ec      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009ab8:	2304      	movs	r3, #4
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009abe:	e1e8      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009ac0:	2308      	movs	r3, #8
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac6:	e1e4      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009ac8:	2310      	movs	r3, #16
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ace:	e1e0      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009ad0:	2320      	movs	r3, #32
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad6:	e1dc      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009ad8:	2340      	movs	r3, #64	; 0x40
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ade:	e1d8      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009ae0:	2380      	movs	r3, #128	; 0x80
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae6:	e1d4      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a4f      	ldr	r2, [pc, #316]	; (8009c2c <UART_SetConfig+0x340>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d130      	bne.n	8009b54 <UART_SetConfig+0x268>
 8009af2:	4b4c      	ldr	r3, [pc, #304]	; (8009c24 <UART_SetConfig+0x338>)
 8009af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	d826      	bhi.n	8009b4c <UART_SetConfig+0x260>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <UART_SetConfig+0x218>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b1d 	.word	0x08009b1d
 8009b08:	08009b25 	.word	0x08009b25
 8009b0c:	08009b2d 	.word	0x08009b2d
 8009b10:	08009b35 	.word	0x08009b35
 8009b14:	08009b3d 	.word	0x08009b3d
 8009b18:	08009b45 	.word	0x08009b45
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e1b6      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009b24:	2304      	movs	r3, #4
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2a:	e1b2      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009b2c:	2308      	movs	r3, #8
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b32:	e1ae      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009b34:	2310      	movs	r3, #16
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3a:	e1aa      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009b3c:	2320      	movs	r3, #32
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b42:	e1a6      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009b44:	2340      	movs	r3, #64	; 0x40
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4a:	e1a2      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009b4c:	2380      	movs	r3, #128	; 0x80
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b52:	e19e      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a35      	ldr	r2, [pc, #212]	; (8009c30 <UART_SetConfig+0x344>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d130      	bne.n	8009bc0 <UART_SetConfig+0x2d4>
 8009b5e:	4b31      	ldr	r3, [pc, #196]	; (8009c24 <UART_SetConfig+0x338>)
 8009b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b62:	f003 0307 	and.w	r3, r3, #7
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d826      	bhi.n	8009bb8 <UART_SetConfig+0x2cc>
 8009b6a:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <UART_SetConfig+0x284>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b89 	.word	0x08009b89
 8009b74:	08009b91 	.word	0x08009b91
 8009b78:	08009b99 	.word	0x08009b99
 8009b7c:	08009ba1 	.word	0x08009ba1
 8009b80:	08009ba9 	.word	0x08009ba9
 8009b84:	08009bb1 	.word	0x08009bb1
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8e:	e180      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b96:	e17c      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9e:	e178      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba6:	e174      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bae:	e170      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb6:	e16c      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009bb8:	2380      	movs	r3, #128	; 0x80
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bbe:	e168      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a1b      	ldr	r2, [pc, #108]	; (8009c34 <UART_SetConfig+0x348>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d142      	bne.n	8009c50 <UART_SetConfig+0x364>
 8009bca:	4b16      	ldr	r3, [pc, #88]	; (8009c24 <UART_SetConfig+0x338>)
 8009bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bce:	f003 0307 	and.w	r3, r3, #7
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	d838      	bhi.n	8009c48 <UART_SetConfig+0x35c>
 8009bd6:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <UART_SetConfig+0x2f0>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009bf5 	.word	0x08009bf5
 8009be0:	08009bfd 	.word	0x08009bfd
 8009be4:	08009c05 	.word	0x08009c05
 8009be8:	08009c0d 	.word	0x08009c0d
 8009bec:	08009c39 	.word	0x08009c39
 8009bf0:	08009c41 	.word	0x08009c41
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e14a      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c02:	e146      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009c04:	2308      	movs	r3, #8
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0a:	e142      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c12:	e13e      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009c14:	cfff69f3 	.word	0xcfff69f3
 8009c18:	58000c00 	.word	0x58000c00
 8009c1c:	11fff4ff 	.word	0x11fff4ff
 8009c20:	40011000 	.word	0x40011000
 8009c24:	58024400 	.word	0x58024400
 8009c28:	40004400 	.word	0x40004400
 8009c2c:	40004800 	.word	0x40004800
 8009c30:	40004c00 	.word	0x40004c00
 8009c34:	40005000 	.word	0x40005000
 8009c38:	2320      	movs	r3, #32
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3e:	e128      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009c40:	2340      	movs	r3, #64	; 0x40
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e124      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009c48:	2380      	movs	r3, #128	; 0x80
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e120      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4acb      	ldr	r2, [pc, #812]	; (8009f84 <UART_SetConfig+0x698>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d176      	bne.n	8009d48 <UART_SetConfig+0x45c>
 8009c5a:	4bcb      	ldr	r3, [pc, #812]	; (8009f88 <UART_SetConfig+0x69c>)
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c62:	2b28      	cmp	r3, #40	; 0x28
 8009c64:	d86c      	bhi.n	8009d40 <UART_SetConfig+0x454>
 8009c66:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <UART_SetConfig+0x380>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009d11 	.word	0x08009d11
 8009c70:	08009d41 	.word	0x08009d41
 8009c74:	08009d41 	.word	0x08009d41
 8009c78:	08009d41 	.word	0x08009d41
 8009c7c:	08009d41 	.word	0x08009d41
 8009c80:	08009d41 	.word	0x08009d41
 8009c84:	08009d41 	.word	0x08009d41
 8009c88:	08009d41 	.word	0x08009d41
 8009c8c:	08009d19 	.word	0x08009d19
 8009c90:	08009d41 	.word	0x08009d41
 8009c94:	08009d41 	.word	0x08009d41
 8009c98:	08009d41 	.word	0x08009d41
 8009c9c:	08009d41 	.word	0x08009d41
 8009ca0:	08009d41 	.word	0x08009d41
 8009ca4:	08009d41 	.word	0x08009d41
 8009ca8:	08009d41 	.word	0x08009d41
 8009cac:	08009d21 	.word	0x08009d21
 8009cb0:	08009d41 	.word	0x08009d41
 8009cb4:	08009d41 	.word	0x08009d41
 8009cb8:	08009d41 	.word	0x08009d41
 8009cbc:	08009d41 	.word	0x08009d41
 8009cc0:	08009d41 	.word	0x08009d41
 8009cc4:	08009d41 	.word	0x08009d41
 8009cc8:	08009d41 	.word	0x08009d41
 8009ccc:	08009d29 	.word	0x08009d29
 8009cd0:	08009d41 	.word	0x08009d41
 8009cd4:	08009d41 	.word	0x08009d41
 8009cd8:	08009d41 	.word	0x08009d41
 8009cdc:	08009d41 	.word	0x08009d41
 8009ce0:	08009d41 	.word	0x08009d41
 8009ce4:	08009d41 	.word	0x08009d41
 8009ce8:	08009d41 	.word	0x08009d41
 8009cec:	08009d31 	.word	0x08009d31
 8009cf0:	08009d41 	.word	0x08009d41
 8009cf4:	08009d41 	.word	0x08009d41
 8009cf8:	08009d41 	.word	0x08009d41
 8009cfc:	08009d41 	.word	0x08009d41
 8009d00:	08009d41 	.word	0x08009d41
 8009d04:	08009d41 	.word	0x08009d41
 8009d08:	08009d41 	.word	0x08009d41
 8009d0c:	08009d39 	.word	0x08009d39
 8009d10:	2301      	movs	r3, #1
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d16:	e0bc      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d18:	2304      	movs	r3, #4
 8009d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1e:	e0b8      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d20:	2308      	movs	r3, #8
 8009d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d26:	e0b4      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d28:	2310      	movs	r3, #16
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2e:	e0b0      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d30:	2320      	movs	r3, #32
 8009d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d36:	e0ac      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d38:	2340      	movs	r3, #64	; 0x40
 8009d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3e:	e0a8      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d40:	2380      	movs	r3, #128	; 0x80
 8009d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d46:	e0a4      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a8f      	ldr	r2, [pc, #572]	; (8009f8c <UART_SetConfig+0x6a0>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d130      	bne.n	8009db4 <UART_SetConfig+0x4c8>
 8009d52:	4b8d      	ldr	r3, [pc, #564]	; (8009f88 <UART_SetConfig+0x69c>)
 8009d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	2b05      	cmp	r3, #5
 8009d5c:	d826      	bhi.n	8009dac <UART_SetConfig+0x4c0>
 8009d5e:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <UART_SetConfig+0x478>)
 8009d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d64:	08009d7d 	.word	0x08009d7d
 8009d68:	08009d85 	.word	0x08009d85
 8009d6c:	08009d8d 	.word	0x08009d8d
 8009d70:	08009d95 	.word	0x08009d95
 8009d74:	08009d9d 	.word	0x08009d9d
 8009d78:	08009da5 	.word	0x08009da5
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d82:	e086      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d84:	2304      	movs	r3, #4
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d8a:	e082      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d8c:	2308      	movs	r3, #8
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d92:	e07e      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d94:	2310      	movs	r3, #16
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9a:	e07a      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009d9c:	2320      	movs	r3, #32
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da2:	e076      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009da4:	2340      	movs	r3, #64	; 0x40
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009daa:	e072      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009dac:	2380      	movs	r3, #128	; 0x80
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db2:	e06e      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a75      	ldr	r2, [pc, #468]	; (8009f90 <UART_SetConfig+0x6a4>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d130      	bne.n	8009e20 <UART_SetConfig+0x534>
 8009dbe:	4b72      	ldr	r3, [pc, #456]	; (8009f88 <UART_SetConfig+0x69c>)
 8009dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc2:	f003 0307 	and.w	r3, r3, #7
 8009dc6:	2b05      	cmp	r3, #5
 8009dc8:	d826      	bhi.n	8009e18 <UART_SetConfig+0x52c>
 8009dca:	a201      	add	r2, pc, #4	; (adr r2, 8009dd0 <UART_SetConfig+0x4e4>)
 8009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd0:	08009de9 	.word	0x08009de9
 8009dd4:	08009df1 	.word	0x08009df1
 8009dd8:	08009df9 	.word	0x08009df9
 8009ddc:	08009e01 	.word	0x08009e01
 8009de0:	08009e09 	.word	0x08009e09
 8009de4:	08009e11 	.word	0x08009e11
 8009de8:	2300      	movs	r3, #0
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dee:	e050      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009df0:	2304      	movs	r3, #4
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df6:	e04c      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009df8:	2308      	movs	r3, #8
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfe:	e048      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e00:	2310      	movs	r3, #16
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e06:	e044      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e08:	2320      	movs	r3, #32
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0e:	e040      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e10:	2340      	movs	r3, #64	; 0x40
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e16:	e03c      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e18:	2380      	movs	r3, #128	; 0x80
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1e:	e038      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a5b      	ldr	r2, [pc, #364]	; (8009f94 <UART_SetConfig+0x6a8>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d130      	bne.n	8009e8c <UART_SetConfig+0x5a0>
 8009e2a:	4b57      	ldr	r3, [pc, #348]	; (8009f88 <UART_SetConfig+0x69c>)
 8009e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2e:	f003 0307 	and.w	r3, r3, #7
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	d826      	bhi.n	8009e84 <UART_SetConfig+0x598>
 8009e36:	a201      	add	r2, pc, #4	; (adr r2, 8009e3c <UART_SetConfig+0x550>)
 8009e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3c:	08009e55 	.word	0x08009e55
 8009e40:	08009e5d 	.word	0x08009e5d
 8009e44:	08009e65 	.word	0x08009e65
 8009e48:	08009e6d 	.word	0x08009e6d
 8009e4c:	08009e75 	.word	0x08009e75
 8009e50:	08009e7d 	.word	0x08009e7d
 8009e54:	2302      	movs	r3, #2
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5a:	e01a      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e5c:	2304      	movs	r3, #4
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e62:	e016      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e64:	2308      	movs	r3, #8
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6a:	e012      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e6c:	2310      	movs	r3, #16
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e72:	e00e      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e74:	2320      	movs	r3, #32
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7a:	e00a      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e7c:	2340      	movs	r3, #64	; 0x40
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e82:	e006      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e84:	2380      	movs	r3, #128	; 0x80
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8a:	e002      	b.n	8009e92 <UART_SetConfig+0x5a6>
 8009e8c:	2380      	movs	r3, #128	; 0x80
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a3f      	ldr	r2, [pc, #252]	; (8009f94 <UART_SetConfig+0x6a8>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	f040 80f8 	bne.w	800a08e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ea2:	2b20      	cmp	r3, #32
 8009ea4:	dc46      	bgt.n	8009f34 <UART_SetConfig+0x648>
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	f2c0 8082 	blt.w	8009fb0 <UART_SetConfig+0x6c4>
 8009eac:	3b02      	subs	r3, #2
 8009eae:	2b1e      	cmp	r3, #30
 8009eb0:	d87e      	bhi.n	8009fb0 <UART_SetConfig+0x6c4>
 8009eb2:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <UART_SetConfig+0x5cc>)
 8009eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb8:	08009f3b 	.word	0x08009f3b
 8009ebc:	08009fb1 	.word	0x08009fb1
 8009ec0:	08009f43 	.word	0x08009f43
 8009ec4:	08009fb1 	.word	0x08009fb1
 8009ec8:	08009fb1 	.word	0x08009fb1
 8009ecc:	08009fb1 	.word	0x08009fb1
 8009ed0:	08009f53 	.word	0x08009f53
 8009ed4:	08009fb1 	.word	0x08009fb1
 8009ed8:	08009fb1 	.word	0x08009fb1
 8009edc:	08009fb1 	.word	0x08009fb1
 8009ee0:	08009fb1 	.word	0x08009fb1
 8009ee4:	08009fb1 	.word	0x08009fb1
 8009ee8:	08009fb1 	.word	0x08009fb1
 8009eec:	08009fb1 	.word	0x08009fb1
 8009ef0:	08009f63 	.word	0x08009f63
 8009ef4:	08009fb1 	.word	0x08009fb1
 8009ef8:	08009fb1 	.word	0x08009fb1
 8009efc:	08009fb1 	.word	0x08009fb1
 8009f00:	08009fb1 	.word	0x08009fb1
 8009f04:	08009fb1 	.word	0x08009fb1
 8009f08:	08009fb1 	.word	0x08009fb1
 8009f0c:	08009fb1 	.word	0x08009fb1
 8009f10:	08009fb1 	.word	0x08009fb1
 8009f14:	08009fb1 	.word	0x08009fb1
 8009f18:	08009fb1 	.word	0x08009fb1
 8009f1c:	08009fb1 	.word	0x08009fb1
 8009f20:	08009fb1 	.word	0x08009fb1
 8009f24:	08009fb1 	.word	0x08009fb1
 8009f28:	08009fb1 	.word	0x08009fb1
 8009f2c:	08009fb1 	.word	0x08009fb1
 8009f30:	08009fa3 	.word	0x08009fa3
 8009f34:	2b40      	cmp	r3, #64	; 0x40
 8009f36:	d037      	beq.n	8009fa8 <UART_SetConfig+0x6bc>
 8009f38:	e03a      	b.n	8009fb0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f3a:	f7fe f935 	bl	80081a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f40:	e03c      	b.n	8009fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe f944 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f50:	e034      	b.n	8009fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f52:	f107 0318 	add.w	r3, r7, #24
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fa90 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f60:	e02c      	b.n	8009fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f62:	4b09      	ldr	r3, [pc, #36]	; (8009f88 <UART_SetConfig+0x69c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0320 	and.w	r3, r3, #32
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d016      	beq.n	8009f9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f6e:	4b06      	ldr	r3, [pc, #24]	; (8009f88 <UART_SetConfig+0x69c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	08db      	lsrs	r3, r3, #3
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	4a07      	ldr	r2, [pc, #28]	; (8009f98 <UART_SetConfig+0x6ac>)
 8009f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f80:	e01c      	b.n	8009fbc <UART_SetConfig+0x6d0>
 8009f82:	bf00      	nop
 8009f84:	40011400 	.word	0x40011400
 8009f88:	58024400 	.word	0x58024400
 8009f8c:	40007800 	.word	0x40007800
 8009f90:	40007c00 	.word	0x40007c00
 8009f94:	58000c00 	.word	0x58000c00
 8009f98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009f9c:	4b9d      	ldr	r3, [pc, #628]	; (800a214 <UART_SetConfig+0x928>)
 8009f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fa0:	e00c      	b.n	8009fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fa2:	4b9d      	ldr	r3, [pc, #628]	; (800a218 <UART_SetConfig+0x92c>)
 8009fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fa6:	e009      	b.n	8009fbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fae:	e005      	b.n	8009fbc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009fba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 81de 	beq.w	800a380 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc8:	4a94      	ldr	r2, [pc, #592]	; (800a21c <UART_SetConfig+0x930>)
 8009fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fd6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	4413      	add	r3, r2
 8009fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d305      	bcc.n	8009ff4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d903      	bls.n	8009ffc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ffa:	e1c1      	b.n	800a380 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ffe:	2200      	movs	r2, #0
 800a000:	60bb      	str	r3, [r7, #8]
 800a002:	60fa      	str	r2, [r7, #12]
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a008:	4a84      	ldr	r2, [pc, #528]	; (800a21c <UART_SetConfig+0x930>)
 800a00a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	2200      	movs	r2, #0
 800a012:	603b      	str	r3, [r7, #0]
 800a014:	607a      	str	r2, [r7, #4]
 800a016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a01a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a01e:	f7f6 f9b7 	bl	8000390 <__aeabi_uldivmod>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4610      	mov	r0, r2
 800a028:	4619      	mov	r1, r3
 800a02a:	f04f 0200 	mov.w	r2, #0
 800a02e:	f04f 0300 	mov.w	r3, #0
 800a032:	020b      	lsls	r3, r1, #8
 800a034:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a038:	0202      	lsls	r2, r0, #8
 800a03a:	6979      	ldr	r1, [r7, #20]
 800a03c:	6849      	ldr	r1, [r1, #4]
 800a03e:	0849      	lsrs	r1, r1, #1
 800a040:	2000      	movs	r0, #0
 800a042:	460c      	mov	r4, r1
 800a044:	4605      	mov	r5, r0
 800a046:	eb12 0804 	adds.w	r8, r2, r4
 800a04a:	eb43 0905 	adc.w	r9, r3, r5
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	469a      	mov	sl, r3
 800a056:	4693      	mov	fp, r2
 800a058:	4652      	mov	r2, sl
 800a05a:	465b      	mov	r3, fp
 800a05c:	4640      	mov	r0, r8
 800a05e:	4649      	mov	r1, r9
 800a060:	f7f6 f996 	bl	8000390 <__aeabi_uldivmod>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4613      	mov	r3, r2
 800a06a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a072:	d308      	bcc.n	800a086 <UART_SetConfig+0x79a>
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a07a:	d204      	bcs.n	800a086 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a082:	60da      	str	r2, [r3, #12]
 800a084:	e17c      	b.n	800a380 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a08c:	e178      	b.n	800a380 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a096:	f040 80c5 	bne.w	800a224 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a09a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	dc48      	bgt.n	800a134 <UART_SetConfig+0x848>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	db7b      	blt.n	800a19e <UART_SetConfig+0x8b2>
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	d879      	bhi.n	800a19e <UART_SetConfig+0x8b2>
 800a0aa:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <UART_SetConfig+0x7c4>)
 800a0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b0:	0800a13b 	.word	0x0800a13b
 800a0b4:	0800a143 	.word	0x0800a143
 800a0b8:	0800a19f 	.word	0x0800a19f
 800a0bc:	0800a19f 	.word	0x0800a19f
 800a0c0:	0800a14b 	.word	0x0800a14b
 800a0c4:	0800a19f 	.word	0x0800a19f
 800a0c8:	0800a19f 	.word	0x0800a19f
 800a0cc:	0800a19f 	.word	0x0800a19f
 800a0d0:	0800a15b 	.word	0x0800a15b
 800a0d4:	0800a19f 	.word	0x0800a19f
 800a0d8:	0800a19f 	.word	0x0800a19f
 800a0dc:	0800a19f 	.word	0x0800a19f
 800a0e0:	0800a19f 	.word	0x0800a19f
 800a0e4:	0800a19f 	.word	0x0800a19f
 800a0e8:	0800a19f 	.word	0x0800a19f
 800a0ec:	0800a19f 	.word	0x0800a19f
 800a0f0:	0800a16b 	.word	0x0800a16b
 800a0f4:	0800a19f 	.word	0x0800a19f
 800a0f8:	0800a19f 	.word	0x0800a19f
 800a0fc:	0800a19f 	.word	0x0800a19f
 800a100:	0800a19f 	.word	0x0800a19f
 800a104:	0800a19f 	.word	0x0800a19f
 800a108:	0800a19f 	.word	0x0800a19f
 800a10c:	0800a19f 	.word	0x0800a19f
 800a110:	0800a19f 	.word	0x0800a19f
 800a114:	0800a19f 	.word	0x0800a19f
 800a118:	0800a19f 	.word	0x0800a19f
 800a11c:	0800a19f 	.word	0x0800a19f
 800a120:	0800a19f 	.word	0x0800a19f
 800a124:	0800a19f 	.word	0x0800a19f
 800a128:	0800a19f 	.word	0x0800a19f
 800a12c:	0800a19f 	.word	0x0800a19f
 800a130:	0800a191 	.word	0x0800a191
 800a134:	2b40      	cmp	r3, #64	; 0x40
 800a136:	d02e      	beq.n	800a196 <UART_SetConfig+0x8aa>
 800a138:	e031      	b.n	800a19e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a13a:	f7fc fbf1 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 800a13e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a140:	e033      	b.n	800a1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a142:	f7fc fc03 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 800a146:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a148:	e02f      	b.n	800a1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a14a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fe f840 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a158:	e027      	b.n	800a1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a15a:	f107 0318 	add.w	r3, r7, #24
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe f98c 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a168:	e01f      	b.n	800a1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a16a:	4b2d      	ldr	r3, [pc, #180]	; (800a220 <UART_SetConfig+0x934>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0320 	and.w	r3, r3, #32
 800a172:	2b00      	cmp	r3, #0
 800a174:	d009      	beq.n	800a18a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a176:	4b2a      	ldr	r3, [pc, #168]	; (800a220 <UART_SetConfig+0x934>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	08db      	lsrs	r3, r3, #3
 800a17c:	f003 0303 	and.w	r3, r3, #3
 800a180:	4a24      	ldr	r2, [pc, #144]	; (800a214 <UART_SetConfig+0x928>)
 800a182:	fa22 f303 	lsr.w	r3, r2, r3
 800a186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a188:	e00f      	b.n	800a1aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a18a:	4b22      	ldr	r3, [pc, #136]	; (800a214 <UART_SetConfig+0x928>)
 800a18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a18e:	e00c      	b.n	800a1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a190:	4b21      	ldr	r3, [pc, #132]	; (800a218 <UART_SetConfig+0x92c>)
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a194:	e009      	b.n	800a1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a19c:	e005      	b.n	800a1aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a1a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 80e7 	beq.w	800a380 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	4a19      	ldr	r2, [pc, #100]	; (800a21c <UART_SetConfig+0x930>)
 800a1b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1c4:	005a      	lsls	r2, r3, #1
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	441a      	add	r2, r3
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	2b0f      	cmp	r3, #15
 800a1dc:	d916      	bls.n	800a20c <UART_SetConfig+0x920>
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1e4:	d212      	bcs.n	800a20c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	f023 030f 	bic.w	r3, r3, #15
 800a1ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	085b      	lsrs	r3, r3, #1
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1fe:	4313      	orrs	r3, r2
 800a200:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a208:	60da      	str	r2, [r3, #12]
 800a20a:	e0b9      	b.n	800a380 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a212:	e0b5      	b.n	800a380 <UART_SetConfig+0xa94>
 800a214:	03d09000 	.word	0x03d09000
 800a218:	003d0900 	.word	0x003d0900
 800a21c:	0800bac4 	.word	0x0800bac4
 800a220:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a224:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a228:	2b20      	cmp	r3, #32
 800a22a:	dc49      	bgt.n	800a2c0 <UART_SetConfig+0x9d4>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	db7c      	blt.n	800a32a <UART_SetConfig+0xa3e>
 800a230:	2b20      	cmp	r3, #32
 800a232:	d87a      	bhi.n	800a32a <UART_SetConfig+0xa3e>
 800a234:	a201      	add	r2, pc, #4	; (adr r2, 800a23c <UART_SetConfig+0x950>)
 800a236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23a:	bf00      	nop
 800a23c:	0800a2c7 	.word	0x0800a2c7
 800a240:	0800a2cf 	.word	0x0800a2cf
 800a244:	0800a32b 	.word	0x0800a32b
 800a248:	0800a32b 	.word	0x0800a32b
 800a24c:	0800a2d7 	.word	0x0800a2d7
 800a250:	0800a32b 	.word	0x0800a32b
 800a254:	0800a32b 	.word	0x0800a32b
 800a258:	0800a32b 	.word	0x0800a32b
 800a25c:	0800a2e7 	.word	0x0800a2e7
 800a260:	0800a32b 	.word	0x0800a32b
 800a264:	0800a32b 	.word	0x0800a32b
 800a268:	0800a32b 	.word	0x0800a32b
 800a26c:	0800a32b 	.word	0x0800a32b
 800a270:	0800a32b 	.word	0x0800a32b
 800a274:	0800a32b 	.word	0x0800a32b
 800a278:	0800a32b 	.word	0x0800a32b
 800a27c:	0800a2f7 	.word	0x0800a2f7
 800a280:	0800a32b 	.word	0x0800a32b
 800a284:	0800a32b 	.word	0x0800a32b
 800a288:	0800a32b 	.word	0x0800a32b
 800a28c:	0800a32b 	.word	0x0800a32b
 800a290:	0800a32b 	.word	0x0800a32b
 800a294:	0800a32b 	.word	0x0800a32b
 800a298:	0800a32b 	.word	0x0800a32b
 800a29c:	0800a32b 	.word	0x0800a32b
 800a2a0:	0800a32b 	.word	0x0800a32b
 800a2a4:	0800a32b 	.word	0x0800a32b
 800a2a8:	0800a32b 	.word	0x0800a32b
 800a2ac:	0800a32b 	.word	0x0800a32b
 800a2b0:	0800a32b 	.word	0x0800a32b
 800a2b4:	0800a32b 	.word	0x0800a32b
 800a2b8:	0800a32b 	.word	0x0800a32b
 800a2bc:	0800a31d 	.word	0x0800a31d
 800a2c0:	2b40      	cmp	r3, #64	; 0x40
 800a2c2:	d02e      	beq.n	800a322 <UART_SetConfig+0xa36>
 800a2c4:	e031      	b.n	800a32a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2c6:	f7fc fb2b 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 800a2ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2cc:	e033      	b.n	800a336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2ce:	f7fc fb3d 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 800a2d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2d4:	e02f      	b.n	800a336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fd ff7a 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2e4:	e027      	b.n	800a336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2e6:	f107 0318 	add.w	r3, r7, #24
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe f8c6 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2f4:	e01f      	b.n	800a336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2f6:	4b2d      	ldr	r3, [pc, #180]	; (800a3ac <UART_SetConfig+0xac0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0320 	and.w	r3, r3, #32
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d009      	beq.n	800a316 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a302:	4b2a      	ldr	r3, [pc, #168]	; (800a3ac <UART_SetConfig+0xac0>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	08db      	lsrs	r3, r3, #3
 800a308:	f003 0303 	and.w	r3, r3, #3
 800a30c:	4a28      	ldr	r2, [pc, #160]	; (800a3b0 <UART_SetConfig+0xac4>)
 800a30e:	fa22 f303 	lsr.w	r3, r2, r3
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a314:	e00f      	b.n	800a336 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a316:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <UART_SetConfig+0xac4>)
 800a318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a31a:	e00c      	b.n	800a336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a31c:	4b25      	ldr	r3, [pc, #148]	; (800a3b4 <UART_SetConfig+0xac8>)
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a320:	e009      	b.n	800a336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a328:	e005      	b.n	800a336 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a32a:	2300      	movs	r3, #0
 800a32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a334:	bf00      	nop
    }

    if (pclk != 0U)
 800a336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d021      	beq.n	800a380 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	4a1d      	ldr	r2, [pc, #116]	; (800a3b8 <UART_SetConfig+0xacc>)
 800a342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a346:	461a      	mov	r2, r3
 800a348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	085b      	lsrs	r3, r3, #1
 800a354:	441a      	add	r2, r3
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	2b0f      	cmp	r3, #15
 800a364:	d909      	bls.n	800a37a <UART_SetConfig+0xa8e>
 800a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a36c:	d205      	bcs.n	800a37a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	b29a      	uxth	r2, r3
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	60da      	str	r2, [r3, #12]
 800a378:	e002      	b.n	800a380 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2201      	movs	r2, #1
 800a384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2200      	movs	r2, #0
 800a394:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2200      	movs	r2, #0
 800a39a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a39c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3748      	adds	r7, #72	; 0x48
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3aa:	bf00      	nop
 800a3ac:	58024400 	.word	0x58024400
 800a3b0:	03d09000 	.word	0x03d09000
 800a3b4:	003d0900 	.word	0x003d0900
 800a3b8:	0800bac4 	.word	0x0800bac4

0800a3bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00a      	beq.n	800a42a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42e:	f003 0308 	and.w	r3, r3, #8
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00a      	beq.n	800a46e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	f003 0320 	and.w	r3, r3, #32
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	430a      	orrs	r2, r1
 800a48e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d01a      	beq.n	800a4d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ba:	d10a      	bne.n	800a4d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	605a      	str	r2, [r3, #4]
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af02      	add	r7, sp, #8
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a510:	f7f8 fa42 	bl	8002998 <HAL_GetTick>
 800a514:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0308 	and.w	r3, r3, #8
 800a520:	2b08      	cmp	r3, #8
 800a522:	d10e      	bne.n	800a542 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f82f 	bl	800a596 <UART_WaitOnFlagUntilTimeout>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e025      	b.n	800a58e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d10e      	bne.n	800a56e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f819 	bl	800a596 <UART_WaitOnFlagUntilTimeout>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e00f      	b.n	800a58e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2220      	movs	r2, #32
 800a572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2220      	movs	r2, #32
 800a57a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b09c      	sub	sp, #112	; 0x70
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	603b      	str	r3, [r7, #0]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5a6:	e0a9      	b.n	800a6fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ae:	f000 80a5 	beq.w	800a6fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5b2:	f7f8 f9f1 	bl	8002998 <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d302      	bcc.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a5c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d140      	bne.n	800a64a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5d0:	e853 3f00 	ldrex	r3, [r3]
 800a5d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5ee:	e841 2300 	strex	r3, r2, [r1]
 800a5f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a5f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1e6      	bne.n	800a5c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	3308      	adds	r3, #8
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a604:	e853 3f00 	ldrex	r3, [r3]
 800a608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	f023 0301 	bic.w	r3, r3, #1
 800a610:	663b      	str	r3, [r7, #96]	; 0x60
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3308      	adds	r3, #8
 800a618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a61a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a61c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1e5      	bne.n	800a5fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2220      	movs	r2, #32
 800a632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2220      	movs	r2, #32
 800a63a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e069      	b.n	800a71e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0304 	and.w	r3, r3, #4
 800a654:	2b00      	cmp	r3, #0
 800a656:	d051      	beq.n	800a6fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a666:	d149      	bne.n	800a6fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a670:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	e853 3f00 	ldrex	r3, [r3]
 800a67e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a686:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a690:	637b      	str	r3, [r7, #52]	; 0x34
 800a692:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a698:	e841 2300 	strex	r3, r2, [r1]
 800a69c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1e6      	bne.n	800a672 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	e853 3f00 	ldrex	r3, [r3]
 800a6b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	f023 0301 	bic.w	r3, r3, #1
 800a6ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a6c4:	623a      	str	r2, [r7, #32]
 800a6c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c8:	69f9      	ldr	r1, [r7, #28]
 800a6ca:	6a3a      	ldr	r2, [r7, #32]
 800a6cc:	e841 2300 	strex	r3, r2, [r1]
 800a6d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1e5      	bne.n	800a6a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	e010      	b.n	800a71e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	69da      	ldr	r2, [r3, #28]
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	4013      	ands	r3, r2
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	429a      	cmp	r2, r3
 800a70a:	bf0c      	ite	eq
 800a70c:	2301      	moveq	r3, #1
 800a70e:	2300      	movne	r3, #0
 800a710:	b2db      	uxtb	r3, r3
 800a712:	461a      	mov	r2, r3
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	429a      	cmp	r2, r3
 800a718:	f43f af46 	beq.w	800a5a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3770      	adds	r7, #112	; 0x70
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a726:	b480      	push	{r7}
 800a728:	b085      	sub	sp, #20
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a734:	2b01      	cmp	r3, #1
 800a736:	d101      	bne.n	800a73c <HAL_UARTEx_DisableFifoMode+0x16>
 800a738:	2302      	movs	r3, #2
 800a73a:	e027      	b.n	800a78c <HAL_UARTEx_DisableFifoMode+0x66>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2224      	movs	r2, #36	; 0x24
 800a748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f022 0201 	bic.w	r2, r2, #1
 800a762:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a76a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d101      	bne.n	800a7b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	e02d      	b.n	800a80c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2224      	movs	r2, #36	; 0x24
 800a7bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f022 0201 	bic.w	r2, r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f84f 	bl	800a890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a824:	2b01      	cmp	r3, #1
 800a826:	d101      	bne.n	800a82c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a828:	2302      	movs	r3, #2
 800a82a:	e02d      	b.n	800a888 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2224      	movs	r2, #36	; 0x24
 800a838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f022 0201 	bic.w	r2, r2, #1
 800a852:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f811 	bl	800a890 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d108      	bne.n	800a8b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8b0:	e031      	b.n	800a916 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8b2:	2310      	movs	r3, #16
 800a8b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8b6:	2310      	movs	r3, #16
 800a8b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	0e5b      	lsrs	r3, r3, #25
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0307 	and.w	r3, r3, #7
 800a8c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	0f5b      	lsrs	r3, r3, #29
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f003 0307 	and.w	r3, r3, #7
 800a8d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	7b3a      	ldrb	r2, [r7, #12]
 800a8de:	4911      	ldr	r1, [pc, #68]	; (800a924 <UARTEx_SetNbDataToProcess+0x94>)
 800a8e0:	5c8a      	ldrb	r2, [r1, r2]
 800a8e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8e6:	7b3a      	ldrb	r2, [r7, #12]
 800a8e8:	490f      	ldr	r1, [pc, #60]	; (800a928 <UARTEx_SetNbDataToProcess+0x98>)
 800a8ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	7b7a      	ldrb	r2, [r7, #13]
 800a8fc:	4909      	ldr	r1, [pc, #36]	; (800a924 <UARTEx_SetNbDataToProcess+0x94>)
 800a8fe:	5c8a      	ldrb	r2, [r1, r2]
 800a900:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a904:	7b7a      	ldrb	r2, [r7, #13]
 800a906:	4908      	ldr	r1, [pc, #32]	; (800a928 <UARTEx_SetNbDataToProcess+0x98>)
 800a908:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a90a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a90e:	b29a      	uxth	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a916:	bf00      	nop
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	0800badc 	.word	0x0800badc
 800a928:	0800bae4 	.word	0x0800bae4

0800a92c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d121      	bne.n	800a982 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	4b27      	ldr	r3, [pc, #156]	; (800a9e0 <FMC_SDRAM_Init+0xb4>)
 800a944:	4013      	ands	r3, r2
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	6851      	ldr	r1, [r2, #4]
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	6892      	ldr	r2, [r2, #8]
 800a94e:	4311      	orrs	r1, r2
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	68d2      	ldr	r2, [r2, #12]
 800a954:	4311      	orrs	r1, r2
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	6912      	ldr	r2, [r2, #16]
 800a95a:	4311      	orrs	r1, r2
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	6952      	ldr	r2, [r2, #20]
 800a960:	4311      	orrs	r1, r2
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	6992      	ldr	r2, [r2, #24]
 800a966:	4311      	orrs	r1, r2
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	69d2      	ldr	r2, [r2, #28]
 800a96c:	4311      	orrs	r1, r2
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	6a12      	ldr	r2, [r2, #32]
 800a972:	4311      	orrs	r1, r2
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a978:	430a      	orrs	r2, r1
 800a97a:	431a      	orrs	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	e026      	b.n	800a9d0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	69d9      	ldr	r1, [r3, #28]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	4319      	orrs	r1, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	430b      	orrs	r3, r1
 800a99a:	431a      	orrs	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	4b0e      	ldr	r3, [pc, #56]	; (800a9e0 <FMC_SDRAM_Init+0xb4>)
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	6851      	ldr	r1, [r2, #4]
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	6892      	ldr	r2, [r2, #8]
 800a9b0:	4311      	orrs	r1, r2
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	68d2      	ldr	r2, [r2, #12]
 800a9b6:	4311      	orrs	r1, r2
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	6912      	ldr	r2, [r2, #16]
 800a9bc:	4311      	orrs	r1, r2
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	6952      	ldr	r2, [r2, #20]
 800a9c2:	4311      	orrs	r1, r2
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	6992      	ldr	r2, [r2, #24]
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	431a      	orrs	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	ffff8000 	.word	0xffff8000

0800a9e4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d128      	bne.n	800aa48 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	1e59      	subs	r1, r3, #1
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	4319      	orrs	r1, r3
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	021b      	lsls	r3, r3, #8
 800aa16:	4319      	orrs	r1, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	031b      	lsls	r3, r3, #12
 800aa20:	4319      	orrs	r1, r3
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	041b      	lsls	r3, r3, #16
 800aa2a:	4319      	orrs	r1, r3
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	3b01      	subs	r3, #1
 800aa32:	051b      	lsls	r3, r3, #20
 800aa34:	4319      	orrs	r1, r3
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	061b      	lsls	r3, r3, #24
 800aa3e:	430b      	orrs	r3, r1
 800aa40:	431a      	orrs	r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	609a      	str	r2, [r3, #8]
 800aa46:	e02d      	b.n	800aaa4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	4b19      	ldr	r3, [pc, #100]	; (800aab4 <FMC_SDRAM_Timing_Init+0xd0>)
 800aa4e:	4013      	ands	r3, r2
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	68d2      	ldr	r2, [r2, #12]
 800aa54:	3a01      	subs	r2, #1
 800aa56:	0311      	lsls	r1, r2, #12
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	6952      	ldr	r2, [r2, #20]
 800aa5c:	3a01      	subs	r2, #1
 800aa5e:	0512      	lsls	r2, r2, #20
 800aa60:	430a      	orrs	r2, r1
 800aa62:	431a      	orrs	r2, r3
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	1e59      	subs	r1, r3, #1
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	4319      	orrs	r1, r3
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	021b      	lsls	r3, r3, #8
 800aa88:	4319      	orrs	r1, r3
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	041b      	lsls	r3, r3, #16
 800aa92:	4319      	orrs	r1, r3
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	061b      	lsls	r3, r3, #24
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	431a      	orrs	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	ff0f0fff 	.word	0xff0f0fff

0800aab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aab8:	b084      	sub	sp, #16
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	f107 001c 	add.w	r0, r7, #28
 800aac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d120      	bne.n	800ab12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	68da      	ldr	r2, [r3, #12]
 800aae0:	4b2a      	ldr	r3, [pc, #168]	; (800ab8c <USB_CoreInit+0xd4>)
 800aae2:	4013      	ands	r3, r2
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aaf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d105      	bne.n	800ab06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 faac 	bl	800b064 <USB_CoreReset>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]
 800ab10:	e01a      	b.n	800ab48 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 faa0 	bl	800b064 <USB_CoreReset>
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	639a      	str	r2, [r3, #56]	; 0x38
 800ab3a:	e005      	b.n	800ab48 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d116      	bne.n	800ab7c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab5c:	4b0c      	ldr	r3, [pc, #48]	; (800ab90 <USB_CoreInit+0xd8>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	f043 0206 	orr.w	r2, r3, #6
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f043 0220 	orr.w	r2, r3, #32
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab88:	b004      	add	sp, #16
 800ab8a:	4770      	bx	lr
 800ab8c:	ffbdffbf 	.word	0xffbdffbf
 800ab90:	03ee0000 	.word	0x03ee0000

0800ab94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f023 0201 	bic.w	r2, r3, #1
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	460b      	mov	r3, r1
 800abc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d115      	bne.n	800ac04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800abe4:	2001      	movs	r0, #1
 800abe6:	f7f7 fee3 	bl	80029b0 <HAL_Delay>
      ms++;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3301      	adds	r3, #1
 800abee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fa29 	bl	800b048 <USB_GetMode>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d01e      	beq.n	800ac3a <USB_SetCurrentMode+0x84>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b31      	cmp	r3, #49	; 0x31
 800ac00:	d9f0      	bls.n	800abe4 <USB_SetCurrentMode+0x2e>
 800ac02:	e01a      	b.n	800ac3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d115      	bne.n	800ac36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac16:	2001      	movs	r0, #1
 800ac18:	f7f7 feca 	bl	80029b0 <HAL_Delay>
      ms++;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 fa10 	bl	800b048 <USB_GetMode>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d005      	beq.n	800ac3a <USB_SetCurrentMode+0x84>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b31      	cmp	r3, #49	; 0x31
 800ac32:	d9f0      	bls.n	800ac16 <USB_SetCurrentMode+0x60>
 800ac34:	e001      	b.n	800ac3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e005      	b.n	800ac46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b32      	cmp	r3, #50	; 0x32
 800ac3e:	d101      	bne.n	800ac44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e000      	b.n	800ac46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac50:	b084      	sub	sp, #16
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b086      	sub	sp, #24
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ac5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	613b      	str	r3, [r7, #16]
 800ac6e:	e009      	b.n	800ac84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	3340      	adds	r3, #64	; 0x40
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	3301      	adds	r3, #1
 800ac82:	613b      	str	r3, [r7, #16]
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2b0e      	cmp	r3, #14
 800ac88:	d9f2      	bls.n	800ac70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d11c      	bne.n	800acca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac9e:	f043 0302 	orr.w	r3, r3, #2
 800aca2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	e005      	b.n	800acd6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acdc:	461a      	mov	r2, r3
 800acde:	2300      	movs	r3, #0
 800ace0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace8:	4619      	mov	r1, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf0:	461a      	mov	r2, r3
 800acf2:	680b      	ldr	r3, [r1, #0]
 800acf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d10c      	bne.n	800ad16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d104      	bne.n	800ad0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad02:	2100      	movs	r1, #0
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f965 	bl	800afd4 <USB_SetDevSpeed>
 800ad0a:	e008      	b.n	800ad1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f960 	bl	800afd4 <USB_SetDevSpeed>
 800ad14:	e003      	b.n	800ad1e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad16:	2103      	movs	r1, #3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f95b 	bl	800afd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad1e:	2110      	movs	r1, #16
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f8f3 	bl	800af0c <USB_FlushTxFifo>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f91f 	bl	800af74 <USB_FlushRxFifo>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad46:	461a      	mov	r2, r3
 800ad48:	2300      	movs	r3, #0
 800ad4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad52:	461a      	mov	r2, r3
 800ad54:	2300      	movs	r3, #0
 800ad56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5e:	461a      	mov	r2, r3
 800ad60:	2300      	movs	r3, #0
 800ad62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad64:	2300      	movs	r3, #0
 800ad66:	613b      	str	r3, [r7, #16]
 800ad68:	e043      	b.n	800adf2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	015a      	lsls	r2, r3, #5
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad80:	d118      	bne.n	800adb4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad94:	461a      	mov	r2, r3
 800ad96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	e013      	b.n	800adc6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adaa:	461a      	mov	r2, r3
 800adac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	e008      	b.n	800adc6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc0:	461a      	mov	r2, r3
 800adc2:	2300      	movs	r3, #0
 800adc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add2:	461a      	mov	r2, r3
 800add4:	2300      	movs	r3, #0
 800add6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade4:	461a      	mov	r2, r3
 800ade6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800adea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	3301      	adds	r3, #1
 800adf0:	613b      	str	r3, [r7, #16]
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d3b7      	bcc.n	800ad6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adfa:	2300      	movs	r3, #0
 800adfc:	613b      	str	r3, [r7, #16]
 800adfe:	e043      	b.n	800ae88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae16:	d118      	bne.n	800ae4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10a      	bne.n	800ae34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	015a      	lsls	r2, r3, #5
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	4413      	add	r3, r2
 800ae26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	e013      	b.n	800ae5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae40:	461a      	mov	r2, r3
 800ae42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	e008      	b.n	800ae5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae56:	461a      	mov	r2, r3
 800ae58:	2300      	movs	r3, #0
 800ae5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae68:	461a      	mov	r2, r3
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	3301      	adds	r3, #1
 800ae86:	613b      	str	r3, [r7, #16]
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d3b7      	bcc.n	800ae00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aea2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aeb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d105      	bne.n	800aec4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	f043 0210 	orr.w	r2, r3, #16
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	699a      	ldr	r2, [r3, #24]
 800aec8:	4b0e      	ldr	r3, [pc, #56]	; (800af04 <USB_DevInit+0x2b4>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d005      	beq.n	800aee2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	f043 0208 	orr.w	r2, r3, #8
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d105      	bne.n	800aef4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	699a      	ldr	r2, [r3, #24]
 800aeec:	4b06      	ldr	r3, [pc, #24]	; (800af08 <USB_DevInit+0x2b8>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af00:	b004      	add	sp, #16
 800af02:	4770      	bx	lr
 800af04:	803c3800 	.word	0x803c3800
 800af08:	40000004 	.word	0x40000004

0800af0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af16:	2300      	movs	r3, #0
 800af18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3301      	adds	r3, #1
 800af1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	4a13      	ldr	r2, [pc, #76]	; (800af70 <USB_FlushTxFifo+0x64>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d901      	bls.n	800af2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	e01b      	b.n	800af64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	daf2      	bge.n	800af1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800af34:	2300      	movs	r3, #0
 800af36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	019b      	lsls	r3, r3, #6
 800af3c:	f043 0220 	orr.w	r2, r3, #32
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3301      	adds	r3, #1
 800af48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	4a08      	ldr	r2, [pc, #32]	; (800af70 <USB_FlushTxFifo+0x64>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d901      	bls.n	800af56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	e006      	b.n	800af64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b20      	cmp	r3, #32
 800af60:	d0f0      	beq.n	800af44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	00030d40 	.word	0x00030d40

0800af74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3301      	adds	r3, #1
 800af84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	4a11      	ldr	r2, [pc, #68]	; (800afd0 <USB_FlushRxFifo+0x5c>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d901      	bls.n	800af92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e018      	b.n	800afc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	daf2      	bge.n	800af80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2210      	movs	r2, #16
 800afa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	4a08      	ldr	r2, [pc, #32]	; (800afd0 <USB_FlushRxFifo+0x5c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d901      	bls.n	800afb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e006      	b.n	800afc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0310 	and.w	r3, r3, #16
 800afbe:	2b10      	cmp	r3, #16
 800afc0:	d0f0      	beq.n	800afa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	00030d40 	.word	0x00030d40

0800afd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	78fb      	ldrb	r3, [r7, #3]
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aff4:	4313      	orrs	r3, r2
 800aff6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b006:	b480      	push	{r7}
 800b008:	b085      	sub	sp, #20
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b020:	f023 0303 	bic.w	r3, r3, #3
 800b024:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b034:	f043 0302 	orr.w	r3, r3, #2
 800b038:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	f003 0301 	and.w	r3, r3, #1
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3301      	adds	r3, #1
 800b074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	4a13      	ldr	r2, [pc, #76]	; (800b0c8 <USB_CoreReset+0x64>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d901      	bls.n	800b082 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e01b      	b.n	800b0ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	2b00      	cmp	r3, #0
 800b088:	daf2      	bge.n	800b070 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b08a:	2300      	movs	r3, #0
 800b08c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	f043 0201 	orr.w	r2, r3, #1
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	3301      	adds	r3, #1
 800b09e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4a09      	ldr	r2, [pc, #36]	; (800b0c8 <USB_CoreReset+0x64>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d901      	bls.n	800b0ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	e006      	b.n	800b0ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d0f0      	beq.n	800b09a <USB_CoreReset+0x36>

  return HAL_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3714      	adds	r7, #20
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	00030d40 	.word	0x00030d40

0800b0cc <sniprintf>:
 800b0cc:	b40c      	push	{r2, r3}
 800b0ce:	b530      	push	{r4, r5, lr}
 800b0d0:	4b17      	ldr	r3, [pc, #92]	; (800b130 <sniprintf+0x64>)
 800b0d2:	1e0c      	subs	r4, r1, #0
 800b0d4:	681d      	ldr	r5, [r3, #0]
 800b0d6:	b09d      	sub	sp, #116	; 0x74
 800b0d8:	da08      	bge.n	800b0ec <sniprintf+0x20>
 800b0da:	238b      	movs	r3, #139	; 0x8b
 800b0dc:	602b      	str	r3, [r5, #0]
 800b0de:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e2:	b01d      	add	sp, #116	; 0x74
 800b0e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0e8:	b002      	add	sp, #8
 800b0ea:	4770      	bx	lr
 800b0ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b0f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0f4:	bf14      	ite	ne
 800b0f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0fa:	4623      	moveq	r3, r4
 800b0fc:	9304      	str	r3, [sp, #16]
 800b0fe:	9307      	str	r3, [sp, #28]
 800b100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b104:	9002      	str	r0, [sp, #8]
 800b106:	9006      	str	r0, [sp, #24]
 800b108:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b10c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b10e:	ab21      	add	r3, sp, #132	; 0x84
 800b110:	a902      	add	r1, sp, #8
 800b112:	4628      	mov	r0, r5
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	f000 f9a1 	bl	800b45c <_svfiprintf_r>
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	bfbc      	itt	lt
 800b11e:	238b      	movlt	r3, #139	; 0x8b
 800b120:	602b      	strlt	r3, [r5, #0]
 800b122:	2c00      	cmp	r4, #0
 800b124:	d0dd      	beq.n	800b0e2 <sniprintf+0x16>
 800b126:	9b02      	ldr	r3, [sp, #8]
 800b128:	2200      	movs	r2, #0
 800b12a:	701a      	strb	r2, [r3, #0]
 800b12c:	e7d9      	b.n	800b0e2 <sniprintf+0x16>
 800b12e:	bf00      	nop
 800b130:	2400005c 	.word	0x2400005c

0800b134 <memset>:
 800b134:	4402      	add	r2, r0
 800b136:	4603      	mov	r3, r0
 800b138:	4293      	cmp	r3, r2
 800b13a:	d100      	bne.n	800b13e <memset+0xa>
 800b13c:	4770      	bx	lr
 800b13e:	f803 1b01 	strb.w	r1, [r3], #1
 800b142:	e7f9      	b.n	800b138 <memset+0x4>

0800b144 <__errno>:
 800b144:	4b01      	ldr	r3, [pc, #4]	; (800b14c <__errno+0x8>)
 800b146:	6818      	ldr	r0, [r3, #0]
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	2400005c 	.word	0x2400005c

0800b150 <__libc_init_array>:
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	4d0d      	ldr	r5, [pc, #52]	; (800b188 <__libc_init_array+0x38>)
 800b154:	4c0d      	ldr	r4, [pc, #52]	; (800b18c <__libc_init_array+0x3c>)
 800b156:	1b64      	subs	r4, r4, r5
 800b158:	10a4      	asrs	r4, r4, #2
 800b15a:	2600      	movs	r6, #0
 800b15c:	42a6      	cmp	r6, r4
 800b15e:	d109      	bne.n	800b174 <__libc_init_array+0x24>
 800b160:	4d0b      	ldr	r5, [pc, #44]	; (800b190 <__libc_init_array+0x40>)
 800b162:	4c0c      	ldr	r4, [pc, #48]	; (800b194 <__libc_init_array+0x44>)
 800b164:	f000 fc6a 	bl	800ba3c <_init>
 800b168:	1b64      	subs	r4, r4, r5
 800b16a:	10a4      	asrs	r4, r4, #2
 800b16c:	2600      	movs	r6, #0
 800b16e:	42a6      	cmp	r6, r4
 800b170:	d105      	bne.n	800b17e <__libc_init_array+0x2e>
 800b172:	bd70      	pop	{r4, r5, r6, pc}
 800b174:	f855 3b04 	ldr.w	r3, [r5], #4
 800b178:	4798      	blx	r3
 800b17a:	3601      	adds	r6, #1
 800b17c:	e7ee      	b.n	800b15c <__libc_init_array+0xc>
 800b17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b182:	4798      	blx	r3
 800b184:	3601      	adds	r6, #1
 800b186:	e7f2      	b.n	800b16e <__libc_init_array+0x1e>
 800b188:	0800bb28 	.word	0x0800bb28
 800b18c:	0800bb28 	.word	0x0800bb28
 800b190:	0800bb28 	.word	0x0800bb28
 800b194:	0800bb2c 	.word	0x0800bb2c

0800b198 <__retarget_lock_acquire_recursive>:
 800b198:	4770      	bx	lr

0800b19a <__retarget_lock_release_recursive>:
 800b19a:	4770      	bx	lr

0800b19c <memcpy>:
 800b19c:	440a      	add	r2, r1
 800b19e:	4291      	cmp	r1, r2
 800b1a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1a4:	d100      	bne.n	800b1a8 <memcpy+0xc>
 800b1a6:	4770      	bx	lr
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1b2:	4291      	cmp	r1, r2
 800b1b4:	d1f9      	bne.n	800b1aa <memcpy+0xe>
 800b1b6:	bd10      	pop	{r4, pc}

0800b1b8 <_free_r>:
 800b1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ba:	2900      	cmp	r1, #0
 800b1bc:	d044      	beq.n	800b248 <_free_r+0x90>
 800b1be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1c2:	9001      	str	r0, [sp, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1ca:	bfb8      	it	lt
 800b1cc:	18e4      	addlt	r4, r4, r3
 800b1ce:	f000 f8df 	bl	800b390 <__malloc_lock>
 800b1d2:	4a1e      	ldr	r2, [pc, #120]	; (800b24c <_free_r+0x94>)
 800b1d4:	9801      	ldr	r0, [sp, #4]
 800b1d6:	6813      	ldr	r3, [r2, #0]
 800b1d8:	b933      	cbnz	r3, 800b1e8 <_free_r+0x30>
 800b1da:	6063      	str	r3, [r4, #4]
 800b1dc:	6014      	str	r4, [r2, #0]
 800b1de:	b003      	add	sp, #12
 800b1e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1e4:	f000 b8da 	b.w	800b39c <__malloc_unlock>
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	d908      	bls.n	800b1fe <_free_r+0x46>
 800b1ec:	6825      	ldr	r5, [r4, #0]
 800b1ee:	1961      	adds	r1, r4, r5
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	bf01      	itttt	eq
 800b1f4:	6819      	ldreq	r1, [r3, #0]
 800b1f6:	685b      	ldreq	r3, [r3, #4]
 800b1f8:	1949      	addeq	r1, r1, r5
 800b1fa:	6021      	streq	r1, [r4, #0]
 800b1fc:	e7ed      	b.n	800b1da <_free_r+0x22>
 800b1fe:	461a      	mov	r2, r3
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	b10b      	cbz	r3, 800b208 <_free_r+0x50>
 800b204:	42a3      	cmp	r3, r4
 800b206:	d9fa      	bls.n	800b1fe <_free_r+0x46>
 800b208:	6811      	ldr	r1, [r2, #0]
 800b20a:	1855      	adds	r5, r2, r1
 800b20c:	42a5      	cmp	r5, r4
 800b20e:	d10b      	bne.n	800b228 <_free_r+0x70>
 800b210:	6824      	ldr	r4, [r4, #0]
 800b212:	4421      	add	r1, r4
 800b214:	1854      	adds	r4, r2, r1
 800b216:	42a3      	cmp	r3, r4
 800b218:	6011      	str	r1, [r2, #0]
 800b21a:	d1e0      	bne.n	800b1de <_free_r+0x26>
 800b21c:	681c      	ldr	r4, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	6053      	str	r3, [r2, #4]
 800b222:	440c      	add	r4, r1
 800b224:	6014      	str	r4, [r2, #0]
 800b226:	e7da      	b.n	800b1de <_free_r+0x26>
 800b228:	d902      	bls.n	800b230 <_free_r+0x78>
 800b22a:	230c      	movs	r3, #12
 800b22c:	6003      	str	r3, [r0, #0]
 800b22e:	e7d6      	b.n	800b1de <_free_r+0x26>
 800b230:	6825      	ldr	r5, [r4, #0]
 800b232:	1961      	adds	r1, r4, r5
 800b234:	428b      	cmp	r3, r1
 800b236:	bf04      	itt	eq
 800b238:	6819      	ldreq	r1, [r3, #0]
 800b23a:	685b      	ldreq	r3, [r3, #4]
 800b23c:	6063      	str	r3, [r4, #4]
 800b23e:	bf04      	itt	eq
 800b240:	1949      	addeq	r1, r1, r5
 800b242:	6021      	streq	r1, [r4, #0]
 800b244:	6054      	str	r4, [r2, #4]
 800b246:	e7ca      	b.n	800b1de <_free_r+0x26>
 800b248:	b003      	add	sp, #12
 800b24a:	bd30      	pop	{r4, r5, pc}
 800b24c:	24000f94 	.word	0x24000f94

0800b250 <sbrk_aligned>:
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	4e0e      	ldr	r6, [pc, #56]	; (800b28c <sbrk_aligned+0x3c>)
 800b254:	460c      	mov	r4, r1
 800b256:	6831      	ldr	r1, [r6, #0]
 800b258:	4605      	mov	r5, r0
 800b25a:	b911      	cbnz	r1, 800b262 <sbrk_aligned+0x12>
 800b25c:	f000 fba6 	bl	800b9ac <_sbrk_r>
 800b260:	6030      	str	r0, [r6, #0]
 800b262:	4621      	mov	r1, r4
 800b264:	4628      	mov	r0, r5
 800b266:	f000 fba1 	bl	800b9ac <_sbrk_r>
 800b26a:	1c43      	adds	r3, r0, #1
 800b26c:	d00a      	beq.n	800b284 <sbrk_aligned+0x34>
 800b26e:	1cc4      	adds	r4, r0, #3
 800b270:	f024 0403 	bic.w	r4, r4, #3
 800b274:	42a0      	cmp	r0, r4
 800b276:	d007      	beq.n	800b288 <sbrk_aligned+0x38>
 800b278:	1a21      	subs	r1, r4, r0
 800b27a:	4628      	mov	r0, r5
 800b27c:	f000 fb96 	bl	800b9ac <_sbrk_r>
 800b280:	3001      	adds	r0, #1
 800b282:	d101      	bne.n	800b288 <sbrk_aligned+0x38>
 800b284:	f04f 34ff 	mov.w	r4, #4294967295
 800b288:	4620      	mov	r0, r4
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	24000f98 	.word	0x24000f98

0800b290 <_malloc_r>:
 800b290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b294:	1ccd      	adds	r5, r1, #3
 800b296:	f025 0503 	bic.w	r5, r5, #3
 800b29a:	3508      	adds	r5, #8
 800b29c:	2d0c      	cmp	r5, #12
 800b29e:	bf38      	it	cc
 800b2a0:	250c      	movcc	r5, #12
 800b2a2:	2d00      	cmp	r5, #0
 800b2a4:	4607      	mov	r7, r0
 800b2a6:	db01      	blt.n	800b2ac <_malloc_r+0x1c>
 800b2a8:	42a9      	cmp	r1, r5
 800b2aa:	d905      	bls.n	800b2b8 <_malloc_r+0x28>
 800b2ac:	230c      	movs	r3, #12
 800b2ae:	603b      	str	r3, [r7, #0]
 800b2b0:	2600      	movs	r6, #0
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b38c <_malloc_r+0xfc>
 800b2bc:	f000 f868 	bl	800b390 <__malloc_lock>
 800b2c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b2c4:	461c      	mov	r4, r3
 800b2c6:	bb5c      	cbnz	r4, 800b320 <_malloc_r+0x90>
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	f7ff ffc0 	bl	800b250 <sbrk_aligned>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	d155      	bne.n	800b382 <_malloc_r+0xf2>
 800b2d6:	f8d8 4000 	ldr.w	r4, [r8]
 800b2da:	4626      	mov	r6, r4
 800b2dc:	2e00      	cmp	r6, #0
 800b2de:	d145      	bne.n	800b36c <_malloc_r+0xdc>
 800b2e0:	2c00      	cmp	r4, #0
 800b2e2:	d048      	beq.n	800b376 <_malloc_r+0xe6>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	eb04 0903 	add.w	r9, r4, r3
 800b2ee:	f000 fb5d 	bl	800b9ac <_sbrk_r>
 800b2f2:	4581      	cmp	r9, r0
 800b2f4:	d13f      	bne.n	800b376 <_malloc_r+0xe6>
 800b2f6:	6821      	ldr	r1, [r4, #0]
 800b2f8:	1a6d      	subs	r5, r5, r1
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f7ff ffa7 	bl	800b250 <sbrk_aligned>
 800b302:	3001      	adds	r0, #1
 800b304:	d037      	beq.n	800b376 <_malloc_r+0xe6>
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	442b      	add	r3, r5
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	f8d8 3000 	ldr.w	r3, [r8]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d038      	beq.n	800b386 <_malloc_r+0xf6>
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	42a2      	cmp	r2, r4
 800b318:	d12b      	bne.n	800b372 <_malloc_r+0xe2>
 800b31a:	2200      	movs	r2, #0
 800b31c:	605a      	str	r2, [r3, #4]
 800b31e:	e00f      	b.n	800b340 <_malloc_r+0xb0>
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	1b52      	subs	r2, r2, r5
 800b324:	d41f      	bmi.n	800b366 <_malloc_r+0xd6>
 800b326:	2a0b      	cmp	r2, #11
 800b328:	d917      	bls.n	800b35a <_malloc_r+0xca>
 800b32a:	1961      	adds	r1, r4, r5
 800b32c:	42a3      	cmp	r3, r4
 800b32e:	6025      	str	r5, [r4, #0]
 800b330:	bf18      	it	ne
 800b332:	6059      	strne	r1, [r3, #4]
 800b334:	6863      	ldr	r3, [r4, #4]
 800b336:	bf08      	it	eq
 800b338:	f8c8 1000 	streq.w	r1, [r8]
 800b33c:	5162      	str	r2, [r4, r5]
 800b33e:	604b      	str	r3, [r1, #4]
 800b340:	4638      	mov	r0, r7
 800b342:	f104 060b 	add.w	r6, r4, #11
 800b346:	f000 f829 	bl	800b39c <__malloc_unlock>
 800b34a:	f026 0607 	bic.w	r6, r6, #7
 800b34e:	1d23      	adds	r3, r4, #4
 800b350:	1af2      	subs	r2, r6, r3
 800b352:	d0ae      	beq.n	800b2b2 <_malloc_r+0x22>
 800b354:	1b9b      	subs	r3, r3, r6
 800b356:	50a3      	str	r3, [r4, r2]
 800b358:	e7ab      	b.n	800b2b2 <_malloc_r+0x22>
 800b35a:	42a3      	cmp	r3, r4
 800b35c:	6862      	ldr	r2, [r4, #4]
 800b35e:	d1dd      	bne.n	800b31c <_malloc_r+0x8c>
 800b360:	f8c8 2000 	str.w	r2, [r8]
 800b364:	e7ec      	b.n	800b340 <_malloc_r+0xb0>
 800b366:	4623      	mov	r3, r4
 800b368:	6864      	ldr	r4, [r4, #4]
 800b36a:	e7ac      	b.n	800b2c6 <_malloc_r+0x36>
 800b36c:	4634      	mov	r4, r6
 800b36e:	6876      	ldr	r6, [r6, #4]
 800b370:	e7b4      	b.n	800b2dc <_malloc_r+0x4c>
 800b372:	4613      	mov	r3, r2
 800b374:	e7cc      	b.n	800b310 <_malloc_r+0x80>
 800b376:	230c      	movs	r3, #12
 800b378:	603b      	str	r3, [r7, #0]
 800b37a:	4638      	mov	r0, r7
 800b37c:	f000 f80e 	bl	800b39c <__malloc_unlock>
 800b380:	e797      	b.n	800b2b2 <_malloc_r+0x22>
 800b382:	6025      	str	r5, [r4, #0]
 800b384:	e7dc      	b.n	800b340 <_malloc_r+0xb0>
 800b386:	605b      	str	r3, [r3, #4]
 800b388:	deff      	udf	#255	; 0xff
 800b38a:	bf00      	nop
 800b38c:	24000f94 	.word	0x24000f94

0800b390 <__malloc_lock>:
 800b390:	4801      	ldr	r0, [pc, #4]	; (800b398 <__malloc_lock+0x8>)
 800b392:	f7ff bf01 	b.w	800b198 <__retarget_lock_acquire_recursive>
 800b396:	bf00      	nop
 800b398:	24000f90 	.word	0x24000f90

0800b39c <__malloc_unlock>:
 800b39c:	4801      	ldr	r0, [pc, #4]	; (800b3a4 <__malloc_unlock+0x8>)
 800b39e:	f7ff befc 	b.w	800b19a <__retarget_lock_release_recursive>
 800b3a2:	bf00      	nop
 800b3a4:	24000f90 	.word	0x24000f90

0800b3a8 <__ssputs_r>:
 800b3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ac:	688e      	ldr	r6, [r1, #8]
 800b3ae:	461f      	mov	r7, r3
 800b3b0:	42be      	cmp	r6, r7
 800b3b2:	680b      	ldr	r3, [r1, #0]
 800b3b4:	4682      	mov	sl, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	4690      	mov	r8, r2
 800b3ba:	d82c      	bhi.n	800b416 <__ssputs_r+0x6e>
 800b3bc:	898a      	ldrh	r2, [r1, #12]
 800b3be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3c2:	d026      	beq.n	800b412 <__ssputs_r+0x6a>
 800b3c4:	6965      	ldr	r5, [r4, #20]
 800b3c6:	6909      	ldr	r1, [r1, #16]
 800b3c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3cc:	eba3 0901 	sub.w	r9, r3, r1
 800b3d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3d4:	1c7b      	adds	r3, r7, #1
 800b3d6:	444b      	add	r3, r9
 800b3d8:	106d      	asrs	r5, r5, #1
 800b3da:	429d      	cmp	r5, r3
 800b3dc:	bf38      	it	cc
 800b3de:	461d      	movcc	r5, r3
 800b3e0:	0553      	lsls	r3, r2, #21
 800b3e2:	d527      	bpl.n	800b434 <__ssputs_r+0x8c>
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	f7ff ff53 	bl	800b290 <_malloc_r>
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	b360      	cbz	r0, 800b448 <__ssputs_r+0xa0>
 800b3ee:	6921      	ldr	r1, [r4, #16]
 800b3f0:	464a      	mov	r2, r9
 800b3f2:	f7ff fed3 	bl	800b19c <memcpy>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b400:	81a3      	strh	r3, [r4, #12]
 800b402:	6126      	str	r6, [r4, #16]
 800b404:	6165      	str	r5, [r4, #20]
 800b406:	444e      	add	r6, r9
 800b408:	eba5 0509 	sub.w	r5, r5, r9
 800b40c:	6026      	str	r6, [r4, #0]
 800b40e:	60a5      	str	r5, [r4, #8]
 800b410:	463e      	mov	r6, r7
 800b412:	42be      	cmp	r6, r7
 800b414:	d900      	bls.n	800b418 <__ssputs_r+0x70>
 800b416:	463e      	mov	r6, r7
 800b418:	6820      	ldr	r0, [r4, #0]
 800b41a:	4632      	mov	r2, r6
 800b41c:	4641      	mov	r1, r8
 800b41e:	f000 faab 	bl	800b978 <memmove>
 800b422:	68a3      	ldr	r3, [r4, #8]
 800b424:	1b9b      	subs	r3, r3, r6
 800b426:	60a3      	str	r3, [r4, #8]
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	4433      	add	r3, r6
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	2000      	movs	r0, #0
 800b430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b434:	462a      	mov	r2, r5
 800b436:	f000 fac9 	bl	800b9cc <_realloc_r>
 800b43a:	4606      	mov	r6, r0
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d1e0      	bne.n	800b402 <__ssputs_r+0x5a>
 800b440:	6921      	ldr	r1, [r4, #16]
 800b442:	4650      	mov	r0, sl
 800b444:	f7ff feb8 	bl	800b1b8 <_free_r>
 800b448:	230c      	movs	r3, #12
 800b44a:	f8ca 3000 	str.w	r3, [sl]
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b454:	81a3      	strh	r3, [r4, #12]
 800b456:	f04f 30ff 	mov.w	r0, #4294967295
 800b45a:	e7e9      	b.n	800b430 <__ssputs_r+0x88>

0800b45c <_svfiprintf_r>:
 800b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	4698      	mov	r8, r3
 800b462:	898b      	ldrh	r3, [r1, #12]
 800b464:	061b      	lsls	r3, r3, #24
 800b466:	b09d      	sub	sp, #116	; 0x74
 800b468:	4607      	mov	r7, r0
 800b46a:	460d      	mov	r5, r1
 800b46c:	4614      	mov	r4, r2
 800b46e:	d50e      	bpl.n	800b48e <_svfiprintf_r+0x32>
 800b470:	690b      	ldr	r3, [r1, #16]
 800b472:	b963      	cbnz	r3, 800b48e <_svfiprintf_r+0x32>
 800b474:	2140      	movs	r1, #64	; 0x40
 800b476:	f7ff ff0b 	bl	800b290 <_malloc_r>
 800b47a:	6028      	str	r0, [r5, #0]
 800b47c:	6128      	str	r0, [r5, #16]
 800b47e:	b920      	cbnz	r0, 800b48a <_svfiprintf_r+0x2e>
 800b480:	230c      	movs	r3, #12
 800b482:	603b      	str	r3, [r7, #0]
 800b484:	f04f 30ff 	mov.w	r0, #4294967295
 800b488:	e0d0      	b.n	800b62c <_svfiprintf_r+0x1d0>
 800b48a:	2340      	movs	r3, #64	; 0x40
 800b48c:	616b      	str	r3, [r5, #20]
 800b48e:	2300      	movs	r3, #0
 800b490:	9309      	str	r3, [sp, #36]	; 0x24
 800b492:	2320      	movs	r3, #32
 800b494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b498:	f8cd 800c 	str.w	r8, [sp, #12]
 800b49c:	2330      	movs	r3, #48	; 0x30
 800b49e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b644 <_svfiprintf_r+0x1e8>
 800b4a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4a6:	f04f 0901 	mov.w	r9, #1
 800b4aa:	4623      	mov	r3, r4
 800b4ac:	469a      	mov	sl, r3
 800b4ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4b2:	b10a      	cbz	r2, 800b4b8 <_svfiprintf_r+0x5c>
 800b4b4:	2a25      	cmp	r2, #37	; 0x25
 800b4b6:	d1f9      	bne.n	800b4ac <_svfiprintf_r+0x50>
 800b4b8:	ebba 0b04 	subs.w	fp, sl, r4
 800b4bc:	d00b      	beq.n	800b4d6 <_svfiprintf_r+0x7a>
 800b4be:	465b      	mov	r3, fp
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	f7ff ff6f 	bl	800b3a8 <__ssputs_r>
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	f000 80a9 	beq.w	800b622 <_svfiprintf_r+0x1c6>
 800b4d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d2:	445a      	add	r2, fp
 800b4d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 80a1 	beq.w	800b622 <_svfiprintf_r+0x1c6>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ea:	f10a 0a01 	add.w	sl, sl, #1
 800b4ee:	9304      	str	r3, [sp, #16]
 800b4f0:	9307      	str	r3, [sp, #28]
 800b4f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4f6:	931a      	str	r3, [sp, #104]	; 0x68
 800b4f8:	4654      	mov	r4, sl
 800b4fa:	2205      	movs	r2, #5
 800b4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b500:	4850      	ldr	r0, [pc, #320]	; (800b644 <_svfiprintf_r+0x1e8>)
 800b502:	f7f4 fef5 	bl	80002f0 <memchr>
 800b506:	9a04      	ldr	r2, [sp, #16]
 800b508:	b9d8      	cbnz	r0, 800b542 <_svfiprintf_r+0xe6>
 800b50a:	06d0      	lsls	r0, r2, #27
 800b50c:	bf44      	itt	mi
 800b50e:	2320      	movmi	r3, #32
 800b510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b514:	0711      	lsls	r1, r2, #28
 800b516:	bf44      	itt	mi
 800b518:	232b      	movmi	r3, #43	; 0x2b
 800b51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b51e:	f89a 3000 	ldrb.w	r3, [sl]
 800b522:	2b2a      	cmp	r3, #42	; 0x2a
 800b524:	d015      	beq.n	800b552 <_svfiprintf_r+0xf6>
 800b526:	9a07      	ldr	r2, [sp, #28]
 800b528:	4654      	mov	r4, sl
 800b52a:	2000      	movs	r0, #0
 800b52c:	f04f 0c0a 	mov.w	ip, #10
 800b530:	4621      	mov	r1, r4
 800b532:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b536:	3b30      	subs	r3, #48	; 0x30
 800b538:	2b09      	cmp	r3, #9
 800b53a:	d94d      	bls.n	800b5d8 <_svfiprintf_r+0x17c>
 800b53c:	b1b0      	cbz	r0, 800b56c <_svfiprintf_r+0x110>
 800b53e:	9207      	str	r2, [sp, #28]
 800b540:	e014      	b.n	800b56c <_svfiprintf_r+0x110>
 800b542:	eba0 0308 	sub.w	r3, r0, r8
 800b546:	fa09 f303 	lsl.w	r3, r9, r3
 800b54a:	4313      	orrs	r3, r2
 800b54c:	9304      	str	r3, [sp, #16]
 800b54e:	46a2      	mov	sl, r4
 800b550:	e7d2      	b.n	800b4f8 <_svfiprintf_r+0x9c>
 800b552:	9b03      	ldr	r3, [sp, #12]
 800b554:	1d19      	adds	r1, r3, #4
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	9103      	str	r1, [sp, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	bfbb      	ittet	lt
 800b55e:	425b      	neglt	r3, r3
 800b560:	f042 0202 	orrlt.w	r2, r2, #2
 800b564:	9307      	strge	r3, [sp, #28]
 800b566:	9307      	strlt	r3, [sp, #28]
 800b568:	bfb8      	it	lt
 800b56a:	9204      	strlt	r2, [sp, #16]
 800b56c:	7823      	ldrb	r3, [r4, #0]
 800b56e:	2b2e      	cmp	r3, #46	; 0x2e
 800b570:	d10c      	bne.n	800b58c <_svfiprintf_r+0x130>
 800b572:	7863      	ldrb	r3, [r4, #1]
 800b574:	2b2a      	cmp	r3, #42	; 0x2a
 800b576:	d134      	bne.n	800b5e2 <_svfiprintf_r+0x186>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	1d1a      	adds	r2, r3, #4
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	9203      	str	r2, [sp, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	bfb8      	it	lt
 800b584:	f04f 33ff 	movlt.w	r3, #4294967295
 800b588:	3402      	adds	r4, #2
 800b58a:	9305      	str	r3, [sp, #20]
 800b58c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b654 <_svfiprintf_r+0x1f8>
 800b590:	7821      	ldrb	r1, [r4, #0]
 800b592:	2203      	movs	r2, #3
 800b594:	4650      	mov	r0, sl
 800b596:	f7f4 feab 	bl	80002f0 <memchr>
 800b59a:	b138      	cbz	r0, 800b5ac <_svfiprintf_r+0x150>
 800b59c:	9b04      	ldr	r3, [sp, #16]
 800b59e:	eba0 000a 	sub.w	r0, r0, sl
 800b5a2:	2240      	movs	r2, #64	; 0x40
 800b5a4:	4082      	lsls	r2, r0
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	3401      	adds	r4, #1
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b0:	4825      	ldr	r0, [pc, #148]	; (800b648 <_svfiprintf_r+0x1ec>)
 800b5b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5b6:	2206      	movs	r2, #6
 800b5b8:	f7f4 fe9a 	bl	80002f0 <memchr>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d038      	beq.n	800b632 <_svfiprintf_r+0x1d6>
 800b5c0:	4b22      	ldr	r3, [pc, #136]	; (800b64c <_svfiprintf_r+0x1f0>)
 800b5c2:	bb1b      	cbnz	r3, 800b60c <_svfiprintf_r+0x1b0>
 800b5c4:	9b03      	ldr	r3, [sp, #12]
 800b5c6:	3307      	adds	r3, #7
 800b5c8:	f023 0307 	bic.w	r3, r3, #7
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	9303      	str	r3, [sp, #12]
 800b5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d2:	4433      	add	r3, r6
 800b5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5d6:	e768      	b.n	800b4aa <_svfiprintf_r+0x4e>
 800b5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5dc:	460c      	mov	r4, r1
 800b5de:	2001      	movs	r0, #1
 800b5e0:	e7a6      	b.n	800b530 <_svfiprintf_r+0xd4>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	3401      	adds	r4, #1
 800b5e6:	9305      	str	r3, [sp, #20]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	f04f 0c0a 	mov.w	ip, #10
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f4:	3a30      	subs	r2, #48	; 0x30
 800b5f6:	2a09      	cmp	r2, #9
 800b5f8:	d903      	bls.n	800b602 <_svfiprintf_r+0x1a6>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0c6      	beq.n	800b58c <_svfiprintf_r+0x130>
 800b5fe:	9105      	str	r1, [sp, #20]
 800b600:	e7c4      	b.n	800b58c <_svfiprintf_r+0x130>
 800b602:	fb0c 2101 	mla	r1, ip, r1, r2
 800b606:	4604      	mov	r4, r0
 800b608:	2301      	movs	r3, #1
 800b60a:	e7f0      	b.n	800b5ee <_svfiprintf_r+0x192>
 800b60c:	ab03      	add	r3, sp, #12
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	462a      	mov	r2, r5
 800b612:	4b0f      	ldr	r3, [pc, #60]	; (800b650 <_svfiprintf_r+0x1f4>)
 800b614:	a904      	add	r1, sp, #16
 800b616:	4638      	mov	r0, r7
 800b618:	f3af 8000 	nop.w
 800b61c:	1c42      	adds	r2, r0, #1
 800b61e:	4606      	mov	r6, r0
 800b620:	d1d6      	bne.n	800b5d0 <_svfiprintf_r+0x174>
 800b622:	89ab      	ldrh	r3, [r5, #12]
 800b624:	065b      	lsls	r3, r3, #25
 800b626:	f53f af2d 	bmi.w	800b484 <_svfiprintf_r+0x28>
 800b62a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b62c:	b01d      	add	sp, #116	; 0x74
 800b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b632:	ab03      	add	r3, sp, #12
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	462a      	mov	r2, r5
 800b638:	4b05      	ldr	r3, [pc, #20]	; (800b650 <_svfiprintf_r+0x1f4>)
 800b63a:	a904      	add	r1, sp, #16
 800b63c:	4638      	mov	r0, r7
 800b63e:	f000 f879 	bl	800b734 <_printf_i>
 800b642:	e7eb      	b.n	800b61c <_svfiprintf_r+0x1c0>
 800b644:	0800baec 	.word	0x0800baec
 800b648:	0800baf6 	.word	0x0800baf6
 800b64c:	00000000 	.word	0x00000000
 800b650:	0800b3a9 	.word	0x0800b3a9
 800b654:	0800baf2 	.word	0x0800baf2

0800b658 <_printf_common>:
 800b658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b65c:	4616      	mov	r6, r2
 800b65e:	4699      	mov	r9, r3
 800b660:	688a      	ldr	r2, [r1, #8]
 800b662:	690b      	ldr	r3, [r1, #16]
 800b664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b668:	4293      	cmp	r3, r2
 800b66a:	bfb8      	it	lt
 800b66c:	4613      	movlt	r3, r2
 800b66e:	6033      	str	r3, [r6, #0]
 800b670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b674:	4607      	mov	r7, r0
 800b676:	460c      	mov	r4, r1
 800b678:	b10a      	cbz	r2, 800b67e <_printf_common+0x26>
 800b67a:	3301      	adds	r3, #1
 800b67c:	6033      	str	r3, [r6, #0]
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	0699      	lsls	r1, r3, #26
 800b682:	bf42      	ittt	mi
 800b684:	6833      	ldrmi	r3, [r6, #0]
 800b686:	3302      	addmi	r3, #2
 800b688:	6033      	strmi	r3, [r6, #0]
 800b68a:	6825      	ldr	r5, [r4, #0]
 800b68c:	f015 0506 	ands.w	r5, r5, #6
 800b690:	d106      	bne.n	800b6a0 <_printf_common+0x48>
 800b692:	f104 0a19 	add.w	sl, r4, #25
 800b696:	68e3      	ldr	r3, [r4, #12]
 800b698:	6832      	ldr	r2, [r6, #0]
 800b69a:	1a9b      	subs	r3, r3, r2
 800b69c:	42ab      	cmp	r3, r5
 800b69e:	dc26      	bgt.n	800b6ee <_printf_common+0x96>
 800b6a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6a4:	1e13      	subs	r3, r2, #0
 800b6a6:	6822      	ldr	r2, [r4, #0]
 800b6a8:	bf18      	it	ne
 800b6aa:	2301      	movne	r3, #1
 800b6ac:	0692      	lsls	r2, r2, #26
 800b6ae:	d42b      	bmi.n	800b708 <_printf_common+0xb0>
 800b6b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	47c0      	blx	r8
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	d01e      	beq.n	800b6fc <_printf_common+0xa4>
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	6922      	ldr	r2, [r4, #16]
 800b6c2:	f003 0306 	and.w	r3, r3, #6
 800b6c6:	2b04      	cmp	r3, #4
 800b6c8:	bf02      	ittt	eq
 800b6ca:	68e5      	ldreq	r5, [r4, #12]
 800b6cc:	6833      	ldreq	r3, [r6, #0]
 800b6ce:	1aed      	subeq	r5, r5, r3
 800b6d0:	68a3      	ldr	r3, [r4, #8]
 800b6d2:	bf0c      	ite	eq
 800b6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6d8:	2500      	movne	r5, #0
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	bfc4      	itt	gt
 800b6de:	1a9b      	subgt	r3, r3, r2
 800b6e0:	18ed      	addgt	r5, r5, r3
 800b6e2:	2600      	movs	r6, #0
 800b6e4:	341a      	adds	r4, #26
 800b6e6:	42b5      	cmp	r5, r6
 800b6e8:	d11a      	bne.n	800b720 <_printf_common+0xc8>
 800b6ea:	2000      	movs	r0, #0
 800b6ec:	e008      	b.n	800b700 <_printf_common+0xa8>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4652      	mov	r2, sl
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	47c0      	blx	r8
 800b6f8:	3001      	adds	r0, #1
 800b6fa:	d103      	bne.n	800b704 <_printf_common+0xac>
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b704:	3501      	adds	r5, #1
 800b706:	e7c6      	b.n	800b696 <_printf_common+0x3e>
 800b708:	18e1      	adds	r1, r4, r3
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	2030      	movs	r0, #48	; 0x30
 800b70e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b712:	4422      	add	r2, r4
 800b714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b71c:	3302      	adds	r3, #2
 800b71e:	e7c7      	b.n	800b6b0 <_printf_common+0x58>
 800b720:	2301      	movs	r3, #1
 800b722:	4622      	mov	r2, r4
 800b724:	4649      	mov	r1, r9
 800b726:	4638      	mov	r0, r7
 800b728:	47c0      	blx	r8
 800b72a:	3001      	adds	r0, #1
 800b72c:	d0e6      	beq.n	800b6fc <_printf_common+0xa4>
 800b72e:	3601      	adds	r6, #1
 800b730:	e7d9      	b.n	800b6e6 <_printf_common+0x8e>
	...

0800b734 <_printf_i>:
 800b734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b738:	7e0f      	ldrb	r7, [r1, #24]
 800b73a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b73c:	2f78      	cmp	r7, #120	; 0x78
 800b73e:	4691      	mov	r9, r2
 800b740:	4680      	mov	r8, r0
 800b742:	460c      	mov	r4, r1
 800b744:	469a      	mov	sl, r3
 800b746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b74a:	d807      	bhi.n	800b75c <_printf_i+0x28>
 800b74c:	2f62      	cmp	r7, #98	; 0x62
 800b74e:	d80a      	bhi.n	800b766 <_printf_i+0x32>
 800b750:	2f00      	cmp	r7, #0
 800b752:	f000 80d4 	beq.w	800b8fe <_printf_i+0x1ca>
 800b756:	2f58      	cmp	r7, #88	; 0x58
 800b758:	f000 80c0 	beq.w	800b8dc <_printf_i+0x1a8>
 800b75c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b764:	e03a      	b.n	800b7dc <_printf_i+0xa8>
 800b766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b76a:	2b15      	cmp	r3, #21
 800b76c:	d8f6      	bhi.n	800b75c <_printf_i+0x28>
 800b76e:	a101      	add	r1, pc, #4	; (adr r1, 800b774 <_printf_i+0x40>)
 800b770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b774:	0800b7cd 	.word	0x0800b7cd
 800b778:	0800b7e1 	.word	0x0800b7e1
 800b77c:	0800b75d 	.word	0x0800b75d
 800b780:	0800b75d 	.word	0x0800b75d
 800b784:	0800b75d 	.word	0x0800b75d
 800b788:	0800b75d 	.word	0x0800b75d
 800b78c:	0800b7e1 	.word	0x0800b7e1
 800b790:	0800b75d 	.word	0x0800b75d
 800b794:	0800b75d 	.word	0x0800b75d
 800b798:	0800b75d 	.word	0x0800b75d
 800b79c:	0800b75d 	.word	0x0800b75d
 800b7a0:	0800b8e5 	.word	0x0800b8e5
 800b7a4:	0800b80d 	.word	0x0800b80d
 800b7a8:	0800b89f 	.word	0x0800b89f
 800b7ac:	0800b75d 	.word	0x0800b75d
 800b7b0:	0800b75d 	.word	0x0800b75d
 800b7b4:	0800b907 	.word	0x0800b907
 800b7b8:	0800b75d 	.word	0x0800b75d
 800b7bc:	0800b80d 	.word	0x0800b80d
 800b7c0:	0800b75d 	.word	0x0800b75d
 800b7c4:	0800b75d 	.word	0x0800b75d
 800b7c8:	0800b8a7 	.word	0x0800b8a7
 800b7cc:	682b      	ldr	r3, [r5, #0]
 800b7ce:	1d1a      	adds	r2, r3, #4
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	602a      	str	r2, [r5, #0]
 800b7d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e09f      	b.n	800b920 <_printf_i+0x1ec>
 800b7e0:	6820      	ldr	r0, [r4, #0]
 800b7e2:	682b      	ldr	r3, [r5, #0]
 800b7e4:	0607      	lsls	r7, r0, #24
 800b7e6:	f103 0104 	add.w	r1, r3, #4
 800b7ea:	6029      	str	r1, [r5, #0]
 800b7ec:	d501      	bpl.n	800b7f2 <_printf_i+0xbe>
 800b7ee:	681e      	ldr	r6, [r3, #0]
 800b7f0:	e003      	b.n	800b7fa <_printf_i+0xc6>
 800b7f2:	0646      	lsls	r6, r0, #25
 800b7f4:	d5fb      	bpl.n	800b7ee <_printf_i+0xba>
 800b7f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b7fa:	2e00      	cmp	r6, #0
 800b7fc:	da03      	bge.n	800b806 <_printf_i+0xd2>
 800b7fe:	232d      	movs	r3, #45	; 0x2d
 800b800:	4276      	negs	r6, r6
 800b802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b806:	485a      	ldr	r0, [pc, #360]	; (800b970 <_printf_i+0x23c>)
 800b808:	230a      	movs	r3, #10
 800b80a:	e012      	b.n	800b832 <_printf_i+0xfe>
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	6820      	ldr	r0, [r4, #0]
 800b810:	1d19      	adds	r1, r3, #4
 800b812:	6029      	str	r1, [r5, #0]
 800b814:	0605      	lsls	r5, r0, #24
 800b816:	d501      	bpl.n	800b81c <_printf_i+0xe8>
 800b818:	681e      	ldr	r6, [r3, #0]
 800b81a:	e002      	b.n	800b822 <_printf_i+0xee>
 800b81c:	0641      	lsls	r1, r0, #25
 800b81e:	d5fb      	bpl.n	800b818 <_printf_i+0xe4>
 800b820:	881e      	ldrh	r6, [r3, #0]
 800b822:	4853      	ldr	r0, [pc, #332]	; (800b970 <_printf_i+0x23c>)
 800b824:	2f6f      	cmp	r7, #111	; 0x6f
 800b826:	bf0c      	ite	eq
 800b828:	2308      	moveq	r3, #8
 800b82a:	230a      	movne	r3, #10
 800b82c:	2100      	movs	r1, #0
 800b82e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b832:	6865      	ldr	r5, [r4, #4]
 800b834:	60a5      	str	r5, [r4, #8]
 800b836:	2d00      	cmp	r5, #0
 800b838:	bfa2      	ittt	ge
 800b83a:	6821      	ldrge	r1, [r4, #0]
 800b83c:	f021 0104 	bicge.w	r1, r1, #4
 800b840:	6021      	strge	r1, [r4, #0]
 800b842:	b90e      	cbnz	r6, 800b848 <_printf_i+0x114>
 800b844:	2d00      	cmp	r5, #0
 800b846:	d04b      	beq.n	800b8e0 <_printf_i+0x1ac>
 800b848:	4615      	mov	r5, r2
 800b84a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b84e:	fb03 6711 	mls	r7, r3, r1, r6
 800b852:	5dc7      	ldrb	r7, [r0, r7]
 800b854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b858:	4637      	mov	r7, r6
 800b85a:	42bb      	cmp	r3, r7
 800b85c:	460e      	mov	r6, r1
 800b85e:	d9f4      	bls.n	800b84a <_printf_i+0x116>
 800b860:	2b08      	cmp	r3, #8
 800b862:	d10b      	bne.n	800b87c <_printf_i+0x148>
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	07de      	lsls	r6, r3, #31
 800b868:	d508      	bpl.n	800b87c <_printf_i+0x148>
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	6861      	ldr	r1, [r4, #4]
 800b86e:	4299      	cmp	r1, r3
 800b870:	bfde      	ittt	le
 800b872:	2330      	movle	r3, #48	; 0x30
 800b874:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b87c:	1b52      	subs	r2, r2, r5
 800b87e:	6122      	str	r2, [r4, #16]
 800b880:	f8cd a000 	str.w	sl, [sp]
 800b884:	464b      	mov	r3, r9
 800b886:	aa03      	add	r2, sp, #12
 800b888:	4621      	mov	r1, r4
 800b88a:	4640      	mov	r0, r8
 800b88c:	f7ff fee4 	bl	800b658 <_printf_common>
 800b890:	3001      	adds	r0, #1
 800b892:	d14a      	bne.n	800b92a <_printf_i+0x1f6>
 800b894:	f04f 30ff 	mov.w	r0, #4294967295
 800b898:	b004      	add	sp, #16
 800b89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b89e:	6823      	ldr	r3, [r4, #0]
 800b8a0:	f043 0320 	orr.w	r3, r3, #32
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	4833      	ldr	r0, [pc, #204]	; (800b974 <_printf_i+0x240>)
 800b8a8:	2778      	movs	r7, #120	; 0x78
 800b8aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	6829      	ldr	r1, [r5, #0]
 800b8b2:	061f      	lsls	r7, r3, #24
 800b8b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8b8:	d402      	bmi.n	800b8c0 <_printf_i+0x18c>
 800b8ba:	065f      	lsls	r7, r3, #25
 800b8bc:	bf48      	it	mi
 800b8be:	b2b6      	uxthmi	r6, r6
 800b8c0:	07df      	lsls	r7, r3, #31
 800b8c2:	bf48      	it	mi
 800b8c4:	f043 0320 	orrmi.w	r3, r3, #32
 800b8c8:	6029      	str	r1, [r5, #0]
 800b8ca:	bf48      	it	mi
 800b8cc:	6023      	strmi	r3, [r4, #0]
 800b8ce:	b91e      	cbnz	r6, 800b8d8 <_printf_i+0x1a4>
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	f023 0320 	bic.w	r3, r3, #32
 800b8d6:	6023      	str	r3, [r4, #0]
 800b8d8:	2310      	movs	r3, #16
 800b8da:	e7a7      	b.n	800b82c <_printf_i+0xf8>
 800b8dc:	4824      	ldr	r0, [pc, #144]	; (800b970 <_printf_i+0x23c>)
 800b8de:	e7e4      	b.n	800b8aa <_printf_i+0x176>
 800b8e0:	4615      	mov	r5, r2
 800b8e2:	e7bd      	b.n	800b860 <_printf_i+0x12c>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	6826      	ldr	r6, [r4, #0]
 800b8e8:	6961      	ldr	r1, [r4, #20]
 800b8ea:	1d18      	adds	r0, r3, #4
 800b8ec:	6028      	str	r0, [r5, #0]
 800b8ee:	0635      	lsls	r5, r6, #24
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	d501      	bpl.n	800b8f8 <_printf_i+0x1c4>
 800b8f4:	6019      	str	r1, [r3, #0]
 800b8f6:	e002      	b.n	800b8fe <_printf_i+0x1ca>
 800b8f8:	0670      	lsls	r0, r6, #25
 800b8fa:	d5fb      	bpl.n	800b8f4 <_printf_i+0x1c0>
 800b8fc:	8019      	strh	r1, [r3, #0]
 800b8fe:	2300      	movs	r3, #0
 800b900:	6123      	str	r3, [r4, #16]
 800b902:	4615      	mov	r5, r2
 800b904:	e7bc      	b.n	800b880 <_printf_i+0x14c>
 800b906:	682b      	ldr	r3, [r5, #0]
 800b908:	1d1a      	adds	r2, r3, #4
 800b90a:	602a      	str	r2, [r5, #0]
 800b90c:	681d      	ldr	r5, [r3, #0]
 800b90e:	6862      	ldr	r2, [r4, #4]
 800b910:	2100      	movs	r1, #0
 800b912:	4628      	mov	r0, r5
 800b914:	f7f4 fcec 	bl	80002f0 <memchr>
 800b918:	b108      	cbz	r0, 800b91e <_printf_i+0x1ea>
 800b91a:	1b40      	subs	r0, r0, r5
 800b91c:	6060      	str	r0, [r4, #4]
 800b91e:	6863      	ldr	r3, [r4, #4]
 800b920:	6123      	str	r3, [r4, #16]
 800b922:	2300      	movs	r3, #0
 800b924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b928:	e7aa      	b.n	800b880 <_printf_i+0x14c>
 800b92a:	6923      	ldr	r3, [r4, #16]
 800b92c:	462a      	mov	r2, r5
 800b92e:	4649      	mov	r1, r9
 800b930:	4640      	mov	r0, r8
 800b932:	47d0      	blx	sl
 800b934:	3001      	adds	r0, #1
 800b936:	d0ad      	beq.n	800b894 <_printf_i+0x160>
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	079b      	lsls	r3, r3, #30
 800b93c:	d413      	bmi.n	800b966 <_printf_i+0x232>
 800b93e:	68e0      	ldr	r0, [r4, #12]
 800b940:	9b03      	ldr	r3, [sp, #12]
 800b942:	4298      	cmp	r0, r3
 800b944:	bfb8      	it	lt
 800b946:	4618      	movlt	r0, r3
 800b948:	e7a6      	b.n	800b898 <_printf_i+0x164>
 800b94a:	2301      	movs	r3, #1
 800b94c:	4632      	mov	r2, r6
 800b94e:	4649      	mov	r1, r9
 800b950:	4640      	mov	r0, r8
 800b952:	47d0      	blx	sl
 800b954:	3001      	adds	r0, #1
 800b956:	d09d      	beq.n	800b894 <_printf_i+0x160>
 800b958:	3501      	adds	r5, #1
 800b95a:	68e3      	ldr	r3, [r4, #12]
 800b95c:	9903      	ldr	r1, [sp, #12]
 800b95e:	1a5b      	subs	r3, r3, r1
 800b960:	42ab      	cmp	r3, r5
 800b962:	dcf2      	bgt.n	800b94a <_printf_i+0x216>
 800b964:	e7eb      	b.n	800b93e <_printf_i+0x20a>
 800b966:	2500      	movs	r5, #0
 800b968:	f104 0619 	add.w	r6, r4, #25
 800b96c:	e7f5      	b.n	800b95a <_printf_i+0x226>
 800b96e:	bf00      	nop
 800b970:	0800bafd 	.word	0x0800bafd
 800b974:	0800bb0e 	.word	0x0800bb0e

0800b978 <memmove>:
 800b978:	4288      	cmp	r0, r1
 800b97a:	b510      	push	{r4, lr}
 800b97c:	eb01 0402 	add.w	r4, r1, r2
 800b980:	d902      	bls.n	800b988 <memmove+0x10>
 800b982:	4284      	cmp	r4, r0
 800b984:	4623      	mov	r3, r4
 800b986:	d807      	bhi.n	800b998 <memmove+0x20>
 800b988:	1e43      	subs	r3, r0, #1
 800b98a:	42a1      	cmp	r1, r4
 800b98c:	d008      	beq.n	800b9a0 <memmove+0x28>
 800b98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b996:	e7f8      	b.n	800b98a <memmove+0x12>
 800b998:	4402      	add	r2, r0
 800b99a:	4601      	mov	r1, r0
 800b99c:	428a      	cmp	r2, r1
 800b99e:	d100      	bne.n	800b9a2 <memmove+0x2a>
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9aa:	e7f7      	b.n	800b99c <memmove+0x24>

0800b9ac <_sbrk_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	4d06      	ldr	r5, [pc, #24]	; (800b9c8 <_sbrk_r+0x1c>)
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4608      	mov	r0, r1
 800b9b6:	602b      	str	r3, [r5, #0]
 800b9b8:	f7f6 fd22 	bl	8002400 <_sbrk>
 800b9bc:	1c43      	adds	r3, r0, #1
 800b9be:	d102      	bne.n	800b9c6 <_sbrk_r+0x1a>
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	b103      	cbz	r3, 800b9c6 <_sbrk_r+0x1a>
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	bd38      	pop	{r3, r4, r5, pc}
 800b9c8:	24000f8c 	.word	0x24000f8c

0800b9cc <_realloc_r>:
 800b9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d0:	4680      	mov	r8, r0
 800b9d2:	4614      	mov	r4, r2
 800b9d4:	460e      	mov	r6, r1
 800b9d6:	b921      	cbnz	r1, 800b9e2 <_realloc_r+0x16>
 800b9d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9dc:	4611      	mov	r1, r2
 800b9de:	f7ff bc57 	b.w	800b290 <_malloc_r>
 800b9e2:	b92a      	cbnz	r2, 800b9f0 <_realloc_r+0x24>
 800b9e4:	f7ff fbe8 	bl	800b1b8 <_free_r>
 800b9e8:	4625      	mov	r5, r4
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f0:	f000 f81b 	bl	800ba2a <_malloc_usable_size_r>
 800b9f4:	4284      	cmp	r4, r0
 800b9f6:	4607      	mov	r7, r0
 800b9f8:	d802      	bhi.n	800ba00 <_realloc_r+0x34>
 800b9fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9fe:	d812      	bhi.n	800ba26 <_realloc_r+0x5a>
 800ba00:	4621      	mov	r1, r4
 800ba02:	4640      	mov	r0, r8
 800ba04:	f7ff fc44 	bl	800b290 <_malloc_r>
 800ba08:	4605      	mov	r5, r0
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d0ed      	beq.n	800b9ea <_realloc_r+0x1e>
 800ba0e:	42bc      	cmp	r4, r7
 800ba10:	4622      	mov	r2, r4
 800ba12:	4631      	mov	r1, r6
 800ba14:	bf28      	it	cs
 800ba16:	463a      	movcs	r2, r7
 800ba18:	f7ff fbc0 	bl	800b19c <memcpy>
 800ba1c:	4631      	mov	r1, r6
 800ba1e:	4640      	mov	r0, r8
 800ba20:	f7ff fbca 	bl	800b1b8 <_free_r>
 800ba24:	e7e1      	b.n	800b9ea <_realloc_r+0x1e>
 800ba26:	4635      	mov	r5, r6
 800ba28:	e7df      	b.n	800b9ea <_realloc_r+0x1e>

0800ba2a <_malloc_usable_size_r>:
 800ba2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2e:	1f18      	subs	r0, r3, #4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bfbc      	itt	lt
 800ba34:	580b      	ldrlt	r3, [r1, r0]
 800ba36:	18c0      	addlt	r0, r0, r3
 800ba38:	4770      	bx	lr
	...

0800ba3c <_init>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	bf00      	nop
 800ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba42:	bc08      	pop	{r3}
 800ba44:	469e      	mov	lr, r3
 800ba46:	4770      	bx	lr

0800ba48 <_fini>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr
