
STM32H750B-DK_BSP_C_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  0800ba58  0800ba58  0001ba58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c7e4  0800c7e4  0001c7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c7e8  0800c7e8  0001c7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  24000000  0800c7ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000154c  2400008c  0800c878  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240015d8  0800c878  000215d8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030c11  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005b3f  00000000  00000000  00050d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000025a0  00000000  00000000  00056850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d59  00000000  00000000  00058df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009f0e  00000000  00000000  0005ab49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033fb4  00000000  00000000  00064a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a9004  00000000  00000000  00098a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a9c4  00000000  00000000  00241a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000060  00000000  00000000  0024c3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ba40 	.word	0x0800ba40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	0800ba40 	.word	0x0800ba40

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <gameMain>:
static void game();
static void gameOver();
static void DrawCanvas();
static void DrawGridCell();

void gameMain() {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

    // LTCD setup
    BSP_LCD_GetXSize(0, &x_size);
 8000384:	4927      	ldr	r1, [pc, #156]	; (8000424 <gameMain+0xa4>)
 8000386:	2000      	movs	r0, #0
 8000388:	f001 fe9e 	bl	80020c8 <BSP_LCD_GetXSize>
    BSP_LCD_GetYSize(0, &y_size);
 800038c:	4926      	ldr	r1, [pc, #152]	; (8000428 <gameMain+0xa8>)
 800038e:	2000      	movs	r0, #0
 8000390:	f001 feb8 	bl	8002104 <BSP_LCD_GetYSize>
    
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8000394:	f04f 30ff 	mov.w	r0, #4294967295
 8000398:	f000 fb42 	bl	8000a20 <UTIL_LCD_SetBackColor>

    UTIL_LCD_SetFont(&Font16);
 800039c:	4823      	ldr	r0, [pc, #140]	; (800042c <gameMain+0xac>)
 800039e:	f000 fb53 	bl	8000a48 <UTIL_LCD_SetFont>
    UTIL_LCD_SetLayer(0);
 80003a2:	2000      	movs	r0, #0
 80003a4:	f000 fb1e 	bl	80009e4 <UTIL_LCD_SetLayer>

    x_grid = x_size / cellSize;
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <gameMain+0xa4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a20      	ldr	r2, [pc, #128]	; (8000430 <gameMain+0xb0>)
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <gameMain+0xb4>)
 80003b8:	601a      	str	r2, [r3, #0]
    y_grid = y_size / cellSize;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <gameMain+0xa8>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a1c      	ldr	r2, [pc, #112]	; (8000430 <gameMain+0xb0>)
 80003c0:	6812      	ldr	r2, [r2, #0]
 80003c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <gameMain+0xb8>)
 80003ca:	601a      	str	r2, [r3, #0]

    x_border = (x_size - (x_grid * cellSize)) / 2; 
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <gameMain+0xa4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a18      	ldr	r2, [pc, #96]	; (8000434 <gameMain+0xb4>)
 80003d2:	6812      	ldr	r2, [r2, #0]
 80003d4:	4916      	ldr	r1, [pc, #88]	; (8000430 <gameMain+0xb0>)
 80003d6:	6809      	ldr	r1, [r1, #0]
 80003d8:	fb01 f202 	mul.w	r2, r1, r2
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	085b      	lsrs	r3, r3, #1
 80003e0:	461a      	mov	r2, r3
 80003e2:	4b16      	ldr	r3, [pc, #88]	; (800043c <gameMain+0xbc>)
 80003e4:	601a      	str	r2, [r3, #0]
    y_border = (y_size - (y_grid * cellSize)) / 2; 
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <gameMain+0xa8>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a13      	ldr	r2, [pc, #76]	; (8000438 <gameMain+0xb8>)
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	4910      	ldr	r1, [pc, #64]	; (8000430 <gameMain+0xb0>)
 80003f0:	6809      	ldr	r1, [r1, #0]
 80003f2:	fb01 f202 	mul.w	r2, r1, r2
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	085b      	lsrs	r3, r3, #1
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b10      	ldr	r3, [pc, #64]	; (8000440 <gameMain+0xc0>)
 80003fe:	601a      	str	r2, [r3, #0]
     * 2. Game Over
    */
    while (1)
    {
        // game
        if (gameStage == 0)
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <gameMain+0xc4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d102      	bne.n	800040e <gameMain+0x8e>
            gameStart();
 8000408:	f000 f81e 	bl	8000448 <gameStart>
 800040c:	e7f8      	b.n	8000400 <gameMain+0x80>
        else if (gameStage == 1)
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <gameMain+0xc4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d102      	bne.n	800041c <gameMain+0x9c>
            game();
 8000416:	f000 f82d 	bl	8000474 <game>
 800041a:	e7f1      	b.n	8000400 <gameMain+0x80>
        else
            gameOver();
 800041c:	f000 f834 	bl	8000488 <gameOver>
        if (gameStage == 0)
 8000420:	e7ee      	b.n	8000400 <gameMain+0x80>
 8000422:	bf00      	nop
 8000424:	240000a8 	.word	0x240000a8
 8000428:	240000ac 	.word	0x240000ac
 800042c:	24000004 	.word	0x24000004
 8000430:	24000000 	.word	0x24000000
 8000434:	240000b0 	.word	0x240000b0
 8000438:	240000b4 	.word	0x240000b4
 800043c:	240000b8 	.word	0x240000b8
 8000440:	240000bc 	.word	0x240000bc
 8000444:	240000c0 	.word	0x240000c0

08000448 <gameStart>:
    }
    
}

static void gameStart() {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

    // 1. Draw shit and reset variables
    DrawCanvas();
 800044c:	f000 f824 	bl	8000498 <DrawCanvas>

    // 2. wait for user input
    while (!BSP_PB_GetState(BUTTON_USER_PIN)) {
 8000450:	e002      	b.n	8000458 <gameStart+0x10>

        BSP_LED_On(LED_GREEN);
 8000452:	2000      	movs	r0, #0
 8000454:	f000 ffbe 	bl	80013d4 <BSP_LED_On>
    while (!BSP_PB_GetState(BUTTON_USER_PIN)) {
 8000458:	2000      	movs	r0, #0
 800045a:	f001 f84b 	bl	80014f4 <BSP_PB_GetState>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f6      	beq.n	8000452 <gameStart+0xa>
    }
    
    gameStage = 1;
 8000464:	4b02      	ldr	r3, [pc, #8]	; (8000470 <gameStart+0x28>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	240000c0 	.word	0x240000c0

08000474 <game>:

// game logic
static void game() {
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

    UTIL_LCD_Clear(UTIL_LCD_COLOR_DARKGRAY);
 8000478:	4802      	ldr	r0, [pc, #8]	; (8000484 <game+0x10>)
 800047a:	f000 fb65 	bl	8000b48 <UTIL_LCD_Clear>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	ff404040 	.word	0xff404040

08000488 <gameOver>:

static void gameOver() {
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
    // 1. Stop game

    // 2. Draw Game over and display score

    // 3. wait for 5 seconds
    HAL_Delay(500);
 800048c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000490:	f002 fd68 	bl	8002f64 <HAL_Delay>

}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <DrawCanvas>:

static void DrawCanvas() {
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b085      	sub	sp, #20
 800049c:	af02      	add	r7, sp, #8

    UTIL_LCD_Clear(UTIL_LCD_COLOR_DARKGRAY);
 800049e:	4820      	ldr	r0, [pc, #128]	; (8000520 <DrawCanvas+0x88>)
 80004a0:	f000 fb52 	bl	8000b48 <UTIL_LCD_Clear>

    // main platform
    UTIL_LCD_DrawRect(x_border, y_border, x_size - 2*x_border, y_size - 2*y_border, UTIL_LCD_COLOR_WHITE);
 80004a4:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <DrawCanvas+0x8c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <DrawCanvas+0x90>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	461c      	mov	r4, r3
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <DrawCanvas+0x94>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a1b      	ldr	r2, [pc, #108]	; (8000524 <DrawCanvas+0x8c>)
 80004b6:	6812      	ldr	r2, [r2, #0]
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	1a99      	subs	r1, r3, r2
 80004bc:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <DrawCanvas+0x98>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a19      	ldr	r2, [pc, #100]	; (8000528 <DrawCanvas+0x90>)
 80004c2:	6812      	ldr	r2, [r2, #0]
 80004c4:	0052      	lsls	r2, r2, #1
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	f04f 32ff 	mov.w	r2, #4294967295
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	460a      	mov	r2, r1
 80004d0:	4621      	mov	r1, r4
 80004d2:	f000 fb4f 	bl	8000b74 <UTIL_LCD_DrawRect>

    DrawGridCell(5, 5, 1);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2105      	movs	r1, #5
 80004da:	2005      	movs	r0, #5
 80004dc:	f000 f82e 	bl	800053c <DrawGridCell>

    // grid
    for (int i = 0; i < x_grid; i++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	e012      	b.n	800050c <DrawCanvas+0x74>
        for (int j = 0; j < y_grid; j++) {
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	e007      	b.n	80004fc <DrawCanvas+0x64>
            DrawGridCell(i, j, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	6839      	ldr	r1, [r7, #0]
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f823 	bl	800053c <DrawGridCell>
        for (int j = 0; j < y_grid; j++) {
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <DrawCanvas+0x9c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	dbf2      	blt.n	80004ec <DrawCanvas+0x54>
    for (int i = 0; i < x_grid; i++) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3301      	adds	r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <DrawCanvas+0xa0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	429a      	cmp	r2, r3
 8000514:	dbe7      	blt.n	80004e6 <DrawCanvas+0x4e>
        }
    }
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bd90      	pop	{r4, r7, pc}
 8000520:	ff404040 	.word	0xff404040
 8000524:	240000b8 	.word	0x240000b8
 8000528:	240000bc 	.word	0x240000bc
 800052c:	240000a8 	.word	0x240000a8
 8000530:	240000ac 	.word	0x240000ac
 8000534:	240000b4 	.word	0x240000b4
 8000538:	240000b0 	.word	0x240000b0

0800053c <DrawGridCell>:

static void DrawGridCell(int x, int y, int type) {
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af02      	add	r7, sp, #8
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]

    int x_pos = x * cellSize + x_border;
 8000548:	4b32      	ldr	r3, [pc, #200]	; (8000614 <DrawGridCell+0xd8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	fb03 f202 	mul.w	r2, r3, r2
 8000552:	4b31      	ldr	r3, [pc, #196]	; (8000618 <DrawGridCell+0xdc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4413      	add	r3, r2
 8000558:	617b      	str	r3, [r7, #20]
    int y_pos = y * cellSize + y_border;
 800055a:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <DrawGridCell+0xd8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	68ba      	ldr	r2, [r7, #8]
 8000560:	fb03 f202 	mul.w	r2, r3, r2
 8000564:	4b2d      	ldr	r3, [pc, #180]	; (800061c <DrawGridCell+0xe0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4413      	add	r3, r2
 800056a:	613b      	str	r3, [r7, #16]

    // snake Body
    if (type == 1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10d      	bne.n	800058e <DrawGridCell+0x52>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_LIGHTMAGENTA);
 8000572:	6978      	ldr	r0, [r7, #20]
 8000574:	6939      	ldr	r1, [r7, #16]
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <DrawGridCell+0xd8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	461a      	mov	r2, r3
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <DrawGridCell+0xd8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	461c      	mov	r4, r3
 8000582:	f46f 43fe 	mvn.w	r3, #32512	; 0x7f00
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	4623      	mov	r3, r4
 800058a:	f000 fb1d 	bl	8000bc8 <UTIL_LCD_FillRect>
    }
    // snake Head
    if (type == 2) {
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d10e      	bne.n	80005b2 <DrawGridCell+0x76>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_MAGENTA);
 8000594:	6978      	ldr	r0, [r7, #20]
 8000596:	6939      	ldr	r1, [r7, #16]
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <DrawGridCell+0xd8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <DrawGridCell+0xd8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	461c      	mov	r4, r3
 80005a4:	f46f 437f 	mvn.w	r3, #65280	; 0xff00
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	4623      	mov	r3, r4
 80005ac:	f000 fb0c 	bl	8000bc8 <UTIL_LCD_FillRect>
    // empty cell
    else {
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_BLACK);
        UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, 0xFF070707UL);
    }
 80005b0:	e02b      	b.n	800060a <DrawGridCell+0xce>
    else if (type == 3) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d10d      	bne.n	80005d4 <DrawGridCell+0x98>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_DARKRED);
 80005b8:	6978      	ldr	r0, [r7, #20]
 80005ba:	6939      	ldr	r1, [r7, #16]
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <DrawGridCell+0xd8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <DrawGridCell+0xd8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	461c      	mov	r4, r3
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <DrawGridCell+0xe4>)
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	4623      	mov	r3, r4
 80005ce:	f000 fafb 	bl	8000bc8 <UTIL_LCD_FillRect>
 80005d2:	e01a      	b.n	800060a <DrawGridCell+0xce>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_BLACK);
 80005d4:	6978      	ldr	r0, [r7, #20]
 80005d6:	6939      	ldr	r1, [r7, #16]
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <DrawGridCell+0xd8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <DrawGridCell+0xd8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	461c      	mov	r4, r3
 80005e4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4623      	mov	r3, r4
 80005ec:	f000 faec 	bl	8000bc8 <UTIL_LCD_FillRect>
        UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, 0xFF070707UL);
 80005f0:	6978      	ldr	r0, [r7, #20]
 80005f2:	6939      	ldr	r1, [r7, #16]
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <DrawGridCell+0xd8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <DrawGridCell+0xd8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	461c      	mov	r4, r3
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <DrawGridCell+0xe8>)
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	4623      	mov	r3, r4
 8000606:	f000 fab5 	bl	8000b74 <UTIL_LCD_DrawRect>
 800060a:	bf00      	nop
 800060c:	371c      	adds	r7, #28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd90      	pop	{r4, r7, pc}
 8000612:	bf00      	nop
 8000614:	24000000 	.word	0x24000000
 8000618:	240000b8 	.word	0x240000b8
 800061c:	240000bc 	.word	0x240000bc
 8000620:	ff800000 	.word	0xff800000
 8000624:	ff070707 	.word	0xff070707

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
  */
  HAL_Init();
 800062c:	f002 fc08 	bl	8002e40 <HAL_Init>

  SystemClock_Config();
 8000630:	f000 f836 	bl	80006a0 <SystemClock_Config>

  BSP_PB_Init(BUTTON_USER_PIN, BUTTON_MODE_GPIO);
 8000634:	2100      	movs	r1, #0
 8000636:	2000      	movs	r0, #0
 8000638:	f000 feea 	bl	8001410 <BSP_PB_Init>
  BSP_LED_Init(LED_GREEN);
 800063c:	2000      	movs	r0, #0
 800063e:	f000 fe6b 	bl	8001318 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 fe68 	bl	8001318 <BSP_LED_Init>

 	srand(time(NULL));   // Initialization, should only be called once.
 8000648:	2000      	movs	r0, #0
 800064a:	f00a fb2b 	bl	800aca4 <time>
 800064e:	4602      	mov	r2, r0
 8000650:	460b      	mov	r3, r1
 8000652:	4610      	mov	r0, r2
 8000654:	4619      	mov	r1, r3
 8000656:	f00a f9e9 	bl	800aa2c <srand>
	// HAL_IncTick();

  ////////////////////////////////////////////////////////
  // LTDC INIT
  ////////////////////////////////////////////////////////
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 800065a:	2101      	movs	r1, #1
 800065c:	2000      	movs	r0, #0
 800065e:	f001 fb57 	bl	8001d10 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <main+0x4c>)
 8000664:	f000 f968 	bl	8000938 <UTIL_LCD_SetFuncDriver>

  gameMain();
 8000668:	f7ff fe8a 	bl	8000380 <gameMain>

  return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	0800c6d8 	.word	0x0800c6d8

08000678 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d102      	bne.n	800068e <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <BSP_PB_Callback+0x24>)
 800068a:	2201      	movs	r2, #1
 800068c:	601a      	str	r2, [r3, #0]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	240000c4 	.word	0x240000c4

080006a0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09e      	sub	sp, #120	; 0x78
 80006a4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f006 f95f 	bl	8006970 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b42      	ldr	r3, [pc, #264]	; (80007c0 <SystemClock_Config+0x120>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ba:	4a41      	ldr	r2, [pc, #260]	; (80007c0 <SystemClock_Config+0x120>)
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006c2:	4b3f      	ldr	r3, [pc, #252]	; (80007c0 <SystemClock_Config+0x120>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <SystemClock_Config+0x124>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a3c      	ldr	r2, [pc, #240]	; (80007c4 <SystemClock_Config+0x124>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <SystemClock_Config+0x124>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e4:	bf00      	nop
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <SystemClock_Config+0x124>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006f2:	d1f8      	bne.n	80006e6 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	2302      	movs	r3, #2
 800070c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800070e:	2305      	movs	r3, #5
 8000710:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000712:	23a0      	movs	r3, #160	; 0xa0
 8000714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000722:	2304      	movs	r3, #4
 8000724:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000726:	2300      	movs	r3, #0
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800072a:	2308      	movs	r3, #8
 800072c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	4618      	mov	r0, r3
 8000734:	f006 f956 	bl	80069e4 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800073e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000746:	f000 f841 	bl	80007cc <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800074a:	233f      	movs	r3, #63	; 0x3f
 800074c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000756:	2308      	movs	r3, #8
 8000758:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800075e:	2340      	movs	r3, #64	; 0x40
 8000760:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000766:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000768:	2340      	movs	r3, #64	; 0x40
 800076a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800076c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000770:	2104      	movs	r1, #4
 8000772:	4618      	mov	r0, r3
 8000774:	f006 fd90 	bl	8007298 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800077e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000786:	f000 f821 	bl	80007cc <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <SystemClock_Config+0x128>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <SystemClock_Config+0x128>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <SystemClock_Config+0x128>)
 8000798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <SystemClock_Config+0x128>)
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <SystemClock_Config+0x128>)
 80007a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 80007b4:	f002 fc06 	bl	8002fc4 <HAL_EnableCompensationCell>
}
 80007b8:	bf00      	nop
 80007ba:	3778      	adds	r7, #120	; 0x78
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800
 80007c8:	58024400 	.word	0x58024400

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f000 fdfd 	bl	80013d4 <BSP_LED_On>
  while (1)
 80007da:	e7fe      	b.n	80007da <Error_Handler+0xe>

080007dc <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db04      	blt.n	80007f4 <_isatty+0x18>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	dc01      	bgt.n	80007f4 <_isatty+0x18>
    return 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	e005      	b.n	8000800 <_isatty+0x24>

  errno = EBADF;
 80007f4:	f00a fac8 	bl	800ad88 <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2209      	movs	r2, #9
 80007fc:	601a      	str	r2, [r3, #0]
  return 0;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <_close>:

int _close(int fd) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	db04      	blt.n	8000820 <_close+0x18>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b02      	cmp	r3, #2
 800081a:	dc01      	bgt.n	8000820 <_close+0x18>
    return 0;
 800081c:	2300      	movs	r3, #0
 800081e:	e006      	b.n	800082e <_close+0x26>

  errno = EBADF;
 8000820:	f00a fab2 	bl	800ad88 <__errno>
 8000824:	4603      	mov	r3, r0
 8000826:	2209      	movs	r2, #9
 8000828:	601a      	str	r2, [r3, #0]
  return -1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000842:	f00a faa1 	bl	800ad88 <__errno>
 8000846:	4603      	mov	r3, r0
 8000848:	2209      	movs	r2, #9
 800084a:	601a      	str	r2, [r3, #0]
  return -1;
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <_fstat>:



int _fstat(int fd, struct stat* st) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	db08      	blt.n	800087a <_fstat+0x22>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b02      	cmp	r3, #2
 800086c:	dc05      	bgt.n	800087a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000874:	605a      	str	r2, [r3, #4]
    return 0;
 8000876:	2300      	movs	r3, #0
 8000878:	e005      	b.n	8000886 <_fstat+0x2e>
  }

  errno = EBADF;
 800087a:	f00a fa85 	bl	800ad88 <__errno>
 800087e:	4603      	mov	r3, r0
 8000880:	2209      	movs	r2, #9
 8000882:	601a      	str	r2, [r3, #0]
  return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <_read>:


int _read(int fd, char* ptr, int len) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d110      	bne.n	80008c4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <_read+0x4c>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	2201      	movs	r2, #1
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	f008 ffd9 	bl	8009864 <HAL_UART_Receive>
 80008b2:	4603      	mov	r3, r0
 80008b4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008b6:	7dfb      	ldrb	r3, [r7, #23]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <_read+0x30>
      return 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	e008      	b.n	80008d2 <_read+0x42>
    else
      return EIO;
 80008c0:	2305      	movs	r3, #5
 80008c2:	e006      	b.n	80008d2 <_read+0x42>
  }
  errno = EBADF;
 80008c4:	f00a fa60 	bl	800ad88 <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2209      	movs	r2, #9
 80008cc:	601a      	str	r2, [r3, #0]
  return -1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	240001a8 	.word	0x240001a8

080008e0 <_write>:

int _write(int fd, char* ptr, int len) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d002      	beq.n	80008f8 <_write+0x18>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d111      	bne.n	800091c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <_write+0x54>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	f008 ff1f 	bl	8009748 <HAL_UART_Transmit>
 800090a:	4603      	mov	r3, r0
 800090c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <_write+0x38>
      return len;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	e008      	b.n	800092a <_write+0x4a>
    else
      return EIO;
 8000918:	2305      	movs	r3, #5
 800091a:	e006      	b.n	800092a <_write+0x4a>
  }
  errno = EBADF;
 800091c:	f00a fa34 	bl	800ad88 <__errno>
 8000920:	4603      	mov	r3, r0
 8000922:	2209      	movs	r2, #9
 8000924:	601a      	str	r2, [r3, #0]
  return -1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	240001a8 	.word	0x240001a8

08000938 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000946:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800094e:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000956:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800095e:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	691b      	ldr	r3, [r3, #16]
 8000964:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000966:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4a18      	ldr	r2, [pc, #96]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800096e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000976:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800097e:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000986:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 800098e:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000996:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <UTIL_LCD_SetFuncDriver+0x9c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <UTIL_LCD_SetFuncDriver+0x9c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 80009a6:	69db      	ldr	r3, [r3, #28]
 80009a8:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <UTIL_LCD_SetFuncDriver+0xa0>)
 80009aa:	4611      	mov	r1, r2
 80009ac:	2000      	movs	r0, #0
 80009ae:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 80009b2:	6a1b      	ldr	r3, [r3, #32]
 80009b4:	4a09      	ldr	r2, [pc, #36]	; (80009dc <UTIL_LCD_SetFuncDriver+0xa4>)
 80009b6:	4611      	mov	r1, r2
 80009b8:	2000      	movs	r0, #0
 80009ba:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <UTIL_LCD_SetFuncDriver+0x98>)
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <UTIL_LCD_SetFuncDriver+0xa8>)
 80009c2:	4611      	mov	r1, r2
 80009c4:	2000      	movs	r0, #0
 80009c6:	4798      	blx	r3
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	240001ec 	.word	0x240001ec
 80009d4:	240001ac 	.word	0x240001ac
 80009d8:	240001c0 	.word	0x240001c0
 80009dc:	240001c4 	.word	0x240001c4
 80009e0:	240001c8 	.word	0x240001c8

080009e4 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <UTIL_LCD_SetLayer+0x34>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00c      	beq.n	8000a0e <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <UTIL_LCD_SetLayer+0x34>)
 80009f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f8:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <UTIL_LCD_SetLayer+0x38>)
 80009fa:	6912      	ldr	r2, [r2, #16]
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4610      	mov	r0, r2
 8000a00:	4798      	blx	r3
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <UTIL_LCD_SetLayer+0x38>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	60d3      	str	r3, [r2, #12]
    }
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	240001ec 	.word	0x240001ec
 8000a1c:	240001ac 	.word	0x240001ac

08000a20 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <UTIL_LCD_SetBackColor+0x24>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <UTIL_LCD_SetBackColor+0x24>)
 8000a2e:	015b      	lsls	r3, r3, #5
 8000a30:	4413      	add	r3, r2
 8000a32:	3304      	adds	r3, #4
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	240001ac 	.word	0x240001ac

08000a48 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <UTIL_LCD_SetFont+0x24>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <UTIL_LCD_SetFont+0x24>)
 8000a56:	015b      	lsls	r3, r3, #5
 8000a58:	4413      	add	r3, r2
 8000a5a:	3308      	adds	r3, #8
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	240001ac 	.word	0x240001ac

08000a70 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <UTIL_LCD_DrawHLine+0x64>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d118      	bne.n	8000ab8 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <UTIL_LCD_DrawHLine+0x68>)
 8000a88:	689c      	ldr	r4, [r3, #8]
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <UTIL_LCD_DrawHLine+0x64>)
 8000a8c:	6918      	ldr	r0, [r3, #16]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	f003 021f 	and.w	r2, r3, #31
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	0a9b      	lsrs	r3, r3, #10
 8000a9a:	015b      	lsls	r3, r3, #5
 8000a9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	0cdb      	lsrs	r3, r3, #19
 8000aa6:	02db      	lsls	r3, r3, #11
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	68f9      	ldr	r1, [r7, #12]
 8000ab4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8000ab6:	e009      	b.n	8000acc <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <UTIL_LCD_DrawHLine+0x68>)
 8000aba:	689c      	ldr	r4, [r3, #8]
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <UTIL_LCD_DrawHLine+0x64>)
 8000abe:	6918      	ldr	r0, [r3, #16]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	68f9      	ldr	r1, [r7, #12]
 8000aca:	47a0      	blx	r4
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	240001ac 	.word	0x240001ac
 8000ad8:	240001ec 	.word	0x240001ec

08000adc <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <UTIL_LCD_DrawVLine+0x64>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d118      	bne.n	8000b24 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <UTIL_LCD_DrawVLine+0x68>)
 8000af4:	68dc      	ldr	r4, [r3, #12]
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <UTIL_LCD_DrawVLine+0x64>)
 8000af8:	6918      	ldr	r0, [r3, #16]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	f003 021f 	and.w	r2, r3, #31
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	0a9b      	lsrs	r3, r3, #10
 8000b06:	015b      	lsls	r3, r3, #5
 8000b08:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	0cdb      	lsrs	r3, r3, #19
 8000b12:	02db      	lsls	r3, r3, #11
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	4313      	orrs	r3, r2
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	68f9      	ldr	r1, [r7, #12]
 8000b20:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8000b22:	e009      	b.n	8000b38 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <UTIL_LCD_DrawVLine+0x68>)
 8000b26:	68dc      	ldr	r4, [r3, #12]
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <UTIL_LCD_DrawVLine+0x64>)
 8000b2a:	6918      	ldr	r0, [r3, #16]
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	68f9      	ldr	r1, [r7, #12]
 8000b36:	47a0      	blx	r4
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	240001ac 	.word	0x240001ac
 8000b44:	240001ec 	.word	0x240001ec

08000b48 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <UTIL_LCD_Clear+0x28>)
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <UTIL_LCD_Clear+0x28>)
 8000b56:	6999      	ldr	r1, [r3, #24]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 f831 	bl	8000bc8 <UTIL_LCD_FillRect>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	240001ac 	.word	0x240001ac

08000b74 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	68b9      	ldr	r1, [r7, #8]
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f7ff ff71 	bl	8000a70 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	1e59      	subs	r1, r3, #1
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f7ff ff68 	bl	8000a70 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff ff98 	bl	8000adc <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	1e58      	subs	r0, r3, #1
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	f7ff ff8f 	bl	8000adc <UTIL_LCD_DrawVLine>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <UTIL_LCD_FillRect+0x6c>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d11a      	bne.n	8000c14 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <UTIL_LCD_FillRect+0x70>)
 8000be0:	691c      	ldr	r4, [r3, #16]
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <UTIL_LCD_FillRect+0x6c>)
 8000be4:	6918      	ldr	r0, [r3, #16]
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	f003 021f 	and.w	r2, r3, #31
 8000bee:	6a3b      	ldr	r3, [r7, #32]
 8000bf0:	0a9b      	lsrs	r3, r3, #10
 8000bf2:	015b      	lsls	r3, r3, #5
 8000bf4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	0cdb      	lsrs	r3, r3, #19
 8000bfe:	02db      	lsls	r3, r3, #11
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	68f9      	ldr	r1, [r7, #12]
 8000c10:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8000c12:	e00b      	b.n	8000c2c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <UTIL_LCD_FillRect+0x70>)
 8000c16:	691c      	ldr	r4, [r3, #16]
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <UTIL_LCD_FillRect+0x6c>)
 8000c1a:	6918      	ldr	r0, [r3, #16]
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	68f9      	ldr	r1, [r7, #12]
 8000c2a:	47a0      	blx	r4
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	240001ac 	.word	0x240001ac
 8000c38:	240001ec 	.word	0x240001ec

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_MspInit+0x74>)
 8000c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_MspInit+0x74>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_MspInit+0x74>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	210f      	movs	r1, #15
 8000c64:	f06f 0001 	mvn.w	r0, #1
 8000c68:	f002 fa97 	bl	800319a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_MspInit+0x74>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_MspInit+0x74>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x74>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <HAL_MspInit+0x78>)
 8000ca2:	f004 fa77 	bl	8005194 <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	58021000 	.word	0x58021000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f002 f91c 	bl	8002f24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cec:	f009 fe12 	bl	800a914 <xTaskGetSchedulerState>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d001      	beq.n	8000cfa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cf6:	f009 fe77 	bl	800a9e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 fc0c 	bl	8001520 <BSP_PB_IRQHandler>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM3_IRQHandler+0x10>)
 8000d12:	f008 fb0f 	bl	8009334 <HAL_TIM_IRQHandler>
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2400015c 	.word	0x2400015c

08000d20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART3_IRQHandler+0x10>)
 8000d26:	f008 fe65 	bl	80099f4 <HAL_UART_IRQHandler>
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	240000c8 	.word	0x240000c8

08000d34 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f000 fc0b 	bl	8001554 <BSP_AUDIO_OUT_IRQHandler>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <DMA2_Stream4_IRQHandler+0x14>)
 8000d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 ffbc 	bl	8003ccc <HAL_DMA_IRQHandler>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	240002cc 	.word	0x240002cc

08000d5c <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8000d60:	2130      	movs	r1, #48	; 0x30
 8000d62:	2001      	movs	r0, #1
 8000d64:	f000 fc0a 	bl	800157c <BSP_AUDIO_IN_IRQHandler>

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f001 ff51 	bl	8002c18 <BSP_SDRAM_IRQHandler>

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_kill>:

int _kill(int pid, int sig)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d94:	f009 fff8 	bl	800ad88 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2216      	movs	r2, #22
 8000d9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_exit>:

void _exit (int status)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000db2:	f04f 31ff 	mov.w	r1, #4294967295
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffe7 	bl	8000d8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dbc:	e7fe      	b.n	8000dbc <_exit+0x12>
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f009 ffca 	bl	800ad88 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24080000 	.word	0x24080000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	24000218 	.word	0x24000218
 8000e28:	240015d8 	.word	0x240015d8

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e30:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <SystemInit+0xe4>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a36      	ldr	r2, [pc, #216]	; (8000f10 <SystemInit+0xe4>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <SystemInit+0xe8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d807      	bhi.n	8000e5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e4c:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <SystemInit+0xe8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 030f 	bic.w	r3, r3, #15
 8000e54:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <SystemInit+0xe8>)
 8000e56:	f043 0307 	orr.w	r3, r3, #7
 8000e5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <SystemInit+0xec>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a2d      	ldr	r2, [pc, #180]	; (8000f18 <SystemInit+0xec>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <SystemInit+0xec>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <SystemInit+0xec>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4929      	ldr	r1, [pc, #164]	; (8000f18 <SystemInit+0xec>)
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <SystemInit+0xf0>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <SystemInit+0xe8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <SystemInit+0xe8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 030f 	bic.w	r3, r3, #15
 8000e8e:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <SystemInit+0xe8>)
 8000e90:	f043 0307 	orr.w	r3, r3, #7
 8000e94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <SystemInit+0xec>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <SystemInit+0xec>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <SystemInit+0xec>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <SystemInit+0xec>)
 8000eaa:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <SystemInit+0xf4>)
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <SystemInit+0xec>)
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <SystemInit+0xf8>)
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <SystemInit+0xec>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <SystemInit+0xfc>)
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <SystemInit+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <SystemInit+0xec>)
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <SystemInit+0xfc>)
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <SystemInit+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <SystemInit+0xec>)
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <SystemInit+0xfc>)
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <SystemInit+0xec>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <SystemInit+0xec>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <SystemInit+0xec>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <SystemInit+0xec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <SystemInit+0x100>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <SystemInit+0x104>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ef6:	d202      	bcs.n	8000efe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <SystemInit+0x108>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <SystemInit+0x10c>)
 8000f00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f04:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	52002000 	.word	0x52002000
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f20:	02020200 	.word	0x02020200
 8000f24:	01ff0000 	.word	0x01ff0000
 8000f28:	01010280 	.word	0x01010280
 8000f2c:	5c001000 	.word	0x5c001000
 8000f30:	ffff0000 	.word	0xffff0000
 8000f34:	51008108 	.word	0x51008108
 8000f38:	52004000 	.word	0x52004000

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f7ff ff74 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f009 ff13 	bl	800ad94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fb5b 	bl	8000628 <main>
  bx  lr
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f7c:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8000f80:	0800c7ec 	.word	0x0800c7ec
  ldr r2, =_sbss
 8000f84:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8000f88:	240015d8 	.word	0x240015d8

08000f8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC3_IRQHandler>
	...

08000f90 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d103      	bne.n	8000fa8 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e02c      	b.n	8001002 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	891a      	ldrh	r2, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	695a      	ldr	r2, [r3, #20]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a0c      	ldr	r2, [pc, #48]	; (800100c <FT5336_RegisterBusIO+0x7c>)
 8000fdc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <FT5336_RegisterBusIO+0x80>)
 8000fe2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4798      	blx	r3
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	e002      	b.n	8001002 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	08001035 	.word	0x08001035
 8001010:	08001069 	.word	0x08001069

08001014 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3318      	adds	r3, #24
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f850 	bl	80010ca <ft5336_chip_id>
 800102a:	4603      	mov	r3, r0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	461a      	mov	r2, r3
 8001040:	460b      	mov	r3, r1
 8001042:	72fb      	strb	r3, [r7, #11]
 8001044:	4613      	mov	r3, r2
 8001046:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	691c      	ldr	r4, [r3, #16]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	8918      	ldrh	r0, [r3, #8]
 8001054:	7afb      	ldrb	r3, [r7, #11]
 8001056:	b299      	uxth	r1, r3
 8001058:	893b      	ldrh	r3, [r7, #8]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	47a0      	blx	r4
 800105e:	4603      	mov	r3, r0
}
 8001060:	4618      	mov	r0, r3
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	72fb      	strb	r3, [r7, #11]
 8001078:	4613      	mov	r3, r2
 800107a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	68dc      	ldr	r4, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	8918      	ldrh	r0, [r3, #8]
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	b299      	uxth	r1, r3
 800108c:	893b      	ldrh	r3, [r7, #8]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	47a0      	blx	r4
 8001092:	4603      	mov	r3, r0
}
 8001094:	4618      	mov	r0, r3
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}

0800109c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	461a      	mov	r2, r3
 80010a8:	460b      	mov	r3, r1
 80010aa:	72fb      	strb	r3, [r7, #11]
 80010ac:	4613      	mov	r3, r2
 80010ae:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	685c      	ldr	r4, [r3, #4]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	893b      	ldrh	r3, [r7, #8]
 80010ba:	7af9      	ldrb	r1, [r7, #11]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	47a0      	blx	r4
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd90      	pop	{r4, r7, pc}

080010ca <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80010d4:	2301      	movs	r3, #1
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	21a8      	movs	r1, #168	; 0xa8
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffde 	bl	800109c <ft5336_read_reg>
 80010e0:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d107      	bne.n	80010f8 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	781a      	ldrb	r2, [r3, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80010f8:	68fb      	ldr	r3, [r7, #12]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f831 	bl	8001180 <MT48LC4M32B2_ClockEnable>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d128      	bne.n	8001176 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f000 f8e1 	bl	80012ec <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4619      	mov	r1, r3
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f849 	bl	80011c8 <MT48LC4M32B2_Precharge>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d11c      	bne.n	8001176 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	461a      	mov	r2, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f896 	bl	8001278 <MT48LC4M32B2_RefreshMode>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d111      	bne.n	8001176 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f85b 	bl	8001210 <MT48LC4M32B2_ModeRegConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10a      	bne.n	8001176 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f8ac 	bl	80012c4 <MT48LC4M32B2_RefreshRate>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MT48LC4M32B2_ClockEnable+0x44>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <MT48LC4M32B2_ClockEnable+0x44>)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MT48LC4M32B2_ClockEnable+0x44>)
 8001198:	2201      	movs	r2, #1
 800119a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MT48LC4M32B2_ClockEnable+0x44>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	4907      	ldr	r1, [pc, #28]	; (80011c4 <MT48LC4M32B2_ClockEnable+0x44>)
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f007 ff9f 	bl	80090ec <HAL_SDRAM_SendCommand>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	e000      	b.n	80011bc <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80011ba:	2300      	movs	r3, #0
  }
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2400021c 	.word	0x2400021c

080011c8 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MT48LC4M32B2_Precharge+0x44>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <MT48LC4M32B2_Precharge+0x44>)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MT48LC4M32B2_Precharge+0x44>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <MT48LC4M32B2_Precharge+0x44>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	4907      	ldr	r1, [pc, #28]	; (800120c <MT48LC4M32B2_Precharge+0x44>)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f007 ff7b 	bl	80090ec <HAL_SDRAM_SendCommand>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	e000      	b.n	8001204 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001202:	2300      	movs	r3, #0
  }
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2400021c 	.word	0x2400021c

08001210 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001222:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8001228:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800122e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001234:	4313      	orrs	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800123a:	2204      	movs	r2, #4
 800123c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001244:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001248:	2201      	movs	r2, #1
 800124a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001256:	4907      	ldr	r1, [pc, #28]	; (8001274 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f007 ff47 	bl	80090ec <HAL_SDRAM_SendCommand>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	e000      	b.n	800126c <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800126a:	2300      	movs	r3, #0
  }
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2400021c 	.word	0x2400021c

08001278 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <MT48LC4M32B2_RefreshMode+0x48>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800128a:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <MT48LC4M32B2_RefreshMode+0x48>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MT48LC4M32B2_RefreshMode+0x48>)
 8001292:	2208      	movs	r2, #8
 8001294:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MT48LC4M32B2_RefreshMode+0x48>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800129c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <MT48LC4M32B2_RefreshMode+0x48>)
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f007 ff22 	bl	80090ec <HAL_SDRAM_SendCommand>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e000      	b.n	80012b6 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80012b4:	2300      	movs	r3, #0
  }
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2400021c 	.word	0x2400021c

080012c4 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f007 ff40 	bl	8009156 <HAL_SDRAM_ProgramRefreshRate>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	e000      	b.n	80012e4 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80012e2:	2300      	movs	r3, #0
  }
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80012f4:	f001 fe2a 	bl	8002f4c <HAL_GetTick>
 80012f8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80012fa:	bf00      	nop
 80012fc:	f001 fe26 	bl	8002f4c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10f      	bne.n	800134c <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <BSP_LED_Init+0xb0>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <BSP_LED_Init+0xb0>)
 8001334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001338:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <BSP_LED_Init+0xb0>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	e015      	b.n	8001378 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d10f      	bne.n	8001372 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <BSP_LED_Init+0xb0>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <BSP_LED_Init+0xb0>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <BSP_LED_Init+0xb0>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	e002      	b.n	8001378 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001372:	f06f 0301 	mvn.w	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <BSP_LED_Init+0xb4>)
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <BSP_LED_Init+0xb8>)
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	f107 0210 	add.w	r2, r7, #16
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fef9 	bl	8005194 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <BSP_LED_Init+0xb8>)
 80013a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <BSP_LED_Init+0xb4>)
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2201      	movs	r2, #1
 80013b6:	4619      	mov	r1, r3
 80013b8:	f004 f8b4 	bl	8005524 <HAL_GPIO_WritePin>
  return ret;
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 80013be:	4618      	mov	r0, r3
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	58024400 	.word	0x58024400
 80013cc:	0800c648 	.word	0x0800c648
 80013d0:	24000014 	.word	0x24000014

080013d4 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	4a08      	ldr	r2, [pc, #32]	; (8001408 <BSP_LED_On+0x34>)
 80013e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <BSP_LED_On+0x38>)
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	f004 f894 	bl	8005524 <HAL_GPIO_WritePin>
  return ret;
 80013fc:	68fb      	ldr	r3, [r7, #12]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	24000014 	.word	0x24000014
 800140c:	0800c648 	.word	0x0800c648

08001410 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001420:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <BSP_PB_Init+0xcc>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <BSP_PB_Init+0xcc>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <BSP_PB_Init+0xcc>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800143e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001442:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <BSP_PB_Init+0xd0>)
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	f107 020c 	add.w	r2, r7, #12
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fe95 	bl	8005194 <HAL_GPIO_Init>
 800146a:	e031      	b.n	80014d0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800146c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001470:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <BSP_PB_Init+0xd0>)
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	f107 020c 	add.w	r2, r7, #12
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fe87 	bl	8005194 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <BSP_PB_Init+0xd4>)
 800148c:	441a      	add	r2, r3
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4915      	ldr	r1, [pc, #84]	; (80014e8 <BSP_PB_Init+0xd8>)
 8001492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001496:	4619      	mov	r1, r3
 8001498:	4610      	mov	r0, r2
 800149a:	f003 fe36 	bl	800510a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <BSP_PB_Init+0xd4>)
 80014a4:	1898      	adds	r0, r3, r2
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a10      	ldr	r2, [pc, #64]	; (80014ec <BSP_PB_Init+0xdc>)
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	461a      	mov	r2, r3
 80014b0:	2100      	movs	r1, #0
 80014b2:	f003 fe0b 	bl	80050cc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80014b6:	2028      	movs	r0, #40	; 0x28
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <BSP_PB_Init+0xe0>)
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	f001 fe69 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80014c8:	2328      	movs	r3, #40	; 0x28
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fe7f 	bl	80031ce <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	58024400 	.word	0x58024400
 80014e0:	2400001c 	.word	0x2400001c
 80014e4:	2400022c 	.word	0x2400022c
 80014e8:	0800c650 	.word	0x0800c650
 80014ec:	24000020 	.word	0x24000020
 80014f0:	24000024 	.word	0x24000024

080014f4 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <BSP_PB_GetState+0x28>)
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fff1 	bl	80054f4 <HAL_GPIO_ReadPin>
 8001512:	4603      	mov	r3, r0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2400001c 	.word	0x2400001c

08001520 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <BSP_PB_IRQHandler+0x20>)
 8001530:	4413      	add	r3, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fdfe 	bl	8005134 <HAL_EXTI_IRQHandler>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2400022c 	.word	0x2400022c

08001544 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff f895 	bl	8000678 <BSP_PB_Callback>
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8001564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001568:	4618      	mov	r0, r3
 800156a:	f002 fbaf 	bl	8003ccc <HAL_DMA_IRQHandler>
  }
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	24000234 	.word	0x24000234

0800157c <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b30      	cmp	r3, #48	; 0x30
 800158a:	d002      	beq.n	8001592 <BSP_AUDIO_IN_IRQHandler+0x16>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8001594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fb97 	bl	8003ccc <HAL_DMA_IRQHandler>
  }

}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	240002cc 	.word	0x240002cc

080015ac <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <BSP_I2C4_Init+0x64>)
 80015b8:	4a16      	ldr	r2, [pc, #88]	; (8001614 <BSP_I2C4_Init+0x68>)
 80015ba:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <BSP_I2C4_Init+0x6c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d11f      	bne.n	8001604 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <BSP_I2C4_Init+0x6c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <BSP_I2C4_Init+0x6c>)
 80015cc:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80015ce:	4810      	ldr	r0, [pc, #64]	; (8001610 <BSP_I2C4_Init+0x64>)
 80015d0:	f004 f976 	bl	80058c0 <HAL_I2C_GetState>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d114      	bne.n	8001604 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <BSP_I2C4_Init+0x64>)
 80015dc:	f000 fb06 	bl	8001bec <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80015e0:	f006 f9ba 	bl	8007958 <HAL_RCC_GetPCLK2Freq>
 80015e4:	4603      	mov	r3, r0
 80015e6:	490d      	ldr	r1, [pc, #52]	; (800161c <BSP_I2C4_Init+0x70>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f889 	bl	8001700 <I2C_GetTiming>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <BSP_I2C4_Init+0x64>)
 80015f4:	f000 f814 	bl	8001620 <MX_I2C4_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80015fe:	f06f 0307 	mvn.w	r3, #7
 8001602:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	24000d6c 	.word	0x24000d6c
 8001614:	58001c00 	.word	0x58001c00
 8001618:	24000364 	.word	0x24000364
 800161c:	000186a0 	.word	0x000186a0

08001620 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f003 ff7a 	bl	8005558 <HAL_I2C_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e014      	b.n	800169a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f004 fba0 	bl	8005dbc <HAL_I2CEx_ConfigAnalogFilter>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e008      	b.n	800169a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8001688:	2100      	movs	r1, #0
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f004 fbe1 	bl	8005e52 <HAL_I2CEx_ConfigDigitalFilter>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60ba      	str	r2, [r7, #8]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	81fb      	strh	r3, [r7, #14]
 80016b2:	460b      	mov	r3, r1
 80016b4:	81bb      	strh	r3, [r7, #12]
 80016b6:	4613      	mov	r3, r2
 80016b8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80016ba:	89b9      	ldrh	r1, [r7, #12]
 80016bc:	89f8      	ldrh	r0, [r7, #14]
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f000 fafd 	bl	8001cc4 <I2C4_ReadReg>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e00c      	b.n	80016f0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <BSP_I2C4_ReadReg+0x58>)
 80016d8:	f004 f900 	bl	80058dc <HAL_I2C_GetError>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d103      	bne.n	80016ea <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80016e2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e002      	b.n	80016f0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80016ea:	f06f 0303 	mvn.w	r3, #3
 80016ee:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80016f0:	697b      	ldr	r3, [r7, #20]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000d6c 	.word	0x24000d6c

08001700 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d06b      	beq.n	80017ec <I2C_GetTiming+0xec>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d068      	beq.n	80017ec <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	e060      	b.n	80017e2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001720:	4a35      	ldr	r2, [pc, #212]	; (80017f8 <I2C_GetTiming+0xf8>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	3304      	adds	r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d352      	bcc.n	80017dc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8001736:	4a30      	ldr	r2, [pc, #192]	; (80017f8 <I2C_GetTiming+0xf8>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	3308      	adds	r3, #8
 8001744:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d847      	bhi.n	80017dc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800174c:	6939      	ldr	r1, [r7, #16]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f856 	bl	8001800 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8001754:	6939      	ldr	r1, [r7, #16]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f940 	bl	80019dc <I2C_Compute_SCLL_SCLH>
 800175c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b7f      	cmp	r3, #127	; 0x7f
 8001762:	d842      	bhi.n	80017ea <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001764:	4925      	ldr	r1, [pc, #148]	; (80017fc <I2C_GetTiming+0xfc>)
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001776:	4821      	ldr	r0, [pc, #132]	; (80017fc <I2C_GetTiming+0xfc>)
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4403      	add	r3, r0
 8001784:	3304      	adds	r3, #4
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	051b      	lsls	r3, r3, #20
 800178a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800178e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001790:	481a      	ldr	r0, [pc, #104]	; (80017fc <I2C_GetTiming+0xfc>)
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4403      	add	r3, r0
 800179e:	3308      	adds	r3, #8
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80017a8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80017aa:	4814      	ldr	r0, [pc, #80]	; (80017fc <I2C_GetTiming+0xfc>)
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4403      	add	r3, r0
 80017b8:	330c      	adds	r3, #12
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80017c0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <I2C_GetTiming+0xfc>)
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4403      	add	r3, r0
 80017d0:	3310      	adds	r3, #16
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80017d6:	430b      	orrs	r3, r1
 80017d8:	617b      	str	r3, [r7, #20]
        }
        break;
 80017da:	e006      	b.n	80017ea <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	3301      	adds	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d99b      	bls.n	8001720 <I2C_GetTiming+0x20>
 80017e8:	e000      	b.n	80017ec <I2C_GetTiming+0xec>
        break;
 80017ea:	bf00      	nop
      }
    }
  }

  return ret;
 80017ec:	697b      	ldr	r3, [r7, #20]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800c654 	.word	0x0800c654
 80017fc:	24000368 	.word	0x24000368

08001800 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001800:	b480      	push	{r7}
 8001802:	b08f      	sub	sp, #60	; 0x3c
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800180a:	2310      	movs	r3, #16
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	085a      	lsrs	r2, r3, #1
 8001812:	4b6e      	ldr	r3, [pc, #440]	; (80019cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8001814:	4413      	add	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	fbb3 f3f2 	udiv	r3, r3, r2
 800181c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800181e:	2332      	movs	r3, #50	; 0x32
 8001820:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8001822:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001826:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001828:	4a69      	ldr	r2, [pc, #420]	; (80019d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3324      	adds	r3, #36	; 0x24
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	4a65      	ldr	r2, [pc, #404]	; (80019d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	212c      	movs	r1, #44	; 0x2c
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	330c      	adds	r3, #12
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800184c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800184e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001850:	495f      	ldr	r1, [pc, #380]	; (80019d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	202c      	movs	r0, #44	; 0x2c
 8001856:	fb00 f303 	mul.w	r3, r0, r3
 800185a:	440b      	add	r3, r1
 800185c:	3328      	adds	r3, #40	; 0x28
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3303      	adds	r3, #3
 8001862:	69f9      	ldr	r1, [r7, #28]
 8001864:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3310      	adds	r3, #16
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	4a54      	ldr	r2, [pc, #336]	; (80019d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3320      	adds	r3, #32
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001890:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001892:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001894:	494e      	ldr	r1, [pc, #312]	; (80019d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	202c      	movs	r0, #44	; 0x2c
 800189a:	fb00 f303 	mul.w	r3, r0, r3
 800189e:	440b      	add	r3, r1
 80018a0:	3328      	adds	r3, #40	; 0x28
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3304      	adds	r3, #4
 80018a6:	69f9      	ldr	r1, [r7, #28]
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80018b0:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	212c      	movs	r1, #44	; 0x2c
 80018b6:	fb01 f303 	mul.w	r3, r1, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	3320      	adds	r3, #32
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	212c      	movs	r1, #44	; 0x2c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3314      	adds	r3, #20
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4403      	add	r3, r0
 80018d4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dc01      	bgt.n	80018e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	dc01      	bgt.n	80018ea <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ee:	e062      	b.n	80019b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
 80018f4:	e059      	b.n	80019aa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018fc:	3201      	adds	r2, #1
 80018fe:	fb03 f202 	mul.w	r2, r3, r2
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fb02 f303 	mul.w	r3, r2, r3
 8001908:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	429a      	cmp	r2, r3
 8001910:	d348      	bcc.n	80019a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
 8001916:	e042      	b.n	800199e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8001918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191a:	3301      	adds	r3, #1
 800191c:	6a3a      	ldr	r2, [r7, #32]
 800191e:	fb03 f202 	mul.w	r2, r3, r2
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	429a      	cmp	r2, r3
 8001930:	d332      	bcc.n	8001998 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	429a      	cmp	r2, r3
 8001938:	d82e      	bhi.n	8001998 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800193a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800193c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193e:	429a      	cmp	r2, r3
 8001940:	d02a      	beq.n	8001998 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4924      	ldr	r1, [pc, #144]	; (80019d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001954:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	491f      	ldr	r1, [pc, #124]	; (80019d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3304      	adds	r3, #4
 8001968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4919      	ldr	r1, [pc, #100]	; (80019d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	3308      	adds	r3, #8
 800197e:	6a3a      	ldr	r2, [r7, #32]
 8001980:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800198e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b7f      	cmp	r3, #127	; 0x7f
 8001996:	d812      	bhi.n	80019be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	3301      	adds	r3, #1
 800199c:	623b      	str	r3, [r7, #32]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d9b9      	bls.n	8001918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	3301      	adds	r3, #1
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d9a2      	bls.n	80018f6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	3301      	adds	r3, #1
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d999      	bls.n	80018f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80019bc:	e000      	b.n	80019c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80019be:	bf00      	nop
          }
        }
      }
    }
  }
}
 80019c0:	373c      	adds	r7, #60	; 0x3c
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	3b9aca00 	.word	0x3b9aca00
 80019d0:	0800c654 	.word	0x0800c654
 80019d4:	24000d68 	.word	0x24000d68
 80019d8:	24000368 	.word	0x24000368

080019dc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80019dc:	b480      	push	{r7}
 80019de:	b093      	sub	sp, #76	; 0x4c
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	085a      	lsrs	r2, r3, #1
 80019f0:	4b7a      	ldr	r3, [pc, #488]	; (8001bdc <I2C_Compute_SCLL_SCLH+0x200>)
 80019f2:	4413      	add	r3, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80019fc:	4a78      	ldr	r2, [pc, #480]	; (8001be0 <I2C_Compute_SCLL_SCLH+0x204>)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	085a      	lsrs	r2, r3, #1
 8001a0c:	4b73      	ldr	r3, [pc, #460]	; (8001bdc <I2C_Compute_SCLL_SCLH+0x200>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	4973      	ldr	r1, [pc, #460]	; (8001be0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	202c      	movs	r0, #44	; 0x2c
 8001a16:	fb00 f202 	mul.w	r2, r0, r2
 8001a1a:	440a      	add	r2, r1
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8001a24:	2332      	movs	r3, #50	; 0x32
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8001a28:	4a6d      	ldr	r2, [pc, #436]	; (8001be0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3328      	adds	r3, #40	; 0x28
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8001a40:	4a67      	ldr	r2, [pc, #412]	; (8001be0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a62      	ldr	r2, [pc, #392]	; (8001bdc <I2C_Compute_SCLL_SCLH+0x200>)
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8001a58:	4a61      	ldr	r2, [pc, #388]	; (8001be0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3308      	adds	r3, #8
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a5c      	ldr	r2, [pc, #368]	; (8001bdc <I2C_Compute_SCLL_SCLH+0x200>)
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8001a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
 8001a78:	e0a3      	b.n	8001bc2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001a7a:	495a      	ldr	r1, [pc, #360]	; (8001be4 <I2C_Compute_SCLL_SCLH+0x208>)
 8001a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a98:	e08c      	b.n	8001bb4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	441a      	add	r2, r3
 8001aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	6979      	ldr	r1, [r7, #20]
 8001aa6:	fb03 f101 	mul.w	r1, r3, r1
 8001aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	; (8001be0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d971      	bls.n	8001bae <I2C_Compute_SCLL_SCLH+0x1d2>
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	1ad2      	subs	r2, r2, r3
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d268      	bcs.n	8001bae <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ae0:	e062      	b.n	8001ba8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	441a      	add	r2, r3
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	3301      	adds	r3, #1
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	fb03 f101 	mul.w	r1, r3, r1
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	440b      	add	r3, r1
 8001af8:	4413      	add	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	441a      	add	r2, r3
 8001b02:	4937      	ldr	r1, [pc, #220]	; (8001be0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	202c      	movs	r0, #44	; 0x2c
 8001b08:	fb00 f303 	mul.w	r3, r0, r3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3320      	adds	r3, #32
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	441a      	add	r2, r3
 8001b14:	4932      	ldr	r1, [pc, #200]	; (8001be0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	202c      	movs	r0, #44	; 0x2c
 8001b1a:	fb00 f303 	mul.w	r3, r0, r3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3324      	adds	r3, #36	; 0x24
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d338      	bcc.n	8001ba2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d834      	bhi.n	8001ba2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8001b38:	4a29      	ldr	r2, [pc, #164]	; (8001be0 <I2C_Compute_SCLL_SCLH+0x204>)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	331c      	adds	r3, #28
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d329      	bcc.n	8001ba2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8001b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d225      	bcs.n	8001ba2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8001b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	da02      	bge.n	8001b6a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8001b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b66:	425b      	negs	r3, r3
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d917      	bls.n	8001ba2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b74:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8001b76:	491b      	ldr	r1, [pc, #108]	; (8001be4 <I2C_Compute_SCLL_SCLH+0x208>)
 8001b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	3310      	adds	r3, #16
 8001b86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b88:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8001b8a:	4916      	ldr	r1, [pc, #88]	; (8001be4 <I2C_Compute_SCLL_SCLH+0x208>)
 8001b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	330c      	adds	r3, #12
 8001b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b9c:	601a      	str	r2, [r3, #0]
              ret = count;
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d999      	bls.n	8001ae2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb6:	2bff      	cmp	r3, #255	; 0xff
 8001bb8:	f67f af6f 	bls.w	8001a9a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <I2C_Compute_SCLL_SCLH+0x20c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f4ff af56 	bcc.w	8001a7a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8001bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	374c      	adds	r7, #76	; 0x4c
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	3b9aca00 	.word	0x3b9aca00
 8001be0:	0800c654 	.word	0x0800c654
 8001be4:	24000368 	.word	0x24000368
 8001be8:	24000d68 	.word	0x24000d68

08001bec <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8001bf4:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfa:	4a30      	ldr	r2, [pc, #192]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	4a28      	ldr	r2, [pc, #160]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8001c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001c36:	2312      	movs	r3, #18
 8001c38:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8001c42:	2304      	movs	r3, #4
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481c      	ldr	r0, [pc, #112]	; (8001cc0 <I2C4_MspInit+0xd4>)
 8001c4e:	f003 faa1 	bl	8005194 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8001c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c56:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001c58:	2312      	movs	r3, #18
 8001c5a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001c60:	2302      	movs	r3, #2
 8001c62:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8001c64:	2304      	movs	r3, #4
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <I2C4_MspInit+0xd4>)
 8001c70:	f003 fa90 	bl	8005194 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c7a:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <I2C4_MspInit+0xd0>)
 8001caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	; 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020c00 	.word	0x58020c00

08001cc4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af04      	add	r7, sp, #16
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	81fb      	strh	r3, [r7, #14]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	81bb      	strh	r3, [r7, #12]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8001cd8:	8978      	ldrh	r0, [r7, #10]
 8001cda:	89ba      	ldrh	r2, [r7, #12]
 8001cdc:	89f9      	ldrh	r1, [r7, #14]
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	8b3b      	ldrh	r3, [r7, #24]
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4603      	mov	r3, r0
 8001cee:	4807      	ldr	r0, [pc, #28]	; (8001d0c <I2C4_ReadReg+0x48>)
 8001cf0:	f003 fccc 	bl	800568c <HAL_I2C_Mem_Read>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e001      	b.n	8001d02 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8001cfe:	f06f 0307 	mvn.w	r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	24000d6c 	.word	0x24000d6c

08001d10 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8001d1a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001d24:	2200      	movs	r2, #0
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f805 	bl	8001d38 <BSP_LCD_InitEx>
 8001d2e:	4603      	mov	r3, r0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b09e      	sub	sp, #120	; 0x78
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d808      	bhi.n	8001d66 <BSP_LCD_InitEx+0x2e>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d105      	bne.n	8001d66 <BSP_LCD_InitEx+0x2e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d006      	beq.n	8001d6e <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d66:	f06f 0301 	mvn.w	r3, #1
 8001d6a:	677b      	str	r3, [r7, #116]	; 0x74
 8001d6c:	e0a8      	b.n	8001ec0 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d109      	bne.n	8001d88 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8001d74:	2302      	movs	r3, #2
 8001d76:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 8001d78:	4a54      	ldr	r2, [pc, #336]	; (8001ecc <BSP_LCD_InitEx+0x194>)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	015b      	lsls	r3, r3, #5
 8001d7e:	4413      	add	r3, r2
 8001d80:	3310      	adds	r3, #16
 8001d82:	2202      	movs	r2, #2
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e008      	b.n	8001d9a <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8001d8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ecc <BSP_LCD_InitEx+0x194>)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015b      	lsls	r3, r3, #5
 8001d92:	4413      	add	r3, r2
 8001d94:	3310      	adds	r3, #16
 8001d96:	2204      	movs	r2, #4
 8001d98:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8001d9a:	4a4c      	ldr	r2, [pc, #304]	; (8001ecc <BSP_LCD_InitEx+0x194>)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	4413      	add	r3, r2
 8001da2:	330c      	adds	r3, #12
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8001da8:	4a48      	ldr	r2, [pc, #288]	; (8001ecc <BSP_LCD_InitEx+0x194>)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015b      	lsls	r3, r3, #5
 8001dae:	4413      	add	r3, r2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8001db4:	4a45      	ldr	r2, [pc, #276]	; (8001ecc <BSP_LCD_InitEx+0x194>)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015b      	lsls	r3, r3, #5
 8001dba:	4413      	add	r3, r2
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8001dc4:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <BSP_LCD_InitEx+0x198>)
 8001dc6:	4a43      	ldr	r2, [pc, #268]	; (8001ed4 <BSP_LCD_InitEx+0x19c>)
 8001dc8:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8001dca:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <BSP_LCD_InitEx+0x1a0>)
 8001dcc:	4a43      	ldr	r2, [pc, #268]	; (8001edc <BSP_LCD_InitEx+0x1a4>)
 8001dce:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8001dd0:	483f      	ldr	r0, [pc, #252]	; (8001ed0 <BSP_LCD_InitEx+0x198>)
 8001dd2:	f000 fd1b 	bl	800280c <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8001dd6:	4840      	ldr	r0, [pc, #256]	; (8001ed8 <BSP_LCD_InitEx+0x1a0>)
 8001dd8:	f000 fde4 	bl	80029a4 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <BSP_LCD_InitEx+0x1a8>)
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8001de0:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <BSP_LCD_InitEx+0x1ac>)
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8001de4:	2370      	movs	r3, #112	; 0x70
 8001de6:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8001de8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001dec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f8cc 	bl	8000f90 <FT5336_RegisterBusIO>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	da03      	bge.n	8001e06 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001dfe:	f06f 0304 	mvn.w	r3, #4
 8001e02:	677b      	str	r3, [r7, #116]	; 0x74
 8001e04:	e02b      	b.n	8001e5e <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8001e06:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001e0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f8ff 	bl	8001014 <FT5336_ReadID>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	da03      	bge.n	8001e24 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e1c:	f06f 0304 	mvn.w	r3, #4
 8001e20:	677b      	str	r3, [r7, #116]	; 0x74
 8001e22:	e01c      	b.n	8001e5e <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8001e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e26:	2b51      	cmp	r3, #81	; 0x51
 8001e28:	d003      	beq.n	8001e32 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001e2a:	f06f 0306 	mvn.w	r3, #6
 8001e2e:	677b      	str	r3, [r7, #116]	; 0x74
 8001e30:	e015      	b.n	8001e5e <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8001e32:	4827      	ldr	r0, [pc, #156]	; (8001ed0 <BSP_LCD_InitEx+0x198>)
 8001e34:	f000 f8e8 	bl	8002008 <MX_LTDC_ClockConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e3e:	f06f 0303 	mvn.w	r3, #3
 8001e42:	677b      	str	r3, [r7, #116]	; 0x74
 8001e44:	e00b      	b.n	8001e5e <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8001e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	4820      	ldr	r0, [pc, #128]	; (8001ed0 <BSP_LCD_InitEx+0x198>)
 8001e4e:	f000 f84d 	bl	8001eec <MX_LTDC_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e58:	f06f 0303 	mvn.w	r3, #3
 8001e5c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8001e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d12d      	bne.n	8001ec0 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001e64:	2000      	movs	r0, #0
 8001e66:	f000 fe2f 	bl	8002ac8 <BSP_SDRAM_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8001e70:	f06f 0303 	mvn.w	r3, #3
 8001e74:	e025      	b.n	8001ec2 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8001e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e86:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 8001e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8001e8c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	461a      	mov	r2, r3
 8001e98:	2100      	movs	r1, #0
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <BSP_LCD_InitEx+0x198>)
 8001e9c:	f000 f872 	bl	8001f84 <MX_LTDC_ConfigLayer>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001ea6:	f06f 0303 	mvn.w	r3, #3
 8001eaa:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8001eac:	480e      	ldr	r0, [pc, #56]	; (8001ee8 <BSP_LCD_InitEx+0x1b0>)
 8001eae:	f000 fde1 	bl	8002a74 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 8001eb2:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <BSP_LCD_InitEx+0x194>)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	015b      	lsls	r3, r3, #5
 8001eb8:	4413      	add	r3, r2
 8001eba:	3318      	adds	r3, #24
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8001ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3778      	adds	r7, #120	; 0x78
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	24000f1c 	.word	0x24000f1c
 8001ed0:	24000e74 	.word	0x24000e74
 8001ed4:	50001000 	.word	0x50001000
 8001ed8:	24000e0c 	.word	0x24000e0c
 8001edc:	52001000 	.word	0x52001000
 8001ee0:	080015ad 	.word	0x080015ad
 8001ee4:	080016a5 	.word	0x080016a5
 8001ee8:	24000dc0 	.word	0x24000dc0

08001eec <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <MX_LTDC_Init+0x94>)
 8001efc:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2228      	movs	r2, #40	; 0x28
 8001f1a:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	222a      	movs	r2, #42	; 0x2a
 8001f20:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2209      	movs	r2, #9
 8001f3a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	220b      	movs	r2, #11
 8001f40:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f103 020b 	add.w	r2, r3, #11
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f103 020d 	add.w	r2, r3, #13
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	22ff      	movs	r2, #255	; 0xff
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	22ff      	movs	r2, #255	; 0xff
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	22ff      	movs	r2, #255	; 0xff
 8001f6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f003 ffbc 	bl	8005eec <HAL_LTDC_Init>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	50001000 	.word	0x50001000

08001f84 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b092      	sub	sp, #72	; 0x48
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8001fae:	23ff      	movs	r3, #255	; 0xff
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001fb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f004 f851 	bl	80060a0 <HAL_LTDC_ConfigLayer>
 8001ffe:	4603      	mov	r3, r0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3748      	adds	r7, #72	; 0x48
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0b2      	sub	sp, #200	; 0xc8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002010:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 800201c:	2305      	movs	r3, #5
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8002020:	23a0      	movs	r3, #160	; 0xa0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002024:	2302      	movs	r3, #2
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002028:	2302      	movs	r3, #2
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 800202c:	2353      	movs	r3, #83	; 0x53
 800202e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002038:	f107 0308 	add.w	r3, r7, #8
 800203c:	4618      	mov	r0, r3
 800203e:	f005 fca1 	bl	8007984 <HAL_RCCEx_PeriphCLKConfig>
 8002042:	4603      	mov	r3, r0
}
 8002044:	4618      	mov	r0, r3
 8002046:	37c8      	adds	r7, #200	; 0xc8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002060:	f06f 0301 	mvn.w	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e007      	b.n	8002078 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002068:	4a07      	ldr	r2, [pc, #28]	; (8002088 <BSP_LCD_GetPixelFormat+0x3c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	015b      	lsls	r3, r3, #5
 800206e:	4413      	add	r3, r2
 8002070:	330c      	adds	r3, #12
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002078:	68fb      	ldr	r3, [r7, #12]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	24000f1c 	.word	0x24000f1c

0800208c <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80020a0:	f06f 0301 	mvn.w	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	e006      	b.n	80020b6 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <BSP_LCD_SetActiveLayer+0x38>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	015b      	lsls	r3, r3, #5
 80020ae:	4413      	add	r3, r2
 80020b0:	3308      	adds	r3, #8
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	24000f1c 	.word	0x24000f1c

080020c8 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80020dc:	f06f 0301 	mvn.w	r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	e006      	b.n	80020f2 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80020e4:	4a06      	ldr	r2, [pc, #24]	; (8002100 <BSP_LCD_GetXSize+0x38>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	015b      	lsls	r3, r3, #5
 80020ea:	4413      	add	r3, r2
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	24000f1c 	.word	0x24000f1c

08002104 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002118:	f06f 0301 	mvn.w	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e007      	b.n	8002130 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <BSP_LCD_GetYSize+0x3c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002130:	68fb      	ldr	r3, [r7, #12]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	24000f1c 	.word	0x24000f1c

08002144 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	; 0x38
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	330a      	adds	r3, #10
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	330b      	adds	r3, #11
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	441a      	add	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	041b      	lsls	r3, r3, #16
 8002170:	441a      	add	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	330d      	adds	r3, #13
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	4413      	add	r3, r2
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3312      	adds	r3, #18
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3313      	adds	r3, #19
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	441a      	add	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3314      	adds	r3, #20
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	441a      	add	r2, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	3315      	adds	r3, #21
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	4413      	add	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	3316      	adds	r3, #22
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3317      	adds	r3, #23
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	441a      	add	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	3318      	adds	r3, #24
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	441a      	add	r2, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	3319      	adds	r3, #25
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	4413      	add	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	331c      	adds	r3, #28
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	331d      	adds	r3, #29
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	4413      	add	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80021e2:	4a37      	ldr	r2, [pc, #220]	; (80022c0 <BSP_LCD_DrawBitmap+0x17c>)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	015b      	lsls	r3, r3, #5
 80021e8:	4413      	add	r3, r2
 80021ea:	3308      	adds	r3, #8
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a35      	ldr	r2, [pc, #212]	; (80022c4 <BSP_LCD_DrawBitmap+0x180>)
 80021f0:	2134      	movs	r1, #52	; 0x34
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	335c      	adds	r3, #92	; 0x5c
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4930      	ldr	r1, [pc, #192]	; (80022c0 <BSP_LCD_DrawBitmap+0x17c>)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015b      	lsls	r3, r3, #5
 8002202:	440b      	add	r3, r1
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	fb03 f101 	mul.w	r1, r3, r1
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	440b      	add	r3, r1
 8002210:	482b      	ldr	r0, [pc, #172]	; (80022c0 <BSP_LCD_DrawBitmap+0x17c>)
 8002212:	68f9      	ldr	r1, [r7, #12]
 8002214:	0149      	lsls	r1, r1, #5
 8002216:	4401      	add	r1, r0
 8002218:	3110      	adds	r1, #16
 800221a:	6809      	ldr	r1, [r1, #0]
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	3b20      	subs	r3, #32
 8002228:	2b07      	cmp	r3, #7
 800222a:	d802      	bhi.n	8002232 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
 8002230:	e008      	b.n	8002244 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	3b10      	subs	r3, #16
 8002236:	2b07      	cmp	r3, #7
 8002238:	d802      	bhi.n	8002240 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 800223a:	2302      	movs	r3, #2
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	e001      	b.n	8002244 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002240:	2301      	movs	r3, #1
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3b01      	subs	r3, #1
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	08d2      	lsrs	r2, r2, #3
 8002252:	fb03 f202 	mul.w	r2, r3, r2
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	4413      	add	r3, r2
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	4413      	add	r3, r2
 800225e:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002264:	e023      	b.n	80022ae <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6a39      	ldr	r1, [r7, #32]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fa77 	bl	8002764 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <BSP_LCD_DrawBitmap+0x17c>)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015b      	lsls	r3, r3, #5
 800227c:	4413      	add	r3, r2
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	490f      	ldr	r1, [pc, #60]	; (80022c0 <BSP_LCD_DrawBitmap+0x17c>)
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	0152      	lsls	r2, r2, #5
 8002286:	440a      	add	r2, r1
 8002288:	3210      	adds	r2, #16
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002292:	4413      	add	r3, r2
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	fb02 f303 	mul.w	r3, r2, r3
 80022a0:	425b      	negs	r3, r3
 80022a2:	6a3a      	ldr	r2, [r7, #32]
 80022a4:	4413      	add	r3, r2
 80022a6:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	3301      	adds	r3, #1
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3d7      	bcc.n	8002266 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 80022b6:	69fb      	ldr	r3, [r7, #28]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3730      	adds	r7, #48	; 0x30
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	24000f1c 	.word	0x24000f1c
 80022c4:	24000e74 	.word	0x24000e74

080022c8 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e032      	b.n	8002346 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e028      	b.n	8002338 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	3301      	adds	r3, #1
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	431a      	orrs	r2, r3
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3302      	adds	r3, #2
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	431a      	orrs	r2, r3
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	3303      	adds	r3, #3
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	18d1      	adds	r1, r2, r3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	441a      	add	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f95e 	bl	80025dc <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <BSP_LCD_FillRGBRect+0x90>)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015b      	lsls	r3, r3, #5
 8002326:	4413      	add	r3, r2
 8002328:	3310      	adds	r3, #16
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4413      	add	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3301      	adds	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	429a      	cmp	r2, r3
 800233e:	d3d2      	bcc.n	80022e6 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3301      	adds	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	429a      	cmp	r2, r3
 800234c:	d3c8      	bcc.n	80022e0 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	24000f1c 	.word	0x24000f1c

0800235c <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <BSP_LCD_DrawHLine+0x94>)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015b      	lsls	r3, r3, #5
 8002370:	4413      	add	r3, r2
 8002372:	3308      	adds	r3, #8
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <BSP_LCD_DrawHLine+0x98>)
 8002378:	2134      	movs	r1, #52	; 0x34
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	335c      	adds	r3, #92	; 0x5c
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	491a      	ldr	r1, [pc, #104]	; (80023f0 <BSP_LCD_DrawHLine+0x94>)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015b      	lsls	r3, r3, #5
 800238a:	440b      	add	r3, r1
 800238c:	3310      	adds	r3, #16
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4817      	ldr	r0, [pc, #92]	; (80023f0 <BSP_LCD_DrawHLine+0x94>)
 8002392:	68f9      	ldr	r1, [r7, #12]
 8002394:	0149      	lsls	r1, r1, #5
 8002396:	4401      	add	r1, r0
 8002398:	6809      	ldr	r1, [r1, #0]
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	fb01 f000 	mul.w	r0, r1, r0
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	4401      	add	r1, r0
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	441a      	add	r2, r3
 80023b2:	490f      	ldr	r1, [pc, #60]	; (80023f0 <BSP_LCD_DrawHLine+0x94>)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015b      	lsls	r3, r3, #5
 80023b8:	440b      	add	r3, r1
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d907      	bls.n	80023d0 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80023c0:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <BSP_LCD_DrawHLine+0x94>)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	015b      	lsls	r3, r3, #5
 80023c6:	4413      	add	r3, r2
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80023d0:	6979      	ldr	r1, [r7, #20]
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2300      	movs	r3, #0
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f956 	bl	8002690 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	24000f1c 	.word	0x24000f1c
 80023f4:	24000e74 	.word	0x24000e74

080023f8 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002406:	4a24      	ldr	r2, [pc, #144]	; (8002498 <BSP_LCD_DrawVLine+0xa0>)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	4413      	add	r3, r2
 800240e:	3308      	adds	r3, #8
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a22      	ldr	r2, [pc, #136]	; (800249c <BSP_LCD_DrawVLine+0xa4>)
 8002414:	2134      	movs	r1, #52	; 0x34
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	335c      	adds	r3, #92	; 0x5c
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	491d      	ldr	r1, [pc, #116]	; (8002498 <BSP_LCD_DrawVLine+0xa0>)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	015b      	lsls	r3, r3, #5
 8002426:	440b      	add	r3, r1
 8002428:	3310      	adds	r3, #16
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	481a      	ldr	r0, [pc, #104]	; (8002498 <BSP_LCD_DrawVLine+0xa0>)
 800242e:	68f9      	ldr	r1, [r7, #12]
 8002430:	0149      	lsls	r1, r1, #5
 8002432:	4401      	add	r1, r0
 8002434:	6809      	ldr	r1, [r1, #0]
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	fb01 f000 	mul.w	r0, r1, r0
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	4401      	add	r1, r0
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	441a      	add	r2, r3
 800244e:	4912      	ldr	r1, [pc, #72]	; (8002498 <BSP_LCD_DrawVLine+0xa0>)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	440b      	add	r3, r1
 8002456:	3304      	adds	r3, #4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d908      	bls.n	8002470 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <BSP_LCD_DrawVLine+0xa0>)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015b      	lsls	r3, r3, #5
 8002464:	4413      	add	r3, r2
 8002466:	3304      	adds	r3, #4
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002470:	6979      	ldr	r1, [r7, #20]
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <BSP_LCD_DrawVLine+0xa0>)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	4413      	add	r3, r2
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3b01      	subs	r3, #1
 800247e:	6a3a      	ldr	r2, [r7, #32]
 8002480:	9201      	str	r2, [sp, #4]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2201      	movs	r2, #1
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f901 	bl	8002690 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	24000f1c 	.word	0x24000f1c
 800249c:	24000e74 	.word	0x24000e74

080024a0 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80024ae:	4a1b      	ldr	r2, [pc, #108]	; (800251c <BSP_LCD_FillRect+0x7c>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015b      	lsls	r3, r3, #5
 80024b4:	4413      	add	r3, r2
 80024b6:	3308      	adds	r3, #8
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a19      	ldr	r2, [pc, #100]	; (8002520 <BSP_LCD_FillRect+0x80>)
 80024bc:	2134      	movs	r1, #52	; 0x34
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	335c      	adds	r3, #92	; 0x5c
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4914      	ldr	r1, [pc, #80]	; (800251c <BSP_LCD_FillRect+0x7c>)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	015b      	lsls	r3, r3, #5
 80024ce:	440b      	add	r3, r1
 80024d0:	3310      	adds	r3, #16
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4811      	ldr	r0, [pc, #68]	; (800251c <BSP_LCD_FillRect+0x7c>)
 80024d6:	68f9      	ldr	r1, [r7, #12]
 80024d8:	0149      	lsls	r1, r1, #5
 80024da:	4401      	add	r1, r0
 80024dc:	6809      	ldr	r1, [r1, #0]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	fb01 f000 	mul.w	r0, r1, r0
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	4401      	add	r1, r0
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80024f0:	6979      	ldr	r1, [r7, #20]
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <BSP_LCD_FillRect+0x7c>)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	015b      	lsls	r3, r3, #5
 80024f8:	4413      	add	r3, r2
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002502:	9201      	str	r2, [sp, #4]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f8c0 	bl	8002690 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	24000f1c 	.word	0x24000f1c
 8002520:	24000e74 	.word	0x24000e74

08002524 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002532:	4a28      	ldr	r2, [pc, #160]	; (80025d4 <BSP_LCD_ReadPixel+0xb0>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015b      	lsls	r3, r3, #5
 8002538:	4413      	add	r3, r2
 800253a:	3308      	adds	r3, #8
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a26      	ldr	r2, [pc, #152]	; (80025d8 <BSP_LCD_ReadPixel+0xb4>)
 8002540:	2134      	movs	r1, #52	; 0x34
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3348      	adds	r3, #72	; 0x48
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d11c      	bne.n	800258a <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002550:	4a20      	ldr	r2, [pc, #128]	; (80025d4 <BSP_LCD_ReadPixel+0xb0>)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	015b      	lsls	r3, r3, #5
 8002556:	4413      	add	r3, r2
 8002558:	3308      	adds	r3, #8
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <BSP_LCD_ReadPixel+0xb4>)
 800255e:	2134      	movs	r1, #52	; 0x34
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	335c      	adds	r3, #92	; 0x5c
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	491a      	ldr	r1, [pc, #104]	; (80025d4 <BSP_LCD_ReadPixel+0xb0>)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	015b      	lsls	r3, r3, #5
 8002570:	440b      	add	r3, r1
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	fb03 f101 	mul.w	r1, r3, r1
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	440b      	add	r3, r1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e01d      	b.n	80025c6 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <BSP_LCD_ReadPixel+0xb0>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015b      	lsls	r3, r3, #5
 8002590:	4413      	add	r3, r2
 8002592:	3308      	adds	r3, #8
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <BSP_LCD_ReadPixel+0xb4>)
 8002598:	2134      	movs	r1, #52	; 0x34
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	335c      	adds	r3, #92	; 0x5c
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	490b      	ldr	r1, [pc, #44]	; (80025d4 <BSP_LCD_ReadPixel+0xb0>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	015b      	lsls	r3, r3, #5
 80025aa:	440b      	add	r3, r1
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	fb03 f101 	mul.w	r1, r3, r1
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	440b      	add	r3, r1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	24000f1c 	.word	0x24000f1c
 80025d8:	24000e74 	.word	0x24000e74

080025dc <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80025ea:	4a27      	ldr	r2, [pc, #156]	; (8002688 <BSP_LCD_WritePixel+0xac>)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015b      	lsls	r3, r3, #5
 80025f0:	4413      	add	r3, r2
 80025f2:	3308      	adds	r3, #8
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a25      	ldr	r2, [pc, #148]	; (800268c <BSP_LCD_WritePixel+0xb0>)
 80025f8:	2134      	movs	r1, #52	; 0x34
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3348      	adds	r3, #72	; 0x48
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d11c      	bne.n	8002642 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8002608:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <BSP_LCD_WritePixel+0xac>)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	015b      	lsls	r3, r3, #5
 800260e:	4413      	add	r3, r2
 8002610:	3308      	adds	r3, #8
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <BSP_LCD_WritePixel+0xb0>)
 8002616:	2134      	movs	r1, #52	; 0x34
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	335c      	adds	r3, #92	; 0x5c
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4919      	ldr	r1, [pc, #100]	; (8002688 <BSP_LCD_WritePixel+0xac>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015b      	lsls	r3, r3, #5
 8002628:	440b      	add	r3, r1
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	fb03 f101 	mul.w	r1, r3, r1
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	440b      	add	r3, r1
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	461a      	mov	r2, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e01b      	b.n	800267a <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8002642:	4a11      	ldr	r2, [pc, #68]	; (8002688 <BSP_LCD_WritePixel+0xac>)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	015b      	lsls	r3, r3, #5
 8002648:	4413      	add	r3, r2
 800264a:	3308      	adds	r3, #8
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a0f      	ldr	r2, [pc, #60]	; (800268c <BSP_LCD_WritePixel+0xb0>)
 8002650:	2134      	movs	r1, #52	; 0x34
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	335c      	adds	r3, #92	; 0x5c
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	490a      	ldr	r1, [pc, #40]	; (8002688 <BSP_LCD_WritePixel+0xac>)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015b      	lsls	r3, r3, #5
 8002662:	440b      	add	r3, r1
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	fb03 f101 	mul.w	r1, r3, r1
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	440b      	add	r3, r1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b292      	uxth	r2, r2
 8002678:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	24000f1c 	.word	0x24000f1c
 800268c:	24000e74 	.word	0x24000e74

08002690 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <LL_FillBuffer+0xc8>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015b      	lsls	r3, r3, #5
 80026a8:	4413      	add	r3, r2
 80026aa:	330c      	adds	r3, #12
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d129      	bne.n	8002706 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80026b2:	2302      	movs	r3, #2
 80026b4:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	0adb      	lsrs	r3, r3, #11
 80026ba:	f003 021f 	and.w	r2, r3, #31
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	4413      	add	r3, r2
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	3317      	adds	r3, #23
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	0419      	lsls	r1, r3, #16
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d6:	4613      	mov	r3, r2
 80026d8:	01db      	lsls	r3, r3, #7
 80026da:	4413      	add	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	3321      	adds	r3, #33	; 0x21
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	4319      	orrs	r1, r3
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f003 021f 	and.w	r2, r3, #31
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	4413      	add	r3, r2
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	3317      	adds	r3, #23
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	430b      	orrs	r3, r1
 80026fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002702:	613b      	str	r3, [r7, #16]
    break;
 8002704:	e002      	b.n	800270c <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
    break;
 800270a:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <LL_FillBuffer+0xcc>)
 800270e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002712:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002714:	4a11      	ldr	r2, [pc, #68]	; (800275c <LL_FillBuffer+0xcc>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <LL_FillBuffer+0xcc>)
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <LL_FillBuffer+0xcc>)
 8002722:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <LL_FillBuffer+0xd0>)
 8002724:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002726:	480d      	ldr	r0, [pc, #52]	; (800275c <LL_FillBuffer+0xcc>)
 8002728:	f002 f9fa 	bl	8004b20 <HAL_DMA2D_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10e      	bne.n	8002750 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6939      	ldr	r1, [r7, #16]
 800273c:	4807      	ldr	r0, [pc, #28]	; (800275c <LL_FillBuffer+0xcc>)
 800273e:	f002 fa5d 	bl	8004bfc <HAL_DMA2D_Start>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d103      	bne.n	8002750 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8002748:	2132      	movs	r1, #50	; 0x32
 800274a:	4804      	ldr	r0, [pc, #16]	; (800275c <LL_FillBuffer+0xcc>)
 800274c:	f002 fa81 	bl	8004c52 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8002750:	bf00      	nop
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	24000f1c 	.word	0x24000f1c
 800275c:	24000e0c 	.word	0x24000e0c
 8002760:	52001000 	.word	0x52001000

08002764 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002772:	4a23      	ldr	r2, [pc, #140]	; (8002800 <LL_ConvertLineToRGB+0x9c>)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015b      	lsls	r3, r3, #5
 8002778:	4413      	add	r3, r2
 800277a:	330c      	adds	r3, #12
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d102      	bne.n	8002788 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002782:	2302      	movs	r3, #2
 8002784:	617b      	str	r3, [r7, #20]
    break;
 8002786:	e002      	b.n	800278e <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
    break;
 800278c:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 8002790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002794:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002796:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 80027aa:	22ff      	movs	r2, #255	; 0xff
 80027ac:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80027ae:	4a15      	ldr	r2, [pc, #84]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 80027bc:	4a12      	ldr	r2, [pc, #72]	; (8002808 <LL_ConvertLineToRGB+0xa4>)
 80027be:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80027c0:	4810      	ldr	r0, [pc, #64]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 80027c2:	f002 f9ad 	bl	8004b20 <HAL_DMA2D_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d115      	bne.n	80027f8 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80027cc:	2101      	movs	r1, #1
 80027ce:	480d      	ldr	r0, [pc, #52]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 80027d0:	f002 fb28 	bl	8004e24 <HAL_DMA2D_ConfigLayer>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10e      	bne.n	80027f8 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	2301      	movs	r3, #1
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	4807      	ldr	r0, [pc, #28]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 80027e6:	f002 fa09 	bl	8004bfc <HAL_DMA2D_Start>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80027f0:	2132      	movs	r1, #50	; 0x32
 80027f2:	4804      	ldr	r0, [pc, #16]	; (8002804 <LL_ConvertLineToRGB+0xa0>)
 80027f4:	f002 fa2d 	bl	8004c52 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80027f8:	bf00      	nop
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	24000f1c 	.word	0x24000f1c
 8002804:	24000e0c 	.word	0x24000e0c
 8002808:	52001000 	.word	0x52001000

0800280c <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	; 0x38
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <LTDC_MspInit+0x17c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	f040 80b0 	bne.w	8002980 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002820:	4b5a      	ldr	r3, [pc, #360]	; (800298c <LTDC_MspInit+0x180>)
 8002822:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002826:	4a59      	ldr	r2, [pc, #356]	; (800298c <LTDC_MspInit+0x180>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002830:	4b56      	ldr	r3, [pc, #344]	; (800298c <LTDC_MspInit+0x180>)
 8002832:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800283e:	4b53      	ldr	r3, [pc, #332]	; (800298c <LTDC_MspInit+0x180>)
 8002840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002844:	4a51      	ldr	r2, [pc, #324]	; (800298c <LTDC_MspInit+0x180>)
 8002846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284e:	4b4f      	ldr	r3, [pc, #316]	; (800298c <LTDC_MspInit+0x180>)
 8002850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800285c:	4b4b      	ldr	r3, [pc, #300]	; (800298c <LTDC_MspInit+0x180>)
 800285e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <LTDC_MspInit+0x180>)
 8002864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800286c:	4b47      	ldr	r3, [pc, #284]	; (800298c <LTDC_MspInit+0x180>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800287a:	4b44      	ldr	r3, [pc, #272]	; (800298c <LTDC_MspInit+0x180>)
 800287c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002880:	4a42      	ldr	r2, [pc, #264]	; (800298c <LTDC_MspInit+0x180>)
 8002882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800288a:	4b40      	ldr	r3, [pc, #256]	; (800298c <LTDC_MspInit+0x180>)
 800288c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002898:	4b3c      	ldr	r3, [pc, #240]	; (800298c <LTDC_MspInit+0x180>)
 800289a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289e:	4a3b      	ldr	r2, [pc, #236]	; (800298c <LTDC_MspInit+0x180>)
 80028a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028a8:	4b38      	ldr	r3, [pc, #224]	; (800298c <LTDC_MspInit+0x180>)
 80028aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b6:	4b35      	ldr	r3, [pc, #212]	; (800298c <LTDC_MspInit+0x180>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028bc:	4a33      	ldr	r2, [pc, #204]	; (800298c <LTDC_MspInit+0x180>)
 80028be:	f043 0308 	orr.w	r3, r3, #8
 80028c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <LTDC_MspInit+0x180>)
 80028c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 80028d4:	f24d 2303 	movw	r3, #53763	; 0xd203
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80028e2:	2302      	movs	r3, #2
 80028e4:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80028e6:	230e      	movs	r3, #14
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80028ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ee:	4619      	mov	r1, r3
 80028f0:	4827      	ldr	r0, [pc, #156]	; (8002990 <LTDC_MspInit+0x184>)
 80028f2:	f002 fc4f 	bl	8005194 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 80028f6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80028fc:	230e      	movs	r3, #14
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8002900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002904:	4619      	mov	r1, r3
 8002906:	4823      	ldr	r0, [pc, #140]	; (8002994 <LTDC_MspInit+0x188>)
 8002908:	f002 fc44 	bl	8005194 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800290c:	23ff      	movs	r3, #255	; 0xff
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002910:	230e      	movs	r3, #14
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002918:	4619      	mov	r1, r3
 800291a:	481f      	ldr	r0, [pc, #124]	; (8002998 <LTDC_MspInit+0x18c>)
 800291c:	f002 fc3a 	bl	8005194 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8002920:	f240 2302 	movw	r3, #514	; 0x202
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800292e:	2302      	movs	r3, #2
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002932:	230e      	movs	r3, #14
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293a:	4619      	mov	r1, r3
 800293c:	4817      	ldr	r0, [pc, #92]	; (800299c <LTDC_MspInit+0x190>)
 800293e:	f002 fc29 	bl	8005194 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002946:	2301      	movs	r3, #1
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800294a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294e:	4619      	mov	r1, r3
 8002950:	4813      	ldr	r0, [pc, #76]	; (80029a0 <LTDC_MspInit+0x194>)
 8002952:	f002 fc1f 	bl	8005194 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8002956:	2201      	movs	r2, #1
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	4811      	ldr	r0, [pc, #68]	; (80029a0 <LTDC_MspInit+0x194>)
 800295c:	f002 fde2 	bl	8005524 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <LTDC_MspInit+0x180>)
 8002962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <LTDC_MspInit+0x180>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <LTDC_MspInit+0x180>)
 8002972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <LTDC_MspInit+0x180>)
 8002978:	f023 0308 	bic.w	r3, r3, #8
 800297c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8002980:	bf00      	nop
 8002982:	3738      	adds	r7, #56	; 0x38
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	50001000 	.word	0x50001000
 800298c:	58024400 	.word	0x58024400
 8002990:	58022000 	.word	0x58022000
 8002994:	58022400 	.word	0x58022400
 8002998:	58022800 	.word	0x58022800
 800299c:	58021c00 	.word	0x58021c00
 80029a0:	58020c00 	.word	0x58020c00

080029a4 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <DMA2D_MspInit+0x54>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d11a      	bne.n	80029ec <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <DMA2D_MspInit+0x58>)
 80029b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80029bc:	4a0f      	ldr	r2, [pc, #60]	; (80029fc <DMA2D_MspInit+0x58>)
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <DMA2D_MspInit+0x58>)
 80029c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <DMA2D_MspInit+0x58>)
 80029d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d8:	4a08      	ldr	r2, [pc, #32]	; (80029fc <DMA2D_MspInit+0x58>)
 80029da:	f043 0310 	orr.w	r3, r3, #16
 80029de:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <DMA2D_MspInit+0x58>)
 80029e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e4:	4a05      	ldr	r2, [pc, #20]	; (80029fc <DMA2D_MspInit+0x58>)
 80029e6:	f023 0310 	bic.w	r3, r3, #16
 80029ea:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	52001000 	.word	0x52001000
 80029fc:	58024400 	.word	0x58024400

08002a00 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <TIMx_PWM_MspInit+0x6c>)
 8002a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0e:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <TIMx_PWM_MspInit+0x6c>)
 8002a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <TIMx_PWM_MspInit+0x6c>)
 8002a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <TIMx_PWM_MspInit+0x6c>)
 8002a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a2c:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <TIMx_PWM_MspInit+0x6c>)
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <TIMx_PWM_MspInit+0x6c>)
 8002a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8002a50:	2303      	movs	r3, #3
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8002a54:	2301      	movs	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4804      	ldr	r0, [pc, #16]	; (8002a70 <TIMx_PWM_MspInit+0x70>)
 8002a60:	f002 fb98 	bl	8005194 <HAL_GPIO_Init>
}
 8002a64:	bf00      	nop
 8002a66:	3728      	adds	r7, #40	; 0x28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	58024400 	.word	0x58024400
 8002a70:	58022800 	.word	0x58022800

08002a74 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <TIMx_PWM_Init+0x50>)
 8002a80:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f006 fbe6 	bl	8009254 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ffb9 	bl	8002a00 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2204      	movs	r2, #4
 8002a92:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002a9a:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f006 fb76 	bl	80091a6 <HAL_TIM_PWM_Init>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8002ada:	f06f 0301 	mvn.w	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e044      	b.n	8002b6c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2234      	movs	r2, #52	; 0x34
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <BSP_SDRAM_Init+0xb0>)
 8002aec:	4413      	add	r3, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f8a8 	bl	8002c44 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2234      	movs	r2, #52	; 0x34
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <BSP_SDRAM_Init+0xb0>)
 8002afe:	4413      	add	r3, r2
 8002b00:	2210      	movs	r2, #16
 8002b02:	2104      	movs	r1, #4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f83b 	bl	8002b80 <MX_SDRAM_BANK2_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	e029      	b.n	8002b6c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <BSP_SDRAM_Init+0xb4>)
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <BSP_SDRAM_Init+0xb4>)
 8002b20:	2203      	movs	r2, #3
 8002b22:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <BSP_SDRAM_Init+0xb4>)
 8002b26:	f240 6203 	movw	r2, #1539	; 0x603
 8002b2a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8002b2c:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <BSP_SDRAM_Init+0xb4>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <BSP_SDRAM_Init+0xb4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8002b38:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <BSP_SDRAM_Init+0xb4>)
 8002b3a:	2230      	movs	r2, #48	; 0x30
 8002b3c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <BSP_SDRAM_Init+0xb4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <BSP_SDRAM_Init+0xb4>)
 8002b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2234      	movs	r2, #52	; 0x34
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <BSP_SDRAM_Init+0xb0>)
 8002b56:	4413      	add	r3, r2
 8002b58:	4908      	ldr	r1, [pc, #32]	; (8002b7c <BSP_SDRAM_Init+0xb4>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fad1 	bl	8001102 <MT48LC4M32B2_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8002b66:	f06f 0304 	mvn.w	r3, #4
 8002b6a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	24000f3c 	.word	0x24000f3c
 8002b7c:	24000f70 	.word	0x24000f70

08002b80 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08c      	sub	sp, #48	; 0x30
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8002b8c:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <MX_SDRAM_BANK2_Init+0x90>)
 8002b8e:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <MX_SDRAM_BANK2_Init+0x94>)
 8002b90:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002baa:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <MX_SDRAM_BANK2_Init+0x90>)
 8002bac:	2240      	movs	r2, #64	; 0x40
 8002bae:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002bb6:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bc4:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8002bd8:	2307      	movs	r3, #7
 8002bda:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8002be0:	2307      	movs	r3, #7
 8002be2:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8002be4:	2302      	movs	r3, #2
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8002be8:	2302      	movs	r3, #2
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8002bec:	2302      	movs	r3, #2
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f006 fa32 	bl	8009060 <HAL_SDRAM_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3730      	adds	r7, #48	; 0x30
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	24000f3c 	.word	0x24000f3c
 8002c14:	52004140 	.word	0x52004140

08002c18 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8002c20:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <BSP_SDRAM_IRQHandler+0x28>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2134      	movs	r1, #52	; 0x34
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3330      	adds	r3, #48	; 0x30
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 fcb1 	bl	8006598 <HAL_MDMA_IRQHandler>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	24000f3c 	.word	0x24000f3c

08002c44 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c4c:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002c4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002c52:	4a72      	ldr	r2, [pc, #456]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c58:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002c5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8002c6a:	4b6c      	ldr	r3, [pc, #432]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002c6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002c70:	4a6a      	ldr	r2, [pc, #424]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002c7a:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002c7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c88:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8e:	4a63      	ldr	r2, [pc, #396]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c98:	4b60      	ldr	r3, [pc, #384]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cac:	4a5b      	ldr	r2, [pc, #364]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002cae:	f043 0310 	orr.w	r3, r3, #16
 8002cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb6:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cc4:	4b55      	ldr	r3, [pc, #340]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cca:	4a54      	ldr	r2, [pc, #336]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002ccc:	f043 0320 	orr.w	r3, r3, #32
 8002cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd4:	4b51      	ldr	r3, [pc, #324]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ce2:	4b4e      	ldr	r3, [pc, #312]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce8:	4a4c      	ldr	r2, [pc, #304]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf2:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d00:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d06:	4a45      	ldr	r2, [pc, #276]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d10:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <SDRAM_MspInit+0x1d8>)
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d22:	2301      	movs	r3, #1
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002d2e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4839      	ldr	r0, [pc, #228]	; (8002e20 <SDRAM_MspInit+0x1dc>)
 8002d3c:	f002 fa2a 	bl	8005194 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002d40:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4835      	ldr	r0, [pc, #212]	; (8002e24 <SDRAM_MspInit+0x1e0>)
 8002d4e:	f002 fa21 	bl	8005194 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d52:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4832      	ldr	r0, [pc, #200]	; (8002e28 <SDRAM_MspInit+0x1e4>)
 8002d60:	f002 fa18 	bl	8005194 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8002d64:	f248 1333 	movw	r3, #33075	; 0x8133
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6e:	4619      	mov	r1, r3
 8002d70:	482e      	ldr	r0, [pc, #184]	; (8002e2c <SDRAM_MspInit+0x1e8>)
 8002d72:	f002 fa0f 	bl	8005194 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8002d76:	23e0      	movs	r3, #224	; 0xe0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7e:	4619      	mov	r1, r3
 8002d80:	482b      	ldr	r0, [pc, #172]	; (8002e30 <SDRAM_MspInit+0x1ec>)
 8002d82:	f002 fa07 	bl	8005194 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8002d86:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d8c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8002d8e:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d94:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8002d96:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002da4:	f240 2202 	movw	r2, #514	; 0x202
 8002da8:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002dac:	f640 0208 	movw	r2, #2056	; 0x808
 8002db0:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002db4:	2220      	movs	r2, #32
 8002db6:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8002db8:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002dd4:	2280      	movs	r2, #128	; 0x80
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002de6:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <SDRAM_MspInit+0x1f4>)
 8002de8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <SDRAM_MspInit+0x1f8>)
 8002dec:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002df2:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <SDRAM_MspInit+0x1f8>)
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8002df6:	480f      	ldr	r0, [pc, #60]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002df8:	f003 fb76 	bl	80064e8 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8002dfc:	480d      	ldr	r0, [pc, #52]	; (8002e34 <SDRAM_MspInit+0x1f0>)
 8002dfe:	f003 fb27 	bl	8006450 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	210f      	movs	r1, #15
 8002e06:	207a      	movs	r0, #122	; 0x7a
 8002e08:	f000 f9c7 	bl	800319a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8002e0c:	207a      	movs	r0, #122	; 0x7a
 8002e0e:	f000 f9de 	bl	80031ce <HAL_NVIC_EnableIRQ>
}
 8002e12:	bf00      	nop
 8002e14:	3738      	adds	r7, #56	; 0x38
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	58024400 	.word	0x58024400
 8002e20:	58020c00 	.word	0x58020c00
 8002e24:	58021000 	.word	0x58021000
 8002e28:	58021400 	.word	0x58021400
 8002e2c:	58021800 	.word	0x58021800
 8002e30:	58021c00 	.word	0x58021c00
 8002e34:	24000f90 	.word	0x24000f90
 8002e38:	52000040 	.word	0x52000040
 8002e3c:	24000f3c 	.word	0x24000f3c

08002e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e46:	2003      	movs	r0, #3
 8002e48:	f000 f99c 	bl	8003184 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e4c:	f004 fbda 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_Init+0x68>)
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	4913      	ldr	r1, [pc, #76]	; (8002eac <HAL_Init+0x6c>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HAL_Init+0x68>)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	4a0e      	ldr	r2, [pc, #56]	; (8002eac <HAL_Init+0x6c>)
 8002e74:	5cd3      	ldrb	r3, [r2, r3]
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e80:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <HAL_Init+0x70>)
 8002e82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e84:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <HAL_Init+0x74>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e8a:	200f      	movs	r0, #15
 8002e8c:	f000 f814 	bl	8002eb8 <HAL_InitTick>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e002      	b.n	8002ea0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e9a:	f7fd fecf 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	0800c638 	.word	0x0800c638
 8002eb0:	24000010 	.word	0x24000010
 8002eb4:	2400000c 	.word	0x2400000c

08002eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ec0:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_InitTick+0x60>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e021      	b.n	8002f10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <HAL_InitTick+0x64>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_InitTick+0x60>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f981 	bl	80031ea <HAL_SYSTICK_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00e      	b.n	8002f10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b0f      	cmp	r3, #15
 8002ef6:	d80a      	bhi.n	8002f0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	f000 f94b 	bl	800319a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f04:	4a06      	ldr	r2, [pc, #24]	; (8002f20 <HAL_InitTick+0x68>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	2400002c 	.word	0x2400002c
 8002f1c:	2400000c 	.word	0x2400000c
 8002f20:	24000028 	.word	0x24000028

08002f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x20>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_IncTick+0x24>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_IncTick+0x24>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	2400002c 	.word	0x2400002c
 8002f48:	24000ffc 	.word	0x24000ffc

08002f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_GetTick+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	24000ffc 	.word	0x24000ffc

08002f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff ffee 	bl	8002f4c <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d005      	beq.n	8002f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_Delay+0x44>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f8a:	bf00      	nop
 8002f8c:	f7ff ffde 	bl	8002f4c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d8f7      	bhi.n	8002f8c <HAL_Delay+0x28>
  {
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	2400002c 	.word	0x2400002c

08002fac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_GetREVID+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	5c001000 	.word	0x5c001000

08002fc4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_EnableCompensationCell+0x1c>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <HAL_EnableCompensationCell+0x1c>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6213      	str	r3, [r2, #32]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	58000400 	.word	0x58000400

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <__NVIC_SetPriorityGrouping+0x40>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	4313      	orrs	r3, r2
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	; (8003024 <__NVIC_SetPriorityGrouping+0x40>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00
 8003028:	05fa0000 	.word	0x05fa0000

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db0b      	blt.n	8003072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4907      	ldr	r1, [pc, #28]	; (8003080 <__NVIC_EnableIRQ+0x38>)
 8003062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e100 	.word	0xe000e100

08003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	; (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	; (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf28      	it	cs
 80030f6:	2304      	movcs	r3, #4
 80030f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d902      	bls.n	8003108 <NVIC_EncodePriority+0x30>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3b03      	subs	r3, #3
 8003106:	e000      	b.n	800310a <NVIC_EncodePriority+0x32>
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003120:	f04f 31ff 	mov.w	r1, #4294967295
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43d9      	mvns	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	4313      	orrs	r3, r2
         );
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	; 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003150:	d301      	bcc.n	8003156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003152:	2301      	movs	r3, #1
 8003154:	e00f      	b.n	8003176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003156:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <SysTick_Config+0x40>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315e:	210f      	movs	r1, #15
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	f7ff ff8e 	bl	8003084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <SysTick_Config+0x40>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316e:	4b04      	ldr	r3, [pc, #16]	; (8003180 <SysTick_Config+0x40>)
 8003170:	2207      	movs	r2, #7
 8003172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	e000e010 	.word	0xe000e010

08003184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ff29 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff40 	bl	800302c <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff90 	bl	80030d8 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5f 	bl	8003084 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff33 	bl	8003048 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffa4 	bl	8003140 <SysTick_Config>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff fe9e 	bl	8002f4c <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e2dc      	b.n	80037d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d008      	beq.n	800323a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e2cd      	b.n	80037d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a76      	ldr	r2, [pc, #472]	; (8003418 <HAL_DMA_Abort+0x214>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04a      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a74      	ldr	r2, [pc, #464]	; (800341c <HAL_DMA_Abort+0x218>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d045      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a73      	ldr	r2, [pc, #460]	; (8003420 <HAL_DMA_Abort+0x21c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d040      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a71      	ldr	r2, [pc, #452]	; (8003424 <HAL_DMA_Abort+0x220>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d03b      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a70      	ldr	r2, [pc, #448]	; (8003428 <HAL_DMA_Abort+0x224>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d036      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a6e      	ldr	r2, [pc, #440]	; (800342c <HAL_DMA_Abort+0x228>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d031      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6d      	ldr	r2, [pc, #436]	; (8003430 <HAL_DMA_Abort+0x22c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d02c      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6b      	ldr	r2, [pc, #428]	; (8003434 <HAL_DMA_Abort+0x230>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d027      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_DMA_Abort+0x234>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a68      	ldr	r2, [pc, #416]	; (800343c <HAL_DMA_Abort+0x238>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01d      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a67      	ldr	r2, [pc, #412]	; (8003440 <HAL_DMA_Abort+0x23c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d018      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a65      	ldr	r2, [pc, #404]	; (8003444 <HAL_DMA_Abort+0x240>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a64      	ldr	r2, [pc, #400]	; (8003448 <HAL_DMA_Abort+0x244>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a62      	ldr	r2, [pc, #392]	; (800344c <HAL_DMA_Abort+0x248>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a61      	ldr	r2, [pc, #388]	; (8003450 <HAL_DMA_Abort+0x24c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_DMA_Abort+0xd6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a5f      	ldr	r2, [pc, #380]	; (8003454 <HAL_DMA_Abort+0x250>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_DMA_Abort+0xda>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_DMA_Abort+0xdc>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 021e 	bic.w	r2, r2, #30
 80032f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003302:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e00a      	b.n	8003322 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 020e 	bic.w	r2, r2, #14
 800331a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a3c      	ldr	r2, [pc, #240]	; (8003418 <HAL_DMA_Abort+0x214>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d072      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a3a      	ldr	r2, [pc, #232]	; (800341c <HAL_DMA_Abort+0x218>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d06d      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a39      	ldr	r2, [pc, #228]	; (8003420 <HAL_DMA_Abort+0x21c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d068      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a37      	ldr	r2, [pc, #220]	; (8003424 <HAL_DMA_Abort+0x220>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d063      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_DMA_Abort+0x224>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d05e      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a34      	ldr	r2, [pc, #208]	; (800342c <HAL_DMA_Abort+0x228>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d059      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a33      	ldr	r2, [pc, #204]	; (8003430 <HAL_DMA_Abort+0x22c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d054      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a31      	ldr	r2, [pc, #196]	; (8003434 <HAL_DMA_Abort+0x230>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04f      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a30      	ldr	r2, [pc, #192]	; (8003438 <HAL_DMA_Abort+0x234>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2e      	ldr	r2, [pc, #184]	; (800343c <HAL_DMA_Abort+0x238>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2d      	ldr	r2, [pc, #180]	; (8003440 <HAL_DMA_Abort+0x23c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <HAL_DMA_Abort+0x240>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a2a      	ldr	r2, [pc, #168]	; (8003448 <HAL_DMA_Abort+0x244>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a28      	ldr	r2, [pc, #160]	; (800344c <HAL_DMA_Abort+0x248>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a27      	ldr	r2, [pc, #156]	; (8003450 <HAL_DMA_Abort+0x24c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a25      	ldr	r2, [pc, #148]	; (8003454 <HAL_DMA_Abort+0x250>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a24      	ldr	r2, [pc, #144]	; (8003458 <HAL_DMA_Abort+0x254>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a22      	ldr	r2, [pc, #136]	; (800345c <HAL_DMA_Abort+0x258>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a21      	ldr	r2, [pc, #132]	; (8003460 <HAL_DMA_Abort+0x25c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_DMA_Abort+0x260>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_DMA_Abort+0x264>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	; (800346c <HAL_DMA_Abort+0x268>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <HAL_DMA_Abort+0x26c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_Abort+0x20e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a19      	ldr	r2, [pc, #100]	; (8003474 <HAL_DMA_Abort+0x270>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d132      	bne.n	8003478 <HAL_DMA_Abort+0x274>
 8003412:	2301      	movs	r3, #1
 8003414:	e031      	b.n	800347a <HAL_DMA_Abort+0x276>
 8003416:	bf00      	nop
 8003418:	40020010 	.word	0x40020010
 800341c:	40020028 	.word	0x40020028
 8003420:	40020040 	.word	0x40020040
 8003424:	40020058 	.word	0x40020058
 8003428:	40020070 	.word	0x40020070
 800342c:	40020088 	.word	0x40020088
 8003430:	400200a0 	.word	0x400200a0
 8003434:	400200b8 	.word	0x400200b8
 8003438:	40020410 	.word	0x40020410
 800343c:	40020428 	.word	0x40020428
 8003440:	40020440 	.word	0x40020440
 8003444:	40020458 	.word	0x40020458
 8003448:	40020470 	.word	0x40020470
 800344c:	40020488 	.word	0x40020488
 8003450:	400204a0 	.word	0x400204a0
 8003454:	400204b8 	.word	0x400204b8
 8003458:	58025408 	.word	0x58025408
 800345c:	5802541c 	.word	0x5802541c
 8003460:	58025430 	.word	0x58025430
 8003464:	58025444 	.word	0x58025444
 8003468:	58025458 	.word	0x58025458
 800346c:	5802546c 	.word	0x5802546c
 8003470:	58025480 	.word	0x58025480
 8003474:	58025494 	.word	0x58025494
 8003478:	2300      	movs	r3, #0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800348c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6d      	ldr	r2, [pc, #436]	; (8003648 <HAL_DMA_Abort+0x444>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d04a      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a6b      	ldr	r2, [pc, #428]	; (800364c <HAL_DMA_Abort+0x448>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d045      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a6a      	ldr	r2, [pc, #424]	; (8003650 <HAL_DMA_Abort+0x44c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d040      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a68      	ldr	r2, [pc, #416]	; (8003654 <HAL_DMA_Abort+0x450>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d03b      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a67      	ldr	r2, [pc, #412]	; (8003658 <HAL_DMA_Abort+0x454>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d036      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a65      	ldr	r2, [pc, #404]	; (800365c <HAL_DMA_Abort+0x458>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d031      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a64      	ldr	r2, [pc, #400]	; (8003660 <HAL_DMA_Abort+0x45c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d02c      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a62      	ldr	r2, [pc, #392]	; (8003664 <HAL_DMA_Abort+0x460>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d027      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a61      	ldr	r2, [pc, #388]	; (8003668 <HAL_DMA_Abort+0x464>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d022      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a5f      	ldr	r2, [pc, #380]	; (800366c <HAL_DMA_Abort+0x468>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01d      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a5e      	ldr	r2, [pc, #376]	; (8003670 <HAL_DMA_Abort+0x46c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d018      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a5c      	ldr	r2, [pc, #368]	; (8003674 <HAL_DMA_Abort+0x470>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a5b      	ldr	r2, [pc, #364]	; (8003678 <HAL_DMA_Abort+0x474>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00e      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a59      	ldr	r2, [pc, #356]	; (800367c <HAL_DMA_Abort+0x478>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a58      	ldr	r2, [pc, #352]	; (8003680 <HAL_DMA_Abort+0x47c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_DMA_Abort+0x32a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a56      	ldr	r2, [pc, #344]	; (8003684 <HAL_DMA_Abort+0x480>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d108      	bne.n	8003540 <HAL_DMA_Abort+0x33c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e007      	b.n	8003550 <HAL_DMA_Abort+0x34c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003550:	e013      	b.n	800357a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003552:	f7ff fcfb 	bl	8002f4c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b05      	cmp	r3, #5
 800355e:	d90c      	bls.n	800357a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2203      	movs	r2, #3
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e12d      	b.n	80037d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e5      	bne.n	8003552 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <HAL_DMA_Abort+0x444>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04a      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2d      	ldr	r2, [pc, #180]	; (800364c <HAL_DMA_Abort+0x448>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2c      	ldr	r2, [pc, #176]	; (8003650 <HAL_DMA_Abort+0x44c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <HAL_DMA_Abort+0x450>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d03b      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a29      	ldr	r2, [pc, #164]	; (8003658 <HAL_DMA_Abort+0x454>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a27      	ldr	r2, [pc, #156]	; (800365c <HAL_DMA_Abort+0x458>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a26      	ldr	r2, [pc, #152]	; (8003660 <HAL_DMA_Abort+0x45c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d02c      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a24      	ldr	r2, [pc, #144]	; (8003664 <HAL_DMA_Abort+0x460>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d027      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a23      	ldr	r2, [pc, #140]	; (8003668 <HAL_DMA_Abort+0x464>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a21      	ldr	r2, [pc, #132]	; (800366c <HAL_DMA_Abort+0x468>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a20      	ldr	r2, [pc, #128]	; (8003670 <HAL_DMA_Abort+0x46c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <HAL_DMA_Abort+0x470>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <HAL_DMA_Abort+0x474>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_DMA_Abort+0x478>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_DMA_Abort+0x47c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_Abort+0x422>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_DMA_Abort+0x480>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d101      	bne.n	800362a <HAL_DMA_Abort+0x426>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_DMA_Abort+0x428>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02b      	beq.n	8003688 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	223f      	movs	r2, #63	; 0x3f
 8003640:	409a      	lsls	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	e02a      	b.n	800369e <HAL_DMA_Abort+0x49a>
 8003648:	40020010 	.word	0x40020010
 800364c:	40020028 	.word	0x40020028
 8003650:	40020040 	.word	0x40020040
 8003654:	40020058 	.word	0x40020058
 8003658:	40020070 	.word	0x40020070
 800365c:	40020088 	.word	0x40020088
 8003660:	400200a0 	.word	0x400200a0
 8003664:	400200b8 	.word	0x400200b8
 8003668:	40020410 	.word	0x40020410
 800366c:	40020428 	.word	0x40020428
 8003670:	40020440 	.word	0x40020440
 8003674:	40020458 	.word	0x40020458
 8003678:	40020470 	.word	0x40020470
 800367c:	40020488 	.word	0x40020488
 8003680:	400204a0 	.word	0x400204a0
 8003684:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2201      	movs	r2, #1
 8003698:	409a      	lsls	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a4f      	ldr	r2, [pc, #316]	; (80037e0 <HAL_DMA_Abort+0x5dc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d072      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a4d      	ldr	r2, [pc, #308]	; (80037e4 <HAL_DMA_Abort+0x5e0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d06d      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a4c      	ldr	r2, [pc, #304]	; (80037e8 <HAL_DMA_Abort+0x5e4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d068      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a4a      	ldr	r2, [pc, #296]	; (80037ec <HAL_DMA_Abort+0x5e8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d063      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a49      	ldr	r2, [pc, #292]	; (80037f0 <HAL_DMA_Abort+0x5ec>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d05e      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a47      	ldr	r2, [pc, #284]	; (80037f4 <HAL_DMA_Abort+0x5f0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d059      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a46      	ldr	r2, [pc, #280]	; (80037f8 <HAL_DMA_Abort+0x5f4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d054      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a44      	ldr	r2, [pc, #272]	; (80037fc <HAL_DMA_Abort+0x5f8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d04f      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a43      	ldr	r2, [pc, #268]	; (8003800 <HAL_DMA_Abort+0x5fc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d04a      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a41      	ldr	r2, [pc, #260]	; (8003804 <HAL_DMA_Abort+0x600>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d045      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a40      	ldr	r2, [pc, #256]	; (8003808 <HAL_DMA_Abort+0x604>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d040      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3e      	ldr	r2, [pc, #248]	; (800380c <HAL_DMA_Abort+0x608>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d03b      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <HAL_DMA_Abort+0x60c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d036      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <HAL_DMA_Abort+0x610>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d031      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a3a      	ldr	r2, [pc, #232]	; (8003818 <HAL_DMA_Abort+0x614>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d02c      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a38      	ldr	r2, [pc, #224]	; (800381c <HAL_DMA_Abort+0x618>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d027      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a37      	ldr	r2, [pc, #220]	; (8003820 <HAL_DMA_Abort+0x61c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d022      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a35      	ldr	r2, [pc, #212]	; (8003824 <HAL_DMA_Abort+0x620>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01d      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a34      	ldr	r2, [pc, #208]	; (8003828 <HAL_DMA_Abort+0x624>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d018      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a32      	ldr	r2, [pc, #200]	; (800382c <HAL_DMA_Abort+0x628>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a31      	ldr	r2, [pc, #196]	; (8003830 <HAL_DMA_Abort+0x62c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00e      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2f      	ldr	r2, [pc, #188]	; (8003834 <HAL_DMA_Abort+0x630>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <HAL_DMA_Abort+0x634>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_DMA_Abort+0x58a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2c      	ldr	r2, [pc, #176]	; (800383c <HAL_DMA_Abort+0x638>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_DMA_Abort+0x58e>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_DMA_Abort+0x590>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d015      	beq.n	80037c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00c      	beq.n	80037c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40020010 	.word	0x40020010
 80037e4:	40020028 	.word	0x40020028
 80037e8:	40020040 	.word	0x40020040
 80037ec:	40020058 	.word	0x40020058
 80037f0:	40020070 	.word	0x40020070
 80037f4:	40020088 	.word	0x40020088
 80037f8:	400200a0 	.word	0x400200a0
 80037fc:	400200b8 	.word	0x400200b8
 8003800:	40020410 	.word	0x40020410
 8003804:	40020428 	.word	0x40020428
 8003808:	40020440 	.word	0x40020440
 800380c:	40020458 	.word	0x40020458
 8003810:	40020470 	.word	0x40020470
 8003814:	40020488 	.word	0x40020488
 8003818:	400204a0 	.word	0x400204a0
 800381c:	400204b8 	.word	0x400204b8
 8003820:	58025408 	.word	0x58025408
 8003824:	5802541c 	.word	0x5802541c
 8003828:	58025430 	.word	0x58025430
 800382c:	58025444 	.word	0x58025444
 8003830:	58025458 	.word	0x58025458
 8003834:	5802546c 	.word	0x5802546c
 8003838:	58025480 	.word	0x58025480
 800383c:	58025494 	.word	0x58025494

08003840 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e237      	b.n	8003cc2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d004      	beq.n	8003868 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e22c      	b.n	8003cc2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5c      	ldr	r2, [pc, #368]	; (80039e0 <HAL_DMA_Abort_IT+0x1a0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a5b      	ldr	r2, [pc, #364]	; (80039e4 <HAL_DMA_Abort_IT+0x1a4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a59      	ldr	r2, [pc, #356]	; (80039e8 <HAL_DMA_Abort_IT+0x1a8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a58      	ldr	r2, [pc, #352]	; (80039ec <HAL_DMA_Abort_IT+0x1ac>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a56      	ldr	r2, [pc, #344]	; (80039f0 <HAL_DMA_Abort_IT+0x1b0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a55      	ldr	r2, [pc, #340]	; (80039f4 <HAL_DMA_Abort_IT+0x1b4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a53      	ldr	r2, [pc, #332]	; (80039f8 <HAL_DMA_Abort_IT+0x1b8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a52      	ldr	r2, [pc, #328]	; (80039fc <HAL_DMA_Abort_IT+0x1bc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a50      	ldr	r2, [pc, #320]	; (8003a00 <HAL_DMA_Abort_IT+0x1c0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a4f      	ldr	r2, [pc, #316]	; (8003a04 <HAL_DMA_Abort_IT+0x1c4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a4d      	ldr	r2, [pc, #308]	; (8003a08 <HAL_DMA_Abort_IT+0x1c8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a4c      	ldr	r2, [pc, #304]	; (8003a0c <HAL_DMA_Abort_IT+0x1cc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <HAL_DMA_Abort_IT+0x1d0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a49      	ldr	r2, [pc, #292]	; (8003a14 <HAL_DMA_Abort_IT+0x1d4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a47      	ldr	r2, [pc, #284]	; (8003a18 <HAL_DMA_Abort_IT+0x1d8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_Abort_IT+0xc8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a46      	ldr	r2, [pc, #280]	; (8003a1c <HAL_DMA_Abort_IT+0x1dc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_DMA_Abort_IT+0xcc>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_DMA_Abort_IT+0xce>
 800390c:	2300      	movs	r3, #0
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8086 	beq.w	8003a20 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <HAL_DMA_Abort_IT+0x1a0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d04a      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2e      	ldr	r2, [pc, #184]	; (80039e4 <HAL_DMA_Abort_IT+0x1a4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d045      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2c      	ldr	r2, [pc, #176]	; (80039e8 <HAL_DMA_Abort_IT+0x1a8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d040      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2b      	ldr	r2, [pc, #172]	; (80039ec <HAL_DMA_Abort_IT+0x1ac>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d03b      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a29      	ldr	r2, [pc, #164]	; (80039f0 <HAL_DMA_Abort_IT+0x1b0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d036      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <HAL_DMA_Abort_IT+0x1b4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d031      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a26      	ldr	r2, [pc, #152]	; (80039f8 <HAL_DMA_Abort_IT+0x1b8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d02c      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a25      	ldr	r2, [pc, #148]	; (80039fc <HAL_DMA_Abort_IT+0x1bc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d027      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a23      	ldr	r2, [pc, #140]	; (8003a00 <HAL_DMA_Abort_IT+0x1c0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d022      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_DMA_Abort_IT+0x1c4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d01d      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <HAL_DMA_Abort_IT+0x1c8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d018      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <HAL_DMA_Abort_IT+0x1cc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_DMA_Abort_IT+0x1d0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_DMA_Abort_IT+0x1d4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1a      	ldr	r2, [pc, #104]	; (8003a18 <HAL_DMA_Abort_IT+0x1d8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_DMA_Abort_IT+0x17c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <HAL_DMA_Abort_IT+0x1dc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d108      	bne.n	80039ce <HAL_DMA_Abort_IT+0x18e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e178      	b.n	8003cc0 <HAL_DMA_Abort_IT+0x480>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e16f      	b.n	8003cc0 <HAL_DMA_Abort_IT+0x480>
 80039e0:	40020010 	.word	0x40020010
 80039e4:	40020028 	.word	0x40020028
 80039e8:	40020040 	.word	0x40020040
 80039ec:	40020058 	.word	0x40020058
 80039f0:	40020070 	.word	0x40020070
 80039f4:	40020088 	.word	0x40020088
 80039f8:	400200a0 	.word	0x400200a0
 80039fc:	400200b8 	.word	0x400200b8
 8003a00:	40020410 	.word	0x40020410
 8003a04:	40020428 	.word	0x40020428
 8003a08:	40020440 	.word	0x40020440
 8003a0c:	40020458 	.word	0x40020458
 8003a10:	40020470 	.word	0x40020470
 8003a14:	40020488 	.word	0x40020488
 8003a18:	400204a0 	.word	0x400204a0
 8003a1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 020e 	bic.w	r2, r2, #14
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6c      	ldr	r2, [pc, #432]	; (8003be8 <HAL_DMA_Abort_IT+0x3a8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d04a      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6b      	ldr	r2, [pc, #428]	; (8003bec <HAL_DMA_Abort_IT+0x3ac>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d045      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a69      	ldr	r2, [pc, #420]	; (8003bf0 <HAL_DMA_Abort_IT+0x3b0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d040      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a68      	ldr	r2, [pc, #416]	; (8003bf4 <HAL_DMA_Abort_IT+0x3b4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d03b      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a66      	ldr	r2, [pc, #408]	; (8003bf8 <HAL_DMA_Abort_IT+0x3b8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d036      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <HAL_DMA_Abort_IT+0x3bc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d031      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a63      	ldr	r2, [pc, #396]	; (8003c00 <HAL_DMA_Abort_IT+0x3c0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d02c      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a62      	ldr	r2, [pc, #392]	; (8003c04 <HAL_DMA_Abort_IT+0x3c4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d027      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a60      	ldr	r2, [pc, #384]	; (8003c08 <HAL_DMA_Abort_IT+0x3c8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d022      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a5f      	ldr	r2, [pc, #380]	; (8003c0c <HAL_DMA_Abort_IT+0x3cc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d01d      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5d      	ldr	r2, [pc, #372]	; (8003c10 <HAL_DMA_Abort_IT+0x3d0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d018      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5c      	ldr	r2, [pc, #368]	; (8003c14 <HAL_DMA_Abort_IT+0x3d4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5a      	ldr	r2, [pc, #360]	; (8003c18 <HAL_DMA_Abort_IT+0x3d8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a59      	ldr	r2, [pc, #356]	; (8003c1c <HAL_DMA_Abort_IT+0x3dc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a57      	ldr	r2, [pc, #348]	; (8003c20 <HAL_DMA_Abort_IT+0x3e0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x290>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a56      	ldr	r2, [pc, #344]	; (8003c24 <HAL_DMA_Abort_IT+0x3e4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d108      	bne.n	8003ae2 <HAL_DMA_Abort_IT+0x2a2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e007      	b.n	8003af2 <HAL_DMA_Abort_IT+0x2b2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a3c      	ldr	r2, [pc, #240]	; (8003be8 <HAL_DMA_Abort_IT+0x3a8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d072      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a3a      	ldr	r2, [pc, #232]	; (8003bec <HAL_DMA_Abort_IT+0x3ac>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d06d      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a39      	ldr	r2, [pc, #228]	; (8003bf0 <HAL_DMA_Abort_IT+0x3b0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d068      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a37      	ldr	r2, [pc, #220]	; (8003bf4 <HAL_DMA_Abort_IT+0x3b4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d063      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a36      	ldr	r2, [pc, #216]	; (8003bf8 <HAL_DMA_Abort_IT+0x3b8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d05e      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a34      	ldr	r2, [pc, #208]	; (8003bfc <HAL_DMA_Abort_IT+0x3bc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d059      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a33      	ldr	r2, [pc, #204]	; (8003c00 <HAL_DMA_Abort_IT+0x3c0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d054      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a31      	ldr	r2, [pc, #196]	; (8003c04 <HAL_DMA_Abort_IT+0x3c4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d04f      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a30      	ldr	r2, [pc, #192]	; (8003c08 <HAL_DMA_Abort_IT+0x3c8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d04a      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2e      	ldr	r2, [pc, #184]	; (8003c0c <HAL_DMA_Abort_IT+0x3cc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d045      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a2d      	ldr	r2, [pc, #180]	; (8003c10 <HAL_DMA_Abort_IT+0x3d0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d040      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a2b      	ldr	r2, [pc, #172]	; (8003c14 <HAL_DMA_Abort_IT+0x3d4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d03b      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <HAL_DMA_Abort_IT+0x3d8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d036      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <HAL_DMA_Abort_IT+0x3dc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d031      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <HAL_DMA_Abort_IT+0x3e0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d02c      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <HAL_DMA_Abort_IT+0x3e4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d027      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a24      	ldr	r2, [pc, #144]	; (8003c28 <HAL_DMA_Abort_IT+0x3e8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d022      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <HAL_DMA_Abort_IT+0x3ec>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01d      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <HAL_DMA_Abort_IT+0x3f0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d018      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <HAL_DMA_Abort_IT+0x3f4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <HAL_DMA_Abort_IT+0x3f8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <HAL_DMA_Abort_IT+0x3fc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1b      	ldr	r2, [pc, #108]	; (8003c40 <HAL_DMA_Abort_IT+0x400>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x3a2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a19      	ldr	r2, [pc, #100]	; (8003c44 <HAL_DMA_Abort_IT+0x404>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d132      	bne.n	8003c48 <HAL_DMA_Abort_IT+0x408>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e031      	b.n	8003c4a <HAL_DMA_Abort_IT+0x40a>
 8003be6:	bf00      	nop
 8003be8:	40020010 	.word	0x40020010
 8003bec:	40020028 	.word	0x40020028
 8003bf0:	40020040 	.word	0x40020040
 8003bf4:	40020058 	.word	0x40020058
 8003bf8:	40020070 	.word	0x40020070
 8003bfc:	40020088 	.word	0x40020088
 8003c00:	400200a0 	.word	0x400200a0
 8003c04:	400200b8 	.word	0x400200b8
 8003c08:	40020410 	.word	0x40020410
 8003c0c:	40020428 	.word	0x40020428
 8003c10:	40020440 	.word	0x40020440
 8003c14:	40020458 	.word	0x40020458
 8003c18:	40020470 	.word	0x40020470
 8003c1c:	40020488 	.word	0x40020488
 8003c20:	400204a0 	.word	0x400204a0
 8003c24:	400204b8 	.word	0x400204b8
 8003c28:	58025408 	.word	0x58025408
 8003c2c:	5802541c 	.word	0x5802541c
 8003c30:	58025430 	.word	0x58025430
 8003c34:	58025444 	.word	0x58025444
 8003c38:	58025458 	.word	0x58025458
 8003c3c:	5802546c 	.word	0x5802546c
 8003c40:	58025480 	.word	0x58025480
 8003c44:	58025494 	.word	0x58025494
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d028      	beq.n	8003ca0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00c      	beq.n	8003ca0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop

08003ccc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cd8:	4b67      	ldr	r3, [pc, #412]	; (8003e78 <HAL_DMA_IRQHandler+0x1ac>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a67      	ldr	r2, [pc, #412]	; (8003e7c <HAL_DMA_IRQHandler+0x1b0>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	0a9b      	lsrs	r3, r3, #10
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a5f      	ldr	r2, [pc, #380]	; (8003e80 <HAL_DMA_IRQHandler+0x1b4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d04a      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5d      	ldr	r2, [pc, #372]	; (8003e84 <HAL_DMA_IRQHandler+0x1b8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d045      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5c      	ldr	r2, [pc, #368]	; (8003e88 <HAL_DMA_IRQHandler+0x1bc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d040      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a5a      	ldr	r2, [pc, #360]	; (8003e8c <HAL_DMA_IRQHandler+0x1c0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d03b      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a59      	ldr	r2, [pc, #356]	; (8003e90 <HAL_DMA_IRQHandler+0x1c4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d036      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a57      	ldr	r2, [pc, #348]	; (8003e94 <HAL_DMA_IRQHandler+0x1c8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d031      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a56      	ldr	r2, [pc, #344]	; (8003e98 <HAL_DMA_IRQHandler+0x1cc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d02c      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <HAL_DMA_IRQHandler+0x1d0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d027      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a53      	ldr	r2, [pc, #332]	; (8003ea0 <HAL_DMA_IRQHandler+0x1d4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d022      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a51      	ldr	r2, [pc, #324]	; (8003ea4 <HAL_DMA_IRQHandler+0x1d8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01d      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a50      	ldr	r2, [pc, #320]	; (8003ea8 <HAL_DMA_IRQHandler+0x1dc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d018      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a4e      	ldr	r2, [pc, #312]	; (8003eac <HAL_DMA_IRQHandler+0x1e0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4d      	ldr	r2, [pc, #308]	; (8003eb0 <HAL_DMA_IRQHandler+0x1e4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a4b      	ldr	r2, [pc, #300]	; (8003eb4 <HAL_DMA_IRQHandler+0x1e8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a4a      	ldr	r2, [pc, #296]	; (8003eb8 <HAL_DMA_IRQHandler+0x1ec>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_DMA_IRQHandler+0xd2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a48      	ldr	r2, [pc, #288]	; (8003ebc <HAL_DMA_IRQHandler+0x1f0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_DMA_IRQHandler+0xd6>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_DMA_IRQHandler+0xd8>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 842b 	beq.w	8004600 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2208      	movs	r2, #8
 8003db4:	409a      	lsls	r2, r3
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80a2 	beq.w	8003f04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2e      	ldr	r2, [pc, #184]	; (8003e80 <HAL_DMA_IRQHandler+0x1b4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d04a      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <HAL_DMA_IRQHandler+0x1b8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d045      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <HAL_DMA_IRQHandler+0x1bc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d040      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <HAL_DMA_IRQHandler+0x1c0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d03b      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <HAL_DMA_IRQHandler+0x1c4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d036      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <HAL_DMA_IRQHandler+0x1c8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d031      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <HAL_DMA_IRQHandler+0x1cc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d02c      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a24      	ldr	r2, [pc, #144]	; (8003e9c <HAL_DMA_IRQHandler+0x1d0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d027      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a22      	ldr	r2, [pc, #136]	; (8003ea0 <HAL_DMA_IRQHandler+0x1d4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d022      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <HAL_DMA_IRQHandler+0x1d8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d01d      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1f      	ldr	r2, [pc, #124]	; (8003ea8 <HAL_DMA_IRQHandler+0x1dc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d018      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <HAL_DMA_IRQHandler+0x1e0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d013      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <HAL_DMA_IRQHandler+0x1e4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00e      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <HAL_DMA_IRQHandler+0x1e8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <HAL_DMA_IRQHandler+0x1ec>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x194>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_DMA_IRQHandler+0x1f0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d12f      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0x1f4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf14      	ite	ne
 8003e6e:	2301      	movne	r3, #1
 8003e70:	2300      	moveq	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	e02e      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x208>
 8003e76:	bf00      	nop
 8003e78:	2400000c 	.word	0x2400000c
 8003e7c:	1b4e81b5 	.word	0x1b4e81b5
 8003e80:	40020010 	.word	0x40020010
 8003e84:	40020028 	.word	0x40020028
 8003e88:	40020040 	.word	0x40020040
 8003e8c:	40020058 	.word	0x40020058
 8003e90:	40020070 	.word	0x40020070
 8003e94:	40020088 	.word	0x40020088
 8003e98:	400200a0 	.word	0x400200a0
 8003e9c:	400200b8 	.word	0x400200b8
 8003ea0:	40020410 	.word	0x40020410
 8003ea4:	40020428 	.word	0x40020428
 8003ea8:	40020440 	.word	0x40020440
 8003eac:	40020458 	.word	0x40020458
 8003eb0:	40020470 	.word	0x40020470
 8003eb4:	40020488 	.word	0x40020488
 8003eb8:	400204a0 	.word	0x400204a0
 8003ebc:	400204b8 	.word	0x400204b8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bf14      	ite	ne
 8003ece:	2301      	movne	r3, #1
 8003ed0:	2300      	moveq	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0204 	bic.w	r2, r2, #4
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	f043 0201 	orr.w	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d06e      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a69      	ldr	r2, [pc, #420]	; (80040c4 <HAL_DMA_IRQHandler+0x3f8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d04a      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a67      	ldr	r2, [pc, #412]	; (80040c8 <HAL_DMA_IRQHandler+0x3fc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d045      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a66      	ldr	r2, [pc, #408]	; (80040cc <HAL_DMA_IRQHandler+0x400>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d040      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a64      	ldr	r2, [pc, #400]	; (80040d0 <HAL_DMA_IRQHandler+0x404>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d03b      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a63      	ldr	r2, [pc, #396]	; (80040d4 <HAL_DMA_IRQHandler+0x408>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d036      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a61      	ldr	r2, [pc, #388]	; (80040d8 <HAL_DMA_IRQHandler+0x40c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d031      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a60      	ldr	r2, [pc, #384]	; (80040dc <HAL_DMA_IRQHandler+0x410>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d02c      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5e      	ldr	r2, [pc, #376]	; (80040e0 <HAL_DMA_IRQHandler+0x414>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d027      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a5d      	ldr	r2, [pc, #372]	; (80040e4 <HAL_DMA_IRQHandler+0x418>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d022      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5b      	ldr	r2, [pc, #364]	; (80040e8 <HAL_DMA_IRQHandler+0x41c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01d      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_DMA_IRQHandler+0x420>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d018      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_DMA_IRQHandler+0x424>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <HAL_DMA_IRQHandler+0x428>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a55      	ldr	r2, [pc, #340]	; (80040f8 <HAL_DMA_IRQHandler+0x42c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a54      	ldr	r2, [pc, #336]	; (80040fc <HAL_DMA_IRQHandler+0x430>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_DMA_IRQHandler+0x2ee>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a52      	ldr	r2, [pc, #328]	; (8004100 <HAL_DMA_IRQHandler+0x434>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_DMA_IRQHandler+0x304>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf14      	ite	ne
 8003fc8:	2301      	movne	r3, #1
 8003fca:	2300      	moveq	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e003      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x30c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f043 0202 	orr.w	r2, r3, #2
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2204      	movs	r2, #4
 8004002:	409a      	lsls	r2, r3
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 808f 	beq.w	800412c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2c      	ldr	r2, [pc, #176]	; (80040c4 <HAL_DMA_IRQHandler+0x3f8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d04a      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2a      	ldr	r2, [pc, #168]	; (80040c8 <HAL_DMA_IRQHandler+0x3fc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d045      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a29      	ldr	r2, [pc, #164]	; (80040cc <HAL_DMA_IRQHandler+0x400>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d040      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <HAL_DMA_IRQHandler+0x404>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d03b      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <HAL_DMA_IRQHandler+0x408>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d036      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a24      	ldr	r2, [pc, #144]	; (80040d8 <HAL_DMA_IRQHandler+0x40c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d031      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a23      	ldr	r2, [pc, #140]	; (80040dc <HAL_DMA_IRQHandler+0x410>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d02c      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <HAL_DMA_IRQHandler+0x414>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d027      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <HAL_DMA_IRQHandler+0x418>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d022      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <HAL_DMA_IRQHandler+0x41c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01d      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <HAL_DMA_IRQHandler+0x420>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d018      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <HAL_DMA_IRQHandler+0x424>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <HAL_DMA_IRQHandler+0x428>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <HAL_DMA_IRQHandler+0x42c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <HAL_DMA_IRQHandler+0x430>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_DMA_IRQHandler+0x3e2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a15      	ldr	r2, [pc, #84]	; (8004100 <HAL_DMA_IRQHandler+0x434>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d12a      	bne.n	8004104 <HAL_DMA_IRQHandler+0x438>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e023      	b.n	800410c <HAL_DMA_IRQHandler+0x440>
 80040c4:	40020010 	.word	0x40020010
 80040c8:	40020028 	.word	0x40020028
 80040cc:	40020040 	.word	0x40020040
 80040d0:	40020058 	.word	0x40020058
 80040d4:	40020070 	.word	0x40020070
 80040d8:	40020088 	.word	0x40020088
 80040dc:	400200a0 	.word	0x400200a0
 80040e0:	400200b8 	.word	0x400200b8
 80040e4:	40020410 	.word	0x40020410
 80040e8:	40020428 	.word	0x40020428
 80040ec:	40020440 	.word	0x40020440
 80040f0:	40020458 	.word	0x40020458
 80040f4:	40020470 	.word	0x40020470
 80040f8:	40020488 	.word	0x40020488
 80040fc:	400204a0 	.word	0x400204a0
 8004100:	400204b8 	.word	0x400204b8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00d      	beq.n	800412c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2204      	movs	r2, #4
 800411a:	409a      	lsls	r2, r3
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f043 0204 	orr.w	r2, r3, #4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	2210      	movs	r2, #16
 8004136:	409a      	lsls	r2, r3
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80a6 	beq.w	800428e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a85      	ldr	r2, [pc, #532]	; (800435c <HAL_DMA_IRQHandler+0x690>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d04a      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a83      	ldr	r2, [pc, #524]	; (8004360 <HAL_DMA_IRQHandler+0x694>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d045      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a82      	ldr	r2, [pc, #520]	; (8004364 <HAL_DMA_IRQHandler+0x698>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d040      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a80      	ldr	r2, [pc, #512]	; (8004368 <HAL_DMA_IRQHandler+0x69c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d03b      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a7f      	ldr	r2, [pc, #508]	; (800436c <HAL_DMA_IRQHandler+0x6a0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d036      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a7d      	ldr	r2, [pc, #500]	; (8004370 <HAL_DMA_IRQHandler+0x6a4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d031      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a7c      	ldr	r2, [pc, #496]	; (8004374 <HAL_DMA_IRQHandler+0x6a8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d02c      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a7a      	ldr	r2, [pc, #488]	; (8004378 <HAL_DMA_IRQHandler+0x6ac>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d027      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a79      	ldr	r2, [pc, #484]	; (800437c <HAL_DMA_IRQHandler+0x6b0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d022      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a77      	ldr	r2, [pc, #476]	; (8004380 <HAL_DMA_IRQHandler+0x6b4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01d      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a76      	ldr	r2, [pc, #472]	; (8004384 <HAL_DMA_IRQHandler+0x6b8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d018      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a74      	ldr	r2, [pc, #464]	; (8004388 <HAL_DMA_IRQHandler+0x6bc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a73      	ldr	r2, [pc, #460]	; (800438c <HAL_DMA_IRQHandler+0x6c0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a71      	ldr	r2, [pc, #452]	; (8004390 <HAL_DMA_IRQHandler+0x6c4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a70      	ldr	r2, [pc, #448]	; (8004394 <HAL_DMA_IRQHandler+0x6c8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x516>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6e      	ldr	r2, [pc, #440]	; (8004398 <HAL_DMA_IRQHandler+0x6cc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d10a      	bne.n	80041f8 <HAL_DMA_IRQHandler+0x52c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e009      	b.n	800420c <HAL_DMA_IRQHandler+0x540>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d03e      	beq.n	800428e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	2210      	movs	r2, #16
 800421a:	409a      	lsls	r2, r3
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d018      	beq.n	8004260 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d108      	bne.n	800424e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	d024      	beq.n	800428e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
 800424c:	e01f      	b.n	800428e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01b      	beq.n	800428e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
 800425e:	e016      	b.n	800428e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0208 	bic.w	r2, r2, #8
 800427c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2220      	movs	r2, #32
 8004298:	409a      	lsls	r2, r3
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8110 	beq.w	80044c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a2c      	ldr	r2, [pc, #176]	; (800435c <HAL_DMA_IRQHandler+0x690>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d04a      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a2b      	ldr	r2, [pc, #172]	; (8004360 <HAL_DMA_IRQHandler+0x694>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d045      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a29      	ldr	r2, [pc, #164]	; (8004364 <HAL_DMA_IRQHandler+0x698>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d040      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a28      	ldr	r2, [pc, #160]	; (8004368 <HAL_DMA_IRQHandler+0x69c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d03b      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a26      	ldr	r2, [pc, #152]	; (800436c <HAL_DMA_IRQHandler+0x6a0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d036      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a25      	ldr	r2, [pc, #148]	; (8004370 <HAL_DMA_IRQHandler+0x6a4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d031      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a23      	ldr	r2, [pc, #140]	; (8004374 <HAL_DMA_IRQHandler+0x6a8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d02c      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a22      	ldr	r2, [pc, #136]	; (8004378 <HAL_DMA_IRQHandler+0x6ac>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d027      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a20      	ldr	r2, [pc, #128]	; (800437c <HAL_DMA_IRQHandler+0x6b0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d022      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <HAL_DMA_IRQHandler+0x6b4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d01d      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <HAL_DMA_IRQHandler+0x6b8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d018      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <HAL_DMA_IRQHandler+0x6bc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d013      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1a      	ldr	r2, [pc, #104]	; (800438c <HAL_DMA_IRQHandler+0x6c0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00e      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_DMA_IRQHandler+0x6c4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d009      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a17      	ldr	r2, [pc, #92]	; (8004394 <HAL_DMA_IRQHandler+0x6c8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_DMA_IRQHandler+0x678>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a16      	ldr	r2, [pc, #88]	; (8004398 <HAL_DMA_IRQHandler+0x6cc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d12b      	bne.n	800439c <HAL_DMA_IRQHandler+0x6d0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf14      	ite	ne
 8004352:	2301      	movne	r3, #1
 8004354:	2300      	moveq	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	e02a      	b.n	80043b0 <HAL_DMA_IRQHandler+0x6e4>
 800435a:	bf00      	nop
 800435c:	40020010 	.word	0x40020010
 8004360:	40020028 	.word	0x40020028
 8004364:	40020040 	.word	0x40020040
 8004368:	40020058 	.word	0x40020058
 800436c:	40020070 	.word	0x40020070
 8004370:	40020088 	.word	0x40020088
 8004374:	400200a0 	.word	0x400200a0
 8004378:	400200b8 	.word	0x400200b8
 800437c:	40020410 	.word	0x40020410
 8004380:	40020428 	.word	0x40020428
 8004384:	40020440 	.word	0x40020440
 8004388:	40020458 	.word	0x40020458
 800438c:	40020470 	.word	0x40020470
 8004390:	40020488 	.word	0x40020488
 8004394:	400204a0 	.word	0x400204a0
 8004398:	400204b8 	.word	0x400204b8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bf14      	ite	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	2300      	moveq	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8087 	beq.w	80044c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	2220      	movs	r2, #32
 80043c0:	409a      	lsls	r2, r3
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d139      	bne.n	8004446 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0216 	bic.w	r2, r2, #22
 80043e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <HAL_DMA_IRQHandler+0x736>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0208 	bic.w	r2, r2, #8
 8004410:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	223f      	movs	r2, #63	; 0x3f
 800441c:	409a      	lsls	r2, r3
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 834a 	beq.w	8004ad0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
          }
          return;
 8004444:	e344      	b.n	8004ad0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d018      	beq.n	8004486 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
 8004472:	e027      	b.n	80044c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d023      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
 8004484:	e01e      	b.n	80044c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10f      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0210 	bic.w	r2, r2, #16
 80044a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8306 	beq.w	8004ada <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8088 	beq.w	80045ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2204      	movs	r2, #4
 80044e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a7a      	ldr	r2, [pc, #488]	; (80046d4 <HAL_DMA_IRQHandler+0xa08>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d04a      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a79      	ldr	r2, [pc, #484]	; (80046d8 <HAL_DMA_IRQHandler+0xa0c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d045      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a77      	ldr	r2, [pc, #476]	; (80046dc <HAL_DMA_IRQHandler+0xa10>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d040      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a76      	ldr	r2, [pc, #472]	; (80046e0 <HAL_DMA_IRQHandler+0xa14>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d03b      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a74      	ldr	r2, [pc, #464]	; (80046e4 <HAL_DMA_IRQHandler+0xa18>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d036      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a73      	ldr	r2, [pc, #460]	; (80046e8 <HAL_DMA_IRQHandler+0xa1c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d031      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a71      	ldr	r2, [pc, #452]	; (80046ec <HAL_DMA_IRQHandler+0xa20>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d02c      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a70      	ldr	r2, [pc, #448]	; (80046f0 <HAL_DMA_IRQHandler+0xa24>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d027      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a6e      	ldr	r2, [pc, #440]	; (80046f4 <HAL_DMA_IRQHandler+0xa28>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d022      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6d      	ldr	r2, [pc, #436]	; (80046f8 <HAL_DMA_IRQHandler+0xa2c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d01d      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a6b      	ldr	r2, [pc, #428]	; (80046fc <HAL_DMA_IRQHandler+0xa30>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d018      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6a      	ldr	r2, [pc, #424]	; (8004700 <HAL_DMA_IRQHandler+0xa34>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a68      	ldr	r2, [pc, #416]	; (8004704 <HAL_DMA_IRQHandler+0xa38>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a67      	ldr	r2, [pc, #412]	; (8004708 <HAL_DMA_IRQHandler+0xa3c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a65      	ldr	r2, [pc, #404]	; (800470c <HAL_DMA_IRQHandler+0xa40>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_DMA_IRQHandler+0x8b8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a64      	ldr	r2, [pc, #400]	; (8004710 <HAL_DMA_IRQHandler+0xa44>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <HAL_DMA_IRQHandler+0x8ca>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e007      	b.n	80045a6 <HAL_DMA_IRQHandler+0x8da>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	3301      	adds	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d307      	bcc.n	80045c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f2      	bne.n	80045a6 <HAL_DMA_IRQHandler+0x8da>
 80045c0:	e000      	b.n	80045c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80045c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2203      	movs	r2, #3
 80045d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80045da:	e003      	b.n	80045e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8272 	beq.w	8004ada <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
 80045fe:	e26c      	b.n	8004ada <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a43      	ldr	r2, [pc, #268]	; (8004714 <HAL_DMA_IRQHandler+0xa48>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d022      	beq.n	8004650 <HAL_DMA_IRQHandler+0x984>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a42      	ldr	r2, [pc, #264]	; (8004718 <HAL_DMA_IRQHandler+0xa4c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d01d      	beq.n	8004650 <HAL_DMA_IRQHandler+0x984>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a40      	ldr	r2, [pc, #256]	; (800471c <HAL_DMA_IRQHandler+0xa50>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d018      	beq.n	8004650 <HAL_DMA_IRQHandler+0x984>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a3f      	ldr	r2, [pc, #252]	; (8004720 <HAL_DMA_IRQHandler+0xa54>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_DMA_IRQHandler+0x984>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a3d      	ldr	r2, [pc, #244]	; (8004724 <HAL_DMA_IRQHandler+0xa58>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00e      	beq.n	8004650 <HAL_DMA_IRQHandler+0x984>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3c      	ldr	r2, [pc, #240]	; (8004728 <HAL_DMA_IRQHandler+0xa5c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d009      	beq.n	8004650 <HAL_DMA_IRQHandler+0x984>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a3a      	ldr	r2, [pc, #232]	; (800472c <HAL_DMA_IRQHandler+0xa60>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_DMA_IRQHandler+0x984>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a39      	ldr	r2, [pc, #228]	; (8004730 <HAL_DMA_IRQHandler+0xa64>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d101      	bne.n	8004654 <HAL_DMA_IRQHandler+0x988>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_DMA_IRQHandler+0x98a>
 8004654:	2300      	movs	r3, #0
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 823f 	beq.w	8004ada <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2204      	movs	r2, #4
 800466e:	409a      	lsls	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80cd 	beq.w	8004814 <HAL_DMA_IRQHandler+0xb48>
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80c7 	beq.w	8004814 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	f003 031f 	and.w	r3, r3, #31
 800468e:	2204      	movs	r2, #4
 8004690:	409a      	lsls	r2, r3
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d049      	beq.n	8004734 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8210 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046bc:	e20a      	b.n	8004ad4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8206 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046d0:	e200      	b.n	8004ad4 <HAL_DMA_IRQHandler+0xe08>
 80046d2:	bf00      	nop
 80046d4:	40020010 	.word	0x40020010
 80046d8:	40020028 	.word	0x40020028
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020058 	.word	0x40020058
 80046e4:	40020070 	.word	0x40020070
 80046e8:	40020088 	.word	0x40020088
 80046ec:	400200a0 	.word	0x400200a0
 80046f0:	400200b8 	.word	0x400200b8
 80046f4:	40020410 	.word	0x40020410
 80046f8:	40020428 	.word	0x40020428
 80046fc:	40020440 	.word	0x40020440
 8004700:	40020458 	.word	0x40020458
 8004704:	40020470 	.word	0x40020470
 8004708:	40020488 	.word	0x40020488
 800470c:	400204a0 	.word	0x400204a0
 8004710:	400204b8 	.word	0x400204b8
 8004714:	58025408 	.word	0x58025408
 8004718:	5802541c 	.word	0x5802541c
 800471c:	58025430 	.word	0x58025430
 8004720:	58025444 	.word	0x58025444
 8004724:	58025458 	.word	0x58025458
 8004728:	5802546c 	.word	0x5802546c
 800472c:	58025480 	.word	0x58025480
 8004730:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d160      	bne.n	8004800 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7f      	ldr	r2, [pc, #508]	; (8004940 <HAL_DMA_IRQHandler+0xc74>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d04a      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a7d      	ldr	r2, [pc, #500]	; (8004944 <HAL_DMA_IRQHandler+0xc78>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d045      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a7c      	ldr	r2, [pc, #496]	; (8004948 <HAL_DMA_IRQHandler+0xc7c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d040      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7a      	ldr	r2, [pc, #488]	; (800494c <HAL_DMA_IRQHandler+0xc80>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d03b      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a79      	ldr	r2, [pc, #484]	; (8004950 <HAL_DMA_IRQHandler+0xc84>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d036      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a77      	ldr	r2, [pc, #476]	; (8004954 <HAL_DMA_IRQHandler+0xc88>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d031      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a76      	ldr	r2, [pc, #472]	; (8004958 <HAL_DMA_IRQHandler+0xc8c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d02c      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a74      	ldr	r2, [pc, #464]	; (800495c <HAL_DMA_IRQHandler+0xc90>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d027      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a73      	ldr	r2, [pc, #460]	; (8004960 <HAL_DMA_IRQHandler+0xc94>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a71      	ldr	r2, [pc, #452]	; (8004964 <HAL_DMA_IRQHandler+0xc98>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01d      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a70      	ldr	r2, [pc, #448]	; (8004968 <HAL_DMA_IRQHandler+0xc9c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d018      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a6e      	ldr	r2, [pc, #440]	; (800496c <HAL_DMA_IRQHandler+0xca0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6d      	ldr	r2, [pc, #436]	; (8004970 <HAL_DMA_IRQHandler+0xca4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a6b      	ldr	r2, [pc, #428]	; (8004974 <HAL_DMA_IRQHandler+0xca8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a6a      	ldr	r2, [pc, #424]	; (8004978 <HAL_DMA_IRQHandler+0xcac>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_DMA_IRQHandler+0xb12>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a68      	ldr	r2, [pc, #416]	; (800497c <HAL_DMA_IRQHandler+0xcb0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d108      	bne.n	80047f0 <HAL_DMA_IRQHandler+0xb24>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0208 	bic.w	r2, r2, #8
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e007      	b.n	8004800 <HAL_DMA_IRQHandler+0xb34>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8165 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004812:	e15f      	b.n	8004ad4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2202      	movs	r2, #2
 800481e:	409a      	lsls	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80c5 	beq.w	80049b4 <HAL_DMA_IRQHandler+0xce8>
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80bf 	beq.w	80049b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	2202      	movs	r2, #2
 8004840:	409a      	lsls	r2, r3
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d018      	beq.n	8004882 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 813a 	beq.w	8004ad8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486c:	e134      	b.n	8004ad8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8130 	beq.w	8004ad8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004880:	e12a      	b.n	8004ad8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	f040 8089 	bne.w	80049a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2b      	ldr	r2, [pc, #172]	; (8004940 <HAL_DMA_IRQHandler+0xc74>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d04a      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a29      	ldr	r2, [pc, #164]	; (8004944 <HAL_DMA_IRQHandler+0xc78>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d045      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a28      	ldr	r2, [pc, #160]	; (8004948 <HAL_DMA_IRQHandler+0xc7c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d040      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a26      	ldr	r2, [pc, #152]	; (800494c <HAL_DMA_IRQHandler+0xc80>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d03b      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a25      	ldr	r2, [pc, #148]	; (8004950 <HAL_DMA_IRQHandler+0xc84>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d036      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a23      	ldr	r2, [pc, #140]	; (8004954 <HAL_DMA_IRQHandler+0xc88>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d031      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a22      	ldr	r2, [pc, #136]	; (8004958 <HAL_DMA_IRQHandler+0xc8c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d02c      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a20      	ldr	r2, [pc, #128]	; (800495c <HAL_DMA_IRQHandler+0xc90>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d027      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <HAL_DMA_IRQHandler+0xc94>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <HAL_DMA_IRQHandler+0xc98>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01d      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1c      	ldr	r2, [pc, #112]	; (8004968 <HAL_DMA_IRQHandler+0xc9c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1a      	ldr	r2, [pc, #104]	; (800496c <HAL_DMA_IRQHandler+0xca0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a19      	ldr	r2, [pc, #100]	; (8004970 <HAL_DMA_IRQHandler+0xca4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a17      	ldr	r2, [pc, #92]	; (8004974 <HAL_DMA_IRQHandler+0xca8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a16      	ldr	r2, [pc, #88]	; (8004978 <HAL_DMA_IRQHandler+0xcac>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_DMA_IRQHandler+0xc62>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a14      	ldr	r2, [pc, #80]	; (800497c <HAL_DMA_IRQHandler+0xcb0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d128      	bne.n	8004980 <HAL_DMA_IRQHandler+0xcb4>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0214 	bic.w	r2, r2, #20
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e027      	b.n	8004990 <HAL_DMA_IRQHandler+0xcc4>
 8004940:	40020010 	.word	0x40020010
 8004944:	40020028 	.word	0x40020028
 8004948:	40020040 	.word	0x40020040
 800494c:	40020058 	.word	0x40020058
 8004950:	40020070 	.word	0x40020070
 8004954:	40020088 	.word	0x40020088
 8004958:	400200a0 	.word	0x400200a0
 800495c:	400200b8 	.word	0x400200b8
 8004960:	40020410 	.word	0x40020410
 8004964:	40020428 	.word	0x40020428
 8004968:	40020440 	.word	0x40020440
 800496c:	40020458 	.word	0x40020458
 8004970:	40020470 	.word	0x40020470
 8004974:	40020488 	.word	0x40020488
 8004978:	400204a0 	.word	0x400204a0
 800497c:	400204b8 	.word	0x400204b8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 020a 	bic.w	r2, r2, #10
 800498e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8097 	beq.w	8004ad8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049b2:	e091      	b.n	8004ad8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	2208      	movs	r2, #8
 80049be:	409a      	lsls	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8088 	beq.w	8004ada <HAL_DMA_IRQHandler+0xe0e>
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8082 	beq.w	8004ada <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a41      	ldr	r2, [pc, #260]	; (8004ae0 <HAL_DMA_IRQHandler+0xe14>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d04a      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a3f      	ldr	r2, [pc, #252]	; (8004ae4 <HAL_DMA_IRQHandler+0xe18>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d045      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a3e      	ldr	r2, [pc, #248]	; (8004ae8 <HAL_DMA_IRQHandler+0xe1c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d040      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a3c      	ldr	r2, [pc, #240]	; (8004aec <HAL_DMA_IRQHandler+0xe20>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d03b      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <HAL_DMA_IRQHandler+0xe24>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d036      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a39      	ldr	r2, [pc, #228]	; (8004af4 <HAL_DMA_IRQHandler+0xe28>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d031      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a38      	ldr	r2, [pc, #224]	; (8004af8 <HAL_DMA_IRQHandler+0xe2c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d02c      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a36      	ldr	r2, [pc, #216]	; (8004afc <HAL_DMA_IRQHandler+0xe30>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d027      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a35      	ldr	r2, [pc, #212]	; (8004b00 <HAL_DMA_IRQHandler+0xe34>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d022      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a33      	ldr	r2, [pc, #204]	; (8004b04 <HAL_DMA_IRQHandler+0xe38>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01d      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a32      	ldr	r2, [pc, #200]	; (8004b08 <HAL_DMA_IRQHandler+0xe3c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d018      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a30      	ldr	r2, [pc, #192]	; (8004b0c <HAL_DMA_IRQHandler+0xe40>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a2f      	ldr	r2, [pc, #188]	; (8004b10 <HAL_DMA_IRQHandler+0xe44>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2d      	ldr	r2, [pc, #180]	; (8004b14 <HAL_DMA_IRQHandler+0xe48>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2c      	ldr	r2, [pc, #176]	; (8004b18 <HAL_DMA_IRQHandler+0xe4c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xdaa>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <HAL_DMA_IRQHandler+0xe50>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d108      	bne.n	8004a88 <HAL_DMA_IRQHandler+0xdbc>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 021c 	bic.w	r2, r2, #28
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e007      	b.n	8004a98 <HAL_DMA_IRQHandler+0xdcc>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 020e 	bic.w	r2, r2, #14
 8004a96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
 8004ace:	e004      	b.n	8004ada <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ad0:	bf00      	nop
 8004ad2:	e002      	b.n	8004ada <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ad4:	bf00      	nop
 8004ad6:	e000      	b.n	8004ada <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ad8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40020010 	.word	0x40020010
 8004ae4:	40020028 	.word	0x40020028
 8004ae8:	40020040 	.word	0x40020040
 8004aec:	40020058 	.word	0x40020058
 8004af0:	40020070 	.word	0x40020070
 8004af4:	40020088 	.word	0x40020088
 8004af8:	400200a0 	.word	0x400200a0
 8004afc:	400200b8 	.word	0x400200b8
 8004b00:	40020410 	.word	0x40020410
 8004b04:	40020428 	.word	0x40020428
 8004b08:	40020440 	.word	0x40020440
 8004b0c:	40020458 	.word	0x40020458
 8004b10:	40020470 	.word	0x40020470
 8004b14:	40020488 	.word	0x40020488
 8004b18:	400204a0 	.word	0x400204a0
 8004b1c:	400204b8 	.word	0x400204b8

08004b20 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e04f      	b.n	8004bd2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f84e 	bl	8004be8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b20      	ldr	r3, [pc, #128]	; (8004bdc <HAL_DMA2D_Init+0xbc>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6851      	ldr	r1, [r2, #4]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	69d2      	ldr	r2, [r2, #28]
 8004b66:	4311      	orrs	r1, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <HAL_DMA2D_Init+0xc0>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6891      	ldr	r1, [r2, #8]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6992      	ldr	r2, [r2, #24]
 8004b82:	4311      	orrs	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <HAL_DMA2D_Init+0xc4>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68d1      	ldr	r1, [r2, #12]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	051a      	lsls	r2, r3, #20
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	055b      	lsls	r3, r3, #21
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	fff8ffbf 	.word	0xfff8ffbf
 8004be0:	fffffef8 	.word	0xfffffef8
 8004be4:	ffff0000 	.word	0xffff0000

08004be8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_DMA2D_Start+0x1c>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e018      	b.n	8004c4a <HAL_DMA2D_Start+0x4e>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f9a4 	bl	8004f80 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d056      	beq.n	8004d1c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c6e:	f7fe f96d 	bl	8002f4c <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004c74:	e04b      	b.n	8004d0e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d023      	beq.n	8004cd0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c96:	f043 0202 	orr.w	r2, r3, #2
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cac:	f043 0201 	orr.w	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2221      	movs	r2, #33	; 0x21
 8004cba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0a5      	b.n	8004e1c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d01a      	beq.n	8004d0e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cd8:	f7fe f938 	bl	8002f4c <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d302      	bcc.n	8004cee <HAL_DMA2D_PollForTransfer+0x9c>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e086      	b.n	8004e1c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0ac      	beq.n	8004c76 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d061      	beq.n	8004e02 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d3e:	f7fe f905 	bl	8002f4c <HAL_GetTick>
 8004d42:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004d44:	e056      	b.n	8004df4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02e      	beq.n	8004db6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d7c:	f043 0202 	orr.w	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d92:	f043 0201 	orr.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2229      	movs	r2, #41	; 0x29
 8004da0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e032      	b.n	8004e1c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d01a      	beq.n	8004df4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fe f8c5 	bl	8002f4c <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <HAL_DMA2D_PollForTransfer+0x182>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10f      	bne.n	8004df4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2203      	movs	r2, #3
 8004de4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e013      	b.n	8004e1c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0a1      	beq.n	8004d46 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2212      	movs	r2, #18
 8004e08:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_DMA2D_ConfigLayer+0x24>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e092      	b.n	8004f6e <HAL_DMA2D_ConfigLayer+0x14a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	1a9b      	subs	r3, r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	3328      	adds	r3, #40	; 0x28
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4413      	add	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004e7c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004e88:	4b3c      	ldr	r3, [pc, #240]	; (8004f7c <HAL_DMA2D_ConfigLayer+0x158>)
 8004e8a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b0a      	cmp	r3, #10
 8004e92:	d003      	beq.n	8004e9c <HAL_DMA2D_ConfigLayer+0x78>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b09      	cmp	r3, #9
 8004e9a:	d107      	bne.n	8004eac <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	e005      	b.n	8004eb8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d120      	bne.n	8004f00 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	ea02 0103 	and.w	r1, r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b0a      	cmp	r3, #10
 8004ee6:	d003      	beq.n	8004ef0 <HAL_DMA2D_ConfigLayer+0xcc>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b09      	cmp	r3, #9
 8004eee:	d135      	bne.n	8004f5c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004efc:	629a      	str	r2, [r3, #40]	; 0x28
 8004efe:	e02d      	b.n	8004f5c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b0b      	cmp	r3, #11
 8004f06:	d109      	bne.n	8004f1c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	049b      	lsls	r3, r3, #18
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8004f1a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69da      	ldr	r2, [r3, #28]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	43db      	mvns	r3, r3
 8004f26:	ea02 0103 	and.w	r1, r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b0a      	cmp	r3, #10
 8004f44:	d003      	beq.n	8004f4e <HAL_DMA2D_ConfigLayer+0x12a>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b09      	cmp	r3, #9
 8004f4c:	d106      	bne.n	8004f5c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f5a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	ff33000f 	.word	0xff33000f

08004f80 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b08b      	sub	sp, #44	; 0x2c
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	041a      	lsls	r2, r3, #16
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fb8:	d174      	bne.n	80050a4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004fc0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fc8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fd0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d108      	bne.n	8004ff2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff0:	e053      	b.n	800509a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d106      	bne.n	8005008 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	e048      	b.n	800509a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d111      	bne.n	8005034 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	0cdb      	lsrs	r3, r3, #19
 8005014:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	0a9b      	lsrs	r3, r3, #10
 800501a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	08db      	lsrs	r3, r3, #3
 8005020:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	02db      	lsls	r3, r3, #11
 800502a:	4313      	orrs	r3, r2
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
 8005032:	e032      	b.n	800509a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d117      	bne.n	800506c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	0fdb      	lsrs	r3, r3, #31
 8005040:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	0cdb      	lsrs	r3, r3, #19
 8005046:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	0adb      	lsrs	r3, r3, #11
 800504c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	08db      	lsrs	r3, r3, #3
 8005052:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	029b      	lsls	r3, r3, #10
 800505c:	431a      	orrs	r2, r3
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	03db      	lsls	r3, r3, #15
 8005062:	4313      	orrs	r3, r2
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
 800506a:	e016      	b.n	800509a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	0f1b      	lsrs	r3, r3, #28
 8005070:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	0d1b      	lsrs	r3, r3, #20
 8005076:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	0b1b      	lsrs	r3, r3, #12
 800507c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	011a      	lsls	r2, r3, #4
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	021b      	lsls	r3, r3, #8
 800508c:	431a      	orrs	r2, r3
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	031b      	lsls	r3, r3, #12
 8005092:	4313      	orrs	r3, r2
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80050a2:	e00d      	b.n	80050c0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050ac:	d104      	bne.n	80050b8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	615a      	str	r2, [r3, #20]
}
 80050b6:	e003      	b.n	80050c0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	60da      	str	r2, [r3, #12]
}
 80050c0:	bf00      	nop
 80050c2:	372c      	adds	r7, #44	; 0x2c
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	460b      	mov	r3, r1
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e00a      	b.n	80050fe <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	605a      	str	r2, [r3, #4]
      break;
 80050f4:	e002      	b.n	80050fc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	75fb      	strb	r3, [r7, #23]
      break;
 80050fa:	bf00      	nop
  }

  return status;
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e003      	b.n	8005126 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	2201      	movs	r2, #1
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	011a      	lsls	r2, r3, #4
 800515c:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <HAL_EXTI_IRQHandler+0x5c>)
 800515e:	4413      	add	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4013      	ands	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4798      	blx	r3
    }
  }
}
 8005186:	bf00      	nop
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	58000088 	.word	0x58000088

08005194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005194:	b480      	push	{r7}
 8005196:	b089      	sub	sp, #36	; 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80051a2:	4b89      	ldr	r3, [pc, #548]	; (80053c8 <HAL_GPIO_Init+0x234>)
 80051a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051a6:	e194      	b.n	80054d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	2101      	movs	r1, #1
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	fa01 f303 	lsl.w	r3, r1, r3
 80051b4:	4013      	ands	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8186 	beq.w	80054cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d005      	beq.n	80051d8 <HAL_GPIO_Init+0x44>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d130      	bne.n	800523a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800520e:	2201      	movs	r2, #1
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 0201 	and.w	r2, r3, #1
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b03      	cmp	r3, #3
 8005244:	d017      	beq.n	8005276 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	2203      	movs	r2, #3
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4313      	orrs	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d123      	bne.n	80052ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	08da      	lsrs	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3208      	adds	r2, #8
 800528a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	220f      	movs	r2, #15
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	08da      	lsrs	r2, r3, #3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3208      	adds	r2, #8
 80052c4:	69b9      	ldr	r1, [r7, #24]
 80052c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	2203      	movs	r2, #3
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	43db      	mvns	r3, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0203 	and.w	r2, r3, #3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80e0 	beq.w	80054cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800530c:	4b2f      	ldr	r3, [pc, #188]	; (80053cc <HAL_GPIO_Init+0x238>)
 800530e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005312:	4a2e      	ldr	r2, [pc, #184]	; (80053cc <HAL_GPIO_Init+0x238>)
 8005314:	f043 0302 	orr.w	r3, r3, #2
 8005318:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800531c:	4b2b      	ldr	r3, [pc, #172]	; (80053cc <HAL_GPIO_Init+0x238>)
 800531e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800532a:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <HAL_GPIO_Init+0x23c>)
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	3302      	adds	r3, #2
 8005332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	220f      	movs	r2, #15
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a20      	ldr	r2, [pc, #128]	; (80053d4 <HAL_GPIO_Init+0x240>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d052      	beq.n	80053fc <HAL_GPIO_Init+0x268>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1f      	ldr	r2, [pc, #124]	; (80053d8 <HAL_GPIO_Init+0x244>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d031      	beq.n	80053c2 <HAL_GPIO_Init+0x22e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1e      	ldr	r2, [pc, #120]	; (80053dc <HAL_GPIO_Init+0x248>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d02b      	beq.n	80053be <HAL_GPIO_Init+0x22a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a1d      	ldr	r2, [pc, #116]	; (80053e0 <HAL_GPIO_Init+0x24c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d025      	beq.n	80053ba <HAL_GPIO_Init+0x226>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_GPIO_Init+0x250>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d01f      	beq.n	80053b6 <HAL_GPIO_Init+0x222>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <HAL_GPIO_Init+0x254>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d019      	beq.n	80053b2 <HAL_GPIO_Init+0x21e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <HAL_GPIO_Init+0x258>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <HAL_GPIO_Init+0x21a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_GPIO_Init+0x25c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00d      	beq.n	80053aa <HAL_GPIO_Init+0x216>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <HAL_GPIO_Init+0x260>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d007      	beq.n	80053a6 <HAL_GPIO_Init+0x212>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <HAL_GPIO_Init+0x264>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d101      	bne.n	80053a2 <HAL_GPIO_Init+0x20e>
 800539e:	2309      	movs	r3, #9
 80053a0:	e02d      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053a2:	230a      	movs	r3, #10
 80053a4:	e02b      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053a6:	2308      	movs	r3, #8
 80053a8:	e029      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053aa:	2307      	movs	r3, #7
 80053ac:	e027      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053ae:	2306      	movs	r3, #6
 80053b0:	e025      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053b2:	2305      	movs	r3, #5
 80053b4:	e023      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053b6:	2304      	movs	r3, #4
 80053b8:	e021      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053ba:	2303      	movs	r3, #3
 80053bc:	e01f      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053be:	2302      	movs	r3, #2
 80053c0:	e01d      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e01b      	b.n	80053fe <HAL_GPIO_Init+0x26a>
 80053c6:	bf00      	nop
 80053c8:	58000080 	.word	0x58000080
 80053cc:	58024400 	.word	0x58024400
 80053d0:	58000400 	.word	0x58000400
 80053d4:	58020000 	.word	0x58020000
 80053d8:	58020400 	.word	0x58020400
 80053dc:	58020800 	.word	0x58020800
 80053e0:	58020c00 	.word	0x58020c00
 80053e4:	58021000 	.word	0x58021000
 80053e8:	58021400 	.word	0x58021400
 80053ec:	58021800 	.word	0x58021800
 80053f0:	58021c00 	.word	0x58021c00
 80053f4:	58022000 	.word	0x58022000
 80053f8:	58022400 	.word	0x58022400
 80053fc:	2300      	movs	r3, #0
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	f002 0203 	and.w	r2, r2, #3
 8005404:	0092      	lsls	r2, r2, #2
 8005406:	4093      	lsls	r3, r2
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4313      	orrs	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800540e:	4938      	ldr	r1, [pc, #224]	; (80054f0 <HAL_GPIO_Init+0x35c>)
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	3302      	adds	r3, #2
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	43db      	mvns	r3, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4013      	ands	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	43db      	mvns	r3, r3
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	4013      	ands	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	43db      	mvns	r3, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	3301      	adds	r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f47f ae63 	bne.w	80051a8 <HAL_GPIO_Init+0x14>
  }
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	3724      	adds	r7, #36	; 0x24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	58000400 	.word	0x58000400

080054f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	887b      	ldrh	r3, [r7, #2]
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800550c:	2301      	movs	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	e001      	b.n	8005516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
 8005530:	4613      	mov	r3, r2
 8005532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005534:	787b      	ldrb	r3, [r7, #1]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800553a:	887a      	ldrh	r2, [r7, #2]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005540:	e003      	b.n	800554a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005542:	887b      	ldrh	r3, [r7, #2]
 8005544:	041a      	lsls	r2, r3, #16
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	619a      	str	r2, [r3, #24]
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e07f      	b.n	800566a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f87a 	bl	8005678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2224      	movs	r2, #36	; 0x24
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d107      	bne.n	80055d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	e006      	b.n	80055e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80055de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d104      	bne.n	80055f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6859      	ldr	r1, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <HAL_I2C_Init+0x11c>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69d9      	ldr	r1, [r3, #28]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1a      	ldr	r2, [r3, #32]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	02008000 	.word	0x02008000

08005678 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	461a      	mov	r2, r3
 800569a:	4603      	mov	r3, r0
 800569c:	817b      	strh	r3, [r7, #10]
 800569e:	460b      	mov	r3, r1
 80056a0:	813b      	strh	r3, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	f040 80fd 	bne.w	80058ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_I2C_Mem_Read+0x34>
 80056ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d105      	bne.n	80056cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0f1      	b.n	80058b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_I2C_Mem_Read+0x4e>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e0ea      	b.n	80058b0 <HAL_I2C_Mem_Read+0x224>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056e2:	f7fd fc33 	bl	8002f4c <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	2319      	movs	r3, #25
 80056ee:	2201      	movs	r2, #1
 80056f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f975 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0d5      	b.n	80058b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2222      	movs	r2, #34	; 0x22
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2240      	movs	r2, #64	; 0x40
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a3a      	ldr	r2, [r7, #32]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800572c:	88f8      	ldrh	r0, [r7, #6]
 800572e:	893a      	ldrh	r2, [r7, #8]
 8005730:	8979      	ldrh	r1, [r7, #10]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	4603      	mov	r3, r0
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f8d9 	bl	80058f4 <I2C_RequestMemoryRead>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0ad      	b.n	80058b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	2bff      	cmp	r3, #255	; 0xff
 800575c:	d90e      	bls.n	800577c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005768:	b2da      	uxtb	r2, r3
 800576a:	8979      	ldrh	r1, [r7, #10]
 800576c:	4b52      	ldr	r3, [pc, #328]	; (80058b8 <HAL_I2C_Mem_Read+0x22c>)
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 faef 	bl	8005d58 <I2C_TransferConfig>
 800577a:	e00f      	b.n	800579c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578a:	b2da      	uxtb	r2, r3
 800578c:	8979      	ldrh	r1, [r7, #10]
 800578e:	4b4a      	ldr	r3, [pc, #296]	; (80058b8 <HAL_I2C_Mem_Read+0x22c>)
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fade 	bl	8005d58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2200      	movs	r2, #0
 80057a4:	2104      	movs	r1, #4
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f91c 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07c      	b.n	80058b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d034      	beq.n	800585c <HAL_I2C_Mem_Read+0x1d0>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d130      	bne.n	800585c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	2200      	movs	r2, #0
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f8ed 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e04d      	b.n	80058b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2bff      	cmp	r3, #255	; 0xff
 800581c:	d90e      	bls.n	800583c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	22ff      	movs	r2, #255	; 0xff
 8005822:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005828:	b2da      	uxtb	r2, r3
 800582a:	8979      	ldrh	r1, [r7, #10]
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fa8f 	bl	8005d58 <I2C_TransferConfig>
 800583a:	e00f      	b.n	800585c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584a:	b2da      	uxtb	r2, r3
 800584c:	8979      	ldrh	r1, [r7, #10]
 800584e:	2300      	movs	r3, #0
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fa7e 	bl	8005d58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d19a      	bne.n	800579c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f950 	bl	8005b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e01a      	b.n	80058b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2220      	movs	r2, #32
 8005880:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6859      	ldr	r1, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <HAL_I2C_Mem_Read+0x230>)
 800588e:	400b      	ands	r3, r1
 8005890:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	80002400 	.word	0x80002400
 80058bc:	fe00e800 	.word	0xfe00e800

080058c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ce:	b2db      	uxtb	r3, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	461a      	mov	r2, r3
 8005902:	4603      	mov	r3, r0
 8005904:	817b      	strh	r3, [r7, #10]
 8005906:	460b      	mov	r3, r1
 8005908:	813b      	strh	r3, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	8979      	ldrh	r1, [r7, #10]
 8005914:	4b20      	ldr	r3, [pc, #128]	; (8005998 <I2C_RequestMemoryRead+0xa4>)
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	2300      	movs	r3, #0
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fa1c 	bl	8005d58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	69b9      	ldr	r1, [r7, #24]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f8ac 	bl	8005a82 <I2C_WaitOnTXISFlagUntilTimeout>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e02c      	b.n	800598e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800593a:	893b      	ldrh	r3, [r7, #8]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	629a      	str	r2, [r3, #40]	; 0x28
 8005944:	e015      	b.n	8005972 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005946:	893b      	ldrh	r3, [r7, #8]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	b29b      	uxth	r3, r3
 800594c:	b2da      	uxtb	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	69b9      	ldr	r1, [r7, #24]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f892 	bl	8005a82 <I2C_WaitOnTXISFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e012      	b.n	800598e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005968:	893b      	ldrh	r3, [r7, #8]
 800596a:	b2da      	uxtb	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2200      	movs	r2, #0
 800597a:	2140      	movs	r1, #64	; 0x40
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f831 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	80002000 	.word	0x80002000

0800599c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d103      	bne.n	80059ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d007      	beq.n	80059d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	619a      	str	r2, [r3, #24]
  }
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f4:	e031      	b.n	8005a5a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d02d      	beq.n	8005a5a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fe:	f7fd faa5 	bl	8002f4c <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d302      	bcc.n	8005a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d122      	bne.n	8005a5a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d113      	bne.n	8005a5a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	f043 0220 	orr.w	r2, r3, #32
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e00f      	b.n	8005a7a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4013      	ands	r3, r2
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	bf0c      	ite	eq
 8005a6a:	2301      	moveq	r3, #1
 8005a6c:	2300      	movne	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d0be      	beq.n	80059f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a8e:	e033      	b.n	8005af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f87f 	bl	8005b98 <I2C_IsErrorOccurred>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e031      	b.n	8005b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d025      	beq.n	8005af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aac:	f7fd fa4e 	bl	8002f4c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d11a      	bne.n	8005af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d013      	beq.n	8005af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	f043 0220 	orr.w	r2, r3, #32
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e007      	b.n	8005b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d1c4      	bne.n	8005a90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b1c:	e02f      	b.n	8005b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 f838 	bl	8005b98 <I2C_IsErrorOccurred>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e02d      	b.n	8005b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b32:	f7fd fa0b 	bl	8002f4c <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d302      	bcc.n	8005b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d11a      	bne.n	8005b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0320 	and.w	r3, r3, #32
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d013      	beq.n	8005b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	f043 0220 	orr.w	r2, r3, #32
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e007      	b.n	8005b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d1c8      	bne.n	8005b1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d068      	beq.n	8005c96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2210      	movs	r2, #16
 8005bca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bcc:	e049      	b.n	8005c62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d045      	beq.n	8005c62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bd6:	f7fd f9b9 	bl	8002f4c <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <I2C_IsErrorOccurred+0x54>
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d13a      	bne.n	8005c62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0e:	d121      	bne.n	8005c54 <I2C_IsErrorOccurred+0xbc>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c16:	d01d      	beq.n	8005c54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c18:	7cfb      	ldrb	r3, [r7, #19]
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d01a      	beq.n	8005c54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c2e:	f7fd f98d 	bl	8002f4c <HAL_GetTick>
 8005c32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c34:	e00e      	b.n	8005c54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c36:	f7fd f989 	bl	8002f4c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b19      	cmp	r3, #25
 8005c42:	d907      	bls.n	8005c54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	f043 0320 	orr.w	r3, r3, #32
 8005c4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005c52:	e006      	b.n	8005c62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d1e9      	bne.n	8005c36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d003      	beq.n	8005c78 <I2C_IsErrorOccurred+0xe0>
 8005c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0aa      	beq.n	8005bce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2220      	movs	r2, #32
 8005c86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	f043 0304 	orr.w	r3, r3, #4
 8005c8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	f043 0308 	orr.w	r3, r3, #8
 8005cd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	f043 0302 	orr.w	r3, r3, #2
 8005cf2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01c      	beq.n	8005d46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f7ff fe45 	bl	800599c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6859      	ldr	r1, [r3, #4]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <I2C_IsErrorOccurred+0x1bc>)
 8005d1e:	400b      	ands	r3, r1
 8005d20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3728      	adds	r7, #40	; 0x28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	fe00e800 	.word	0xfe00e800

08005d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	607b      	str	r3, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	817b      	strh	r3, [r7, #10]
 8005d66:	4613      	mov	r3, r2
 8005d68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d6a:	897b      	ldrh	r3, [r7, #10]
 8005d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d70:	7a7b      	ldrb	r3, [r7, #9]
 8005d72:	041b      	lsls	r3, r3, #16
 8005d74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	0d5b      	lsrs	r3, r3, #21
 8005d92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d96:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <I2C_TransferConfig+0x60>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	ea02 0103 	and.w	r1, r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	03ff63ff 	.word	0x03ff63ff

08005dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d138      	bne.n	8005e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e032      	b.n	8005e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2224      	movs	r2, #36	; 0x24
 8005dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6819      	ldr	r1, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e000      	b.n	8005e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
  }
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d139      	bne.n	8005edc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e033      	b.n	8005ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2224      	movs	r2, #36	; 0x24
 8005e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ea4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e0bf      	b.n	800607e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8ba 	bl	800608c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6999      	ldr	r1, [r3, #24]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6899      	ldr	r1, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	4b4a      	ldr	r3, [pc, #296]	; (8006088 <HAL_LTDC_Init+0x19c>)
 8005f60:	400b      	ands	r3, r1
 8005f62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	041b      	lsls	r3, r3, #16
 8005f6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6899      	ldr	r1, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68d9      	ldr	r1, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4b3e      	ldr	r3, [pc, #248]	; (8006088 <HAL_LTDC_Init+0x19c>)
 8005f8e:	400b      	ands	r3, r1
 8005f90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68d9      	ldr	r1, [r3, #12]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a1a      	ldr	r2, [r3, #32]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6919      	ldr	r1, [r3, #16]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	4b33      	ldr	r3, [pc, #204]	; (8006088 <HAL_LTDC_Init+0x19c>)
 8005fbc:	400b      	ands	r3, r1
 8005fbe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6919      	ldr	r1, [r3, #16]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6959      	ldr	r1, [r3, #20]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b27      	ldr	r3, [pc, #156]	; (8006088 <HAL_LTDC_Init+0x19c>)
 8005fea:	400b      	ands	r3, r1
 8005fec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	041b      	lsls	r3, r3, #16
 8005ff4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6959      	ldr	r1, [r3, #20]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	430a      	orrs	r2, r1
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0206 	orr.w	r2, r2, #6
 800605a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	f000f800 	.word	0xf000f800

0800608c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060a0:	b5b0      	push	{r4, r5, r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_LTDC_ConfigLayer+0x1a>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e02c      	b.n	8006114 <HAL_LTDC_ConfigLayer+0x74>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2202      	movs	r2, #2
 80060c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2134      	movs	r1, #52	; 0x34
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	4614      	mov	r4, r2
 80060de:	461d      	mov	r5, r3
 80060e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f811 	bl	800611c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2201      	movs	r2, #1
 8006100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bdb0      	pop	{r4, r5, r7, pc}

0800611c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800611c:	b480      	push	{r7}
 800611e:	b089      	sub	sp, #36	; 0x24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006138:	4413      	add	r3, r2
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	01db      	lsls	r3, r3, #7
 8006148:	4413      	add	r3, r2
 800614a:	3384      	adds	r3, #132	; 0x84
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	4611      	mov	r1, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	01d2      	lsls	r2, r2, #7
 8006158:	440a      	add	r2, r1
 800615a:	3284      	adds	r2, #132	; 0x84
 800615c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006160:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006172:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006174:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4619      	mov	r1, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	440b      	add	r3, r1
 8006182:	3384      	adds	r3, #132	; 0x84
 8006184:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800618a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800619a:	4413      	add	r3, r2
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	01db      	lsls	r3, r3, #7
 80061aa:	4413      	add	r3, r2
 80061ac:	3384      	adds	r3, #132	; 0x84
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	4611      	mov	r1, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	01d2      	lsls	r2, r2, #7
 80061ba:	440a      	add	r2, r1
 80061bc:	3284      	adds	r2, #132	; 0x84
 80061be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061d2:	4413      	add	r3, r2
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4619      	mov	r1, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	01db      	lsls	r3, r3, #7
 80061e0:	440b      	add	r3, r1
 80061e2:	3384      	adds	r3, #132	; 0x84
 80061e4:	4619      	mov	r1, r3
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	01db      	lsls	r3, r3, #7
 80061f6:	4413      	add	r3, r2
 80061f8:	3384      	adds	r3, #132	; 0x84
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	6812      	ldr	r2, [r2, #0]
 8006200:	4611      	mov	r1, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	01d2      	lsls	r2, r2, #7
 8006206:	440a      	add	r2, r1
 8006208:	3284      	adds	r2, #132	; 0x84
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	01db      	lsls	r3, r3, #7
 800621a:	4413      	add	r3, r2
 800621c:	3384      	adds	r3, #132	; 0x84
 800621e:	461a      	mov	r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006236:	041b      	lsls	r3, r3, #16
 8006238:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	061b      	lsls	r3, r3, #24
 8006240:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	01db      	lsls	r3, r3, #7
 800624c:	4413      	add	r3, r2
 800624e:	3384      	adds	r3, #132	; 0x84
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	01db      	lsls	r3, r3, #7
 800625c:	4413      	add	r3, r2
 800625e:	3384      	adds	r3, #132	; 0x84
 8006260:	461a      	mov	r2, r3
 8006262:	2300      	movs	r3, #0
 8006264:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800626c:	461a      	mov	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	431a      	orrs	r2, r3
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	431a      	orrs	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4619      	mov	r1, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	01db      	lsls	r3, r3, #7
 8006280:	440b      	add	r3, r1
 8006282:	3384      	adds	r3, #132	; 0x84
 8006284:	4619      	mov	r1, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	01db      	lsls	r3, r3, #7
 8006296:	4413      	add	r3, r2
 8006298:	3384      	adds	r3, #132	; 0x84
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	4611      	mov	r1, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	01d2      	lsls	r2, r2, #7
 80062a6:	440a      	add	r2, r1
 80062a8:	3284      	adds	r2, #132	; 0x84
 80062aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	01db      	lsls	r3, r3, #7
 80062ba:	4413      	add	r3, r2
 80062bc:	3384      	adds	r3, #132	; 0x84
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	01db      	lsls	r3, r3, #7
 80062d0:	4413      	add	r3, r2
 80062d2:	3384      	adds	r3, #132	; 0x84
 80062d4:	69da      	ldr	r2, [r3, #28]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4619      	mov	r1, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	01db      	lsls	r3, r3, #7
 80062e0:	440b      	add	r3, r1
 80062e2:	3384      	adds	r3, #132	; 0x84
 80062e4:	4619      	mov	r1, r3
 80062e6:	4b58      	ldr	r3, [pc, #352]	; (8006448 <LTDC_SetConfig+0x32c>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	68f9      	ldr	r1, [r7, #12]
 80062f6:	6809      	ldr	r1, [r1, #0]
 80062f8:	4608      	mov	r0, r1
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	01c9      	lsls	r1, r1, #7
 80062fe:	4401      	add	r1, r0
 8006300:	3184      	adds	r1, #132	; 0x84
 8006302:	4313      	orrs	r3, r2
 8006304:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	01db      	lsls	r3, r3, #7
 8006310:	4413      	add	r3, r2
 8006312:	3384      	adds	r3, #132	; 0x84
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	01db      	lsls	r3, r3, #7
 8006320:	4413      	add	r3, r2
 8006322:	3384      	adds	r3, #132	; 0x84
 8006324:	461a      	mov	r2, r3
 8006326:	2300      	movs	r3, #0
 8006328:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	01db      	lsls	r3, r3, #7
 8006334:	4413      	add	r3, r2
 8006336:	3384      	adds	r3, #132	; 0x84
 8006338:	461a      	mov	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d102      	bne.n	800634e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006348:	2304      	movs	r3, #4
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	e01b      	b.n	8006386 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d102      	bne.n	800635c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006356:	2303      	movs	r3, #3
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	e014      	b.n	8006386 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d00b      	beq.n	800637c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006368:	2b02      	cmp	r3, #2
 800636a:	d007      	beq.n	800637c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006370:	2b03      	cmp	r3, #3
 8006372:	d003      	beq.n	800637c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006378:	2b07      	cmp	r3, #7
 800637a:	d102      	bne.n	8006382 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800637c:	2302      	movs	r3, #2
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	e001      	b.n	8006386 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006382:	2301      	movs	r3, #1
 8006384:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	01db      	lsls	r3, r3, #7
 8006390:	4413      	add	r3, r2
 8006392:	3384      	adds	r3, #132	; 0x84
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	4611      	mov	r1, r2
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	01d2      	lsls	r2, r2, #7
 80063a0:	440a      	add	r2, r1
 80063a2:	3284      	adds	r2, #132	; 0x84
 80063a4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80063a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	fb02 f303 	mul.w	r3, r2, r3
 80063b4:	041a      	lsls	r2, r3, #16
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	6859      	ldr	r1, [r3, #4]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	1acb      	subs	r3, r1, r3
 80063c0:	69f9      	ldr	r1, [r7, #28]
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	3307      	adds	r3, #7
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	6809      	ldr	r1, [r1, #0]
 80063cc:	4608      	mov	r0, r1
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	01c9      	lsls	r1, r1, #7
 80063d2:	4401      	add	r1, r0
 80063d4:	3184      	adds	r1, #132	; 0x84
 80063d6:	4313      	orrs	r3, r2
 80063d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	4413      	add	r3, r2
 80063e6:	3384      	adds	r3, #132	; 0x84
 80063e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	440b      	add	r3, r1
 80063f6:	3384      	adds	r3, #132	; 0x84
 80063f8:	4619      	mov	r1, r3
 80063fa:	4b14      	ldr	r3, [pc, #80]	; (800644c <LTDC_SetConfig+0x330>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	01db      	lsls	r3, r3, #7
 800640a:	4413      	add	r3, r2
 800640c:	3384      	adds	r3, #132	; 0x84
 800640e:	461a      	mov	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	01db      	lsls	r3, r3, #7
 8006420:	4413      	add	r3, r2
 8006422:	3384      	adds	r3, #132	; 0x84
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	4611      	mov	r1, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	01d2      	lsls	r2, r2, #7
 8006430:	440a      	add	r2, r1
 8006432:	3284      	adds	r2, #132	; 0x84
 8006434:	f043 0301 	orr.w	r3, r3, #1
 8006438:	6013      	str	r3, [r2, #0]
}
 800643a:	bf00      	nop
 800643c:	3724      	adds	r7, #36	; 0x24
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	fffff8f8 	.word	0xfffff8f8
 800644c:	fffff800 	.word	0xfffff800

08006450 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006458:	f7fc fd78 	bl	8002f4c <HAL_GetTick>
 800645c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e03b      	b.n	80064e0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006488:	e00f      	b.n	80064aa <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800648a:	f7fc fd5f 	bl	8002f4c <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b05      	cmp	r3, #5
 8006496:	d908      	bls.n	80064aa <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2240      	movs	r2, #64	; 0x40
 800649c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2203      	movs	r2, #3
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e01a      	b.n	80064e0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e8      	bne.n	800648a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f9c1 	bl	8006840 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e048      	b.n	800658c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0201 	bic.w	r2, r2, #1
 8006508:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2200      	movs	r2, #0
 8006518:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2200      	movs	r2, #0
 8006530:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2200      	movs	r2, #0
 8006538:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2200      	movs	r2, #0
 8006540:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2200      	movs	r2, #0
 8006548:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2200      	movs	r2, #0
 8006558:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	221f      	movs	r2, #31
 8006560:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065a4:	4b91      	ldr	r3, [pc, #580]	; (80067ec <HAL_MDMA_IRQHandler+0x254>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a91      	ldr	r2, [pc, #580]	; (80067f0 <HAL_MDMA_IRQHandler+0x258>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	0a9b      	lsrs	r3, r3, #10
 80065b0:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	4b8e      	ldr	r3, [pc, #568]	; (80067f4 <HAL_MDMA_IRQHandler+0x25c>)
 80065ba:	4413      	add	r3, r2
 80065bc:	099b      	lsrs	r3, r3, #6
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2201      	movs	r2, #1
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80065ca:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4013      	ands	r3, r2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 812d 	beq.w	8006834 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d054      	beq.n	8006692 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d04d      	beq.n	8006692 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0202 	bic.w	r2, r2, #2
 8006604:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800661c:	f043 0201 	orr.w	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	669a      	str	r2, [r3, #104]	; 0x68
 8006624:	e005      	b.n	8006632 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800662a:	f043 0202 	orr.w	r2, r3, #2
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006640:	f043 0204 	orr.w	r2, r3, #4
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006656:	f043 0208 	orr.w	r2, r3, #8
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800666c:	f043 0210 	orr.w	r2, r3, #16
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006682:	f043 0220 	orr.w	r2, r3, #32
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2201      	movs	r2, #1
 8006690:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b00      	cmp	r3, #0
 800669e:	d012      	beq.n	80066c6 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2210      	movs	r2, #16
 80066b4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d012      	beq.n	80066fa <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2208      	movs	r2, #8
 80066e8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d012      	beq.n	800672e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2204      	movs	r2, #4
 800671c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d039      	beq.n	80067b0 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d032      	beq.n	80067b0 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8006758:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b04      	cmp	r3, #4
 8006764:	d110      	bne.n	8006788 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677a:	2b00      	cmp	r3, #0
 800677c:	d05c      	beq.n	8006838 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
        }
        return;
 8006786:	e057      	b.n	8006838 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2202      	movs	r2, #2
 800678e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d040      	beq.n	800683a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2204      	movs	r2, #4
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0201 	bic.w	r2, r2, #1
 80067ce:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d30d      	bcc.n	80067f8 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f2      	bne.n	80067d0 <HAL_MDMA_IRQHandler+0x238>
 80067ea:	e006      	b.n	80067fa <HAL_MDMA_IRQHandler+0x262>
 80067ec:	2400000c 	.word	0x2400000c
 80067f0:	1b4e81b5 	.word	0x1b4e81b5
 80067f4:	adffffc0 	.word	0xadffffc0
        break;
 80067f8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2203      	movs	r2, #3
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006818:	e003      	b.n	8006822 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3
 8006832:	e002      	b.n	800683a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8006838:	bf00      	nop
    }
  }
}
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68d9      	ldr	r1, [r3, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691a      	ldr	r2, [r3, #16]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	695a      	ldr	r2, [r3, #20]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006866:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8006872:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800687e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	3b01      	subs	r3, #1
 8006886:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8006888:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8006894:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8006896:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a0:	d107      	bne.n	80068b2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80068b0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068be:	2b00      	cmp	r3, #0
 80068c0:	da11      	bge.n	80068e6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695a      	ldr	r2, [r3, #20]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80068d0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d6:	425b      	negs	r3, r3
 80068d8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	b292      	uxth	r2, r2
 80068e2:	621a      	str	r2, [r3, #32]
 80068e4:	e006      	b.n	80068f4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ea:	461a      	mov	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	b292      	uxth	r2, r2
 80068f2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	da15      	bge.n	8006928 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695a      	ldr	r2, [r3, #20]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800690a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	425b      	negs	r3, r3
 8006912:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6a19      	ldr	r1, [r3, #32]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	041a      	lsls	r2, r3, #16
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	621a      	str	r2, [r3, #32]
 8006926:	e009      	b.n	800693c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6a19      	ldr	r1, [r3, #32]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	041a      	lsls	r2, r3, #16
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006944:	d006      	beq.n	8006954 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	629a      	str	r2, [r3, #40]	; 0x28
 8006952:	e003      	b.n	800695c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2200      	movs	r2, #0
 800695a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2200      	movs	r2, #0
 8006962:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006978:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <HAL_PWREx_ConfigSupply+0x70>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b04      	cmp	r3, #4
 8006982:	d00a      	beq.n	800699a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006984:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <HAL_PWREx_ConfigSupply+0x70>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	d001      	beq.n	8006996 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e01f      	b.n	80069d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e01d      	b.n	80069d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800699a:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <HAL_PWREx_ConfigSupply+0x70>)
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f023 0207 	bic.w	r2, r3, #7
 80069a2:	490f      	ldr	r1, [pc, #60]	; (80069e0 <HAL_PWREx_ConfigSupply+0x70>)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069aa:	f7fc facf 	bl	8002f4c <HAL_GetTick>
 80069ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069b0:	e009      	b.n	80069c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069b2:	f7fc facb 	bl	8002f4c <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069c0:	d901      	bls.n	80069c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e007      	b.n	80069d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069c6:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <HAL_PWREx_ConfigSupply+0x70>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d2:	d1ee      	bne.n	80069b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	58024800 	.word	0x58024800

080069e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08c      	sub	sp, #48	; 0x30
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f000 bc48 	b.w	8007288 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8088 	beq.w	8006b16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a06:	4b99      	ldr	r3, [pc, #612]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a10:	4b96      	ldr	r3, [pc, #600]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	2b10      	cmp	r3, #16
 8006a1a:	d007      	beq.n	8006a2c <HAL_RCC_OscConfig+0x48>
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1e:	2b18      	cmp	r3, #24
 8006a20:	d111      	bne.n	8006a46 <HAL_RCC_OscConfig+0x62>
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	f003 0303 	and.w	r3, r3, #3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d10c      	bne.n	8006a46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a2c:	4b8f      	ldr	r3, [pc, #572]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d06d      	beq.n	8006b14 <HAL_RCC_OscConfig+0x130>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d169      	bne.n	8006b14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f000 bc21 	b.w	8007288 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4e:	d106      	bne.n	8006a5e <HAL_RCC_OscConfig+0x7a>
 8006a50:	4b86      	ldr	r3, [pc, #536]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a85      	ldr	r2, [pc, #532]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	e02e      	b.n	8006abc <HAL_RCC_OscConfig+0xd8>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10c      	bne.n	8006a80 <HAL_RCC_OscConfig+0x9c>
 8006a66:	4b81      	ldr	r3, [pc, #516]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a80      	ldr	r2, [pc, #512]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	4b7e      	ldr	r3, [pc, #504]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a7d      	ldr	r2, [pc, #500]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e01d      	b.n	8006abc <HAL_RCC_OscConfig+0xd8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCC_OscConfig+0xc0>
 8006a8a:	4b78      	ldr	r3, [pc, #480]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a77      	ldr	r2, [pc, #476]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	4b75      	ldr	r3, [pc, #468]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a74      	ldr	r2, [pc, #464]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e00b      	b.n	8006abc <HAL_RCC_OscConfig+0xd8>
 8006aa4:	4b71      	ldr	r3, [pc, #452]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a70      	ldr	r2, [pc, #448]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	4b6e      	ldr	r3, [pc, #440]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a6d      	ldr	r2, [pc, #436]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d013      	beq.n	8006aec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fc fa42 	bl	8002f4c <HAL_GetTick>
 8006ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006acc:	f7fc fa3e 	bl	8002f4c <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b64      	cmp	r3, #100	; 0x64
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e3d4      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ade:	4b63      	ldr	r3, [pc, #396]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f0      	beq.n	8006acc <HAL_RCC_OscConfig+0xe8>
 8006aea:	e014      	b.n	8006b16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aec:	f7fc fa2e 	bl	8002f4c <HAL_GetTick>
 8006af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af4:	f7fc fa2a 	bl	8002f4c <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b64      	cmp	r3, #100	; 0x64
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e3c0      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b06:	4b59      	ldr	r3, [pc, #356]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f0      	bne.n	8006af4 <HAL_RCC_OscConfig+0x110>
 8006b12:	e000      	b.n	8006b16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80ca 	beq.w	8006cb8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b24:	4b51      	ldr	r3, [pc, #324]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b2e:	4b4f      	ldr	r3, [pc, #316]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <HAL_RCC_OscConfig+0x166>
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	2b18      	cmp	r3, #24
 8006b3e:	d156      	bne.n	8006bee <HAL_RCC_OscConfig+0x20a>
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d151      	bne.n	8006bee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b4a:	4b48      	ldr	r3, [pc, #288]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <HAL_RCC_OscConfig+0x17e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e392      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006b62:	4b42      	ldr	r3, [pc, #264]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 0219 	bic.w	r2, r3, #25
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	493f      	ldr	r1, [pc, #252]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b74:	f7fc f9ea 	bl	8002f4c <HAL_GetTick>
 8006b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b7c:	f7fc f9e6 	bl	8002f4c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e37c      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b8e:	4b37      	ldr	r3, [pc, #220]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b9a:	f7fc fa07 	bl	8002fac <HAL_GetREVID>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d817      	bhi.n	8006bd8 <HAL_RCC_OscConfig+0x1f4>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d108      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x1de>
 8006bb0:	4b2e      	ldr	r3, [pc, #184]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006bb8:	4a2c      	ldr	r2, [pc, #176]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bbe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bc0:	e07a      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc2:	4b2a      	ldr	r3, [pc, #168]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	031b      	lsls	r3, r3, #12
 8006bd0:	4926      	ldr	r1, [pc, #152]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bd6:	e06f      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd8:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	4921      	ldr	r1, [pc, #132]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bec:	e064      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d047      	beq.n	8006c86 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006bf6:	4b1d      	ldr	r3, [pc, #116]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f023 0219 	bic.w	r2, r3, #25
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	491a      	ldr	r1, [pc, #104]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fc f9a0 	bl	8002f4c <HAL_GetTick>
 8006c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c10:	f7fc f99c 	bl	8002f4c <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e332      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2e:	f7fc f9bd 	bl	8002fac <HAL_GetREVID>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d819      	bhi.n	8006c70 <HAL_RCC_OscConfig+0x28c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	d108      	bne.n	8006c56 <HAL_RCC_OscConfig+0x272>
 8006c44:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c4c:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c52:	6053      	str	r3, [r2, #4]
 8006c54:	e030      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2d4>
 8006c56:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	031b      	lsls	r3, r3, #12
 8006c64:	4901      	ldr	r1, [pc, #4]	; (8006c6c <HAL_RCC_OscConfig+0x288>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	604b      	str	r3, [r1, #4]
 8006c6a:	e025      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2d4>
 8006c6c:	58024400 	.word	0x58024400
 8006c70:	4b9a      	ldr	r3, [pc, #616]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	061b      	lsls	r3, r3, #24
 8006c7e:	4997      	ldr	r1, [pc, #604]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	604b      	str	r3, [r1, #4]
 8006c84:	e018      	b.n	8006cb8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c86:	4b95      	ldr	r3, [pc, #596]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a94      	ldr	r2, [pc, #592]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c92:	f7fc f95b 	bl	8002f4c <HAL_GetTick>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c9a:	f7fc f957 	bl	8002f4c <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e2ed      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cac:	4b8b      	ldr	r3, [pc, #556]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f0      	bne.n	8006c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 80a9 	beq.w	8006e18 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cc6:	4b85      	ldr	r3, [pc, #532]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cd0:	4b82      	ldr	r3, [pc, #520]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d007      	beq.n	8006cec <HAL_RCC_OscConfig+0x308>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b18      	cmp	r3, #24
 8006ce0:	d13a      	bne.n	8006d58 <HAL_RCC_OscConfig+0x374>
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d135      	bne.n	8006d58 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006cec:	4b7b      	ldr	r3, [pc, #492]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_RCC_OscConfig+0x320>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	2b80      	cmp	r3, #128	; 0x80
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e2c1      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d04:	f7fc f952 	bl	8002fac <HAL_GetREVID>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d817      	bhi.n	8006d42 <HAL_RCC_OscConfig+0x35e>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d108      	bne.n	8006d2c <HAL_RCC_OscConfig+0x348>
 8006d1a:	4b70      	ldr	r3, [pc, #448]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d22:	4a6e      	ldr	r2, [pc, #440]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d28:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d2a:	e075      	b.n	8006e18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d2c:	4b6b      	ldr	r3, [pc, #428]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	069b      	lsls	r3, r3, #26
 8006d3a:	4968      	ldr	r1, [pc, #416]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d40:	e06a      	b.n	8006e18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d42:	4b66      	ldr	r3, [pc, #408]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	061b      	lsls	r3, r3, #24
 8006d50:	4962      	ldr	r1, [pc, #392]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d56:	e05f      	b.n	8006e18 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d042      	beq.n	8006de6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d60:	4b5e      	ldr	r3, [pc, #376]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a5d      	ldr	r2, [pc, #372]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6c:	f7fc f8ee 	bl	8002f4c <HAL_GetTick>
 8006d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d72:	e008      	b.n	8006d86 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006d74:	f7fc f8ea 	bl	8002f4c <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e280      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d86:	4b55      	ldr	r3, [pc, #340]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f0      	beq.n	8006d74 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d92:	f7fc f90b 	bl	8002fac <HAL_GetREVID>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d817      	bhi.n	8006dd0 <HAL_RCC_OscConfig+0x3ec>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d108      	bne.n	8006dba <HAL_RCC_OscConfig+0x3d6>
 8006da8:	4b4c      	ldr	r3, [pc, #304]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006db0:	4a4a      	ldr	r2, [pc, #296]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006db2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006db6:	6053      	str	r3, [r2, #4]
 8006db8:	e02e      	b.n	8006e18 <HAL_RCC_OscConfig+0x434>
 8006dba:	4b48      	ldr	r3, [pc, #288]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	069b      	lsls	r3, r3, #26
 8006dc8:	4944      	ldr	r1, [pc, #272]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	604b      	str	r3, [r1, #4]
 8006dce:	e023      	b.n	8006e18 <HAL_RCC_OscConfig+0x434>
 8006dd0:	4b42      	ldr	r3, [pc, #264]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	061b      	lsls	r3, r3, #24
 8006dde:	493f      	ldr	r1, [pc, #252]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60cb      	str	r3, [r1, #12]
 8006de4:	e018      	b.n	8006e18 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006de6:	4b3d      	ldr	r3, [pc, #244]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a3c      	ldr	r2, [pc, #240]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df2:	f7fc f8ab 	bl	8002f4c <HAL_GetTick>
 8006df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006dfa:	f7fc f8a7 	bl	8002f4c <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e23d      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e0c:	4b33      	ldr	r3, [pc, #204]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1f0      	bne.n	8006dfa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d036      	beq.n	8006e92 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d019      	beq.n	8006e60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e2c:	4b2b      	ldr	r3, [pc, #172]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e30:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e38:	f7fc f888 	bl	8002f4c <HAL_GetTick>
 8006e3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e40:	f7fc f884 	bl	8002f4c <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e21a      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e52:	4b22      	ldr	r3, [pc, #136]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f0      	beq.n	8006e40 <HAL_RCC_OscConfig+0x45c>
 8006e5e:	e018      	b.n	8006e92 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e60:	4b1e      	ldr	r3, [pc, #120]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e64:	4a1d      	ldr	r2, [pc, #116]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e6c:	f7fc f86e 	bl	8002f4c <HAL_GetTick>
 8006e70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e74:	f7fc f86a 	bl	8002f4c <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e200      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e86:	4b15      	ldr	r3, [pc, #84]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1f0      	bne.n	8006e74 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d039      	beq.n	8006f12 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01c      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a0c      	ldr	r2, [pc, #48]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006eb0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006eb2:	f7fc f84b 	bl	8002f4c <HAL_GetTick>
 8006eb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006eb8:	e008      	b.n	8006ecc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eba:	f7fc f847 	bl	8002f4c <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d901      	bls.n	8006ecc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e1dd      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ecc:	4b03      	ldr	r3, [pc, #12]	; (8006edc <HAL_RCC_OscConfig+0x4f8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0f0      	beq.n	8006eba <HAL_RCC_OscConfig+0x4d6>
 8006ed8:	e01b      	b.n	8006f12 <HAL_RCC_OscConfig+0x52e>
 8006eda:	bf00      	nop
 8006edc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ee0:	4b9b      	ldr	r3, [pc, #620]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a9a      	ldr	r2, [pc, #616]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006eec:	f7fc f82e 	bl	8002f4c <HAL_GetTick>
 8006ef0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ef4:	f7fc f82a 	bl	8002f4c <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e1c0      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f06:	4b92      	ldr	r3, [pc, #584]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f0      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 8081 	beq.w	8007022 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f20:	4b8c      	ldr	r3, [pc, #560]	; (8007154 <HAL_RCC_OscConfig+0x770>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a8b      	ldr	r2, [pc, #556]	; (8007154 <HAL_RCC_OscConfig+0x770>)
 8006f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f2c:	f7fc f80e 	bl	8002f4c <HAL_GetTick>
 8006f30:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f34:	f7fc f80a 	bl	8002f4c <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b64      	cmp	r3, #100	; 0x64
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e1a0      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f46:	4b83      	ldr	r3, [pc, #524]	; (8007154 <HAL_RCC_OscConfig+0x770>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d106      	bne.n	8006f68 <HAL_RCC_OscConfig+0x584>
 8006f5a:	4b7d      	ldr	r3, [pc, #500]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5e:	4a7c      	ldr	r2, [pc, #496]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006f60:	f043 0301 	orr.w	r3, r3, #1
 8006f64:	6713      	str	r3, [r2, #112]	; 0x70
 8006f66:	e02d      	b.n	8006fc4 <HAL_RCC_OscConfig+0x5e0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10c      	bne.n	8006f8a <HAL_RCC_OscConfig+0x5a6>
 8006f70:	4b77      	ldr	r3, [pc, #476]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f74:	4a76      	ldr	r2, [pc, #472]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f7c:	4b74      	ldr	r3, [pc, #464]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f80:	4a73      	ldr	r2, [pc, #460]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006f82:	f023 0304 	bic.w	r3, r3, #4
 8006f86:	6713      	str	r3, [r2, #112]	; 0x70
 8006f88:	e01c      	b.n	8006fc4 <HAL_RCC_OscConfig+0x5e0>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	d10c      	bne.n	8006fac <HAL_RCC_OscConfig+0x5c8>
 8006f92:	4b6f      	ldr	r3, [pc, #444]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f96:	4a6e      	ldr	r2, [pc, #440]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006f98:	f043 0304 	orr.w	r3, r3, #4
 8006f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f9e:	4b6c      	ldr	r3, [pc, #432]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	4a6b      	ldr	r2, [pc, #428]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006faa:	e00b      	b.n	8006fc4 <HAL_RCC_OscConfig+0x5e0>
 8006fac:	4b68      	ldr	r3, [pc, #416]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb0:	4a67      	ldr	r2, [pc, #412]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006fb2:	f023 0301 	bic.w	r3, r3, #1
 8006fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb8:	4b65      	ldr	r3, [pc, #404]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbc:	4a64      	ldr	r2, [pc, #400]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006fbe:	f023 0304 	bic.w	r3, r3, #4
 8006fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d015      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fcc:	f7fb ffbe 	bl	8002f4c <HAL_GetTick>
 8006fd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fd2:	e00a      	b.n	8006fea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fd4:	f7fb ffba 	bl	8002f4c <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e14e      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fea:	4b59      	ldr	r3, [pc, #356]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0ee      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x5f0>
 8006ff6:	e014      	b.n	8007022 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff8:	f7fb ffa8 	bl	8002f4c <HAL_GetTick>
 8006ffc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ffe:	e00a      	b.n	8007016 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007000:	f7fb ffa4 	bl	8002f4c <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	f241 3288 	movw	r2, #5000	; 0x1388
 800700e:	4293      	cmp	r3, r2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e138      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007016:	4b4e      	ldr	r3, [pc, #312]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1ee      	bne.n	8007000 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 812d 	beq.w	8007286 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800702c:	4b48      	ldr	r3, [pc, #288]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007034:	2b18      	cmp	r3, #24
 8007036:	f000 80bd 	beq.w	80071b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	2b02      	cmp	r3, #2
 8007040:	f040 809e 	bne.w	8007180 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007044:	4b42      	ldr	r3, [pc, #264]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a41      	ldr	r2, [pc, #260]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 800704a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800704e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007050:	f7fb ff7c 	bl	8002f4c <HAL_GetTick>
 8007054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007058:	f7fb ff78 	bl	8002f4c <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e10e      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800706a:	4b39      	ldr	r3, [pc, #228]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f0      	bne.n	8007058 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007076:	4b36      	ldr	r3, [pc, #216]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800707a:	4b37      	ldr	r3, [pc, #220]	; (8007158 <HAL_RCC_OscConfig+0x774>)
 800707c:	4013      	ands	r3, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007086:	0112      	lsls	r2, r2, #4
 8007088:	430a      	orrs	r2, r1
 800708a:	4931      	ldr	r1, [pc, #196]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 800708c:	4313      	orrs	r3, r2
 800708e:	628b      	str	r3, [r1, #40]	; 0x28
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007094:	3b01      	subs	r3, #1
 8007096:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709e:	3b01      	subs	r3, #1
 80070a0:	025b      	lsls	r3, r3, #9
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	3b01      	subs	r3, #1
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	3b01      	subs	r3, #1
 80070ba:	061b      	lsls	r3, r3, #24
 80070bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070c0:	4923      	ldr	r1, [pc, #140]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80070c6:	4b22      	ldr	r3, [pc, #136]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070d2:	4b1f      	ldr	r3, [pc, #124]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 80070d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070d6:	4b21      	ldr	r3, [pc, #132]	; (800715c <HAL_RCC_OscConfig+0x778>)
 80070d8:	4013      	ands	r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070de:	00d2      	lsls	r2, r2, #3
 80070e0:	491b      	ldr	r1, [pc, #108]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070e6:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	f023 020c 	bic.w	r2, r3, #12
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	4917      	ldr	r1, [pc, #92]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070f8:	4b15      	ldr	r3, [pc, #84]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	f023 0202 	bic.w	r2, r3, #2
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007104:	4912      	ldr	r1, [pc, #72]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007106:	4313      	orrs	r3, r2
 8007108:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	4a10      	ldr	r2, [pc, #64]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007114:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007116:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	4a0d      	ldr	r2, [pc, #52]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 800711c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007120:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007122:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800712c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800712e:	4b08      	ldr	r3, [pc, #32]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	4a07      	ldr	r2, [pc, #28]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800713a:	4b05      	ldr	r3, [pc, #20]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a04      	ldr	r2, [pc, #16]	; (8007150 <HAL_RCC_OscConfig+0x76c>)
 8007140:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007146:	f7fb ff01 	bl	8002f4c <HAL_GetTick>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800714c:	e011      	b.n	8007172 <HAL_RCC_OscConfig+0x78e>
 800714e:	bf00      	nop
 8007150:	58024400 	.word	0x58024400
 8007154:	58024800 	.word	0x58024800
 8007158:	fffffc0c 	.word	0xfffffc0c
 800715c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007160:	f7fb fef4 	bl	8002f4c <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e08a      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007172:	4b47      	ldr	r3, [pc, #284]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0f0      	beq.n	8007160 <HAL_RCC_OscConfig+0x77c>
 800717e:	e082      	b.n	8007286 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007180:	4b43      	ldr	r3, [pc, #268]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a42      	ldr	r2, [pc, #264]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 8007186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800718a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fb fede 	bl	8002f4c <HAL_GetTick>
 8007190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007194:	f7fb feda 	bl	8002f4c <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e070      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071a6:	4b3a      	ldr	r3, [pc, #232]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0x7b0>
 80071b2:	e068      	b.n	8007286 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071b4:	4b36      	ldr	r3, [pc, #216]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071ba:	4b35      	ldr	r3, [pc, #212]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d031      	beq.n	800722c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f003 0203 	and.w	r2, r3, #3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d12a      	bne.n	800722c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	091b      	lsrs	r3, r3, #4
 80071da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d122      	bne.n	800722c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d11a      	bne.n	800722c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	0a5b      	lsrs	r3, r3, #9
 80071fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007202:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007204:	429a      	cmp	r2, r3
 8007206:	d111      	bne.n	800722c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	0c1b      	lsrs	r3, r3, #16
 800720c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007216:	429a      	cmp	r2, r3
 8007218:	d108      	bne.n	800722c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	0e1b      	lsrs	r3, r3, #24
 800721e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007226:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007228:	429a      	cmp	r2, r3
 800722a:	d001      	beq.n	8007230 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e02b      	b.n	8007288 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007230:	4b17      	ldr	r3, [pc, #92]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 8007232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007234:	08db      	lsrs	r3, r3, #3
 8007236:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800723a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d01f      	beq.n	8007286 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007246:	4b12      	ldr	r3, [pc, #72]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	4a11      	ldr	r2, [pc, #68]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 800724c:	f023 0301 	bic.w	r3, r3, #1
 8007250:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007252:	f7fb fe7b 	bl	8002f4c <HAL_GetTick>
 8007256:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007258:	bf00      	nop
 800725a:	f7fb fe77 	bl	8002f4c <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	4293      	cmp	r3, r2
 8007264:	d0f9      	beq.n	800725a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007266:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 8007268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800726a:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <HAL_RCC_OscConfig+0x8b0>)
 800726c:	4013      	ands	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007272:	00d2      	lsls	r2, r2, #3
 8007274:	4906      	ldr	r1, [pc, #24]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 8007276:	4313      	orrs	r3, r2
 8007278:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800727a:	4b05      	ldr	r3, [pc, #20]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	4a04      	ldr	r2, [pc, #16]	; (8007290 <HAL_RCC_OscConfig+0x8ac>)
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3730      	adds	r7, #48	; 0x30
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	58024400 	.word	0x58024400
 8007294:	ffff0007 	.word	0xffff0007

08007298 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e19c      	b.n	80075e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072ac:	4b8a      	ldr	r3, [pc, #552]	; (80074d8 <HAL_RCC_ClockConfig+0x240>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d910      	bls.n	80072dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ba:	4b87      	ldr	r3, [pc, #540]	; (80074d8 <HAL_RCC_ClockConfig+0x240>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f023 020f 	bic.w	r2, r3, #15
 80072c2:	4985      	ldr	r1, [pc, #532]	; (80074d8 <HAL_RCC_ClockConfig+0x240>)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ca:	4b83      	ldr	r3, [pc, #524]	; (80074d8 <HAL_RCC_ClockConfig+0x240>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 030f 	and.w	r3, r3, #15
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d001      	beq.n	80072dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e184      	b.n	80075e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d010      	beq.n	800730a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691a      	ldr	r2, [r3, #16]
 80072ec:	4b7b      	ldr	r3, [pc, #492]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d908      	bls.n	800730a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072f8:	4b78      	ldr	r3, [pc, #480]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	4975      	ldr	r1, [pc, #468]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007306:	4313      	orrs	r3, r2
 8007308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d010      	beq.n	8007338 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695a      	ldr	r2, [r3, #20]
 800731a:	4b70      	ldr	r3, [pc, #448]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007322:	429a      	cmp	r2, r3
 8007324:	d908      	bls.n	8007338 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007326:	4b6d      	ldr	r3, [pc, #436]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	496a      	ldr	r1, [pc, #424]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007334:	4313      	orrs	r3, r2
 8007336:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b00      	cmp	r3, #0
 8007342:	d010      	beq.n	8007366 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	699a      	ldr	r2, [r3, #24]
 8007348:	4b64      	ldr	r3, [pc, #400]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007350:	429a      	cmp	r2, r3
 8007352:	d908      	bls.n	8007366 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007354:	4b61      	ldr	r3, [pc, #388]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	495e      	ldr	r1, [pc, #376]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007362:	4313      	orrs	r3, r2
 8007364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b00      	cmp	r3, #0
 8007370:	d010      	beq.n	8007394 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	69da      	ldr	r2, [r3, #28]
 8007376:	4b59      	ldr	r3, [pc, #356]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800737e:	429a      	cmp	r2, r3
 8007380:	d908      	bls.n	8007394 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007382:	4b56      	ldr	r3, [pc, #344]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	4953      	ldr	r1, [pc, #332]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007390:	4313      	orrs	r3, r2
 8007392:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	4b4d      	ldr	r3, [pc, #308]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d908      	bls.n	80073c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073b0:	4b4a      	ldr	r3, [pc, #296]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	f023 020f 	bic.w	r2, r3, #15
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4947      	ldr	r1, [pc, #284]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d055      	beq.n	800747a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80073ce:	4b43      	ldr	r3, [pc, #268]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	4940      	ldr	r1, [pc, #256]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d107      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073e8:	4b3c      	ldr	r3, [pc, #240]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d121      	bne.n	8007438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0f6      	b.n	80075e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d107      	bne.n	8007410 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007400:	4b36      	ldr	r3, [pc, #216]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d115      	bne.n	8007438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e0ea      	b.n	80075e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d107      	bne.n	8007428 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007418:	4b30      	ldr	r3, [pc, #192]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007420:	2b00      	cmp	r3, #0
 8007422:	d109      	bne.n	8007438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e0de      	b.n	80075e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007428:	4b2c      	ldr	r3, [pc, #176]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0d6      	b.n	80075e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007438:	4b28      	ldr	r3, [pc, #160]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f023 0207 	bic.w	r2, r3, #7
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4925      	ldr	r1, [pc, #148]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007446:	4313      	orrs	r3, r2
 8007448:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800744a:	f7fb fd7f 	bl	8002f4c <HAL_GetTick>
 800744e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007450:	e00a      	b.n	8007468 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007452:	f7fb fd7b 	bl	8002f4c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007460:	4293      	cmp	r3, r2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e0be      	b.n	80075e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007468:	4b1c      	ldr	r3, [pc, #112]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	429a      	cmp	r2, r3
 8007478:	d1eb      	bne.n	8007452 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d010      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	4b14      	ldr	r3, [pc, #80]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	f003 030f 	and.w	r3, r3, #15
 8007492:	429a      	cmp	r2, r3
 8007494:	d208      	bcs.n	80074a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007496:	4b11      	ldr	r3, [pc, #68]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f023 020f 	bic.w	r2, r3, #15
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	490e      	ldr	r1, [pc, #56]	; (80074dc <HAL_RCC_ClockConfig+0x244>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074a8:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <HAL_RCC_ClockConfig+0x240>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d214      	bcs.n	80074e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074b6:	4b08      	ldr	r3, [pc, #32]	; (80074d8 <HAL_RCC_ClockConfig+0x240>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f023 020f 	bic.w	r2, r3, #15
 80074be:	4906      	ldr	r1, [pc, #24]	; (80074d8 <HAL_RCC_ClockConfig+0x240>)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c6:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <HAL_RCC_ClockConfig+0x240>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 030f 	and.w	r3, r3, #15
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d005      	beq.n	80074e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e086      	b.n	80075e6 <HAL_RCC_ClockConfig+0x34e>
 80074d8:	52002000 	.word	0x52002000
 80074dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d010      	beq.n	800750e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	4b3f      	ldr	r3, [pc, #252]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d208      	bcs.n	800750e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074fc:	4b3c      	ldr	r3, [pc, #240]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	4939      	ldr	r1, [pc, #228]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 800750a:	4313      	orrs	r3, r2
 800750c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d010      	beq.n	800753c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695a      	ldr	r2, [r3, #20]
 800751e:	4b34      	ldr	r3, [pc, #208]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007526:	429a      	cmp	r2, r3
 8007528:	d208      	bcs.n	800753c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800752a:	4b31      	ldr	r3, [pc, #196]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	492e      	ldr	r1, [pc, #184]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 8007538:	4313      	orrs	r3, r2
 800753a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b00      	cmp	r3, #0
 8007546:	d010      	beq.n	800756a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699a      	ldr	r2, [r3, #24]
 800754c:	4b28      	ldr	r3, [pc, #160]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007554:	429a      	cmp	r2, r3
 8007556:	d208      	bcs.n	800756a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007558:	4b25      	ldr	r3, [pc, #148]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	4922      	ldr	r1, [pc, #136]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 8007566:	4313      	orrs	r3, r2
 8007568:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0320 	and.w	r3, r3, #32
 8007572:	2b00      	cmp	r3, #0
 8007574:	d010      	beq.n	8007598 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69da      	ldr	r2, [r3, #28]
 800757a:	4b1d      	ldr	r3, [pc, #116]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007582:	429a      	cmp	r2, r3
 8007584:	d208      	bcs.n	8007598 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007586:	4b1a      	ldr	r3, [pc, #104]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4917      	ldr	r1, [pc, #92]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 8007594:	4313      	orrs	r3, r2
 8007596:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007598:	f000 f834 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 800759c:	4602      	mov	r2, r0
 800759e:	4b14      	ldr	r3, [pc, #80]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	0a1b      	lsrs	r3, r3, #8
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	4912      	ldr	r1, [pc, #72]	; (80075f4 <HAL_RCC_ClockConfig+0x35c>)
 80075aa:	5ccb      	ldrb	r3, [r1, r3]
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	fa22 f303 	lsr.w	r3, r2, r3
 80075b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075b6:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <HAL_RCC_ClockConfig+0x358>)
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	4a0d      	ldr	r2, [pc, #52]	; (80075f4 <HAL_RCC_ClockConfig+0x35c>)
 80075c0:	5cd3      	ldrb	r3, [r2, r3]
 80075c2:	f003 031f 	and.w	r3, r3, #31
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	fa22 f303 	lsr.w	r3, r2, r3
 80075cc:	4a0a      	ldr	r2, [pc, #40]	; (80075f8 <HAL_RCC_ClockConfig+0x360>)
 80075ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075d0:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <HAL_RCC_ClockConfig+0x364>)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80075d6:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <HAL_RCC_ClockConfig+0x368>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fb fc6c 	bl	8002eb8 <HAL_InitTick>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	58024400 	.word	0x58024400
 80075f4:	0800c638 	.word	0x0800c638
 80075f8:	24000010 	.word	0x24000010
 80075fc:	2400000c 	.word	0x2400000c
 8007600:	24000028 	.word	0x24000028

08007604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	; 0x24
 8007608:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800760a:	4bb3      	ldr	r3, [pc, #716]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007612:	2b18      	cmp	r3, #24
 8007614:	f200 8155 	bhi.w	80078c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007618:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <HAL_RCC_GetSysClockFreq+0x1c>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007685 	.word	0x08007685
 8007624:	080078c3 	.word	0x080078c3
 8007628:	080078c3 	.word	0x080078c3
 800762c:	080078c3 	.word	0x080078c3
 8007630:	080078c3 	.word	0x080078c3
 8007634:	080078c3 	.word	0x080078c3
 8007638:	080078c3 	.word	0x080078c3
 800763c:	080078c3 	.word	0x080078c3
 8007640:	080076ab 	.word	0x080076ab
 8007644:	080078c3 	.word	0x080078c3
 8007648:	080078c3 	.word	0x080078c3
 800764c:	080078c3 	.word	0x080078c3
 8007650:	080078c3 	.word	0x080078c3
 8007654:	080078c3 	.word	0x080078c3
 8007658:	080078c3 	.word	0x080078c3
 800765c:	080078c3 	.word	0x080078c3
 8007660:	080076b1 	.word	0x080076b1
 8007664:	080078c3 	.word	0x080078c3
 8007668:	080078c3 	.word	0x080078c3
 800766c:	080078c3 	.word	0x080078c3
 8007670:	080078c3 	.word	0x080078c3
 8007674:	080078c3 	.word	0x080078c3
 8007678:	080078c3 	.word	0x080078c3
 800767c:	080078c3 	.word	0x080078c3
 8007680:	080076b7 	.word	0x080076b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007684:	4b94      	ldr	r3, [pc, #592]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007690:	4b91      	ldr	r3, [pc, #580]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	08db      	lsrs	r3, r3, #3
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	4a90      	ldr	r2, [pc, #576]	; (80078dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
 80076a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80076a2:	e111      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80076a4:	4b8d      	ldr	r3, [pc, #564]	; (80078dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076a6:	61bb      	str	r3, [r7, #24]
      break;
 80076a8:	e10e      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80076aa:	4b8d      	ldr	r3, [pc, #564]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076ac:	61bb      	str	r3, [r7, #24]
      break;
 80076ae:	e10b      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80076b0:	4b8c      	ldr	r3, [pc, #560]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80076b2:	61bb      	str	r3, [r7, #24]
      break;
 80076b4:	e108      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076b6:	4b88      	ldr	r3, [pc, #544]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80076c0:	4b85      	ldr	r3, [pc, #532]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	091b      	lsrs	r3, r3, #4
 80076c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80076cc:	4b82      	ldr	r3, [pc, #520]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076d6:	4b80      	ldr	r3, [pc, #512]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	08db      	lsrs	r3, r3, #3
 80076dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	fb02 f303 	mul.w	r3, r2, r3
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 80e1 	beq.w	80078bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	f000 8083 	beq.w	8007808 <HAL_RCC_GetSysClockFreq+0x204>
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b02      	cmp	r3, #2
 8007706:	f200 80a1 	bhi.w	800784c <HAL_RCC_GetSysClockFreq+0x248>
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <HAL_RCC_GetSysClockFreq+0x114>
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d056      	beq.n	80077c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007716:	e099      	b.n	800784c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007718:	4b6f      	ldr	r3, [pc, #444]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	d02d      	beq.n	8007780 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007724:	4b6c      	ldr	r3, [pc, #432]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	08db      	lsrs	r3, r3, #3
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	4a6b      	ldr	r2, [pc, #428]	; (80078dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
 8007734:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774e:	4b62      	ldr	r3, [pc, #392]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007762:	eddf 5a61 	vldr	s11, [pc, #388]	; 80078e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800777e:	e087      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80078ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800778e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007792:	4b51      	ldr	r3, [pc, #324]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80077a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80078e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80077c2:	e065      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80078f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80077d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d6:	4b40      	ldr	r3, [pc, #256]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80078e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007802:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007806:	e043      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	eddf 6a38 	vldr	s13, [pc, #224]	; 80078f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781a:	4b2f      	ldr	r3, [pc, #188]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800781c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782a:	ed97 6a02 	vldr	s12, [r7, #8]
 800782e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80078e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007846:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800784a:	e021      	b.n	8007890 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007856:	eddf 6a26 	vldr	s13, [pc, #152]	; 80078f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800785a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785e:	4b1e      	ldr	r3, [pc, #120]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007872:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80078e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800788e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007890:	4b11      	ldr	r3, [pc, #68]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	0a5b      	lsrs	r3, r3, #9
 8007896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800789a:	3301      	adds	r3, #1
 800789c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078b4:	ee17 3a90 	vmov	r3, s15
 80078b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80078ba:	e005      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	61bb      	str	r3, [r7, #24]
      break;
 80078c0:	e002      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80078c2:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80078c4:	61bb      	str	r3, [r7, #24]
      break;
 80078c6:	bf00      	nop
  }

  return sysclockfreq;
 80078c8:	69bb      	ldr	r3, [r7, #24]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3724      	adds	r7, #36	; 0x24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	58024400 	.word	0x58024400
 80078dc:	03d09000 	.word	0x03d09000
 80078e0:	003d0900 	.word	0x003d0900
 80078e4:	017d7840 	.word	0x017d7840
 80078e8:	46000000 	.word	0x46000000
 80078ec:	4c742400 	.word	0x4c742400
 80078f0:	4a742400 	.word	0x4a742400
 80078f4:	4bbebc20 	.word	0x4bbebc20

080078f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078fe:	f7ff fe81 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 8007902:	4602      	mov	r2, r0
 8007904:	4b10      	ldr	r3, [pc, #64]	; (8007948 <HAL_RCC_GetHCLKFreq+0x50>)
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	f003 030f 	and.w	r3, r3, #15
 800790e:	490f      	ldr	r1, [pc, #60]	; (800794c <HAL_RCC_GetHCLKFreq+0x54>)
 8007910:	5ccb      	ldrb	r3, [r1, r3]
 8007912:	f003 031f 	and.w	r3, r3, #31
 8007916:	fa22 f303 	lsr.w	r3, r2, r3
 800791a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800791c:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <HAL_RCC_GetHCLKFreq+0x50>)
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	4a09      	ldr	r2, [pc, #36]	; (800794c <HAL_RCC_GetHCLKFreq+0x54>)
 8007926:	5cd3      	ldrb	r3, [r2, r3]
 8007928:	f003 031f 	and.w	r3, r3, #31
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	fa22 f303 	lsr.w	r3, r2, r3
 8007932:	4a07      	ldr	r2, [pc, #28]	; (8007950 <HAL_RCC_GetHCLKFreq+0x58>)
 8007934:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007936:	4a07      	ldr	r2, [pc, #28]	; (8007954 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <HAL_RCC_GetHCLKFreq+0x58>)
 800793e:	681b      	ldr	r3, [r3, #0]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	58024400 	.word	0x58024400
 800794c:	0800c638 	.word	0x0800c638
 8007950:	24000010 	.word	0x24000010
 8007954:	2400000c 	.word	0x2400000c

08007958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800795c:	f7ff ffcc 	bl	80078f8 <HAL_RCC_GetHCLKFreq>
 8007960:	4602      	mov	r2, r0
 8007962:	4b06      	ldr	r3, [pc, #24]	; (800797c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	0a1b      	lsrs	r3, r3, #8
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	4904      	ldr	r1, [pc, #16]	; (8007980 <HAL_RCC_GetPCLK2Freq+0x28>)
 800796e:	5ccb      	ldrb	r3, [r1, r3]
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007978:	4618      	mov	r0, r3
 800797a:	bd80      	pop	{r7, pc}
 800797c:	58024400 	.word	0x58024400
 8007980:	0800c638 	.word	0x0800c638

08007984 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007988:	b0ca      	sub	sp, #296	; 0x128
 800798a:	af00      	add	r7, sp, #0
 800798c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007990:	2300      	movs	r3, #0
 8007992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007996:	2300      	movs	r3, #0
 8007998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80079a8:	2500      	movs	r5, #0
 80079aa:	ea54 0305 	orrs.w	r3, r4, r5
 80079ae:	d049      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80079b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079ba:	d02f      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80079bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079c0:	d828      	bhi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80079c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079c6:	d01a      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80079c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079cc:	d822      	bhi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80079d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d6:	d007      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80079d8:	e01c      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079da:	4bb8      	ldr	r3, [pc, #736]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	4ab7      	ldr	r2, [pc, #732]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079e6:	e01a      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ec:	3308      	adds	r3, #8
 80079ee:	2102      	movs	r1, #2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 f9d1 	bl	8008d98 <RCCEx_PLL2_Config>
 80079f6:	4603      	mov	r3, r0
 80079f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80079fc:	e00f      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a02:	3328      	adds	r3, #40	; 0x28
 8007a04:	2102      	movs	r1, #2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 fa78 	bl	8008efc <RCCEx_PLL3_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007a12:	e004      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a1a:	e000      	b.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10a      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a26:	4ba5      	ldr	r3, [pc, #660]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a34:	4aa1      	ldr	r2, [pc, #644]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a36:	430b      	orrs	r3, r1
 8007a38:	6513      	str	r3, [r2, #80]	; 0x50
 8007a3a:	e003      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007a50:	f04f 0900 	mov.w	r9, #0
 8007a54:	ea58 0309 	orrs.w	r3, r8, r9
 8007a58:	d047      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d82a      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007a64:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6a:	bf00      	nop
 8007a6c:	08007a81 	.word	0x08007a81
 8007a70:	08007a8f 	.word	0x08007a8f
 8007a74:	08007aa5 	.word	0x08007aa5
 8007a78:	08007ac3 	.word	0x08007ac3
 8007a7c:	08007ac3 	.word	0x08007ac3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a80:	4b8e      	ldr	r3, [pc, #568]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a84:	4a8d      	ldr	r2, [pc, #564]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a8c:	e01a      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a92:	3308      	adds	r3, #8
 8007a94:	2100      	movs	r1, #0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 f97e 	bl	8008d98 <RCCEx_PLL2_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007aa2:	e00f      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa8:	3328      	adds	r3, #40	; 0x28
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 fa25 	bl	8008efc <RCCEx_PLL3_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ab8:	e004      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ac0:	e000      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007acc:	4b7b      	ldr	r3, [pc, #492]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad0:	f023 0107 	bic.w	r1, r3, #7
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ada:	4a78      	ldr	r2, [pc, #480]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6513      	str	r3, [r2, #80]	; 0x50
 8007ae0:	e003      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ae6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007af6:	f04f 0b00 	mov.w	fp, #0
 8007afa:	ea5a 030b 	orrs.w	r3, sl, fp
 8007afe:	d04c      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b0a:	d030      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b10:	d829      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b12:	2bc0      	cmp	r3, #192	; 0xc0
 8007b14:	d02d      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007b16:	2bc0      	cmp	r3, #192	; 0xc0
 8007b18:	d825      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b1a:	2b80      	cmp	r3, #128	; 0x80
 8007b1c:	d018      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007b1e:	2b80      	cmp	r3, #128	; 0x80
 8007b20:	d821      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d007      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007b2a:	e01c      	b.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b2c:	4b63      	ldr	r3, [pc, #396]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	4a62      	ldr	r2, [pc, #392]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b38:	e01c      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3e:	3308      	adds	r3, #8
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f928 	bl	8008d98 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e011      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b54:	3328      	adds	r3, #40	; 0x28
 8007b56:	2100      	movs	r1, #0
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 f9cf 	bl	8008efc <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007b64:	e006      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b7c:	4b4f      	ldr	r3, [pc, #316]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b80:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b8a:	4a4c      	ldr	r2, [pc, #304]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6513      	str	r3, [r2, #80]	; 0x50
 8007b90:	e003      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007ba6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007baa:	2300      	movs	r3, #0
 8007bac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bb0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	d053      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bc6:	d035      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007bc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bcc:	d82e      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007bce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bd2:	d031      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007bd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bd8:	d828      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bde:	d01a      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be4:	d822      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007bea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bee:	d007      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007bf0:	e01c      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf2:	4b32      	ldr	r3, [pc, #200]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf6:	4a31      	ldr	r2, [pc, #196]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007bfe:	e01c      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c04:	3308      	adds	r3, #8
 8007c06:	2100      	movs	r1, #0
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f001 f8c5 	bl	8008d98 <RCCEx_PLL2_Config>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007c14:	e011      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c1a:	3328      	adds	r3, #40	; 0x28
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f001 f96c 	bl	8008efc <RCCEx_PLL3_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c2a:	e006      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c32:	e002      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c34:	bf00      	nop
 8007c36:	e000      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10b      	bne.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c42:	4b1e      	ldr	r3, [pc, #120]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c52:	4a1a      	ldr	r2, [pc, #104]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c54:	430b      	orrs	r3, r1
 8007c56:	6593      	str	r3, [r2, #88]	; 0x58
 8007c58:	e003      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007c6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c72:	2300      	movs	r3, #0
 8007c74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	d056      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c8e:	d038      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007c90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c94:	d831      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007c96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c9a:	d034      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007c9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ca0:	d82b      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cac:	d825      	bhi.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d006      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007cb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cb6:	d00a      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007cb8:	e01f      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007cba:	bf00      	nop
 8007cbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc0:	4ba2      	ldr	r3, [pc, #648]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	4aa1      	ldr	r2, [pc, #644]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ccc:	e01c      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 f85e 	bl	8008d98 <RCCEx_PLL2_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ce2:	e011      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce8:	3328      	adds	r3, #40	; 0x28
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 f905 	bl	8008efc <RCCEx_PLL3_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007cf8:	e006      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d00:	e002      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007d02:	bf00      	nop
 8007d04:	e000      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d10:	4b8e      	ldr	r3, [pc, #568]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d14:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d20:	4a8a      	ldr	r2, [pc, #552]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d22:	430b      	orrs	r3, r1
 8007d24:	6593      	str	r3, [r2, #88]	; 0x58
 8007d26:	e003      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007d40:	2300      	movs	r3, #0
 8007d42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	d03a      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d56:	2b30      	cmp	r3, #48	; 0x30
 8007d58:	d01f      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007d5a:	2b30      	cmp	r3, #48	; 0x30
 8007d5c:	d819      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	d00c      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d815      	bhi.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d019      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007d6a:	2b10      	cmp	r3, #16
 8007d6c:	d111      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d6e:	4b77      	ldr	r3, [pc, #476]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	4a76      	ldr	r2, [pc, #472]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d7a:	e011      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d80:	3308      	adds	r3, #8
 8007d82:	2102      	movs	r1, #2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 f807 	bl	8008d98 <RCCEx_PLL2_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007d90:	e006      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d98:	e002      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d9a:	bf00      	nop
 8007d9c:	e000      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007da8:	4b68      	ldr	r3, [pc, #416]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db6:	4a65      	ldr	r2, [pc, #404]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007db8:	430b      	orrs	r3, r1
 8007dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dbc:	e003      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007dd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ddc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4313      	orrs	r3, r2
 8007de4:	d051      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007df0:	d035      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007df6:	d82e      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007df8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dfc:	d031      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007dfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e02:	d828      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e08:	d01a      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e0e:	d822      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e18:	d007      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007e1a:	e01c      	b.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e1c:	4b4b      	ldr	r3, [pc, #300]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	4a4a      	ldr	r2, [pc, #296]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e28:	e01c      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2e:	3308      	adds	r3, #8
 8007e30:	2100      	movs	r1, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 ffb0 	bl	8008d98 <RCCEx_PLL2_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e3e:	e011      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e44:	3328      	adds	r3, #40	; 0x28
 8007e46:	2100      	movs	r1, #0
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 f857 	bl	8008efc <RCCEx_PLL3_Config>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007e54:	e006      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e5c:	e002      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e000      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10a      	bne.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e6c:	4b37      	ldr	r3, [pc, #220]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7a:	4a34      	ldr	r2, [pc, #208]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	6513      	str	r3, [r2, #80]	; 0x50
 8007e80:	e003      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ea0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	d056      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007eb4:	d033      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007eba:	d82c      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ec0:	d02f      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007ec2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ec6:	d826      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ec8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ecc:	d02b      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007ece:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ed2:	d820      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed8:	d012      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007eda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ede:	d81a      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d022      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee8:	d115      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eee:	3308      	adds	r3, #8
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 ff50 	bl	8008d98 <RCCEx_PLL2_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007efe:	e015      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f04:	3328      	adds	r3, #40	; 0x28
 8007f06:	2101      	movs	r1, #1
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 fff7 	bl	8008efc <RCCEx_PLL3_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007f14:	e00a      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f1c:	e006      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f1e:	bf00      	nop
 8007f20:	e004      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f22:	bf00      	nop
 8007f24:	e002      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f26:	bf00      	nop
 8007f28:	e000      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10d      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f34:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f42:	4a02      	ldr	r2, [pc, #8]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f44:	430b      	orrs	r3, r1
 8007f46:	6513      	str	r3, [r2, #80]	; 0x50
 8007f48:	e006      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007f4a:	bf00      	nop
 8007f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4313      	orrs	r3, r2
 8007f76:	d055      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f84:	d033      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f8a:	d82c      	bhi.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f90:	d02f      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f96:	d826      	bhi.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007f98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f9c:	d02b      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007f9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fa2:	d820      	bhi.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa8:	d012      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fae:	d81a      	bhi.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d022      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007fb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fb8:	d115      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fee8 	bl	8008d98 <RCCEx_PLL2_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fce:	e015      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd4:	3328      	adds	r3, #40	; 0x28
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 ff8f 	bl	8008efc <RCCEx_PLL3_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007fe4:	e00a      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fec:	e006      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007fee:	bf00      	nop
 8007ff0:	e004      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ff2:	bf00      	nop
 8007ff4:	e002      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ff6:	bf00      	nop
 8007ff8:	e000      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10b      	bne.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008004:	4ba3      	ldr	r3, [pc, #652]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008008:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008010:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008014:	4a9f      	ldr	r2, [pc, #636]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008016:	430b      	orrs	r3, r1
 8008018:	6593      	str	r3, [r2, #88]	; 0x58
 800801a:	e003      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008034:	2300      	movs	r3, #0
 8008036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800803a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800803e:	460b      	mov	r3, r1
 8008040:	4313      	orrs	r3, r2
 8008042:	d037      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800804e:	d00e      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008054:	d816      	bhi.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d018      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800805a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800805e:	d111      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008060:	4b8c      	ldr	r3, [pc, #560]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	4a8b      	ldr	r2, [pc, #556]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800806a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800806c:	e00f      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008072:	3308      	adds	r3, #8
 8008074:	2101      	movs	r1, #1
 8008076:	4618      	mov	r0, r3
 8008078:	f000 fe8e 	bl	8008d98 <RCCEx_PLL2_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008082:	e004      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800808a:	e000      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800808c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800808e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008096:	4b7f      	ldr	r3, [pc, #508]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a4:	4a7b      	ldr	r2, [pc, #492]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080a6:	430b      	orrs	r3, r1
 80080a8:	6513      	str	r3, [r2, #80]	; 0x50
 80080aa:	e003      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80080b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80080c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080c4:	2300      	movs	r3, #0
 80080c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80080ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4313      	orrs	r3, r2
 80080d2:	d039      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80080d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d81c      	bhi.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80080de:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	08008121 	.word	0x08008121
 80080e8:	080080f5 	.word	0x080080f5
 80080ec:	08008103 	.word	0x08008103
 80080f0:	08008121 	.word	0x08008121
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080f4:	4b67      	ldr	r3, [pc, #412]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	4a66      	ldr	r2, [pc, #408]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80080fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008100:	e00f      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008106:	3308      	adds	r3, #8
 8008108:	2102      	movs	r1, #2
 800810a:	4618      	mov	r0, r3
 800810c:	f000 fe44 	bl	8008d98 <RCCEx_PLL2_Config>
 8008110:	4603      	mov	r3, r0
 8008112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008116:	e004      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800811e:	e000      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10a      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800812a:	4b5a      	ldr	r3, [pc, #360]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800812c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812e:	f023 0103 	bic.w	r1, r3, #3
 8008132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008138:	4a56      	ldr	r2, [pc, #344]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800813a:	430b      	orrs	r3, r1
 800813c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800813e:	e003      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008158:	2300      	movs	r3, #0
 800815a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800815e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008162:	460b      	mov	r3, r1
 8008164:	4313      	orrs	r3, r2
 8008166:	f000 809f 	beq.w	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800816a:	4b4b      	ldr	r3, [pc, #300]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a4a      	ldr	r2, [pc, #296]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008174:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008176:	f7fa fee9 	bl	8002f4c <HAL_GetTick>
 800817a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800817e:	e00b      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008180:	f7fa fee4 	bl	8002f4c <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b64      	cmp	r3, #100	; 0x64
 800818e:	d903      	bls.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008196:	e005      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008198:	4b3f      	ldr	r3, [pc, #252]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0ed      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80081a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d179      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80081ac:	4b39      	ldr	r3, [pc, #228]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081b8:	4053      	eors	r3, r2
 80081ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d015      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081c2:	4b34      	ldr	r3, [pc, #208]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081ce:	4b31      	ldr	r3, [pc, #196]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d2:	4a30      	ldr	r2, [pc, #192]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081da:	4b2e      	ldr	r3, [pc, #184]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	4a2d      	ldr	r2, [pc, #180]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081e6:	4a2b      	ldr	r2, [pc, #172]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80081ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80081f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fa:	d118      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fc:	f7fa fea6 	bl	8002f4c <HAL_GetTick>
 8008200:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008204:	e00d      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008206:	f7fa fea1 	bl	8002f4c <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008210:	1ad2      	subs	r2, r2, r3
 8008212:	f241 3388 	movw	r3, #5000	; 0x1388
 8008216:	429a      	cmp	r2, r3
 8008218:	d903      	bls.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008220:	e005      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0eb      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800822e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008232:	2b00      	cmp	r3, #0
 8008234:	d129      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800823e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008246:	d10e      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008248:	4b12      	ldr	r3, [pc, #72]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008258:	091a      	lsrs	r2, r3, #4
 800825a:	4b10      	ldr	r3, [pc, #64]	; (800829c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800825c:	4013      	ands	r3, r2
 800825e:	4a0d      	ldr	r2, [pc, #52]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008260:	430b      	orrs	r3, r1
 8008262:	6113      	str	r3, [r2, #16]
 8008264:	e005      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	4a0a      	ldr	r2, [pc, #40]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800826c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008270:	6113      	str	r3, [r2, #16]
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008274:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800827a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800827e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008282:	4a04      	ldr	r2, [pc, #16]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008284:	430b      	orrs	r3, r1
 8008286:	6713      	str	r3, [r2, #112]	; 0x70
 8008288:	e00e      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800828a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800828e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008292:	e009      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008294:	58024400 	.word	0x58024400
 8008298:	58024800 	.word	0x58024800
 800829c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80082a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f002 0301 	and.w	r3, r2, #1
 80082b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082b8:	2300      	movs	r3, #0
 80082ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f000 8089 	beq.w	80083dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d0:	2b28      	cmp	r3, #40	; 0x28
 80082d2:	d86b      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80082d4:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	080083b5 	.word	0x080083b5
 80082e0:	080083ad 	.word	0x080083ad
 80082e4:	080083ad 	.word	0x080083ad
 80082e8:	080083ad 	.word	0x080083ad
 80082ec:	080083ad 	.word	0x080083ad
 80082f0:	080083ad 	.word	0x080083ad
 80082f4:	080083ad 	.word	0x080083ad
 80082f8:	080083ad 	.word	0x080083ad
 80082fc:	08008381 	.word	0x08008381
 8008300:	080083ad 	.word	0x080083ad
 8008304:	080083ad 	.word	0x080083ad
 8008308:	080083ad 	.word	0x080083ad
 800830c:	080083ad 	.word	0x080083ad
 8008310:	080083ad 	.word	0x080083ad
 8008314:	080083ad 	.word	0x080083ad
 8008318:	080083ad 	.word	0x080083ad
 800831c:	08008397 	.word	0x08008397
 8008320:	080083ad 	.word	0x080083ad
 8008324:	080083ad 	.word	0x080083ad
 8008328:	080083ad 	.word	0x080083ad
 800832c:	080083ad 	.word	0x080083ad
 8008330:	080083ad 	.word	0x080083ad
 8008334:	080083ad 	.word	0x080083ad
 8008338:	080083ad 	.word	0x080083ad
 800833c:	080083b5 	.word	0x080083b5
 8008340:	080083ad 	.word	0x080083ad
 8008344:	080083ad 	.word	0x080083ad
 8008348:	080083ad 	.word	0x080083ad
 800834c:	080083ad 	.word	0x080083ad
 8008350:	080083ad 	.word	0x080083ad
 8008354:	080083ad 	.word	0x080083ad
 8008358:	080083ad 	.word	0x080083ad
 800835c:	080083b5 	.word	0x080083b5
 8008360:	080083ad 	.word	0x080083ad
 8008364:	080083ad 	.word	0x080083ad
 8008368:	080083ad 	.word	0x080083ad
 800836c:	080083ad 	.word	0x080083ad
 8008370:	080083ad 	.word	0x080083ad
 8008374:	080083ad 	.word	0x080083ad
 8008378:	080083ad 	.word	0x080083ad
 800837c:	080083b5 	.word	0x080083b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008384:	3308      	adds	r3, #8
 8008386:	2101      	movs	r1, #1
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fd05 	bl	8008d98 <RCCEx_PLL2_Config>
 800838e:	4603      	mov	r3, r0
 8008390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008394:	e00f      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839a:	3328      	adds	r3, #40	; 0x28
 800839c:	2101      	movs	r1, #1
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fdac 	bl	8008efc <RCCEx_PLL3_Config>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80083aa:	e004      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083b2:	e000      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80083b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10a      	bne.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80083be:	4bbf      	ldr	r3, [pc, #764]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80083c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083cc:	4abb      	ldr	r2, [pc, #748]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80083ce:	430b      	orrs	r3, r1
 80083d0:	6553      	str	r3, [r2, #84]	; 0x54
 80083d2:	e003      	b.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	f002 0302 	and.w	r3, r2, #2
 80083e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80083f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80083f6:	460b      	mov	r3, r1
 80083f8:	4313      	orrs	r3, r2
 80083fa:	d041      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80083fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008402:	2b05      	cmp	r3, #5
 8008404:	d824      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	08008459 	.word	0x08008459
 8008410:	08008425 	.word	0x08008425
 8008414:	0800843b 	.word	0x0800843b
 8008418:	08008459 	.word	0x08008459
 800841c:	08008459 	.word	0x08008459
 8008420:	08008459 	.word	0x08008459
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008428:	3308      	adds	r3, #8
 800842a:	2101      	movs	r1, #1
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fcb3 	bl	8008d98 <RCCEx_PLL2_Config>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008438:	e00f      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800843a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800843e:	3328      	adds	r3, #40	; 0x28
 8008440:	2101      	movs	r1, #1
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fd5a 	bl	8008efc <RCCEx_PLL3_Config>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800844e:	e004      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008456:	e000      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10a      	bne.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008462:	4b96      	ldr	r3, [pc, #600]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008466:	f023 0107 	bic.w	r1, r3, #7
 800846a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008470:	4a92      	ldr	r2, [pc, #584]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008472:	430b      	orrs	r3, r1
 8008474:	6553      	str	r3, [r2, #84]	; 0x54
 8008476:	e003      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800847c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f002 0304 	and.w	r3, r2, #4
 800848c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008490:	2300      	movs	r3, #0
 8008492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008496:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800849a:	460b      	mov	r3, r1
 800849c:	4313      	orrs	r3, r2
 800849e:	d044      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80084a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084a8:	2b05      	cmp	r3, #5
 80084aa:	d825      	bhi.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80084ac:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	08008501 	.word	0x08008501
 80084b8:	080084cd 	.word	0x080084cd
 80084bc:	080084e3 	.word	0x080084e3
 80084c0:	08008501 	.word	0x08008501
 80084c4:	08008501 	.word	0x08008501
 80084c8:	08008501 	.word	0x08008501
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d0:	3308      	adds	r3, #8
 80084d2:	2101      	movs	r1, #1
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fc5f 	bl	8008d98 <RCCEx_PLL2_Config>
 80084da:	4603      	mov	r3, r0
 80084dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084e0:	e00f      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e6:	3328      	adds	r3, #40	; 0x28
 80084e8:	2101      	movs	r1, #1
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fd06 	bl	8008efc <RCCEx_PLL3_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80084f6:	e004      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084fe:	e000      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10b      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800850a:	4b6c      	ldr	r3, [pc, #432]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800850c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850e:	f023 0107 	bic.w	r1, r3, #7
 8008512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800851a:	4a68      	ldr	r2, [pc, #416]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800851c:	430b      	orrs	r3, r1
 800851e:	6593      	str	r3, [r2, #88]	; 0x58
 8008520:	e003      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800852a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f002 0320 	and.w	r3, r2, #32
 8008536:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800853a:	2300      	movs	r3, #0
 800853c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008544:	460b      	mov	r3, r1
 8008546:	4313      	orrs	r3, r2
 8008548:	d055      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008556:	d033      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800855c:	d82c      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800855e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008562:	d02f      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008568:	d826      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800856a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800856e:	d02b      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008574:	d820      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857a:	d012      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800857c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008580:	d81a      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d022      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800858a:	d115      	bne.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800858c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008590:	3308      	adds	r3, #8
 8008592:	2100      	movs	r1, #0
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fbff 	bl	8008d98 <RCCEx_PLL2_Config>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085a0:	e015      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a6:	3328      	adds	r3, #40	; 0x28
 80085a8:	2102      	movs	r1, #2
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fca6 	bl	8008efc <RCCEx_PLL3_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80085b6:	e00a      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085be:	e006      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085c0:	bf00      	nop
 80085c2:	e004      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085c4:	bf00      	nop
 80085c6:	e002      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085c8:	bf00      	nop
 80085ca:	e000      	b.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80085cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10b      	bne.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085d6:	4b39      	ldr	r3, [pc, #228]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80085de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e6:	4a35      	ldr	r2, [pc, #212]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085e8:	430b      	orrs	r3, r1
 80085ea:	6553      	str	r3, [r2, #84]	; 0x54
 80085ec:	e003      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008606:	2300      	movs	r3, #0
 8008608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800860c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008610:	460b      	mov	r3, r1
 8008612:	4313      	orrs	r3, r2
 8008614:	d058      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800861e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008622:	d033      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008624:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008628:	d82c      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800862a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800862e:	d02f      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008634:	d826      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800863a:	d02b      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800863c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008640:	d820      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008646:	d012      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800864c:	d81a      	bhi.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d022      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008656:	d115      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800865c:	3308      	adds	r3, #8
 800865e:	2100      	movs	r1, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fb99 	bl	8008d98 <RCCEx_PLL2_Config>
 8008666:	4603      	mov	r3, r0
 8008668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800866c:	e015      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800866e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008672:	3328      	adds	r3, #40	; 0x28
 8008674:	2102      	movs	r1, #2
 8008676:	4618      	mov	r0, r3
 8008678:	f000 fc40 	bl	8008efc <RCCEx_PLL3_Config>
 800867c:	4603      	mov	r3, r0
 800867e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008682:	e00a      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800868a:	e006      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800868c:	bf00      	nop
 800868e:	e004      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008690:	bf00      	nop
 8008692:	e002      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008694:	bf00      	nop
 8008696:	e000      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800869a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10e      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086a2:	4b06      	ldr	r3, [pc, #24]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80086b2:	4a02      	ldr	r2, [pc, #8]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086b4:	430b      	orrs	r3, r1
 80086b6:	6593      	str	r3, [r2, #88]	; 0x58
 80086b8:	e006      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80086ba:	bf00      	nop
 80086bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80086d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80086e2:	460b      	mov	r3, r1
 80086e4:	4313      	orrs	r3, r2
 80086e6:	d055      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80086e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086f4:	d033      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80086f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80086fa:	d82c      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80086fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008700:	d02f      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008706:	d826      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008708:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800870c:	d02b      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800870e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008712:	d820      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008718:	d012      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800871a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800871e:	d81a      	bhi.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008720:	2b00      	cmp	r3, #0
 8008722:	d022      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008728:	d115      	bne.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872e:	3308      	adds	r3, #8
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fb30 	bl	8008d98 <RCCEx_PLL2_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800873e:	e015      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008744:	3328      	adds	r3, #40	; 0x28
 8008746:	2102      	movs	r1, #2
 8008748:	4618      	mov	r0, r3
 800874a:	f000 fbd7 	bl	8008efc <RCCEx_PLL3_Config>
 800874e:	4603      	mov	r3, r0
 8008750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008754:	e00a      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800875c:	e006      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800875e:	bf00      	nop
 8008760:	e004      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008762:	bf00      	nop
 8008764:	e002      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008766:	bf00      	nop
 8008768:	e000      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800876a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800876c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008774:	4ba1      	ldr	r3, [pc, #644]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008778:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800877c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008784:	4a9d      	ldr	r2, [pc, #628]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008786:	430b      	orrs	r3, r1
 8008788:	6593      	str	r3, [r2, #88]	; 0x58
 800878a:	e003      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008790:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	f002 0308 	and.w	r3, r2, #8
 80087a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087a4:	2300      	movs	r3, #0
 80087a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80087ae:	460b      	mov	r3, r1
 80087b0:	4313      	orrs	r3, r2
 80087b2:	d01e      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80087b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c0:	d10c      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c6:	3328      	adds	r3, #40	; 0x28
 80087c8:	2102      	movs	r1, #2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fb96 	bl	8008efc <RCCEx_PLL3_Config>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80087dc:	4b87      	ldr	r3, [pc, #540]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087ec:	4a83      	ldr	r2, [pc, #524]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80087ee:	430b      	orrs	r3, r1
 80087f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f002 0310 	and.w	r3, r2, #16
 80087fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008802:	2300      	movs	r3, #0
 8008804:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008808:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800880c:	460b      	mov	r3, r1
 800880e:	4313      	orrs	r3, r2
 8008810:	d01e      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800881a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800881e:	d10c      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008824:	3328      	adds	r3, #40	; 0x28
 8008826:	2102      	movs	r1, #2
 8008828:	4618      	mov	r0, r3
 800882a:	f000 fb67 	bl	8008efc <RCCEx_PLL3_Config>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800883a:	4b70      	ldr	r3, [pc, #448]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800883c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800883e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008846:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800884a:	4a6c      	ldr	r2, [pc, #432]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800884c:	430b      	orrs	r3, r1
 800884e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800885c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008860:	2300      	movs	r3, #0
 8008862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008866:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800886a:	460b      	mov	r3, r1
 800886c:	4313      	orrs	r3, r2
 800886e:	d03e      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800887c:	d022      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800887e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008882:	d81b      	bhi.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d003      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888c:	d00b      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800888e:	e015      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008894:	3308      	adds	r3, #8
 8008896:	2100      	movs	r1, #0
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fa7d 	bl	8008d98 <RCCEx_PLL2_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088a4:	e00f      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088aa:	3328      	adds	r3, #40	; 0x28
 80088ac:	2102      	movs	r1, #2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fb24 	bl	8008efc <RCCEx_PLL3_Config>
 80088b4:	4603      	mov	r3, r0
 80088b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80088ba:	e004      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088c2:	e000      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80088c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10b      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088ce:	4b4b      	ldr	r3, [pc, #300]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80088d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088de:	4a47      	ldr	r2, [pc, #284]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088e0:	430b      	orrs	r3, r1
 80088e2:	6593      	str	r3, [r2, #88]	; 0x58
 80088e4:	e003      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80088fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80088fc:	2300      	movs	r3, #0
 80088fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008900:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008904:	460b      	mov	r3, r1
 8008906:	4313      	orrs	r3, r2
 8008908:	d03b      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800890a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008916:	d01f      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008918:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800891c:	d818      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800891e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008922:	d003      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008924:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008928:	d007      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800892a:	e011      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800892c:	4b33      	ldr	r3, [pc, #204]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	4a32      	ldr	r2, [pc, #200]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008938:	e00f      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893e:	3328      	adds	r3, #40	; 0x28
 8008940:	2101      	movs	r1, #1
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fada 	bl	8008efc <RCCEx_PLL3_Config>
 8008948:	4603      	mov	r3, r0
 800894a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800894e:	e004      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008956:	e000      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10b      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008962:	4b26      	ldr	r3, [pc, #152]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008966:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008972:	4a22      	ldr	r2, [pc, #136]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008974:	430b      	orrs	r3, r1
 8008976:	6553      	str	r3, [r2, #84]	; 0x54
 8008978:	e003      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800897e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800898e:	673b      	str	r3, [r7, #112]	; 0x70
 8008990:	2300      	movs	r3, #0
 8008992:	677b      	str	r3, [r7, #116]	; 0x74
 8008994:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008998:	460b      	mov	r3, r1
 800899a:	4313      	orrs	r3, r2
 800899c:	d034      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80089a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ac:	d007      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80089ae:	e011      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089b0:	4b12      	ldr	r3, [pc, #72]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4a11      	ldr	r2, [pc, #68]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089bc:	e00e      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c2:	3308      	adds	r3, #8
 80089c4:	2102      	movs	r1, #2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 f9e6 	bl	8008d98 <RCCEx_PLL2_Config>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80089d2:	e003      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10d      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f2:	4a02      	ldr	r2, [pc, #8]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089f4:	430b      	orrs	r3, r1
 80089f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089f8:	e006      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80089fa:	bf00      	nop
 80089fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008a14:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a16:	2300      	movs	r3, #0
 8008a18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4313      	orrs	r3, r2
 8008a22:	d00c      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a28:	3328      	adds	r3, #40	; 0x28
 8008a2a:	2102      	movs	r1, #2
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fa65 	bl	8008efc <RCCEx_PLL3_Config>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	667b      	str	r3, [r7, #100]	; 0x64
 8008a50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008a54:	460b      	mov	r3, r1
 8008a56:	4313      	orrs	r3, r2
 8008a58:	d038      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a66:	d018      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a6c:	d811      	bhi.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a72:	d014      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a78:	d80b      	bhi.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d011      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a82:	d106      	bne.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a84:	4bc3      	ldr	r3, [pc, #780]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	4ac2      	ldr	r2, [pc, #776]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008a90:	e008      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a98:	e004      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a9a:	bf00      	nop
 8008a9c:	e002      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008a9e:	bf00      	nop
 8008aa0:	e000      	b.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10b      	bne.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008aac:	4bb9      	ldr	r3, [pc, #740]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008abc:	4ab5      	ldr	r2, [pc, #724]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008abe:	430b      	orrs	r3, r1
 8008ac0:	6553      	str	r3, [r2, #84]	; 0x54
 8008ac2:	e003      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008ad8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ada:	2300      	movs	r3, #0
 8008adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ade:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	d009      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ae8:	4baa      	ldr	r3, [pc, #680]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af6:	4aa7      	ldr	r2, [pc, #668]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008af8:	430b      	orrs	r3, r1
 8008afa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008b08:	653b      	str	r3, [r7, #80]	; 0x50
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	657b      	str	r3, [r7, #84]	; 0x54
 8008b0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008b12:	460b      	mov	r3, r1
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d00a      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b18:	4b9e      	ldr	r3, [pc, #632]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008b28:	4a9a      	ldr	r2, [pc, #616]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b2a:	430b      	orrs	r3, r1
 8008b2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008b44:	460b      	mov	r3, r1
 8008b46:	4313      	orrs	r3, r2
 8008b48:	d009      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b4a:	4b92      	ldr	r3, [pc, #584]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b4e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b58:	4a8e      	ldr	r2, [pc, #568]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b5a:	430b      	orrs	r3, r1
 8008b5c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008b74:	460b      	mov	r3, r1
 8008b76:	4313      	orrs	r3, r2
 8008b78:	d00e      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b7a:	4b86      	ldr	r3, [pc, #536]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	4a85      	ldr	r2, [pc, #532]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b84:	6113      	str	r3, [r2, #16]
 8008b86:	4b83      	ldr	r3, [pc, #524]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b88:	6919      	ldr	r1, [r3, #16]
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008b92:	4a80      	ldr	r2, [pc, #512]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008b94:	430b      	orrs	r3, r1
 8008b96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008baa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	d009      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008bb4:	4b77      	ldr	r3, [pc, #476]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc2:	4a74      	ldr	r2, [pc, #464]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bc4:	430b      	orrs	r3, r1
 8008bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8008bda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008bde:	460b      	mov	r3, r1
 8008be0:	4313      	orrs	r3, r2
 8008be2:	d00a      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008be4:	4b6b      	ldr	r3, [pc, #428]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf4:	4a67      	ldr	r2, [pc, #412]	; (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	2100      	movs	r1, #0
 8008c04:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008c10:	460b      	mov	r3, r1
 8008c12:	4313      	orrs	r3, r2
 8008c14:	d011      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f8ba 	bl	8008d98 <RCCEx_PLL2_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	2100      	movs	r1, #0
 8008c44:	6239      	str	r1, [r7, #32]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008c50:	460b      	mov	r3, r1
 8008c52:	4313      	orrs	r3, r2
 8008c54:	d011      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 f89a 	bl	8008d98 <RCCEx_PLL2_Config>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	2100      	movs	r1, #0
 8008c84:	61b9      	str	r1, [r7, #24]
 8008c86:	f003 0304 	and.w	r3, r3, #4
 8008c8a:	61fb      	str	r3, [r7, #28]
 8008c8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008c90:	460b      	mov	r3, r1
 8008c92:	4313      	orrs	r3, r2
 8008c94:	d011      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	2102      	movs	r1, #2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 f87a 	bl	8008d98 <RCCEx_PLL2_Config>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008caa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	6139      	str	r1, [r7, #16]
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	d011      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cda:	3328      	adds	r3, #40	; 0x28
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f90c 	bl	8008efc <RCCEx_PLL3_Config>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008cea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	2100      	movs	r1, #0
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	f003 0310 	and.w	r3, r3, #16
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008d10:	460b      	mov	r3, r1
 8008d12:	4313      	orrs	r3, r2
 8008d14:	d011      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d1a:	3328      	adds	r3, #40	; 0x28
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f8ec 	bl	8008efc <RCCEx_PLL3_Config>
 8008d24:	4603      	mov	r3, r0
 8008d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	2100      	movs	r1, #0
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	607b      	str	r3, [r7, #4]
 8008d4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008d50:	460b      	mov	r3, r1
 8008d52:	4313      	orrs	r3, r2
 8008d54:	d011      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d5a:	3328      	adds	r3, #40	; 0x28
 8008d5c:	2102      	movs	r1, #2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f8cc 	bl	8008efc <RCCEx_PLL3_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008d7a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	e000      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d94:	58024400 	.word	0x58024400

08008d98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008da6:	4b53      	ldr	r3, [pc, #332]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d101      	bne.n	8008db6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e099      	b.n	8008eea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008db6:	4b4f      	ldr	r3, [pc, #316]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a4e      	ldr	r2, [pc, #312]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008dbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dc2:	f7fa f8c3 	bl	8002f4c <HAL_GetTick>
 8008dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008dc8:	e008      	b.n	8008ddc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008dca:	f7fa f8bf 	bl	8002f4c <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d901      	bls.n	8008ddc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e086      	b.n	8008eea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ddc:	4b45      	ldr	r3, [pc, #276]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1f0      	bne.n	8008dca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008de8:	4b42      	ldr	r3, [pc, #264]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	031b      	lsls	r3, r3, #12
 8008df6:	493f      	ldr	r1, [pc, #252]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	628b      	str	r3, [r1, #40]	; 0x28
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	025b      	lsls	r3, r3, #9
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	431a      	orrs	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	041b      	lsls	r3, r3, #16
 8008e1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	061b      	lsls	r3, r3, #24
 8008e28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e2c:	4931      	ldr	r1, [pc, #196]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e32:	4b30      	ldr	r3, [pc, #192]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	492d      	ldr	r1, [pc, #180]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e40:	4313      	orrs	r3, r2
 8008e42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e44:	4b2b      	ldr	r3, [pc, #172]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	f023 0220 	bic.w	r2, r3, #32
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	4928      	ldr	r1, [pc, #160]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e56:	4b27      	ldr	r3, [pc, #156]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	4a26      	ldr	r2, [pc, #152]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e5c:	f023 0310 	bic.w	r3, r3, #16
 8008e60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e62:	4b24      	ldr	r3, [pc, #144]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e66:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <RCCEx_PLL2_Config+0x160>)
 8008e68:	4013      	ands	r3, r2
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	69d2      	ldr	r2, [r2, #28]
 8008e6e:	00d2      	lsls	r2, r2, #3
 8008e70:	4920      	ldr	r1, [pc, #128]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e76:	4b1f      	ldr	r3, [pc, #124]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	4a1e      	ldr	r2, [pc, #120]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e7c:	f043 0310 	orr.w	r3, r3, #16
 8008e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d106      	bne.n	8008e96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e88:	4b1a      	ldr	r3, [pc, #104]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	4a19      	ldr	r2, [pc, #100]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e94:	e00f      	b.n	8008eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d106      	bne.n	8008eaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e9c:	4b15      	ldr	r3, [pc, #84]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	4a14      	ldr	r2, [pc, #80]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ea8:	e005      	b.n	8008eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008eaa:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	4a11      	ldr	r2, [pc, #68]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008eb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a0e      	ldr	r2, [pc, #56]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ec2:	f7fa f843 	bl	8002f4c <HAL_GetTick>
 8008ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ec8:	e008      	b.n	8008edc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008eca:	f7fa f83f 	bl	8002f4c <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d901      	bls.n	8008edc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e006      	b.n	8008eea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008edc:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <RCCEx_PLL2_Config+0x15c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d0f0      	beq.n	8008eca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	ffff0007 	.word	0xffff0007

08008efc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f0a:	4b53      	ldr	r3, [pc, #332]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d101      	bne.n	8008f1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e099      	b.n	800904e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f1a:	4b4f      	ldr	r3, [pc, #316]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a4e      	ldr	r2, [pc, #312]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f26:	f7fa f811 	bl	8002f4c <HAL_GetTick>
 8008f2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f2c:	e008      	b.n	8008f40 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f2e:	f7fa f80d 	bl	8002f4c <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d901      	bls.n	8008f40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e086      	b.n	800904e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f40:	4b45      	ldr	r3, [pc, #276]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1f0      	bne.n	8008f2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f4c:	4b42      	ldr	r3, [pc, #264]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	051b      	lsls	r3, r3, #20
 8008f5a:	493f      	ldr	r1, [pc, #252]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	628b      	str	r3, [r1, #40]	; 0x28
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	025b      	lsls	r3, r3, #9
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	041b      	lsls	r3, r3, #16
 8008f7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	061b      	lsls	r3, r3, #24
 8008f8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f90:	4931      	ldr	r1, [pc, #196]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f96:	4b30      	ldr	r3, [pc, #192]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	492d      	ldr	r1, [pc, #180]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008fa8:	4b2b      	ldr	r3, [pc, #172]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	4928      	ldr	r1, [pc, #160]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008fba:	4b27      	ldr	r3, [pc, #156]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbe:	4a26      	ldr	r2, [pc, #152]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008fc6:	4b24      	ldr	r3, [pc, #144]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fca:	4b24      	ldr	r3, [pc, #144]	; (800905c <RCCEx_PLL3_Config+0x160>)
 8008fcc:	4013      	ands	r3, r2
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	69d2      	ldr	r2, [r2, #28]
 8008fd2:	00d2      	lsls	r2, r2, #3
 8008fd4:	4920      	ldr	r1, [pc, #128]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008fda:	4b1f      	ldr	r3, [pc, #124]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	4a1e      	ldr	r2, [pc, #120]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d106      	bne.n	8008ffa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008fec:	4b1a      	ldr	r3, [pc, #104]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	4a19      	ldr	r2, [pc, #100]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8008ff2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ff8:	e00f      	b.n	800901a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d106      	bne.n	800900e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009000:	4b15      	ldr	r3, [pc, #84]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	4a14      	ldr	r2, [pc, #80]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8009006:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800900a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800900c:	e005      	b.n	800901a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800900e:	4b12      	ldr	r3, [pc, #72]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	4a11      	ldr	r2, [pc, #68]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8009014:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009018:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800901a:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a0e      	ldr	r2, [pc, #56]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8009020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009026:	f7f9 ff91 	bl	8002f4c <HAL_GetTick>
 800902a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800902c:	e008      	b.n	8009040 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800902e:	f7f9 ff8d 	bl	8002f4c <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	2b02      	cmp	r3, #2
 800903a:	d901      	bls.n	8009040 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e006      	b.n	800904e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <RCCEx_PLL3_Config+0x15c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0f0      	beq.n	800902e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	58024400 	.word	0x58024400
 800905c:	ffff0007 	.word	0xffff0007

08009060 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e02b      	b.n	80090cc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f825 	bl	80090d8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2202      	movs	r2, #2
 8009092:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3304      	adds	r3, #4
 800909e:	4619      	mov	r1, r3
 80090a0:	4610      	mov	r0, r2
 80090a2:	f001 f9af 	bl	800a404 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	461a      	mov	r2, r3
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	f001 fa03 	bl	800a4bc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80090b6:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <HAL_SDRAM_Init+0x74>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a06      	ldr	r2, [pc, #24]	; (80090d4 <HAL_SDRAM_Init+0x74>)
 80090bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090c0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	52004000 	.word	0x52004000

080090d8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090fe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d101      	bne.n	800910a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009106:	2302      	movs	r3, #2
 8009108:	e021      	b.n	800914e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d002      	beq.n	8009116 <HAL_SDRAM_SendCommand+0x2a>
 8009110:	7dfb      	ldrb	r3, [r7, #23]
 8009112:	2b05      	cmp	r3, #5
 8009114:	d118      	bne.n	8009148 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2202      	movs	r2, #2
 800911a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	68b9      	ldr	r1, [r7, #8]
 8009126:	4618      	mov	r0, r3
 8009128:	f001 fa32 	bl	800a590 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b02      	cmp	r3, #2
 8009132:	d104      	bne.n	800913e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2205      	movs	r2, #5
 8009138:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800913c:	e006      	b.n	800914c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009146:	e001      	b.n	800914c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e000      	b.n	800914e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b02      	cmp	r3, #2
 800916a:	d101      	bne.n	8009170 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800916c:	2302      	movs	r3, #2
 800916e:	e016      	b.n	800919e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b01      	cmp	r3, #1
 800917a:	d10f      	bne.n	800919c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f001 fa24 	bl	800a5d8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e000      	b.n	800919e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b082      	sub	sp, #8
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e049      	b.n	800924c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d106      	bne.n	80091d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f89d 	bl	800930c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2202      	movs	r2, #2
 80091d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3304      	adds	r3, #4
 80091e2:	4619      	mov	r1, r3
 80091e4:	4610      	mov	r0, r2
 80091e6:	f000 f9f7 	bl	80095d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6a1a      	ldr	r2, [r3, #32]
 800926a:	f241 1311 	movw	r3, #4369	; 0x1111
 800926e:	4013      	ands	r3, r2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10f      	bne.n	8009294 <HAL_TIM_PWM_DeInit+0x40>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6a1a      	ldr	r2, [r3, #32]
 800927a:	f240 4344 	movw	r3, #1092	; 0x444
 800927e:	4013      	ands	r3, r2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d107      	bne.n	8009294 <HAL_TIM_PWM_DeInit+0x40>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 0201 	bic.w	r2, r2, #1
 8009292:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f843 	bl	8009320 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	f003 0302 	and.w	r3, r3, #2
 8009346:	2b02      	cmp	r3, #2
 8009348:	d122      	bne.n	8009390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b02      	cmp	r3, #2
 8009356:	d11b      	bne.n	8009390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f06f 0202 	mvn.w	r2, #2
 8009360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f003 0303 	and.w	r3, r3, #3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f90f 	bl	800959a <HAL_TIM_IC_CaptureCallback>
 800937c:	e005      	b.n	800938a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f901 	bl	8009586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f912 	bl	80095ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f003 0304 	and.w	r3, r3, #4
 800939a:	2b04      	cmp	r3, #4
 800939c:	d122      	bne.n	80093e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d11b      	bne.n	80093e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f06f 0204 	mvn.w	r2, #4
 80093b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2202      	movs	r2, #2
 80093ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f8e5 	bl	800959a <HAL_TIM_IC_CaptureCallback>
 80093d0:	e005      	b.n	80093de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f8d7 	bl	8009586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f8e8 	bl	80095ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0308 	and.w	r3, r3, #8
 80093ee:	2b08      	cmp	r3, #8
 80093f0:	d122      	bne.n	8009438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f003 0308 	and.w	r3, r3, #8
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d11b      	bne.n	8009438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f06f 0208 	mvn.w	r2, #8
 8009408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2204      	movs	r2, #4
 800940e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	f003 0303 	and.w	r3, r3, #3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f8bb 	bl	800959a <HAL_TIM_IC_CaptureCallback>
 8009424:	e005      	b.n	8009432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f8ad 	bl	8009586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f8be 	bl	80095ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0310 	and.w	r3, r3, #16
 8009442:	2b10      	cmp	r3, #16
 8009444:	d122      	bne.n	800948c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f003 0310 	and.w	r3, r3, #16
 8009450:	2b10      	cmp	r3, #16
 8009452:	d11b      	bne.n	800948c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0210 	mvn.w	r2, #16
 800945c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2208      	movs	r2, #8
 8009462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f891 	bl	800959a <HAL_TIM_IC_CaptureCallback>
 8009478:	e005      	b.n	8009486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f883 	bl	8009586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f894 	bl	80095ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b01      	cmp	r3, #1
 8009498:	d10e      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d107      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0201 	mvn.w	r2, #1
 80094b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f85d 	bl	8009572 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c2:	2b80      	cmp	r3, #128	; 0x80
 80094c4:	d10e      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d0:	2b80      	cmp	r3, #128	; 0x80
 80094d2:	d107      	bne.n	80094e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f91e 	bl	8009720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094f2:	d10e      	bne.n	8009512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fe:	2b80      	cmp	r3, #128	; 0x80
 8009500:	d107      	bne.n	8009512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800950a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f911 	bl	8009734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951c:	2b40      	cmp	r3, #64	; 0x40
 800951e:	d10e      	bne.n	800953e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	2b40      	cmp	r3, #64	; 0x40
 800952c:	d107      	bne.n	800953e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f842 	bl	80095c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b20      	cmp	r3, #32
 800954a:	d10e      	bne.n	800956a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f003 0320 	and.w	r3, r3, #32
 8009556:	2b20      	cmp	r3, #32
 8009558:	d107      	bne.n	800956a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f06f 0220 	mvn.w	r2, #32
 8009562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f8d1 	bl	800970c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009572:	b480      	push	{r7}
 8009574:	b083      	sub	sp, #12
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800957a:	bf00      	nop
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009586:	b480      	push	{r7}
 8009588:	b083      	sub	sp, #12
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095b6:	bf00      	nop
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095ca:	bf00      	nop
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a40      	ldr	r2, [pc, #256]	; (80096ec <TIM_Base_SetConfig+0x114>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d013      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d00f      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a3d      	ldr	r2, [pc, #244]	; (80096f0 <TIM_Base_SetConfig+0x118>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d00b      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a3c      	ldr	r2, [pc, #240]	; (80096f4 <TIM_Base_SetConfig+0x11c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d007      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a3b      	ldr	r2, [pc, #236]	; (80096f8 <TIM_Base_SetConfig+0x120>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d003      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a3a      	ldr	r2, [pc, #232]	; (80096fc <TIM_Base_SetConfig+0x124>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d108      	bne.n	800962a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a2f      	ldr	r2, [pc, #188]	; (80096ec <TIM_Base_SetConfig+0x114>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d01f      	beq.n	8009672 <TIM_Base_SetConfig+0x9a>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009638:	d01b      	beq.n	8009672 <TIM_Base_SetConfig+0x9a>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <TIM_Base_SetConfig+0x118>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d017      	beq.n	8009672 <TIM_Base_SetConfig+0x9a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a2b      	ldr	r2, [pc, #172]	; (80096f4 <TIM_Base_SetConfig+0x11c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d013      	beq.n	8009672 <TIM_Base_SetConfig+0x9a>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a2a      	ldr	r2, [pc, #168]	; (80096f8 <TIM_Base_SetConfig+0x120>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d00f      	beq.n	8009672 <TIM_Base_SetConfig+0x9a>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a29      	ldr	r2, [pc, #164]	; (80096fc <TIM_Base_SetConfig+0x124>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d00b      	beq.n	8009672 <TIM_Base_SetConfig+0x9a>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a28      	ldr	r2, [pc, #160]	; (8009700 <TIM_Base_SetConfig+0x128>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d007      	beq.n	8009672 <TIM_Base_SetConfig+0x9a>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a27      	ldr	r2, [pc, #156]	; (8009704 <TIM_Base_SetConfig+0x12c>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d003      	beq.n	8009672 <TIM_Base_SetConfig+0x9a>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a26      	ldr	r2, [pc, #152]	; (8009708 <TIM_Base_SetConfig+0x130>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d108      	bne.n	8009684 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	4313      	orrs	r3, r2
 8009690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a10      	ldr	r2, [pc, #64]	; (80096ec <TIM_Base_SetConfig+0x114>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00f      	beq.n	80096d0 <TIM_Base_SetConfig+0xf8>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a12      	ldr	r2, [pc, #72]	; (80096fc <TIM_Base_SetConfig+0x124>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d00b      	beq.n	80096d0 <TIM_Base_SetConfig+0xf8>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a11      	ldr	r2, [pc, #68]	; (8009700 <TIM_Base_SetConfig+0x128>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d007      	beq.n	80096d0 <TIM_Base_SetConfig+0xf8>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a10      	ldr	r2, [pc, #64]	; (8009704 <TIM_Base_SetConfig+0x12c>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d003      	beq.n	80096d0 <TIM_Base_SetConfig+0xf8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a0f      	ldr	r2, [pc, #60]	; (8009708 <TIM_Base_SetConfig+0x130>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d103      	bne.n	80096d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	691a      	ldr	r2, [r3, #16]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	615a      	str	r2, [r3, #20]
}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40010400 	.word	0x40010400
 8009700:	40014000 	.word	0x40014000
 8009704:	40014400 	.word	0x40014400
 8009708:	40014800 	.word	0x40014800

0800970c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08a      	sub	sp, #40	; 0x28
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	4613      	mov	r3, r2
 8009756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975e:	2b20      	cmp	r3, #32
 8009760:	d17b      	bne.n	800985a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <HAL_UART_Transmit+0x26>
 8009768:	88fb      	ldrh	r3, [r7, #6]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e074      	b.n	800985c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2221      	movs	r2, #33	; 0x21
 800977e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009782:	f7f9 fbe3 	bl	8002f4c <HAL_GetTick>
 8009786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	88fa      	ldrh	r2, [r7, #6]
 800978c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	88fa      	ldrh	r2, [r7, #6]
 8009794:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a0:	d108      	bne.n	80097b4 <HAL_UART_Transmit+0x6c>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d104      	bne.n	80097b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	61bb      	str	r3, [r7, #24]
 80097b2:	e003      	b.n	80097bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097b8:	2300      	movs	r3, #0
 80097ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097bc:	e030      	b.n	8009820 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2200      	movs	r2, #0
 80097c6:	2180      	movs	r1, #128	; 0x80
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 fced 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d005      	beq.n	80097e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e03d      	b.n	800985c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10b      	bne.n	80097fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	3302      	adds	r3, #2
 80097fa:	61bb      	str	r3, [r7, #24]
 80097fc:	e007      	b.n	800980e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	781a      	ldrb	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	3301      	adds	r3, #1
 800980c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009814:	b29b      	uxth	r3, r3
 8009816:	3b01      	subs	r3, #1
 8009818:	b29a      	uxth	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009826:	b29b      	uxth	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1c8      	bne.n	80097be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2200      	movs	r2, #0
 8009834:	2140      	movs	r1, #64	; 0x40
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 fcb6 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d005      	beq.n	800984e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2220      	movs	r2, #32
 8009846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e006      	b.n	800985c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	e000      	b.n	800985c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800985a:	2302      	movs	r3, #2
  }
}
 800985c:	4618      	mov	r0, r3
 800985e:	3720      	adds	r7, #32
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08a      	sub	sp, #40	; 0x28
 8009868:	af02      	add	r7, sp, #8
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	4613      	mov	r3, r2
 8009872:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800987a:	2b20      	cmp	r3, #32
 800987c:	f040 80b5 	bne.w	80099ea <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <HAL_UART_Receive+0x28>
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e0ad      	b.n	80099ec <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2222      	movs	r2, #34	; 0x22
 800989c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098a6:	f7f9 fb51 	bl	8002f4c <HAL_GetTick>
 80098aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	88fa      	ldrh	r2, [r7, #6]
 80098b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	88fa      	ldrh	r2, [r7, #6]
 80098b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c4:	d10e      	bne.n	80098e4 <HAL_UART_Receive+0x80>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d105      	bne.n	80098da <HAL_UART_Receive+0x76>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80098d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098d8:	e02d      	b.n	8009936 <HAL_UART_Receive+0xd2>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	22ff      	movs	r2, #255	; 0xff
 80098de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098e2:	e028      	b.n	8009936 <HAL_UART_Receive+0xd2>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10d      	bne.n	8009908 <HAL_UART_Receive+0xa4>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d104      	bne.n	80098fe <HAL_UART_Receive+0x9a>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	22ff      	movs	r2, #255	; 0xff
 80098f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098fc:	e01b      	b.n	8009936 <HAL_UART_Receive+0xd2>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	227f      	movs	r2, #127	; 0x7f
 8009902:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009906:	e016      	b.n	8009936 <HAL_UART_Receive+0xd2>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009910:	d10d      	bne.n	800992e <HAL_UART_Receive+0xca>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d104      	bne.n	8009924 <HAL_UART_Receive+0xc0>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	227f      	movs	r2, #127	; 0x7f
 800991e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009922:	e008      	b.n	8009936 <HAL_UART_Receive+0xd2>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	223f      	movs	r2, #63	; 0x3f
 8009928:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800992c:	e003      	b.n	8009936 <HAL_UART_Receive+0xd2>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800993c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009946:	d108      	bne.n	800995a <HAL_UART_Receive+0xf6>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009950:	2300      	movs	r3, #0
 8009952:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	61bb      	str	r3, [r7, #24]
 8009958:	e003      	b.n	8009962 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009962:	e036      	b.n	80099d2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	2200      	movs	r2, #0
 800996c:	2120      	movs	r1, #32
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fc1a 	bl	800a1a8 <UART_WaitOnFlagUntilTimeout>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d005      	beq.n	8009986 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2220      	movs	r2, #32
 800997e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e032      	b.n	80099ec <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10c      	bne.n	80099a6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	b29a      	uxth	r2, r3
 8009994:	8a7b      	ldrh	r3, [r7, #18]
 8009996:	4013      	ands	r3, r2
 8009998:	b29a      	uxth	r2, r3
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	3302      	adds	r3, #2
 80099a2:	61bb      	str	r3, [r7, #24]
 80099a4:	e00c      	b.n	80099c0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	8a7b      	ldrh	r3, [r7, #18]
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	4013      	ands	r3, r2
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	3301      	adds	r3, #1
 80099be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099d8:	b29b      	uxth	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1c2      	bne.n	8009964 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2220      	movs	r2, #32
 80099e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	e000      	b.n	80099ec <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80099ea:	2302      	movs	r3, #2
  }
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3720      	adds	r7, #32
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b0ba      	sub	sp, #232	; 0xe8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009a1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a22:	4013      	ands	r3, r2
 8009a24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d11b      	bne.n	8009a68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a34:	f003 0320 	and.w	r3, r3, #32
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d015      	beq.n	8009a68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d105      	bne.n	8009a54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d009      	beq.n	8009a68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 8377 	beq.w	800a14c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	4798      	blx	r3
      }
      return;
 8009a66:	e371      	b.n	800a14c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8123 	beq.w	8009cb8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a76:	4b8d      	ldr	r3, [pc, #564]	; (8009cac <HAL_UART_IRQHandler+0x2b8>)
 8009a78:	4013      	ands	r3, r2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d106      	bne.n	8009a8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009a82:	4b8b      	ldr	r3, [pc, #556]	; (8009cb0 <HAL_UART_IRQHandler+0x2bc>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 8116 	beq.w	8009cb8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d011      	beq.n	8009abc <HAL_UART_IRQHandler+0xc8>
 8009a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab2:	f043 0201 	orr.w	r2, r3, #1
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d011      	beq.n	8009aec <HAL_UART_IRQHandler+0xf8>
 8009ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2202      	movs	r2, #2
 8009ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae2:	f043 0204 	orr.w	r2, r3, #4
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d011      	beq.n	8009b1c <HAL_UART_IRQHandler+0x128>
 8009af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00b      	beq.n	8009b1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2204      	movs	r2, #4
 8009b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b12:	f043 0202 	orr.w	r2, r3, #2
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b20:	f003 0308 	and.w	r3, r3, #8
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d017      	beq.n	8009b58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b2c:	f003 0320 	and.w	r3, r3, #32
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d105      	bne.n	8009b40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009b38:	4b5c      	ldr	r3, [pc, #368]	; (8009cac <HAL_UART_IRQHandler+0x2b8>)
 8009b3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2208      	movs	r2, #8
 8009b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b4e:	f043 0208 	orr.w	r2, r3, #8
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d012      	beq.n	8009b8a <HAL_UART_IRQHandler+0x196>
 8009b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00c      	beq.n	8009b8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b80:	f043 0220 	orr.w	r2, r3, #32
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 82dd 	beq.w	800a150 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b9a:	f003 0320 	and.w	r3, r3, #32
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d013      	beq.n	8009bca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ba6:	f003 0320 	and.w	r3, r3, #32
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d105      	bne.n	8009bba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d007      	beq.n	8009bca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bde:	2b40      	cmp	r3, #64	; 0x40
 8009be0:	d005      	beq.n	8009bee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d054      	beq.n	8009c98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fb42 	bl	800a278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfe:	2b40      	cmp	r3, #64	; 0x40
 8009c00:	d146      	bne.n	8009c90 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3308      	adds	r3, #8
 8009c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c10:	e853 3f00 	ldrex	r3, [r3]
 8009c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3308      	adds	r3, #8
 8009c2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c3e:	e841 2300 	strex	r3, r2, [r1]
 8009c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1d9      	bne.n	8009c02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d017      	beq.n	8009c88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c5e:	4a15      	ldr	r2, [pc, #84]	; (8009cb4 <HAL_UART_IRQHandler+0x2c0>)
 8009c60:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7f9 fde9 	bl	8003840 <HAL_DMA_Abort_IT>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d019      	beq.n	8009ca8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009c82:	4610      	mov	r0, r2
 8009c84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c86:	e00f      	b.n	8009ca8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fa77 	bl	800a17c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c8e:	e00b      	b.n	8009ca8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fa73 	bl	800a17c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c96:	e007      	b.n	8009ca8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fa6f 	bl	800a17c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009ca6:	e253      	b.n	800a150 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca8:	bf00      	nop
    return;
 8009caa:	e251      	b.n	800a150 <HAL_UART_IRQHandler+0x75c>
 8009cac:	10000001 	.word	0x10000001
 8009cb0:	04000120 	.word	0x04000120
 8009cb4:	0800a345 	.word	0x0800a345

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	f040 81e7 	bne.w	800a090 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc6:	f003 0310 	and.w	r3, r3, #16
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 81e0 	beq.w	800a090 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 81d9 	beq.w	800a090 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2210      	movs	r2, #16
 8009ce4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf0:	2b40      	cmp	r3, #64	; 0x40
 8009cf2:	f040 8151 	bne.w	8009f98 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a96      	ldr	r2, [pc, #600]	; (8009f58 <HAL_UART_IRQHandler+0x564>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d068      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a93      	ldr	r2, [pc, #588]	; (8009f5c <HAL_UART_IRQHandler+0x568>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d061      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a91      	ldr	r2, [pc, #580]	; (8009f60 <HAL_UART_IRQHandler+0x56c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d05a      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a8e      	ldr	r2, [pc, #568]	; (8009f64 <HAL_UART_IRQHandler+0x570>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d053      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a8c      	ldr	r2, [pc, #560]	; (8009f68 <HAL_UART_IRQHandler+0x574>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d04c      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a89      	ldr	r2, [pc, #548]	; (8009f6c <HAL_UART_IRQHandler+0x578>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d045      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a87      	ldr	r2, [pc, #540]	; (8009f70 <HAL_UART_IRQHandler+0x57c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d03e      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a84      	ldr	r2, [pc, #528]	; (8009f74 <HAL_UART_IRQHandler+0x580>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d037      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a82      	ldr	r2, [pc, #520]	; (8009f78 <HAL_UART_IRQHandler+0x584>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d030      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a7f      	ldr	r2, [pc, #508]	; (8009f7c <HAL_UART_IRQHandler+0x588>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d029      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a7d      	ldr	r2, [pc, #500]	; (8009f80 <HAL_UART_IRQHandler+0x58c>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d022      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a7a      	ldr	r2, [pc, #488]	; (8009f84 <HAL_UART_IRQHandler+0x590>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d01b      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a78      	ldr	r2, [pc, #480]	; (8009f88 <HAL_UART_IRQHandler+0x594>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d014      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a75      	ldr	r2, [pc, #468]	; (8009f8c <HAL_UART_IRQHandler+0x598>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d00d      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a73      	ldr	r2, [pc, #460]	; (8009f90 <HAL_UART_IRQHandler+0x59c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d006      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x3e2>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a70      	ldr	r2, [pc, #448]	; (8009f94 <HAL_UART_IRQHandler+0x5a0>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d106      	bne.n	8009de4 <HAL_UART_IRQHandler+0x3f0>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	e005      	b.n	8009df0 <HAL_UART_IRQHandler+0x3fc>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009df4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 81ab 	beq.w	800a154 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	f080 81a3 	bcs.w	800a154 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e24:	f000 8087 	beq.w	8009f36 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1da      	bne.n	8009e28 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3308      	adds	r3, #8
 8009e78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e84:	f023 0301 	bic.w	r3, r3, #1
 8009e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3308      	adds	r3, #8
 8009e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e1      	bne.n	8009e72 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3308      	adds	r3, #8
 8009ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ed2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ed4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e3      	bne.n	8009eae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f04:	f023 0310 	bic.w	r3, r3, #16
 8009f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	461a      	mov	r2, r3
 8009f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f16:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e4      	bne.n	8009ef4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7f9 f967 	bl	8003204 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2202      	movs	r2, #2
 8009f3a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f91d 	bl	800a190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f56:	e0fd      	b.n	800a154 <HAL_UART_IRQHandler+0x760>
 8009f58:	40020010 	.word	0x40020010
 8009f5c:	40020028 	.word	0x40020028
 8009f60:	40020040 	.word	0x40020040
 8009f64:	40020058 	.word	0x40020058
 8009f68:	40020070 	.word	0x40020070
 8009f6c:	40020088 	.word	0x40020088
 8009f70:	400200a0 	.word	0x400200a0
 8009f74:	400200b8 	.word	0x400200b8
 8009f78:	40020410 	.word	0x40020410
 8009f7c:	40020428 	.word	0x40020428
 8009f80:	40020440 	.word	0x40020440
 8009f84:	40020458 	.word	0x40020458
 8009f88:	40020470 	.word	0x40020470
 8009f8c:	40020488 	.word	0x40020488
 8009f90:	400204a0 	.word	0x400204a0
 8009f94:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 80cf 	beq.w	800a158 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 80ca 	beq.w	800a158 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fcc:	e853 3f00 	ldrex	r3, [r3]
 8009fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8009fe8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fee:	e841 2300 	strex	r3, r2, [r1]
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e4      	bne.n	8009fc4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3308      	adds	r3, #8
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	623b      	str	r3, [r7, #32]
   return(result);
 800a00a:	6a3a      	ldr	r2, [r7, #32]
 800a00c:	4b55      	ldr	r3, [pc, #340]	; (800a164 <HAL_UART_IRQHandler+0x770>)
 800a00e:	4013      	ands	r3, r2
 800a010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3308      	adds	r3, #8
 800a01a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a01e:	633a      	str	r2, [r7, #48]	; 0x30
 800a020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e3      	bne.n	8009ffa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2220      	movs	r2, #32
 800a036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	e853 3f00 	ldrex	r3, [r3]
 800a052:	60fb      	str	r3, [r7, #12]
   return(result);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f023 0310 	bic.w	r3, r3, #16
 800a05a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a068:	61fb      	str	r3, [r7, #28]
 800a06a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06c:	69b9      	ldr	r1, [r7, #24]
 800a06e:	69fa      	ldr	r2, [r7, #28]
 800a070:	e841 2300 	strex	r3, r2, [r1]
 800a074:	617b      	str	r3, [r7, #20]
   return(result);
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1e4      	bne.n	800a046 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2202      	movs	r2, #2
 800a080:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a082:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f881 	bl	800a190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a08e:	e063      	b.n	800a158 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00e      	beq.n	800a0ba <HAL_UART_IRQHandler+0x6c6>
 800a09c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d008      	beq.n	800a0ba <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a0b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f987 	bl	800a3c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0b8:	e051      	b.n	800a15e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d014      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d105      	bne.n	800a0de <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a0d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d008      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d03a      	beq.n	800a15c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
    }
    return;
 800a0ee:	e035      	b.n	800a15c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d009      	beq.n	800a110 <HAL_UART_IRQHandler+0x71c>
 800a0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f931 	bl	800a370 <UART_EndTransmit_IT>
    return;
 800a10e:	e026      	b.n	800a15e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d009      	beq.n	800a130 <HAL_UART_IRQHandler+0x73c>
 800a11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d003      	beq.n	800a130 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f960 	bl	800a3ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a12e:	e016      	b.n	800a15e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d010      	beq.n	800a15e <HAL_UART_IRQHandler+0x76a>
 800a13c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a140:	2b00      	cmp	r3, #0
 800a142:	da0c      	bge.n	800a15e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f948 	bl	800a3da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a14a:	e008      	b.n	800a15e <HAL_UART_IRQHandler+0x76a>
      return;
 800a14c:	bf00      	nop
 800a14e:	e006      	b.n	800a15e <HAL_UART_IRQHandler+0x76a>
    return;
 800a150:	bf00      	nop
 800a152:	e004      	b.n	800a15e <HAL_UART_IRQHandler+0x76a>
      return;
 800a154:	bf00      	nop
 800a156:	e002      	b.n	800a15e <HAL_UART_IRQHandler+0x76a>
      return;
 800a158:	bf00      	nop
 800a15a:	e000      	b.n	800a15e <HAL_UART_IRQHandler+0x76a>
    return;
 800a15c:	bf00      	nop
  }
}
 800a15e:	37e8      	adds	r7, #232	; 0xe8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	effffffe 	.word	0xeffffffe

0800a168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	603b      	str	r3, [r7, #0]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1b8:	e049      	b.n	800a24e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c0:	d045      	beq.n	800a24e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1c2:	f7f8 fec3 	bl	8002f4c <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d302      	bcc.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e048      	b.n	800a26e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0304 	and.w	r3, r3, #4
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d031      	beq.n	800a24e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	f003 0308 	and.w	r3, r3, #8
 800a1f4:	2b08      	cmp	r3, #8
 800a1f6:	d110      	bne.n	800a21a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f839 	bl	800a278 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2208      	movs	r2, #8
 800a20a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e029      	b.n	800a26e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a228:	d111      	bne.n	800a24e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f81f 	bl	800a278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e00f      	b.n	800a26e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	69da      	ldr	r2, [r3, #28]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	4013      	ands	r3, r2
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	bf0c      	ite	eq
 800a25e:	2301      	moveq	r3, #1
 800a260:	2300      	movne	r3, #0
 800a262:	b2db      	uxtb	r3, r3
 800a264:	461a      	mov	r2, r3
 800a266:	79fb      	ldrb	r3, [r7, #7]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d0a6      	beq.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a278:	b480      	push	{r7}
 800a27a:	b095      	sub	sp, #84	; 0x54
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a294:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a29e:	643b      	str	r3, [r7, #64]	; 0x40
 800a2a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e6      	bne.n	800a280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	4b1e      	ldr	r3, [pc, #120]	; (800a340 <UART_EndRxTransfer+0xc8>)
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e5      	bne.n	800a2b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d118      	bne.n	800a320 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	e853 3f00 	ldrex	r3, [r3]
 800a2fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f023 0310 	bic.w	r3, r3, #16
 800a302:	647b      	str	r3, [r7, #68]	; 0x44
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	461a      	mov	r2, r3
 800a30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6979      	ldr	r1, [r7, #20]
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	613b      	str	r3, [r7, #16]
   return(result);
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e6      	bne.n	800a2ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2220      	movs	r2, #32
 800a324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a334:	bf00      	nop
 800a336:	3754      	adds	r7, #84	; 0x54
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	effffffe 	.word	0xeffffffe

0800a344 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff ff0a 	bl	800a17c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a368:	bf00      	nop
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	e853 3f00 	ldrex	r3, [r3]
 800a384:	60bb      	str	r3, [r7, #8]
   return(result);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a38c:	61fb      	str	r3, [r7, #28]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	61bb      	str	r3, [r7, #24]
 800a398:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39a:	6979      	ldr	r1, [r7, #20]
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	e841 2300 	strex	r3, r2, [r1]
 800a3a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1e6      	bne.n	800a378 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f7ff fed5 	bl	800a168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3be:	bf00      	nop
 800a3c0:	3720      	adds	r7, #32
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3ce:	bf00      	nop
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3e2:	bf00      	nop
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3f6:	bf00      	nop
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
	...

0800a404 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d121      	bne.n	800a45a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4b27      	ldr	r3, [pc, #156]	; (800a4b8 <FMC_SDRAM_Init+0xb4>)
 800a41c:	4013      	ands	r3, r2
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	6851      	ldr	r1, [r2, #4]
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	6892      	ldr	r2, [r2, #8]
 800a426:	4311      	orrs	r1, r2
 800a428:	683a      	ldr	r2, [r7, #0]
 800a42a:	68d2      	ldr	r2, [r2, #12]
 800a42c:	4311      	orrs	r1, r2
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	6912      	ldr	r2, [r2, #16]
 800a432:	4311      	orrs	r1, r2
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	6952      	ldr	r2, [r2, #20]
 800a438:	4311      	orrs	r1, r2
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	6992      	ldr	r2, [r2, #24]
 800a43e:	4311      	orrs	r1, r2
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	69d2      	ldr	r2, [r2, #28]
 800a444:	4311      	orrs	r1, r2
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	6a12      	ldr	r2, [r2, #32]
 800a44a:	4311      	orrs	r1, r2
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a450:	430a      	orrs	r2, r1
 800a452:	431a      	orrs	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	601a      	str	r2, [r3, #0]
 800a458:	e026      	b.n	800a4a8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	69d9      	ldr	r1, [r3, #28]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	4319      	orrs	r1, r3
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	430b      	orrs	r3, r1
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <FMC_SDRAM_Init+0xb4>)
 800a47e:	4013      	ands	r3, r2
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	6851      	ldr	r1, [r2, #4]
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	6892      	ldr	r2, [r2, #8]
 800a488:	4311      	orrs	r1, r2
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	68d2      	ldr	r2, [r2, #12]
 800a48e:	4311      	orrs	r1, r2
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	6912      	ldr	r2, [r2, #16]
 800a494:	4311      	orrs	r1, r2
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	6952      	ldr	r2, [r2, #20]
 800a49a:	4311      	orrs	r1, r2
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	6992      	ldr	r2, [r2, #24]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	ffff8000 	.word	0xffff8000

0800a4bc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d128      	bne.n	800a520 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	1e59      	subs	r1, r3, #1
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	011b      	lsls	r3, r3, #4
 800a4e4:	4319      	orrs	r1, r3
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	4319      	orrs	r1, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	031b      	lsls	r3, r3, #12
 800a4f8:	4319      	orrs	r1, r3
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	041b      	lsls	r3, r3, #16
 800a502:	4319      	orrs	r1, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	3b01      	subs	r3, #1
 800a50a:	051b      	lsls	r3, r3, #20
 800a50c:	4319      	orrs	r1, r3
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	3b01      	subs	r3, #1
 800a514:	061b      	lsls	r3, r3, #24
 800a516:	430b      	orrs	r3, r1
 800a518:	431a      	orrs	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	609a      	str	r2, [r3, #8]
 800a51e:	e02d      	b.n	800a57c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	4b19      	ldr	r3, [pc, #100]	; (800a58c <FMC_SDRAM_Timing_Init+0xd0>)
 800a526:	4013      	ands	r3, r2
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	68d2      	ldr	r2, [r2, #12]
 800a52c:	3a01      	subs	r2, #1
 800a52e:	0311      	lsls	r1, r2, #12
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	6952      	ldr	r2, [r2, #20]
 800a534:	3a01      	subs	r2, #1
 800a536:	0512      	lsls	r2, r2, #20
 800a538:	430a      	orrs	r2, r1
 800a53a:	431a      	orrs	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	1e59      	subs	r1, r3, #1
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	3b01      	subs	r3, #1
 800a554:	011b      	lsls	r3, r3, #4
 800a556:	4319      	orrs	r1, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	021b      	lsls	r3, r3, #8
 800a560:	4319      	orrs	r1, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	3b01      	subs	r3, #1
 800a568:	041b      	lsls	r3, r3, #16
 800a56a:	4319      	orrs	r1, r3
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	3b01      	subs	r3, #1
 800a572:	061b      	lsls	r3, r3, #24
 800a574:	430b      	orrs	r3, r1
 800a576:	431a      	orrs	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	ff0f0fff 	.word	0xff0f0fff

0800a590 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a590:	b480      	push	{r7}
 800a592:	b085      	sub	sp, #20
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	691a      	ldr	r2, [r3, #16]
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	; (800a5d4 <FMC_SDRAM_SendCommand+0x44>)
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	6811      	ldr	r1, [r2, #0]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	6852      	ldr	r2, [r2, #4]
 800a5ac:	4311      	orrs	r1, r2
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	6892      	ldr	r2, [r2, #8]
 800a5b2:	3a01      	subs	r2, #1
 800a5b4:	0152      	lsls	r2, r2, #5
 800a5b6:	4311      	orrs	r1, r2
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	68d2      	ldr	r2, [r2, #12]
 800a5bc:	0252      	lsls	r2, r2, #9
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	ffc00000 	.word	0xffc00000

0800a5d8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	695a      	ldr	r2, [r3, #20]
 800a5e6:	4b07      	ldr	r3, [pc, #28]	; (800a604 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	0052      	lsls	r2, r2, #1
 800a5ee:	431a      	orrs	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	ffffc001 	.word	0xffffc001

0800a608 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	689a      	ldr	r2, [r3, #8]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	601a      	str	r2, [r3, #0]
}
 800a644:	bf00      	nop
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	6892      	ldr	r2, [r2, #8]
 800a666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	6852      	ldr	r2, [r2, #4]
 800a670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d103      	bne.n	800a684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	1e5a      	subs	r2, r3, #1
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ae:	4b4f      	ldr	r3, [pc, #316]	; (800a7ec <xTaskIncrementTick+0x148>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f040 808f 	bne.w	800a7d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a6b8:	4b4d      	ldr	r3, [pc, #308]	; (800a7f0 <xTaskIncrementTick+0x14c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a6c0:	4a4b      	ldr	r2, [pc, #300]	; (800a7f0 <xTaskIncrementTick+0x14c>)
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d120      	bne.n	800a70e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6cc:	4b49      	ldr	r3, [pc, #292]	; (800a7f4 <xTaskIncrementTick+0x150>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00a      	beq.n	800a6ec <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a6e8:	bf00      	nop
 800a6ea:	e7fe      	b.n	800a6ea <xTaskIncrementTick+0x46>
 800a6ec:	4b41      	ldr	r3, [pc, #260]	; (800a7f4 <xTaskIncrementTick+0x150>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	4b41      	ldr	r3, [pc, #260]	; (800a7f8 <xTaskIncrementTick+0x154>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a3f      	ldr	r2, [pc, #252]	; (800a7f4 <xTaskIncrementTick+0x150>)
 800a6f8:	6013      	str	r3, [r2, #0]
 800a6fa:	4a3f      	ldr	r2, [pc, #252]	; (800a7f8 <xTaskIncrementTick+0x154>)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	4b3e      	ldr	r3, [pc, #248]	; (800a7fc <xTaskIncrementTick+0x158>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	4a3d      	ldr	r2, [pc, #244]	; (800a7fc <xTaskIncrementTick+0x158>)
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	f000 f8e3 	bl	800a8d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a70e:	4b3c      	ldr	r3, [pc, #240]	; (800a800 <xTaskIncrementTick+0x15c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	429a      	cmp	r2, r3
 800a716:	d349      	bcc.n	800a7ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a718:	4b36      	ldr	r3, [pc, #216]	; (800a7f4 <xTaskIncrementTick+0x150>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d104      	bne.n	800a72c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a722:	4b37      	ldr	r3, [pc, #220]	; (800a800 <xTaskIncrementTick+0x15c>)
 800a724:	f04f 32ff 	mov.w	r2, #4294967295
 800a728:	601a      	str	r2, [r3, #0]
					break;
 800a72a:	e03f      	b.n	800a7ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a72c:	4b31      	ldr	r3, [pc, #196]	; (800a7f4 <xTaskIncrementTick+0x150>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	d203      	bcs.n	800a74c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a744:	4a2e      	ldr	r2, [pc, #184]	; (800a800 <xTaskIncrementTick+0x15c>)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a74a:	e02f      	b.n	800a7ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	3304      	adds	r3, #4
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff ff7d 	bl	800a650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	3318      	adds	r3, #24
 800a762:	4618      	mov	r0, r3
 800a764:	f7ff ff74 	bl	800a650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a76c:	4b25      	ldr	r3, [pc, #148]	; (800a804 <xTaskIncrementTick+0x160>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	429a      	cmp	r2, r3
 800a772:	d903      	bls.n	800a77c <xTaskIncrementTick+0xd8>
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a778:	4a22      	ldr	r2, [pc, #136]	; (800a804 <xTaskIncrementTick+0x160>)
 800a77a:	6013      	str	r3, [r2, #0]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4a1f      	ldr	r2, [pc, #124]	; (800a808 <xTaskIncrementTick+0x164>)
 800a78a:	441a      	add	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	3304      	adds	r3, #4
 800a790:	4619      	mov	r1, r3
 800a792:	4610      	mov	r0, r2
 800a794:	f7ff ff38 	bl	800a608 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79c:	4b1b      	ldr	r3, [pc, #108]	; (800a80c <xTaskIncrementTick+0x168>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d3b8      	bcc.n	800a718 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7aa:	e7b5      	b.n	800a718 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a7ac:	4b17      	ldr	r3, [pc, #92]	; (800a80c <xTaskIncrementTick+0x168>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b2:	4915      	ldr	r1, [pc, #84]	; (800a808 <xTaskIncrementTick+0x164>)
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	4413      	add	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	440b      	add	r3, r1
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d901      	bls.n	800a7c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a7c8:	4b11      	ldr	r3, [pc, #68]	; (800a810 <xTaskIncrementTick+0x16c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d007      	beq.n	800a7e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	617b      	str	r3, [r7, #20]
 800a7d4:	e004      	b.n	800a7e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a7d6:	4b0f      	ldr	r3, [pc, #60]	; (800a814 <xTaskIncrementTick+0x170>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	4a0d      	ldr	r2, [pc, #52]	; (800a814 <xTaskIncrementTick+0x170>)
 800a7de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a7e0:	697b      	ldr	r3, [r7, #20]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	24001488 	.word	0x24001488
 800a7f0:	2400146c 	.word	0x2400146c
 800a7f4:	24001464 	.word	0x24001464
 800a7f8:	24001468 	.word	0x24001468
 800a7fc:	24001480 	.word	0x24001480
 800a800:	24001484 	.word	0x24001484
 800a804:	24001470 	.word	0x24001470
 800a808:	24001004 	.word	0x24001004
 800a80c:	24001000 	.word	0x24001000
 800a810:	2400147c 	.word	0x2400147c
 800a814:	24001478 	.word	0x24001478

0800a818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a81e:	4b28      	ldr	r3, [pc, #160]	; (800a8c0 <vTaskSwitchContext+0xa8>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a826:	4b27      	ldr	r3, [pc, #156]	; (800a8c4 <vTaskSwitchContext+0xac>)
 800a828:	2201      	movs	r2, #1
 800a82a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a82c:	e041      	b.n	800a8b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a82e:	4b25      	ldr	r3, [pc, #148]	; (800a8c4 <vTaskSwitchContext+0xac>)
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a834:	4b24      	ldr	r3, [pc, #144]	; (800a8c8 <vTaskSwitchContext+0xb0>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	e010      	b.n	800a85e <vTaskSwitchContext+0x46>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10a      	bne.n	800a858 <vTaskSwitchContext+0x40>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	607b      	str	r3, [r7, #4]
}
 800a854:	bf00      	nop
 800a856:	e7fe      	b.n	800a856 <vTaskSwitchContext+0x3e>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	491b      	ldr	r1, [pc, #108]	; (800a8cc <vTaskSwitchContext+0xb4>)
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	440b      	add	r3, r1
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d0e4      	beq.n	800a83c <vTaskSwitchContext+0x24>
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	4613      	mov	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4a13      	ldr	r2, [pc, #76]	; (800a8cc <vTaskSwitchContext+0xb4>)
 800a87e:	4413      	add	r3, r2
 800a880:	60bb      	str	r3, [r7, #8]
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	605a      	str	r2, [r3, #4]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	3308      	adds	r3, #8
 800a894:	429a      	cmp	r2, r3
 800a896:	d104      	bne.n	800a8a2 <vTaskSwitchContext+0x8a>
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	605a      	str	r2, [r3, #4]
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	4a09      	ldr	r2, [pc, #36]	; (800a8d0 <vTaskSwitchContext+0xb8>)
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	4a06      	ldr	r2, [pc, #24]	; (800a8c8 <vTaskSwitchContext+0xb0>)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6013      	str	r3, [r2, #0]
}
 800a8b2:	bf00      	nop
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	24001488 	.word	0x24001488
 800a8c4:	2400147c 	.word	0x2400147c
 800a8c8:	24001470 	.word	0x24001470
 800a8cc:	24001004 	.word	0x24001004
 800a8d0:	24001000 	.word	0x24001000

0800a8d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8da:	4b0c      	ldr	r3, [pc, #48]	; (800a90c <prvResetNextTaskUnblockTime+0x38>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d104      	bne.n	800a8ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8e4:	4b0a      	ldr	r3, [pc, #40]	; (800a910 <prvResetNextTaskUnblockTime+0x3c>)
 800a8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8ec:	e008      	b.n	800a900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ee:	4b07      	ldr	r3, [pc, #28]	; (800a90c <prvResetNextTaskUnblockTime+0x38>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	4a04      	ldr	r2, [pc, #16]	; (800a910 <prvResetNextTaskUnblockTime+0x3c>)
 800a8fe:	6013      	str	r3, [r2, #0]
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	24001464 	.word	0x24001464
 800a910:	24001484 	.word	0x24001484

0800a914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a91a:	4b0b      	ldr	r3, [pc, #44]	; (800a948 <xTaskGetSchedulerState+0x34>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d102      	bne.n	800a928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a922:	2301      	movs	r3, #1
 800a924:	607b      	str	r3, [r7, #4]
 800a926:	e008      	b.n	800a93a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a928:	4b08      	ldr	r3, [pc, #32]	; (800a94c <xTaskGetSchedulerState+0x38>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a930:	2302      	movs	r3, #2
 800a932:	607b      	str	r3, [r7, #4]
 800a934:	e001      	b.n	800a93a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a936:	2300      	movs	r3, #0
 800a938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a93a:	687b      	ldr	r3, [r7, #4]
	}
 800a93c:	4618      	mov	r0, r3
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	24001474 	.word	0x24001474
 800a94c:	24001488 	.word	0x24001488

0800a950 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a950:	4b07      	ldr	r3, [pc, #28]	; (800a970 <pxCurrentTCBConst2>)
 800a952:	6819      	ldr	r1, [r3, #0]
 800a954:	6808      	ldr	r0, [r1, #0]
 800a956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95a:	f380 8809 	msr	PSP, r0
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f04f 0000 	mov.w	r0, #0
 800a966:	f380 8811 	msr	BASEPRI, r0
 800a96a:	4770      	bx	lr
 800a96c:	f3af 8000 	nop.w

0800a970 <pxCurrentTCBConst2>:
 800a970:	24001000 	.word	0x24001000
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop
	...

0800a980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a980:	f3ef 8009 	mrs	r0, PSP
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	4b15      	ldr	r3, [pc, #84]	; (800a9e0 <pxCurrentTCBConst>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	f01e 0f10 	tst.w	lr, #16
 800a990:	bf08      	it	eq
 800a992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99a:	6010      	str	r0, [r2, #0]
 800a99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9a4:	f380 8811 	msr	BASEPRI, r0
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f7ff ff32 	bl	800a818 <vTaskSwitchContext>
 800a9b4:	f04f 0000 	mov.w	r0, #0
 800a9b8:	f380 8811 	msr	BASEPRI, r0
 800a9bc:	bc09      	pop	{r0, r3}
 800a9be:	6819      	ldr	r1, [r3, #0]
 800a9c0:	6808      	ldr	r0, [r1, #0]
 800a9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c6:	f01e 0f10 	tst.w	lr, #16
 800a9ca:	bf08      	it	eq
 800a9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9d0:	f380 8809 	msr	PSP, r0
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	f3af 8000 	nop.w

0800a9e0 <pxCurrentTCBConst>:
 800a9e0:	24001000 	.word	0x24001000
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9e4:	bf00      	nop
 800a9e6:	bf00      	nop

0800a9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	607b      	str	r3, [r7, #4]
}
 800aa00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa02:	f7ff fe4f 	bl	800a6a4 <xTaskIncrementTick>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa0c:	4b06      	ldr	r3, [pc, #24]	; (800aa28 <xPortSysTickHandler+0x40>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	2300      	movs	r3, #0
 800aa16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa20:	bf00      	nop
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <srand>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4b10      	ldr	r3, [pc, #64]	; (800aa70 <srand+0x44>)
 800aa30:	681d      	ldr	r5, [r3, #0]
 800aa32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800aa34:	4604      	mov	r4, r0
 800aa36:	b9b3      	cbnz	r3, 800aa66 <srand+0x3a>
 800aa38:	2018      	movs	r0, #24
 800aa3a:	f000 fa3d 	bl	800aeb8 <malloc>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	6328      	str	r0, [r5, #48]	; 0x30
 800aa42:	b920      	cbnz	r0, 800aa4e <srand+0x22>
 800aa44:	4b0b      	ldr	r3, [pc, #44]	; (800aa74 <srand+0x48>)
 800aa46:	480c      	ldr	r0, [pc, #48]	; (800aa78 <srand+0x4c>)
 800aa48:	2146      	movs	r1, #70	; 0x46
 800aa4a:	f000 f9cb 	bl	800ade4 <__assert_func>
 800aa4e:	490b      	ldr	r1, [pc, #44]	; (800aa7c <srand+0x50>)
 800aa50:	4b0b      	ldr	r3, [pc, #44]	; (800aa80 <srand+0x54>)
 800aa52:	e9c0 1300 	strd	r1, r3, [r0]
 800aa56:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <srand+0x58>)
 800aa58:	6083      	str	r3, [r0, #8]
 800aa5a:	230b      	movs	r3, #11
 800aa5c:	8183      	strh	r3, [r0, #12]
 800aa5e:	2100      	movs	r1, #0
 800aa60:	2001      	movs	r0, #1
 800aa62:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aa66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800aa68:	2200      	movs	r2, #0
 800aa6a:	611c      	str	r4, [r3, #16]
 800aa6c:	615a      	str	r2, [r3, #20]
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	24000088 	.word	0x24000088
 800aa74:	0800c704 	.word	0x0800c704
 800aa78:	0800c71b 	.word	0x0800c71b
 800aa7c:	abcd330e 	.word	0xabcd330e
 800aa80:	e66d1234 	.word	0xe66d1234
 800aa84:	0005deec 	.word	0x0005deec

0800aa88 <std>:
 800aa88:	2300      	movs	r3, #0
 800aa8a:	b510      	push	{r4, lr}
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa96:	6083      	str	r3, [r0, #8]
 800aa98:	8181      	strh	r1, [r0, #12]
 800aa9a:	6643      	str	r3, [r0, #100]	; 0x64
 800aa9c:	81c2      	strh	r2, [r0, #14]
 800aa9e:	6183      	str	r3, [r0, #24]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	2208      	movs	r2, #8
 800aaa4:	305c      	adds	r0, #92	; 0x5c
 800aaa6:	f000 f8f4 	bl	800ac92 <memset>
 800aaaa:	4b0d      	ldr	r3, [pc, #52]	; (800aae0 <std+0x58>)
 800aaac:	6263      	str	r3, [r4, #36]	; 0x24
 800aaae:	4b0d      	ldr	r3, [pc, #52]	; (800aae4 <std+0x5c>)
 800aab0:	62a3      	str	r3, [r4, #40]	; 0x28
 800aab2:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <std+0x60>)
 800aab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aab6:	4b0d      	ldr	r3, [pc, #52]	; (800aaec <std+0x64>)
 800aab8:	6323      	str	r3, [r4, #48]	; 0x30
 800aaba:	4b0d      	ldr	r3, [pc, #52]	; (800aaf0 <std+0x68>)
 800aabc:	6224      	str	r4, [r4, #32]
 800aabe:	429c      	cmp	r4, r3
 800aac0:	d006      	beq.n	800aad0 <std+0x48>
 800aac2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aac6:	4294      	cmp	r4, r2
 800aac8:	d002      	beq.n	800aad0 <std+0x48>
 800aaca:	33d0      	adds	r3, #208	; 0xd0
 800aacc:	429c      	cmp	r4, r3
 800aace:	d105      	bne.n	800aadc <std+0x54>
 800aad0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad8:	f000 b980 	b.w	800addc <__retarget_lock_init_recursive>
 800aadc:	bd10      	pop	{r4, pc}
 800aade:	bf00      	nop
 800aae0:	0800ac0d 	.word	0x0800ac0d
 800aae4:	0800ac2f 	.word	0x0800ac2f
 800aae8:	0800ac67 	.word	0x0800ac67
 800aaec:	0800ac8b 	.word	0x0800ac8b
 800aaf0:	2400148c 	.word	0x2400148c

0800aaf4 <stdio_exit_handler>:
 800aaf4:	4a02      	ldr	r2, [pc, #8]	; (800ab00 <stdio_exit_handler+0xc>)
 800aaf6:	4903      	ldr	r1, [pc, #12]	; (800ab04 <stdio_exit_handler+0x10>)
 800aaf8:	4803      	ldr	r0, [pc, #12]	; (800ab08 <stdio_exit_handler+0x14>)
 800aafa:	f000 b869 	b.w	800abd0 <_fwalk_sglue>
 800aafe:	bf00      	nop
 800ab00:	24000030 	.word	0x24000030
 800ab04:	0800b44d 	.word	0x0800b44d
 800ab08:	2400003c 	.word	0x2400003c

0800ab0c <cleanup_stdio>:
 800ab0c:	6841      	ldr	r1, [r0, #4]
 800ab0e:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <cleanup_stdio+0x34>)
 800ab10:	4299      	cmp	r1, r3
 800ab12:	b510      	push	{r4, lr}
 800ab14:	4604      	mov	r4, r0
 800ab16:	d001      	beq.n	800ab1c <cleanup_stdio+0x10>
 800ab18:	f000 fc98 	bl	800b44c <_fflush_r>
 800ab1c:	68a1      	ldr	r1, [r4, #8]
 800ab1e:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <cleanup_stdio+0x38>)
 800ab20:	4299      	cmp	r1, r3
 800ab22:	d002      	beq.n	800ab2a <cleanup_stdio+0x1e>
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 fc91 	bl	800b44c <_fflush_r>
 800ab2a:	68e1      	ldr	r1, [r4, #12]
 800ab2c:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <cleanup_stdio+0x3c>)
 800ab2e:	4299      	cmp	r1, r3
 800ab30:	d004      	beq.n	800ab3c <cleanup_stdio+0x30>
 800ab32:	4620      	mov	r0, r4
 800ab34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab38:	f000 bc88 	b.w	800b44c <_fflush_r>
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	bf00      	nop
 800ab40:	2400148c 	.word	0x2400148c
 800ab44:	240014f4 	.word	0x240014f4
 800ab48:	2400155c 	.word	0x2400155c

0800ab4c <global_stdio_init.part.0>:
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	4b0b      	ldr	r3, [pc, #44]	; (800ab7c <global_stdio_init.part.0+0x30>)
 800ab50:	4c0b      	ldr	r4, [pc, #44]	; (800ab80 <global_stdio_init.part.0+0x34>)
 800ab52:	4a0c      	ldr	r2, [pc, #48]	; (800ab84 <global_stdio_init.part.0+0x38>)
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	4620      	mov	r0, r4
 800ab58:	2200      	movs	r2, #0
 800ab5a:	2104      	movs	r1, #4
 800ab5c:	f7ff ff94 	bl	800aa88 <std>
 800ab60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab64:	2201      	movs	r2, #1
 800ab66:	2109      	movs	r1, #9
 800ab68:	f7ff ff8e 	bl	800aa88 <std>
 800ab6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab70:	2202      	movs	r2, #2
 800ab72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab76:	2112      	movs	r1, #18
 800ab78:	f7ff bf86 	b.w	800aa88 <std>
 800ab7c:	240015c4 	.word	0x240015c4
 800ab80:	2400148c 	.word	0x2400148c
 800ab84:	0800aaf5 	.word	0x0800aaf5

0800ab88 <__sfp_lock_acquire>:
 800ab88:	4801      	ldr	r0, [pc, #4]	; (800ab90 <__sfp_lock_acquire+0x8>)
 800ab8a:	f000 b928 	b.w	800adde <__retarget_lock_acquire_recursive>
 800ab8e:	bf00      	nop
 800ab90:	240015cd 	.word	0x240015cd

0800ab94 <__sfp_lock_release>:
 800ab94:	4801      	ldr	r0, [pc, #4]	; (800ab9c <__sfp_lock_release+0x8>)
 800ab96:	f000 b923 	b.w	800ade0 <__retarget_lock_release_recursive>
 800ab9a:	bf00      	nop
 800ab9c:	240015cd 	.word	0x240015cd

0800aba0 <__sinit>:
 800aba0:	b510      	push	{r4, lr}
 800aba2:	4604      	mov	r4, r0
 800aba4:	f7ff fff0 	bl	800ab88 <__sfp_lock_acquire>
 800aba8:	6a23      	ldr	r3, [r4, #32]
 800abaa:	b11b      	cbz	r3, 800abb4 <__sinit+0x14>
 800abac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb0:	f7ff bff0 	b.w	800ab94 <__sfp_lock_release>
 800abb4:	4b04      	ldr	r3, [pc, #16]	; (800abc8 <__sinit+0x28>)
 800abb6:	6223      	str	r3, [r4, #32]
 800abb8:	4b04      	ldr	r3, [pc, #16]	; (800abcc <__sinit+0x2c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1f5      	bne.n	800abac <__sinit+0xc>
 800abc0:	f7ff ffc4 	bl	800ab4c <global_stdio_init.part.0>
 800abc4:	e7f2      	b.n	800abac <__sinit+0xc>
 800abc6:	bf00      	nop
 800abc8:	0800ab0d 	.word	0x0800ab0d
 800abcc:	240015c4 	.word	0x240015c4

0800abd0 <_fwalk_sglue>:
 800abd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abd4:	4607      	mov	r7, r0
 800abd6:	4688      	mov	r8, r1
 800abd8:	4614      	mov	r4, r2
 800abda:	2600      	movs	r6, #0
 800abdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abe0:	f1b9 0901 	subs.w	r9, r9, #1
 800abe4:	d505      	bpl.n	800abf2 <_fwalk_sglue+0x22>
 800abe6:	6824      	ldr	r4, [r4, #0]
 800abe8:	2c00      	cmp	r4, #0
 800abea:	d1f7      	bne.n	800abdc <_fwalk_sglue+0xc>
 800abec:	4630      	mov	r0, r6
 800abee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abf2:	89ab      	ldrh	r3, [r5, #12]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d907      	bls.n	800ac08 <_fwalk_sglue+0x38>
 800abf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abfc:	3301      	adds	r3, #1
 800abfe:	d003      	beq.n	800ac08 <_fwalk_sglue+0x38>
 800ac00:	4629      	mov	r1, r5
 800ac02:	4638      	mov	r0, r7
 800ac04:	47c0      	blx	r8
 800ac06:	4306      	orrs	r6, r0
 800ac08:	3568      	adds	r5, #104	; 0x68
 800ac0a:	e7e9      	b.n	800abe0 <_fwalk_sglue+0x10>

0800ac0c <__sread>:
 800ac0c:	b510      	push	{r4, lr}
 800ac0e:	460c      	mov	r4, r1
 800ac10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac14:	f000 f894 	bl	800ad40 <_read_r>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	bfab      	itete	ge
 800ac1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac1e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac20:	181b      	addge	r3, r3, r0
 800ac22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac26:	bfac      	ite	ge
 800ac28:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac2a:	81a3      	strhlt	r3, [r4, #12]
 800ac2c:	bd10      	pop	{r4, pc}

0800ac2e <__swrite>:
 800ac2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac32:	461f      	mov	r7, r3
 800ac34:	898b      	ldrh	r3, [r1, #12]
 800ac36:	05db      	lsls	r3, r3, #23
 800ac38:	4605      	mov	r5, r0
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	4616      	mov	r6, r2
 800ac3e:	d505      	bpl.n	800ac4c <__swrite+0x1e>
 800ac40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac44:	2302      	movs	r3, #2
 800ac46:	2200      	movs	r2, #0
 800ac48:	f000 f868 	bl	800ad1c <_lseek_r>
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac56:	81a3      	strh	r3, [r4, #12]
 800ac58:	4632      	mov	r2, r6
 800ac5a:	463b      	mov	r3, r7
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac62:	f000 b87f 	b.w	800ad64 <_write_r>

0800ac66 <__sseek>:
 800ac66:	b510      	push	{r4, lr}
 800ac68:	460c      	mov	r4, r1
 800ac6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac6e:	f000 f855 	bl	800ad1c <_lseek_r>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	bf15      	itete	ne
 800ac78:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac82:	81a3      	strheq	r3, [r4, #12]
 800ac84:	bf18      	it	ne
 800ac86:	81a3      	strhne	r3, [r4, #12]
 800ac88:	bd10      	pop	{r4, pc}

0800ac8a <__sclose>:
 800ac8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac8e:	f000 b823 	b.w	800acd8 <_close_r>

0800ac92 <memset>:
 800ac92:	4402      	add	r2, r0
 800ac94:	4603      	mov	r3, r0
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d100      	bne.n	800ac9c <memset+0xa>
 800ac9a:	4770      	bx	lr
 800ac9c:	f803 1b01 	strb.w	r1, [r3], #1
 800aca0:	e7f9      	b.n	800ac96 <memset+0x4>
	...

0800aca4 <time>:
 800aca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aca6:	4b0b      	ldr	r3, [pc, #44]	; (800acd4 <time+0x30>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	4669      	mov	r1, sp
 800acac:	4604      	mov	r4, r0
 800acae:	6818      	ldr	r0, [r3, #0]
 800acb0:	f000 f822 	bl	800acf8 <_gettimeofday_r>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	bfbe      	ittt	lt
 800acb8:	f04f 32ff 	movlt.w	r2, #4294967295
 800acbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800acc0:	e9cd 2300 	strdlt	r2, r3, [sp]
 800acc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acc8:	b10c      	cbz	r4, 800acce <time+0x2a>
 800acca:	e9c4 0100 	strd	r0, r1, [r4]
 800acce:	b004      	add	sp, #16
 800acd0:	bd10      	pop	{r4, pc}
 800acd2:	bf00      	nop
 800acd4:	24000088 	.word	0x24000088

0800acd8 <_close_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d06      	ldr	r5, [pc, #24]	; (800acf4 <_close_r+0x1c>)
 800acdc:	2300      	movs	r3, #0
 800acde:	4604      	mov	r4, r0
 800ace0:	4608      	mov	r0, r1
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	f7f5 fd90 	bl	8000808 <_close>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d102      	bne.n	800acf2 <_close_r+0x1a>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	b103      	cbz	r3, 800acf2 <_close_r+0x1a>
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	240015c8 	.word	0x240015c8

0800acf8 <_gettimeofday_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d07      	ldr	r5, [pc, #28]	; (800ad18 <_gettimeofday_r+0x20>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	4611      	mov	r1, r2
 800ad04:	602b      	str	r3, [r5, #0]
 800ad06:	f000 fe93 	bl	800ba30 <_gettimeofday>
 800ad0a:	1c43      	adds	r3, r0, #1
 800ad0c:	d102      	bne.n	800ad14 <_gettimeofday_r+0x1c>
 800ad0e:	682b      	ldr	r3, [r5, #0]
 800ad10:	b103      	cbz	r3, 800ad14 <_gettimeofday_r+0x1c>
 800ad12:	6023      	str	r3, [r4, #0]
 800ad14:	bd38      	pop	{r3, r4, r5, pc}
 800ad16:	bf00      	nop
 800ad18:	240015c8 	.word	0x240015c8

0800ad1c <_lseek_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d07      	ldr	r5, [pc, #28]	; (800ad3c <_lseek_r+0x20>)
 800ad20:	4604      	mov	r4, r0
 800ad22:	4608      	mov	r0, r1
 800ad24:	4611      	mov	r1, r2
 800ad26:	2200      	movs	r2, #0
 800ad28:	602a      	str	r2, [r5, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	f7f5 fd83 	bl	8000836 <_lseek>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_lseek_r+0x1e>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_lseek_r+0x1e>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	240015c8 	.word	0x240015c8

0800ad40 <_read_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d07      	ldr	r5, [pc, #28]	; (800ad60 <_read_r+0x20>)
 800ad44:	4604      	mov	r4, r0
 800ad46:	4608      	mov	r0, r1
 800ad48:	4611      	mov	r1, r2
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	602a      	str	r2, [r5, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f7f5 fd9e 	bl	8000890 <_read>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_read_r+0x1e>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_read_r+0x1e>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	240015c8 	.word	0x240015c8

0800ad64 <_write_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d07      	ldr	r5, [pc, #28]	; (800ad84 <_write_r+0x20>)
 800ad68:	4604      	mov	r4, r0
 800ad6a:	4608      	mov	r0, r1
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	2200      	movs	r2, #0
 800ad70:	602a      	str	r2, [r5, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f7f5 fdb4 	bl	80008e0 <_write>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_write_r+0x1e>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_write_r+0x1e>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	240015c8 	.word	0x240015c8

0800ad88 <__errno>:
 800ad88:	4b01      	ldr	r3, [pc, #4]	; (800ad90 <__errno+0x8>)
 800ad8a:	6818      	ldr	r0, [r3, #0]
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	24000088 	.word	0x24000088

0800ad94 <__libc_init_array>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	4d0d      	ldr	r5, [pc, #52]	; (800adcc <__libc_init_array+0x38>)
 800ad98:	4c0d      	ldr	r4, [pc, #52]	; (800add0 <__libc_init_array+0x3c>)
 800ad9a:	1b64      	subs	r4, r4, r5
 800ad9c:	10a4      	asrs	r4, r4, #2
 800ad9e:	2600      	movs	r6, #0
 800ada0:	42a6      	cmp	r6, r4
 800ada2:	d109      	bne.n	800adb8 <__libc_init_array+0x24>
 800ada4:	4d0b      	ldr	r5, [pc, #44]	; (800add4 <__libc_init_array+0x40>)
 800ada6:	4c0c      	ldr	r4, [pc, #48]	; (800add8 <__libc_init_array+0x44>)
 800ada8:	f000 fe4a 	bl	800ba40 <_init>
 800adac:	1b64      	subs	r4, r4, r5
 800adae:	10a4      	asrs	r4, r4, #2
 800adb0:	2600      	movs	r6, #0
 800adb2:	42a6      	cmp	r6, r4
 800adb4:	d105      	bne.n	800adc2 <__libc_init_array+0x2e>
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
 800adb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adbc:	4798      	blx	r3
 800adbe:	3601      	adds	r6, #1
 800adc0:	e7ee      	b.n	800ada0 <__libc_init_array+0xc>
 800adc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800adc6:	4798      	blx	r3
 800adc8:	3601      	adds	r6, #1
 800adca:	e7f2      	b.n	800adb2 <__libc_init_array+0x1e>
 800adcc:	0800c7e4 	.word	0x0800c7e4
 800add0:	0800c7e4 	.word	0x0800c7e4
 800add4:	0800c7e4 	.word	0x0800c7e4
 800add8:	0800c7e8 	.word	0x0800c7e8

0800addc <__retarget_lock_init_recursive>:
 800addc:	4770      	bx	lr

0800adde <__retarget_lock_acquire_recursive>:
 800adde:	4770      	bx	lr

0800ade0 <__retarget_lock_release_recursive>:
 800ade0:	4770      	bx	lr
	...

0800ade4 <__assert_func>:
 800ade4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ade6:	4614      	mov	r4, r2
 800ade8:	461a      	mov	r2, r3
 800adea:	4b09      	ldr	r3, [pc, #36]	; (800ae10 <__assert_func+0x2c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4605      	mov	r5, r0
 800adf0:	68d8      	ldr	r0, [r3, #12]
 800adf2:	b14c      	cbz	r4, 800ae08 <__assert_func+0x24>
 800adf4:	4b07      	ldr	r3, [pc, #28]	; (800ae14 <__assert_func+0x30>)
 800adf6:	9100      	str	r1, [sp, #0]
 800adf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adfc:	4906      	ldr	r1, [pc, #24]	; (800ae18 <__assert_func+0x34>)
 800adfe:	462b      	mov	r3, r5
 800ae00:	f000 fb4c 	bl	800b49c <fiprintf>
 800ae04:	f000 fbf0 	bl	800b5e8 <abort>
 800ae08:	4b04      	ldr	r3, [pc, #16]	; (800ae1c <__assert_func+0x38>)
 800ae0a:	461c      	mov	r4, r3
 800ae0c:	e7f3      	b.n	800adf6 <__assert_func+0x12>
 800ae0e:	bf00      	nop
 800ae10:	24000088 	.word	0x24000088
 800ae14:	0800c773 	.word	0x0800c773
 800ae18:	0800c780 	.word	0x0800c780
 800ae1c:	0800c7ae 	.word	0x0800c7ae

0800ae20 <_free_r>:
 800ae20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae22:	2900      	cmp	r1, #0
 800ae24:	d044      	beq.n	800aeb0 <_free_r+0x90>
 800ae26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae2a:	9001      	str	r0, [sp, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ae32:	bfb8      	it	lt
 800ae34:	18e4      	addlt	r4, r4, r3
 800ae36:	f000 f8e7 	bl	800b008 <__malloc_lock>
 800ae3a:	4a1e      	ldr	r2, [pc, #120]	; (800aeb4 <_free_r+0x94>)
 800ae3c:	9801      	ldr	r0, [sp, #4]
 800ae3e:	6813      	ldr	r3, [r2, #0]
 800ae40:	b933      	cbnz	r3, 800ae50 <_free_r+0x30>
 800ae42:	6063      	str	r3, [r4, #4]
 800ae44:	6014      	str	r4, [r2, #0]
 800ae46:	b003      	add	sp, #12
 800ae48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae4c:	f000 b8e2 	b.w	800b014 <__malloc_unlock>
 800ae50:	42a3      	cmp	r3, r4
 800ae52:	d908      	bls.n	800ae66 <_free_r+0x46>
 800ae54:	6825      	ldr	r5, [r4, #0]
 800ae56:	1961      	adds	r1, r4, r5
 800ae58:	428b      	cmp	r3, r1
 800ae5a:	bf01      	itttt	eq
 800ae5c:	6819      	ldreq	r1, [r3, #0]
 800ae5e:	685b      	ldreq	r3, [r3, #4]
 800ae60:	1949      	addeq	r1, r1, r5
 800ae62:	6021      	streq	r1, [r4, #0]
 800ae64:	e7ed      	b.n	800ae42 <_free_r+0x22>
 800ae66:	461a      	mov	r2, r3
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	b10b      	cbz	r3, 800ae70 <_free_r+0x50>
 800ae6c:	42a3      	cmp	r3, r4
 800ae6e:	d9fa      	bls.n	800ae66 <_free_r+0x46>
 800ae70:	6811      	ldr	r1, [r2, #0]
 800ae72:	1855      	adds	r5, r2, r1
 800ae74:	42a5      	cmp	r5, r4
 800ae76:	d10b      	bne.n	800ae90 <_free_r+0x70>
 800ae78:	6824      	ldr	r4, [r4, #0]
 800ae7a:	4421      	add	r1, r4
 800ae7c:	1854      	adds	r4, r2, r1
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	6011      	str	r1, [r2, #0]
 800ae82:	d1e0      	bne.n	800ae46 <_free_r+0x26>
 800ae84:	681c      	ldr	r4, [r3, #0]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	6053      	str	r3, [r2, #4]
 800ae8a:	440c      	add	r4, r1
 800ae8c:	6014      	str	r4, [r2, #0]
 800ae8e:	e7da      	b.n	800ae46 <_free_r+0x26>
 800ae90:	d902      	bls.n	800ae98 <_free_r+0x78>
 800ae92:	230c      	movs	r3, #12
 800ae94:	6003      	str	r3, [r0, #0]
 800ae96:	e7d6      	b.n	800ae46 <_free_r+0x26>
 800ae98:	6825      	ldr	r5, [r4, #0]
 800ae9a:	1961      	adds	r1, r4, r5
 800ae9c:	428b      	cmp	r3, r1
 800ae9e:	bf04      	itt	eq
 800aea0:	6819      	ldreq	r1, [r3, #0]
 800aea2:	685b      	ldreq	r3, [r3, #4]
 800aea4:	6063      	str	r3, [r4, #4]
 800aea6:	bf04      	itt	eq
 800aea8:	1949      	addeq	r1, r1, r5
 800aeaa:	6021      	streq	r1, [r4, #0]
 800aeac:	6054      	str	r4, [r2, #4]
 800aeae:	e7ca      	b.n	800ae46 <_free_r+0x26>
 800aeb0:	b003      	add	sp, #12
 800aeb2:	bd30      	pop	{r4, r5, pc}
 800aeb4:	240015d0 	.word	0x240015d0

0800aeb8 <malloc>:
 800aeb8:	4b02      	ldr	r3, [pc, #8]	; (800aec4 <malloc+0xc>)
 800aeba:	4601      	mov	r1, r0
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	f000 b823 	b.w	800af08 <_malloc_r>
 800aec2:	bf00      	nop
 800aec4:	24000088 	.word	0x24000088

0800aec8 <sbrk_aligned>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	4e0e      	ldr	r6, [pc, #56]	; (800af04 <sbrk_aligned+0x3c>)
 800aecc:	460c      	mov	r4, r1
 800aece:	6831      	ldr	r1, [r6, #0]
 800aed0:	4605      	mov	r5, r0
 800aed2:	b911      	cbnz	r1, 800aeda <sbrk_aligned+0x12>
 800aed4:	f000 fb78 	bl	800b5c8 <_sbrk_r>
 800aed8:	6030      	str	r0, [r6, #0]
 800aeda:	4621      	mov	r1, r4
 800aedc:	4628      	mov	r0, r5
 800aede:	f000 fb73 	bl	800b5c8 <_sbrk_r>
 800aee2:	1c43      	adds	r3, r0, #1
 800aee4:	d00a      	beq.n	800aefc <sbrk_aligned+0x34>
 800aee6:	1cc4      	adds	r4, r0, #3
 800aee8:	f024 0403 	bic.w	r4, r4, #3
 800aeec:	42a0      	cmp	r0, r4
 800aeee:	d007      	beq.n	800af00 <sbrk_aligned+0x38>
 800aef0:	1a21      	subs	r1, r4, r0
 800aef2:	4628      	mov	r0, r5
 800aef4:	f000 fb68 	bl	800b5c8 <_sbrk_r>
 800aef8:	3001      	adds	r0, #1
 800aefa:	d101      	bne.n	800af00 <sbrk_aligned+0x38>
 800aefc:	f04f 34ff 	mov.w	r4, #4294967295
 800af00:	4620      	mov	r0, r4
 800af02:	bd70      	pop	{r4, r5, r6, pc}
 800af04:	240015d4 	.word	0x240015d4

0800af08 <_malloc_r>:
 800af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af0c:	1ccd      	adds	r5, r1, #3
 800af0e:	f025 0503 	bic.w	r5, r5, #3
 800af12:	3508      	adds	r5, #8
 800af14:	2d0c      	cmp	r5, #12
 800af16:	bf38      	it	cc
 800af18:	250c      	movcc	r5, #12
 800af1a:	2d00      	cmp	r5, #0
 800af1c:	4607      	mov	r7, r0
 800af1e:	db01      	blt.n	800af24 <_malloc_r+0x1c>
 800af20:	42a9      	cmp	r1, r5
 800af22:	d905      	bls.n	800af30 <_malloc_r+0x28>
 800af24:	230c      	movs	r3, #12
 800af26:	603b      	str	r3, [r7, #0]
 800af28:	2600      	movs	r6, #0
 800af2a:	4630      	mov	r0, r6
 800af2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b004 <_malloc_r+0xfc>
 800af34:	f000 f868 	bl	800b008 <__malloc_lock>
 800af38:	f8d8 3000 	ldr.w	r3, [r8]
 800af3c:	461c      	mov	r4, r3
 800af3e:	bb5c      	cbnz	r4, 800af98 <_malloc_r+0x90>
 800af40:	4629      	mov	r1, r5
 800af42:	4638      	mov	r0, r7
 800af44:	f7ff ffc0 	bl	800aec8 <sbrk_aligned>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	4604      	mov	r4, r0
 800af4c:	d155      	bne.n	800affa <_malloc_r+0xf2>
 800af4e:	f8d8 4000 	ldr.w	r4, [r8]
 800af52:	4626      	mov	r6, r4
 800af54:	2e00      	cmp	r6, #0
 800af56:	d145      	bne.n	800afe4 <_malloc_r+0xdc>
 800af58:	2c00      	cmp	r4, #0
 800af5a:	d048      	beq.n	800afee <_malloc_r+0xe6>
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	4631      	mov	r1, r6
 800af60:	4638      	mov	r0, r7
 800af62:	eb04 0903 	add.w	r9, r4, r3
 800af66:	f000 fb2f 	bl	800b5c8 <_sbrk_r>
 800af6a:	4581      	cmp	r9, r0
 800af6c:	d13f      	bne.n	800afee <_malloc_r+0xe6>
 800af6e:	6821      	ldr	r1, [r4, #0]
 800af70:	1a6d      	subs	r5, r5, r1
 800af72:	4629      	mov	r1, r5
 800af74:	4638      	mov	r0, r7
 800af76:	f7ff ffa7 	bl	800aec8 <sbrk_aligned>
 800af7a:	3001      	adds	r0, #1
 800af7c:	d037      	beq.n	800afee <_malloc_r+0xe6>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	442b      	add	r3, r5
 800af82:	6023      	str	r3, [r4, #0]
 800af84:	f8d8 3000 	ldr.w	r3, [r8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d038      	beq.n	800affe <_malloc_r+0xf6>
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	42a2      	cmp	r2, r4
 800af90:	d12b      	bne.n	800afea <_malloc_r+0xe2>
 800af92:	2200      	movs	r2, #0
 800af94:	605a      	str	r2, [r3, #4]
 800af96:	e00f      	b.n	800afb8 <_malloc_r+0xb0>
 800af98:	6822      	ldr	r2, [r4, #0]
 800af9a:	1b52      	subs	r2, r2, r5
 800af9c:	d41f      	bmi.n	800afde <_malloc_r+0xd6>
 800af9e:	2a0b      	cmp	r2, #11
 800afa0:	d917      	bls.n	800afd2 <_malloc_r+0xca>
 800afa2:	1961      	adds	r1, r4, r5
 800afa4:	42a3      	cmp	r3, r4
 800afa6:	6025      	str	r5, [r4, #0]
 800afa8:	bf18      	it	ne
 800afaa:	6059      	strne	r1, [r3, #4]
 800afac:	6863      	ldr	r3, [r4, #4]
 800afae:	bf08      	it	eq
 800afb0:	f8c8 1000 	streq.w	r1, [r8]
 800afb4:	5162      	str	r2, [r4, r5]
 800afb6:	604b      	str	r3, [r1, #4]
 800afb8:	4638      	mov	r0, r7
 800afba:	f104 060b 	add.w	r6, r4, #11
 800afbe:	f000 f829 	bl	800b014 <__malloc_unlock>
 800afc2:	f026 0607 	bic.w	r6, r6, #7
 800afc6:	1d23      	adds	r3, r4, #4
 800afc8:	1af2      	subs	r2, r6, r3
 800afca:	d0ae      	beq.n	800af2a <_malloc_r+0x22>
 800afcc:	1b9b      	subs	r3, r3, r6
 800afce:	50a3      	str	r3, [r4, r2]
 800afd0:	e7ab      	b.n	800af2a <_malloc_r+0x22>
 800afd2:	42a3      	cmp	r3, r4
 800afd4:	6862      	ldr	r2, [r4, #4]
 800afd6:	d1dd      	bne.n	800af94 <_malloc_r+0x8c>
 800afd8:	f8c8 2000 	str.w	r2, [r8]
 800afdc:	e7ec      	b.n	800afb8 <_malloc_r+0xb0>
 800afde:	4623      	mov	r3, r4
 800afe0:	6864      	ldr	r4, [r4, #4]
 800afe2:	e7ac      	b.n	800af3e <_malloc_r+0x36>
 800afe4:	4634      	mov	r4, r6
 800afe6:	6876      	ldr	r6, [r6, #4]
 800afe8:	e7b4      	b.n	800af54 <_malloc_r+0x4c>
 800afea:	4613      	mov	r3, r2
 800afec:	e7cc      	b.n	800af88 <_malloc_r+0x80>
 800afee:	230c      	movs	r3, #12
 800aff0:	603b      	str	r3, [r7, #0]
 800aff2:	4638      	mov	r0, r7
 800aff4:	f000 f80e 	bl	800b014 <__malloc_unlock>
 800aff8:	e797      	b.n	800af2a <_malloc_r+0x22>
 800affa:	6025      	str	r5, [r4, #0]
 800affc:	e7dc      	b.n	800afb8 <_malloc_r+0xb0>
 800affe:	605b      	str	r3, [r3, #4]
 800b000:	deff      	udf	#255	; 0xff
 800b002:	bf00      	nop
 800b004:	240015d0 	.word	0x240015d0

0800b008 <__malloc_lock>:
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__malloc_lock+0x8>)
 800b00a:	f7ff bee8 	b.w	800adde <__retarget_lock_acquire_recursive>
 800b00e:	bf00      	nop
 800b010:	240015cc 	.word	0x240015cc

0800b014 <__malloc_unlock>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__malloc_unlock+0x8>)
 800b016:	f7ff bee3 	b.w	800ade0 <__retarget_lock_release_recursive>
 800b01a:	bf00      	nop
 800b01c:	240015cc 	.word	0x240015cc

0800b020 <_printf_common>:
 800b020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b024:	4616      	mov	r6, r2
 800b026:	4699      	mov	r9, r3
 800b028:	688a      	ldr	r2, [r1, #8]
 800b02a:	690b      	ldr	r3, [r1, #16]
 800b02c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b030:	4293      	cmp	r3, r2
 800b032:	bfb8      	it	lt
 800b034:	4613      	movlt	r3, r2
 800b036:	6033      	str	r3, [r6, #0]
 800b038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b03c:	4607      	mov	r7, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	b10a      	cbz	r2, 800b046 <_printf_common+0x26>
 800b042:	3301      	adds	r3, #1
 800b044:	6033      	str	r3, [r6, #0]
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	0699      	lsls	r1, r3, #26
 800b04a:	bf42      	ittt	mi
 800b04c:	6833      	ldrmi	r3, [r6, #0]
 800b04e:	3302      	addmi	r3, #2
 800b050:	6033      	strmi	r3, [r6, #0]
 800b052:	6825      	ldr	r5, [r4, #0]
 800b054:	f015 0506 	ands.w	r5, r5, #6
 800b058:	d106      	bne.n	800b068 <_printf_common+0x48>
 800b05a:	f104 0a19 	add.w	sl, r4, #25
 800b05e:	68e3      	ldr	r3, [r4, #12]
 800b060:	6832      	ldr	r2, [r6, #0]
 800b062:	1a9b      	subs	r3, r3, r2
 800b064:	42ab      	cmp	r3, r5
 800b066:	dc26      	bgt.n	800b0b6 <_printf_common+0x96>
 800b068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b06c:	1e13      	subs	r3, r2, #0
 800b06e:	6822      	ldr	r2, [r4, #0]
 800b070:	bf18      	it	ne
 800b072:	2301      	movne	r3, #1
 800b074:	0692      	lsls	r2, r2, #26
 800b076:	d42b      	bmi.n	800b0d0 <_printf_common+0xb0>
 800b078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b07c:	4649      	mov	r1, r9
 800b07e:	4638      	mov	r0, r7
 800b080:	47c0      	blx	r8
 800b082:	3001      	adds	r0, #1
 800b084:	d01e      	beq.n	800b0c4 <_printf_common+0xa4>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	6922      	ldr	r2, [r4, #16]
 800b08a:	f003 0306 	and.w	r3, r3, #6
 800b08e:	2b04      	cmp	r3, #4
 800b090:	bf02      	ittt	eq
 800b092:	68e5      	ldreq	r5, [r4, #12]
 800b094:	6833      	ldreq	r3, [r6, #0]
 800b096:	1aed      	subeq	r5, r5, r3
 800b098:	68a3      	ldr	r3, [r4, #8]
 800b09a:	bf0c      	ite	eq
 800b09c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0a0:	2500      	movne	r5, #0
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	bfc4      	itt	gt
 800b0a6:	1a9b      	subgt	r3, r3, r2
 800b0a8:	18ed      	addgt	r5, r5, r3
 800b0aa:	2600      	movs	r6, #0
 800b0ac:	341a      	adds	r4, #26
 800b0ae:	42b5      	cmp	r5, r6
 800b0b0:	d11a      	bne.n	800b0e8 <_printf_common+0xc8>
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	e008      	b.n	800b0c8 <_printf_common+0xa8>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	4652      	mov	r2, sl
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	4638      	mov	r0, r7
 800b0be:	47c0      	blx	r8
 800b0c0:	3001      	adds	r0, #1
 800b0c2:	d103      	bne.n	800b0cc <_printf_common+0xac>
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0cc:	3501      	adds	r5, #1
 800b0ce:	e7c6      	b.n	800b05e <_printf_common+0x3e>
 800b0d0:	18e1      	adds	r1, r4, r3
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	2030      	movs	r0, #48	; 0x30
 800b0d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0da:	4422      	add	r2, r4
 800b0dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0e4:	3302      	adds	r3, #2
 800b0e6:	e7c7      	b.n	800b078 <_printf_common+0x58>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	4649      	mov	r1, r9
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	47c0      	blx	r8
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	d0e6      	beq.n	800b0c4 <_printf_common+0xa4>
 800b0f6:	3601      	adds	r6, #1
 800b0f8:	e7d9      	b.n	800b0ae <_printf_common+0x8e>
	...

0800b0fc <_printf_i>:
 800b0fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b100:	7e0f      	ldrb	r7, [r1, #24]
 800b102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b104:	2f78      	cmp	r7, #120	; 0x78
 800b106:	4691      	mov	r9, r2
 800b108:	4680      	mov	r8, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	469a      	mov	sl, r3
 800b10e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b112:	d807      	bhi.n	800b124 <_printf_i+0x28>
 800b114:	2f62      	cmp	r7, #98	; 0x62
 800b116:	d80a      	bhi.n	800b12e <_printf_i+0x32>
 800b118:	2f00      	cmp	r7, #0
 800b11a:	f000 80d4 	beq.w	800b2c6 <_printf_i+0x1ca>
 800b11e:	2f58      	cmp	r7, #88	; 0x58
 800b120:	f000 80c0 	beq.w	800b2a4 <_printf_i+0x1a8>
 800b124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b12c:	e03a      	b.n	800b1a4 <_printf_i+0xa8>
 800b12e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b132:	2b15      	cmp	r3, #21
 800b134:	d8f6      	bhi.n	800b124 <_printf_i+0x28>
 800b136:	a101      	add	r1, pc, #4	; (adr r1, 800b13c <_printf_i+0x40>)
 800b138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b13c:	0800b195 	.word	0x0800b195
 800b140:	0800b1a9 	.word	0x0800b1a9
 800b144:	0800b125 	.word	0x0800b125
 800b148:	0800b125 	.word	0x0800b125
 800b14c:	0800b125 	.word	0x0800b125
 800b150:	0800b125 	.word	0x0800b125
 800b154:	0800b1a9 	.word	0x0800b1a9
 800b158:	0800b125 	.word	0x0800b125
 800b15c:	0800b125 	.word	0x0800b125
 800b160:	0800b125 	.word	0x0800b125
 800b164:	0800b125 	.word	0x0800b125
 800b168:	0800b2ad 	.word	0x0800b2ad
 800b16c:	0800b1d5 	.word	0x0800b1d5
 800b170:	0800b267 	.word	0x0800b267
 800b174:	0800b125 	.word	0x0800b125
 800b178:	0800b125 	.word	0x0800b125
 800b17c:	0800b2cf 	.word	0x0800b2cf
 800b180:	0800b125 	.word	0x0800b125
 800b184:	0800b1d5 	.word	0x0800b1d5
 800b188:	0800b125 	.word	0x0800b125
 800b18c:	0800b125 	.word	0x0800b125
 800b190:	0800b26f 	.word	0x0800b26f
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	1d1a      	adds	r2, r3, #4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	602a      	str	r2, [r5, #0]
 800b19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e09f      	b.n	800b2e8 <_printf_i+0x1ec>
 800b1a8:	6820      	ldr	r0, [r4, #0]
 800b1aa:	682b      	ldr	r3, [r5, #0]
 800b1ac:	0607      	lsls	r7, r0, #24
 800b1ae:	f103 0104 	add.w	r1, r3, #4
 800b1b2:	6029      	str	r1, [r5, #0]
 800b1b4:	d501      	bpl.n	800b1ba <_printf_i+0xbe>
 800b1b6:	681e      	ldr	r6, [r3, #0]
 800b1b8:	e003      	b.n	800b1c2 <_printf_i+0xc6>
 800b1ba:	0646      	lsls	r6, r0, #25
 800b1bc:	d5fb      	bpl.n	800b1b6 <_printf_i+0xba>
 800b1be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b1c2:	2e00      	cmp	r6, #0
 800b1c4:	da03      	bge.n	800b1ce <_printf_i+0xd2>
 800b1c6:	232d      	movs	r3, #45	; 0x2d
 800b1c8:	4276      	negs	r6, r6
 800b1ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ce:	485a      	ldr	r0, [pc, #360]	; (800b338 <_printf_i+0x23c>)
 800b1d0:	230a      	movs	r3, #10
 800b1d2:	e012      	b.n	800b1fa <_printf_i+0xfe>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	6820      	ldr	r0, [r4, #0]
 800b1d8:	1d19      	adds	r1, r3, #4
 800b1da:	6029      	str	r1, [r5, #0]
 800b1dc:	0605      	lsls	r5, r0, #24
 800b1de:	d501      	bpl.n	800b1e4 <_printf_i+0xe8>
 800b1e0:	681e      	ldr	r6, [r3, #0]
 800b1e2:	e002      	b.n	800b1ea <_printf_i+0xee>
 800b1e4:	0641      	lsls	r1, r0, #25
 800b1e6:	d5fb      	bpl.n	800b1e0 <_printf_i+0xe4>
 800b1e8:	881e      	ldrh	r6, [r3, #0]
 800b1ea:	4853      	ldr	r0, [pc, #332]	; (800b338 <_printf_i+0x23c>)
 800b1ec:	2f6f      	cmp	r7, #111	; 0x6f
 800b1ee:	bf0c      	ite	eq
 800b1f0:	2308      	moveq	r3, #8
 800b1f2:	230a      	movne	r3, #10
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1fa:	6865      	ldr	r5, [r4, #4]
 800b1fc:	60a5      	str	r5, [r4, #8]
 800b1fe:	2d00      	cmp	r5, #0
 800b200:	bfa2      	ittt	ge
 800b202:	6821      	ldrge	r1, [r4, #0]
 800b204:	f021 0104 	bicge.w	r1, r1, #4
 800b208:	6021      	strge	r1, [r4, #0]
 800b20a:	b90e      	cbnz	r6, 800b210 <_printf_i+0x114>
 800b20c:	2d00      	cmp	r5, #0
 800b20e:	d04b      	beq.n	800b2a8 <_printf_i+0x1ac>
 800b210:	4615      	mov	r5, r2
 800b212:	fbb6 f1f3 	udiv	r1, r6, r3
 800b216:	fb03 6711 	mls	r7, r3, r1, r6
 800b21a:	5dc7      	ldrb	r7, [r0, r7]
 800b21c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b220:	4637      	mov	r7, r6
 800b222:	42bb      	cmp	r3, r7
 800b224:	460e      	mov	r6, r1
 800b226:	d9f4      	bls.n	800b212 <_printf_i+0x116>
 800b228:	2b08      	cmp	r3, #8
 800b22a:	d10b      	bne.n	800b244 <_printf_i+0x148>
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	07de      	lsls	r6, r3, #31
 800b230:	d508      	bpl.n	800b244 <_printf_i+0x148>
 800b232:	6923      	ldr	r3, [r4, #16]
 800b234:	6861      	ldr	r1, [r4, #4]
 800b236:	4299      	cmp	r1, r3
 800b238:	bfde      	ittt	le
 800b23a:	2330      	movle	r3, #48	; 0x30
 800b23c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b240:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b244:	1b52      	subs	r2, r2, r5
 800b246:	6122      	str	r2, [r4, #16]
 800b248:	f8cd a000 	str.w	sl, [sp]
 800b24c:	464b      	mov	r3, r9
 800b24e:	aa03      	add	r2, sp, #12
 800b250:	4621      	mov	r1, r4
 800b252:	4640      	mov	r0, r8
 800b254:	f7ff fee4 	bl	800b020 <_printf_common>
 800b258:	3001      	adds	r0, #1
 800b25a:	d14a      	bne.n	800b2f2 <_printf_i+0x1f6>
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	b004      	add	sp, #16
 800b262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	f043 0320 	orr.w	r3, r3, #32
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	4833      	ldr	r0, [pc, #204]	; (800b33c <_printf_i+0x240>)
 800b270:	2778      	movs	r7, #120	; 0x78
 800b272:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	6829      	ldr	r1, [r5, #0]
 800b27a:	061f      	lsls	r7, r3, #24
 800b27c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b280:	d402      	bmi.n	800b288 <_printf_i+0x18c>
 800b282:	065f      	lsls	r7, r3, #25
 800b284:	bf48      	it	mi
 800b286:	b2b6      	uxthmi	r6, r6
 800b288:	07df      	lsls	r7, r3, #31
 800b28a:	bf48      	it	mi
 800b28c:	f043 0320 	orrmi.w	r3, r3, #32
 800b290:	6029      	str	r1, [r5, #0]
 800b292:	bf48      	it	mi
 800b294:	6023      	strmi	r3, [r4, #0]
 800b296:	b91e      	cbnz	r6, 800b2a0 <_printf_i+0x1a4>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	f023 0320 	bic.w	r3, r3, #32
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	2310      	movs	r3, #16
 800b2a2:	e7a7      	b.n	800b1f4 <_printf_i+0xf8>
 800b2a4:	4824      	ldr	r0, [pc, #144]	; (800b338 <_printf_i+0x23c>)
 800b2a6:	e7e4      	b.n	800b272 <_printf_i+0x176>
 800b2a8:	4615      	mov	r5, r2
 800b2aa:	e7bd      	b.n	800b228 <_printf_i+0x12c>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	6826      	ldr	r6, [r4, #0]
 800b2b0:	6961      	ldr	r1, [r4, #20]
 800b2b2:	1d18      	adds	r0, r3, #4
 800b2b4:	6028      	str	r0, [r5, #0]
 800b2b6:	0635      	lsls	r5, r6, #24
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	d501      	bpl.n	800b2c0 <_printf_i+0x1c4>
 800b2bc:	6019      	str	r1, [r3, #0]
 800b2be:	e002      	b.n	800b2c6 <_printf_i+0x1ca>
 800b2c0:	0670      	lsls	r0, r6, #25
 800b2c2:	d5fb      	bpl.n	800b2bc <_printf_i+0x1c0>
 800b2c4:	8019      	strh	r1, [r3, #0]
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	6123      	str	r3, [r4, #16]
 800b2ca:	4615      	mov	r5, r2
 800b2cc:	e7bc      	b.n	800b248 <_printf_i+0x14c>
 800b2ce:	682b      	ldr	r3, [r5, #0]
 800b2d0:	1d1a      	adds	r2, r3, #4
 800b2d2:	602a      	str	r2, [r5, #0]
 800b2d4:	681d      	ldr	r5, [r3, #0]
 800b2d6:	6862      	ldr	r2, [r4, #4]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f7f5 f800 	bl	80002e0 <memchr>
 800b2e0:	b108      	cbz	r0, 800b2e6 <_printf_i+0x1ea>
 800b2e2:	1b40      	subs	r0, r0, r5
 800b2e4:	6060      	str	r0, [r4, #4]
 800b2e6:	6863      	ldr	r3, [r4, #4]
 800b2e8:	6123      	str	r3, [r4, #16]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2f0:	e7aa      	b.n	800b248 <_printf_i+0x14c>
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	462a      	mov	r2, r5
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	47d0      	blx	sl
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	d0ad      	beq.n	800b25c <_printf_i+0x160>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	079b      	lsls	r3, r3, #30
 800b304:	d413      	bmi.n	800b32e <_printf_i+0x232>
 800b306:	68e0      	ldr	r0, [r4, #12]
 800b308:	9b03      	ldr	r3, [sp, #12]
 800b30a:	4298      	cmp	r0, r3
 800b30c:	bfb8      	it	lt
 800b30e:	4618      	movlt	r0, r3
 800b310:	e7a6      	b.n	800b260 <_printf_i+0x164>
 800b312:	2301      	movs	r3, #1
 800b314:	4632      	mov	r2, r6
 800b316:	4649      	mov	r1, r9
 800b318:	4640      	mov	r0, r8
 800b31a:	47d0      	blx	sl
 800b31c:	3001      	adds	r0, #1
 800b31e:	d09d      	beq.n	800b25c <_printf_i+0x160>
 800b320:	3501      	adds	r5, #1
 800b322:	68e3      	ldr	r3, [r4, #12]
 800b324:	9903      	ldr	r1, [sp, #12]
 800b326:	1a5b      	subs	r3, r3, r1
 800b328:	42ab      	cmp	r3, r5
 800b32a:	dcf2      	bgt.n	800b312 <_printf_i+0x216>
 800b32c:	e7eb      	b.n	800b306 <_printf_i+0x20a>
 800b32e:	2500      	movs	r5, #0
 800b330:	f104 0619 	add.w	r6, r4, #25
 800b334:	e7f5      	b.n	800b322 <_printf_i+0x226>
 800b336:	bf00      	nop
 800b338:	0800c7af 	.word	0x0800c7af
 800b33c:	0800c7c0 	.word	0x0800c7c0

0800b340 <__sflush_r>:
 800b340:	898a      	ldrh	r2, [r1, #12]
 800b342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b346:	4605      	mov	r5, r0
 800b348:	0710      	lsls	r0, r2, #28
 800b34a:	460c      	mov	r4, r1
 800b34c:	d458      	bmi.n	800b400 <__sflush_r+0xc0>
 800b34e:	684b      	ldr	r3, [r1, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	dc05      	bgt.n	800b360 <__sflush_r+0x20>
 800b354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	dc02      	bgt.n	800b360 <__sflush_r+0x20>
 800b35a:	2000      	movs	r0, #0
 800b35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b362:	2e00      	cmp	r6, #0
 800b364:	d0f9      	beq.n	800b35a <__sflush_r+0x1a>
 800b366:	2300      	movs	r3, #0
 800b368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b36c:	682f      	ldr	r7, [r5, #0]
 800b36e:	6a21      	ldr	r1, [r4, #32]
 800b370:	602b      	str	r3, [r5, #0]
 800b372:	d032      	beq.n	800b3da <__sflush_r+0x9a>
 800b374:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b376:	89a3      	ldrh	r3, [r4, #12]
 800b378:	075a      	lsls	r2, r3, #29
 800b37a:	d505      	bpl.n	800b388 <__sflush_r+0x48>
 800b37c:	6863      	ldr	r3, [r4, #4]
 800b37e:	1ac0      	subs	r0, r0, r3
 800b380:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b382:	b10b      	cbz	r3, 800b388 <__sflush_r+0x48>
 800b384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b386:	1ac0      	subs	r0, r0, r3
 800b388:	2300      	movs	r3, #0
 800b38a:	4602      	mov	r2, r0
 800b38c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b38e:	6a21      	ldr	r1, [r4, #32]
 800b390:	4628      	mov	r0, r5
 800b392:	47b0      	blx	r6
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	d106      	bne.n	800b3a8 <__sflush_r+0x68>
 800b39a:	6829      	ldr	r1, [r5, #0]
 800b39c:	291d      	cmp	r1, #29
 800b39e:	d82b      	bhi.n	800b3f8 <__sflush_r+0xb8>
 800b3a0:	4a29      	ldr	r2, [pc, #164]	; (800b448 <__sflush_r+0x108>)
 800b3a2:	410a      	asrs	r2, r1
 800b3a4:	07d6      	lsls	r6, r2, #31
 800b3a6:	d427      	bmi.n	800b3f8 <__sflush_r+0xb8>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	6062      	str	r2, [r4, #4]
 800b3ac:	04d9      	lsls	r1, r3, #19
 800b3ae:	6922      	ldr	r2, [r4, #16]
 800b3b0:	6022      	str	r2, [r4, #0]
 800b3b2:	d504      	bpl.n	800b3be <__sflush_r+0x7e>
 800b3b4:	1c42      	adds	r2, r0, #1
 800b3b6:	d101      	bne.n	800b3bc <__sflush_r+0x7c>
 800b3b8:	682b      	ldr	r3, [r5, #0]
 800b3ba:	b903      	cbnz	r3, 800b3be <__sflush_r+0x7e>
 800b3bc:	6560      	str	r0, [r4, #84]	; 0x54
 800b3be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3c0:	602f      	str	r7, [r5, #0]
 800b3c2:	2900      	cmp	r1, #0
 800b3c4:	d0c9      	beq.n	800b35a <__sflush_r+0x1a>
 800b3c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3ca:	4299      	cmp	r1, r3
 800b3cc:	d002      	beq.n	800b3d4 <__sflush_r+0x94>
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f7ff fd26 	bl	800ae20 <_free_r>
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	6360      	str	r0, [r4, #52]	; 0x34
 800b3d8:	e7c0      	b.n	800b35c <__sflush_r+0x1c>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	4628      	mov	r0, r5
 800b3de:	47b0      	blx	r6
 800b3e0:	1c41      	adds	r1, r0, #1
 800b3e2:	d1c8      	bne.n	800b376 <__sflush_r+0x36>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d0c5      	beq.n	800b376 <__sflush_r+0x36>
 800b3ea:	2b1d      	cmp	r3, #29
 800b3ec:	d001      	beq.n	800b3f2 <__sflush_r+0xb2>
 800b3ee:	2b16      	cmp	r3, #22
 800b3f0:	d101      	bne.n	800b3f6 <__sflush_r+0xb6>
 800b3f2:	602f      	str	r7, [r5, #0]
 800b3f4:	e7b1      	b.n	800b35a <__sflush_r+0x1a>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3fc:	81a3      	strh	r3, [r4, #12]
 800b3fe:	e7ad      	b.n	800b35c <__sflush_r+0x1c>
 800b400:	690f      	ldr	r7, [r1, #16]
 800b402:	2f00      	cmp	r7, #0
 800b404:	d0a9      	beq.n	800b35a <__sflush_r+0x1a>
 800b406:	0793      	lsls	r3, r2, #30
 800b408:	680e      	ldr	r6, [r1, #0]
 800b40a:	bf08      	it	eq
 800b40c:	694b      	ldreq	r3, [r1, #20]
 800b40e:	600f      	str	r7, [r1, #0]
 800b410:	bf18      	it	ne
 800b412:	2300      	movne	r3, #0
 800b414:	eba6 0807 	sub.w	r8, r6, r7
 800b418:	608b      	str	r3, [r1, #8]
 800b41a:	f1b8 0f00 	cmp.w	r8, #0
 800b41e:	dd9c      	ble.n	800b35a <__sflush_r+0x1a>
 800b420:	6a21      	ldr	r1, [r4, #32]
 800b422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b424:	4643      	mov	r3, r8
 800b426:	463a      	mov	r2, r7
 800b428:	4628      	mov	r0, r5
 800b42a:	47b0      	blx	r6
 800b42c:	2800      	cmp	r0, #0
 800b42e:	dc06      	bgt.n	800b43e <__sflush_r+0xfe>
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b436:	81a3      	strh	r3, [r4, #12]
 800b438:	f04f 30ff 	mov.w	r0, #4294967295
 800b43c:	e78e      	b.n	800b35c <__sflush_r+0x1c>
 800b43e:	4407      	add	r7, r0
 800b440:	eba8 0800 	sub.w	r8, r8, r0
 800b444:	e7e9      	b.n	800b41a <__sflush_r+0xda>
 800b446:	bf00      	nop
 800b448:	dfbffffe 	.word	0xdfbffffe

0800b44c <_fflush_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	690b      	ldr	r3, [r1, #16]
 800b450:	4605      	mov	r5, r0
 800b452:	460c      	mov	r4, r1
 800b454:	b913      	cbnz	r3, 800b45c <_fflush_r+0x10>
 800b456:	2500      	movs	r5, #0
 800b458:	4628      	mov	r0, r5
 800b45a:	bd38      	pop	{r3, r4, r5, pc}
 800b45c:	b118      	cbz	r0, 800b466 <_fflush_r+0x1a>
 800b45e:	6a03      	ldr	r3, [r0, #32]
 800b460:	b90b      	cbnz	r3, 800b466 <_fflush_r+0x1a>
 800b462:	f7ff fb9d 	bl	800aba0 <__sinit>
 800b466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0f3      	beq.n	800b456 <_fflush_r+0xa>
 800b46e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b470:	07d0      	lsls	r0, r2, #31
 800b472:	d404      	bmi.n	800b47e <_fflush_r+0x32>
 800b474:	0599      	lsls	r1, r3, #22
 800b476:	d402      	bmi.n	800b47e <_fflush_r+0x32>
 800b478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b47a:	f7ff fcb0 	bl	800adde <__retarget_lock_acquire_recursive>
 800b47e:	4628      	mov	r0, r5
 800b480:	4621      	mov	r1, r4
 800b482:	f7ff ff5d 	bl	800b340 <__sflush_r>
 800b486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b488:	07da      	lsls	r2, r3, #31
 800b48a:	4605      	mov	r5, r0
 800b48c:	d4e4      	bmi.n	800b458 <_fflush_r+0xc>
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	059b      	lsls	r3, r3, #22
 800b492:	d4e1      	bmi.n	800b458 <_fflush_r+0xc>
 800b494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b496:	f7ff fca3 	bl	800ade0 <__retarget_lock_release_recursive>
 800b49a:	e7dd      	b.n	800b458 <_fflush_r+0xc>

0800b49c <fiprintf>:
 800b49c:	b40e      	push	{r1, r2, r3}
 800b49e:	b503      	push	{r0, r1, lr}
 800b4a0:	4601      	mov	r1, r0
 800b4a2:	ab03      	add	r3, sp, #12
 800b4a4:	4805      	ldr	r0, [pc, #20]	; (800b4bc <fiprintf+0x20>)
 800b4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4aa:	6800      	ldr	r0, [r0, #0]
 800b4ac:	9301      	str	r3, [sp, #4]
 800b4ae:	f000 f8cb 	bl	800b648 <_vfiprintf_r>
 800b4b2:	b002      	add	sp, #8
 800b4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4b8:	b003      	add	sp, #12
 800b4ba:	4770      	bx	lr
 800b4bc:	24000088 	.word	0x24000088

0800b4c0 <__swhatbuf_r>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c8:	2900      	cmp	r1, #0
 800b4ca:	b096      	sub	sp, #88	; 0x58
 800b4cc:	4615      	mov	r5, r2
 800b4ce:	461e      	mov	r6, r3
 800b4d0:	da0d      	bge.n	800b4ee <__swhatbuf_r+0x2e>
 800b4d2:	89a3      	ldrh	r3, [r4, #12]
 800b4d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b4d8:	f04f 0100 	mov.w	r1, #0
 800b4dc:	bf0c      	ite	eq
 800b4de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b4e2:	2340      	movne	r3, #64	; 0x40
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	6031      	str	r1, [r6, #0]
 800b4e8:	602b      	str	r3, [r5, #0]
 800b4ea:	b016      	add	sp, #88	; 0x58
 800b4ec:	bd70      	pop	{r4, r5, r6, pc}
 800b4ee:	466a      	mov	r2, sp
 800b4f0:	f000 f848 	bl	800b584 <_fstat_r>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	dbec      	blt.n	800b4d2 <__swhatbuf_r+0x12>
 800b4f8:	9901      	ldr	r1, [sp, #4]
 800b4fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b4fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b502:	4259      	negs	r1, r3
 800b504:	4159      	adcs	r1, r3
 800b506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b50a:	e7eb      	b.n	800b4e4 <__swhatbuf_r+0x24>

0800b50c <__smakebuf_r>:
 800b50c:	898b      	ldrh	r3, [r1, #12]
 800b50e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b510:	079d      	lsls	r5, r3, #30
 800b512:	4606      	mov	r6, r0
 800b514:	460c      	mov	r4, r1
 800b516:	d507      	bpl.n	800b528 <__smakebuf_r+0x1c>
 800b518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	6123      	str	r3, [r4, #16]
 800b520:	2301      	movs	r3, #1
 800b522:	6163      	str	r3, [r4, #20]
 800b524:	b002      	add	sp, #8
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	ab01      	add	r3, sp, #4
 800b52a:	466a      	mov	r2, sp
 800b52c:	f7ff ffc8 	bl	800b4c0 <__swhatbuf_r>
 800b530:	9900      	ldr	r1, [sp, #0]
 800b532:	4605      	mov	r5, r0
 800b534:	4630      	mov	r0, r6
 800b536:	f7ff fce7 	bl	800af08 <_malloc_r>
 800b53a:	b948      	cbnz	r0, 800b550 <__smakebuf_r+0x44>
 800b53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b540:	059a      	lsls	r2, r3, #22
 800b542:	d4ef      	bmi.n	800b524 <__smakebuf_r+0x18>
 800b544:	f023 0303 	bic.w	r3, r3, #3
 800b548:	f043 0302 	orr.w	r3, r3, #2
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	e7e3      	b.n	800b518 <__smakebuf_r+0xc>
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	6020      	str	r0, [r4, #0]
 800b554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b558:	81a3      	strh	r3, [r4, #12]
 800b55a:	9b00      	ldr	r3, [sp, #0]
 800b55c:	6163      	str	r3, [r4, #20]
 800b55e:	9b01      	ldr	r3, [sp, #4]
 800b560:	6120      	str	r0, [r4, #16]
 800b562:	b15b      	cbz	r3, 800b57c <__smakebuf_r+0x70>
 800b564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b568:	4630      	mov	r0, r6
 800b56a:	f000 f81d 	bl	800b5a8 <_isatty_r>
 800b56e:	b128      	cbz	r0, 800b57c <__smakebuf_r+0x70>
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	f023 0303 	bic.w	r3, r3, #3
 800b576:	f043 0301 	orr.w	r3, r3, #1
 800b57a:	81a3      	strh	r3, [r4, #12]
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	431d      	orrs	r5, r3
 800b580:	81a5      	strh	r5, [r4, #12]
 800b582:	e7cf      	b.n	800b524 <__smakebuf_r+0x18>

0800b584 <_fstat_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4d07      	ldr	r5, [pc, #28]	; (800b5a4 <_fstat_r+0x20>)
 800b588:	2300      	movs	r3, #0
 800b58a:	4604      	mov	r4, r0
 800b58c:	4608      	mov	r0, r1
 800b58e:	4611      	mov	r1, r2
 800b590:	602b      	str	r3, [r5, #0]
 800b592:	f7f5 f961 	bl	8000858 <_fstat>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	d102      	bne.n	800b5a0 <_fstat_r+0x1c>
 800b59a:	682b      	ldr	r3, [r5, #0]
 800b59c:	b103      	cbz	r3, 800b5a0 <_fstat_r+0x1c>
 800b59e:	6023      	str	r3, [r4, #0]
 800b5a0:	bd38      	pop	{r3, r4, r5, pc}
 800b5a2:	bf00      	nop
 800b5a4:	240015c8 	.word	0x240015c8

0800b5a8 <_isatty_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d06      	ldr	r5, [pc, #24]	; (800b5c4 <_isatty_r+0x1c>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f7f5 f912 	bl	80007dc <_isatty>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_isatty_r+0x1a>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_isatty_r+0x1a>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	240015c8 	.word	0x240015c8

0800b5c8 <_sbrk_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d06      	ldr	r5, [pc, #24]	; (800b5e4 <_sbrk_r+0x1c>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	602b      	str	r3, [r5, #0]
 800b5d4:	f7f5 fbf4 	bl	8000dc0 <_sbrk>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d102      	bne.n	800b5e2 <_sbrk_r+0x1a>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	b103      	cbz	r3, 800b5e2 <_sbrk_r+0x1a>
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	240015c8 	.word	0x240015c8

0800b5e8 <abort>:
 800b5e8:	b508      	push	{r3, lr}
 800b5ea:	2006      	movs	r0, #6
 800b5ec:	f000 fa04 	bl	800b9f8 <raise>
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	f7f5 fbda 	bl	8000daa <_exit>

0800b5f6 <__sfputc_r>:
 800b5f6:	6893      	ldr	r3, [r2, #8]
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	b410      	push	{r4}
 800b5fe:	6093      	str	r3, [r2, #8]
 800b600:	da08      	bge.n	800b614 <__sfputc_r+0x1e>
 800b602:	6994      	ldr	r4, [r2, #24]
 800b604:	42a3      	cmp	r3, r4
 800b606:	db01      	blt.n	800b60c <__sfputc_r+0x16>
 800b608:	290a      	cmp	r1, #10
 800b60a:	d103      	bne.n	800b614 <__sfputc_r+0x1e>
 800b60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b610:	f000 b934 	b.w	800b87c <__swbuf_r>
 800b614:	6813      	ldr	r3, [r2, #0]
 800b616:	1c58      	adds	r0, r3, #1
 800b618:	6010      	str	r0, [r2, #0]
 800b61a:	7019      	strb	r1, [r3, #0]
 800b61c:	4608      	mov	r0, r1
 800b61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <__sfputs_r>:
 800b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b626:	4606      	mov	r6, r0
 800b628:	460f      	mov	r7, r1
 800b62a:	4614      	mov	r4, r2
 800b62c:	18d5      	adds	r5, r2, r3
 800b62e:	42ac      	cmp	r4, r5
 800b630:	d101      	bne.n	800b636 <__sfputs_r+0x12>
 800b632:	2000      	movs	r0, #0
 800b634:	e007      	b.n	800b646 <__sfputs_r+0x22>
 800b636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b63a:	463a      	mov	r2, r7
 800b63c:	4630      	mov	r0, r6
 800b63e:	f7ff ffda 	bl	800b5f6 <__sfputc_r>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d1f3      	bne.n	800b62e <__sfputs_r+0xa>
 800b646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b648 <_vfiprintf_r>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	460d      	mov	r5, r1
 800b64e:	b09d      	sub	sp, #116	; 0x74
 800b650:	4614      	mov	r4, r2
 800b652:	4698      	mov	r8, r3
 800b654:	4606      	mov	r6, r0
 800b656:	b118      	cbz	r0, 800b660 <_vfiprintf_r+0x18>
 800b658:	6a03      	ldr	r3, [r0, #32]
 800b65a:	b90b      	cbnz	r3, 800b660 <_vfiprintf_r+0x18>
 800b65c:	f7ff faa0 	bl	800aba0 <__sinit>
 800b660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b662:	07d9      	lsls	r1, r3, #31
 800b664:	d405      	bmi.n	800b672 <_vfiprintf_r+0x2a>
 800b666:	89ab      	ldrh	r3, [r5, #12]
 800b668:	059a      	lsls	r2, r3, #22
 800b66a:	d402      	bmi.n	800b672 <_vfiprintf_r+0x2a>
 800b66c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b66e:	f7ff fbb6 	bl	800adde <__retarget_lock_acquire_recursive>
 800b672:	89ab      	ldrh	r3, [r5, #12]
 800b674:	071b      	lsls	r3, r3, #28
 800b676:	d501      	bpl.n	800b67c <_vfiprintf_r+0x34>
 800b678:	692b      	ldr	r3, [r5, #16]
 800b67a:	b99b      	cbnz	r3, 800b6a4 <_vfiprintf_r+0x5c>
 800b67c:	4629      	mov	r1, r5
 800b67e:	4630      	mov	r0, r6
 800b680:	f000 f93a 	bl	800b8f8 <__swsetup_r>
 800b684:	b170      	cbz	r0, 800b6a4 <_vfiprintf_r+0x5c>
 800b686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b688:	07dc      	lsls	r4, r3, #31
 800b68a:	d504      	bpl.n	800b696 <_vfiprintf_r+0x4e>
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295
 800b690:	b01d      	add	sp, #116	; 0x74
 800b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b696:	89ab      	ldrh	r3, [r5, #12]
 800b698:	0598      	lsls	r0, r3, #22
 800b69a:	d4f7      	bmi.n	800b68c <_vfiprintf_r+0x44>
 800b69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b69e:	f7ff fb9f 	bl	800ade0 <__retarget_lock_release_recursive>
 800b6a2:	e7f3      	b.n	800b68c <_vfiprintf_r+0x44>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a8:	2320      	movs	r3, #32
 800b6aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b2:	2330      	movs	r3, #48	; 0x30
 800b6b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b868 <_vfiprintf_r+0x220>
 800b6b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6bc:	f04f 0901 	mov.w	r9, #1
 800b6c0:	4623      	mov	r3, r4
 800b6c2:	469a      	mov	sl, r3
 800b6c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6c8:	b10a      	cbz	r2, 800b6ce <_vfiprintf_r+0x86>
 800b6ca:	2a25      	cmp	r2, #37	; 0x25
 800b6cc:	d1f9      	bne.n	800b6c2 <_vfiprintf_r+0x7a>
 800b6ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b6d2:	d00b      	beq.n	800b6ec <_vfiprintf_r+0xa4>
 800b6d4:	465b      	mov	r3, fp
 800b6d6:	4622      	mov	r2, r4
 800b6d8:	4629      	mov	r1, r5
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f7ff ffa2 	bl	800b624 <__sfputs_r>
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	f000 80a9 	beq.w	800b838 <_vfiprintf_r+0x1f0>
 800b6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6e8:	445a      	add	r2, fp
 800b6ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f000 80a1 	beq.w	800b838 <_vfiprintf_r+0x1f0>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b700:	f10a 0a01 	add.w	sl, sl, #1
 800b704:	9304      	str	r3, [sp, #16]
 800b706:	9307      	str	r3, [sp, #28]
 800b708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b70c:	931a      	str	r3, [sp, #104]	; 0x68
 800b70e:	4654      	mov	r4, sl
 800b710:	2205      	movs	r2, #5
 800b712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b716:	4854      	ldr	r0, [pc, #336]	; (800b868 <_vfiprintf_r+0x220>)
 800b718:	f7f4 fde2 	bl	80002e0 <memchr>
 800b71c:	9a04      	ldr	r2, [sp, #16]
 800b71e:	b9d8      	cbnz	r0, 800b758 <_vfiprintf_r+0x110>
 800b720:	06d1      	lsls	r1, r2, #27
 800b722:	bf44      	itt	mi
 800b724:	2320      	movmi	r3, #32
 800b726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b72a:	0713      	lsls	r3, r2, #28
 800b72c:	bf44      	itt	mi
 800b72e:	232b      	movmi	r3, #43	; 0x2b
 800b730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b734:	f89a 3000 	ldrb.w	r3, [sl]
 800b738:	2b2a      	cmp	r3, #42	; 0x2a
 800b73a:	d015      	beq.n	800b768 <_vfiprintf_r+0x120>
 800b73c:	9a07      	ldr	r2, [sp, #28]
 800b73e:	4654      	mov	r4, sl
 800b740:	2000      	movs	r0, #0
 800b742:	f04f 0c0a 	mov.w	ip, #10
 800b746:	4621      	mov	r1, r4
 800b748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b74c:	3b30      	subs	r3, #48	; 0x30
 800b74e:	2b09      	cmp	r3, #9
 800b750:	d94d      	bls.n	800b7ee <_vfiprintf_r+0x1a6>
 800b752:	b1b0      	cbz	r0, 800b782 <_vfiprintf_r+0x13a>
 800b754:	9207      	str	r2, [sp, #28]
 800b756:	e014      	b.n	800b782 <_vfiprintf_r+0x13a>
 800b758:	eba0 0308 	sub.w	r3, r0, r8
 800b75c:	fa09 f303 	lsl.w	r3, r9, r3
 800b760:	4313      	orrs	r3, r2
 800b762:	9304      	str	r3, [sp, #16]
 800b764:	46a2      	mov	sl, r4
 800b766:	e7d2      	b.n	800b70e <_vfiprintf_r+0xc6>
 800b768:	9b03      	ldr	r3, [sp, #12]
 800b76a:	1d19      	adds	r1, r3, #4
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	9103      	str	r1, [sp, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	bfbb      	ittet	lt
 800b774:	425b      	neglt	r3, r3
 800b776:	f042 0202 	orrlt.w	r2, r2, #2
 800b77a:	9307      	strge	r3, [sp, #28]
 800b77c:	9307      	strlt	r3, [sp, #28]
 800b77e:	bfb8      	it	lt
 800b780:	9204      	strlt	r2, [sp, #16]
 800b782:	7823      	ldrb	r3, [r4, #0]
 800b784:	2b2e      	cmp	r3, #46	; 0x2e
 800b786:	d10c      	bne.n	800b7a2 <_vfiprintf_r+0x15a>
 800b788:	7863      	ldrb	r3, [r4, #1]
 800b78a:	2b2a      	cmp	r3, #42	; 0x2a
 800b78c:	d134      	bne.n	800b7f8 <_vfiprintf_r+0x1b0>
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	1d1a      	adds	r2, r3, #4
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	9203      	str	r2, [sp, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	bfb8      	it	lt
 800b79a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b79e:	3402      	adds	r4, #2
 800b7a0:	9305      	str	r3, [sp, #20]
 800b7a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b878 <_vfiprintf_r+0x230>
 800b7a6:	7821      	ldrb	r1, [r4, #0]
 800b7a8:	2203      	movs	r2, #3
 800b7aa:	4650      	mov	r0, sl
 800b7ac:	f7f4 fd98 	bl	80002e0 <memchr>
 800b7b0:	b138      	cbz	r0, 800b7c2 <_vfiprintf_r+0x17a>
 800b7b2:	9b04      	ldr	r3, [sp, #16]
 800b7b4:	eba0 000a 	sub.w	r0, r0, sl
 800b7b8:	2240      	movs	r2, #64	; 0x40
 800b7ba:	4082      	lsls	r2, r0
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	3401      	adds	r4, #1
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c6:	4829      	ldr	r0, [pc, #164]	; (800b86c <_vfiprintf_r+0x224>)
 800b7c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7cc:	2206      	movs	r2, #6
 800b7ce:	f7f4 fd87 	bl	80002e0 <memchr>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d03f      	beq.n	800b856 <_vfiprintf_r+0x20e>
 800b7d6:	4b26      	ldr	r3, [pc, #152]	; (800b870 <_vfiprintf_r+0x228>)
 800b7d8:	bb1b      	cbnz	r3, 800b822 <_vfiprintf_r+0x1da>
 800b7da:	9b03      	ldr	r3, [sp, #12]
 800b7dc:	3307      	adds	r3, #7
 800b7de:	f023 0307 	bic.w	r3, r3, #7
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	9303      	str	r3, [sp, #12]
 800b7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e8:	443b      	add	r3, r7
 800b7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ec:	e768      	b.n	800b6c0 <_vfiprintf_r+0x78>
 800b7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	e7a6      	b.n	800b746 <_vfiprintf_r+0xfe>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	3401      	adds	r4, #1
 800b7fc:	9305      	str	r3, [sp, #20]
 800b7fe:	4619      	mov	r1, r3
 800b800:	f04f 0c0a 	mov.w	ip, #10
 800b804:	4620      	mov	r0, r4
 800b806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b80a:	3a30      	subs	r2, #48	; 0x30
 800b80c:	2a09      	cmp	r2, #9
 800b80e:	d903      	bls.n	800b818 <_vfiprintf_r+0x1d0>
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0c6      	beq.n	800b7a2 <_vfiprintf_r+0x15a>
 800b814:	9105      	str	r1, [sp, #20]
 800b816:	e7c4      	b.n	800b7a2 <_vfiprintf_r+0x15a>
 800b818:	fb0c 2101 	mla	r1, ip, r1, r2
 800b81c:	4604      	mov	r4, r0
 800b81e:	2301      	movs	r3, #1
 800b820:	e7f0      	b.n	800b804 <_vfiprintf_r+0x1bc>
 800b822:	ab03      	add	r3, sp, #12
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	462a      	mov	r2, r5
 800b828:	4b12      	ldr	r3, [pc, #72]	; (800b874 <_vfiprintf_r+0x22c>)
 800b82a:	a904      	add	r1, sp, #16
 800b82c:	4630      	mov	r0, r6
 800b82e:	f3af 8000 	nop.w
 800b832:	4607      	mov	r7, r0
 800b834:	1c78      	adds	r0, r7, #1
 800b836:	d1d6      	bne.n	800b7e6 <_vfiprintf_r+0x19e>
 800b838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b83a:	07d9      	lsls	r1, r3, #31
 800b83c:	d405      	bmi.n	800b84a <_vfiprintf_r+0x202>
 800b83e:	89ab      	ldrh	r3, [r5, #12]
 800b840:	059a      	lsls	r2, r3, #22
 800b842:	d402      	bmi.n	800b84a <_vfiprintf_r+0x202>
 800b844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b846:	f7ff facb 	bl	800ade0 <__retarget_lock_release_recursive>
 800b84a:	89ab      	ldrh	r3, [r5, #12]
 800b84c:	065b      	lsls	r3, r3, #25
 800b84e:	f53f af1d 	bmi.w	800b68c <_vfiprintf_r+0x44>
 800b852:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b854:	e71c      	b.n	800b690 <_vfiprintf_r+0x48>
 800b856:	ab03      	add	r3, sp, #12
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	462a      	mov	r2, r5
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <_vfiprintf_r+0x22c>)
 800b85e:	a904      	add	r1, sp, #16
 800b860:	4630      	mov	r0, r6
 800b862:	f7ff fc4b 	bl	800b0fc <_printf_i>
 800b866:	e7e4      	b.n	800b832 <_vfiprintf_r+0x1ea>
 800b868:	0800c7d1 	.word	0x0800c7d1
 800b86c:	0800c7db 	.word	0x0800c7db
 800b870:	00000000 	.word	0x00000000
 800b874:	0800b625 	.word	0x0800b625
 800b878:	0800c7d7 	.word	0x0800c7d7

0800b87c <__swbuf_r>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	460e      	mov	r6, r1
 800b880:	4614      	mov	r4, r2
 800b882:	4605      	mov	r5, r0
 800b884:	b118      	cbz	r0, 800b88e <__swbuf_r+0x12>
 800b886:	6a03      	ldr	r3, [r0, #32]
 800b888:	b90b      	cbnz	r3, 800b88e <__swbuf_r+0x12>
 800b88a:	f7ff f989 	bl	800aba0 <__sinit>
 800b88e:	69a3      	ldr	r3, [r4, #24]
 800b890:	60a3      	str	r3, [r4, #8]
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	071a      	lsls	r2, r3, #28
 800b896:	d525      	bpl.n	800b8e4 <__swbuf_r+0x68>
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	b31b      	cbz	r3, 800b8e4 <__swbuf_r+0x68>
 800b89c:	6823      	ldr	r3, [r4, #0]
 800b89e:	6922      	ldr	r2, [r4, #16]
 800b8a0:	1a98      	subs	r0, r3, r2
 800b8a2:	6963      	ldr	r3, [r4, #20]
 800b8a4:	b2f6      	uxtb	r6, r6
 800b8a6:	4283      	cmp	r3, r0
 800b8a8:	4637      	mov	r7, r6
 800b8aa:	dc04      	bgt.n	800b8b6 <__swbuf_r+0x3a>
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7ff fdcc 	bl	800b44c <_fflush_r>
 800b8b4:	b9e0      	cbnz	r0, 800b8f0 <__swbuf_r+0x74>
 800b8b6:	68a3      	ldr	r3, [r4, #8]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	60a3      	str	r3, [r4, #8]
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	1c5a      	adds	r2, r3, #1
 800b8c0:	6022      	str	r2, [r4, #0]
 800b8c2:	701e      	strb	r6, [r3, #0]
 800b8c4:	6962      	ldr	r2, [r4, #20]
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d004      	beq.n	800b8d6 <__swbuf_r+0x5a>
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	07db      	lsls	r3, r3, #31
 800b8d0:	d506      	bpl.n	800b8e0 <__swbuf_r+0x64>
 800b8d2:	2e0a      	cmp	r6, #10
 800b8d4:	d104      	bne.n	800b8e0 <__swbuf_r+0x64>
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4628      	mov	r0, r5
 800b8da:	f7ff fdb7 	bl	800b44c <_fflush_r>
 800b8de:	b938      	cbnz	r0, 800b8f0 <__swbuf_r+0x74>
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f000 f806 	bl	800b8f8 <__swsetup_r>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d0d5      	beq.n	800b89c <__swbuf_r+0x20>
 800b8f0:	f04f 37ff 	mov.w	r7, #4294967295
 800b8f4:	e7f4      	b.n	800b8e0 <__swbuf_r+0x64>
	...

0800b8f8 <__swsetup_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4b2a      	ldr	r3, [pc, #168]	; (800b9a4 <__swsetup_r+0xac>)
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	6818      	ldr	r0, [r3, #0]
 800b900:	460c      	mov	r4, r1
 800b902:	b118      	cbz	r0, 800b90c <__swsetup_r+0x14>
 800b904:	6a03      	ldr	r3, [r0, #32]
 800b906:	b90b      	cbnz	r3, 800b90c <__swsetup_r+0x14>
 800b908:	f7ff f94a 	bl	800aba0 <__sinit>
 800b90c:	89a3      	ldrh	r3, [r4, #12]
 800b90e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b912:	0718      	lsls	r0, r3, #28
 800b914:	d422      	bmi.n	800b95c <__swsetup_r+0x64>
 800b916:	06d9      	lsls	r1, r3, #27
 800b918:	d407      	bmi.n	800b92a <__swsetup_r+0x32>
 800b91a:	2309      	movs	r3, #9
 800b91c:	602b      	str	r3, [r5, #0]
 800b91e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b922:	81a3      	strh	r3, [r4, #12]
 800b924:	f04f 30ff 	mov.w	r0, #4294967295
 800b928:	e034      	b.n	800b994 <__swsetup_r+0x9c>
 800b92a:	0758      	lsls	r0, r3, #29
 800b92c:	d512      	bpl.n	800b954 <__swsetup_r+0x5c>
 800b92e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b930:	b141      	cbz	r1, 800b944 <__swsetup_r+0x4c>
 800b932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b936:	4299      	cmp	r1, r3
 800b938:	d002      	beq.n	800b940 <__swsetup_r+0x48>
 800b93a:	4628      	mov	r0, r5
 800b93c:	f7ff fa70 	bl	800ae20 <_free_r>
 800b940:	2300      	movs	r3, #0
 800b942:	6363      	str	r3, [r4, #52]	; 0x34
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b94a:	81a3      	strh	r3, [r4, #12]
 800b94c:	2300      	movs	r3, #0
 800b94e:	6063      	str	r3, [r4, #4]
 800b950:	6923      	ldr	r3, [r4, #16]
 800b952:	6023      	str	r3, [r4, #0]
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f043 0308 	orr.w	r3, r3, #8
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	6923      	ldr	r3, [r4, #16]
 800b95e:	b94b      	cbnz	r3, 800b974 <__swsetup_r+0x7c>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b96a:	d003      	beq.n	800b974 <__swsetup_r+0x7c>
 800b96c:	4621      	mov	r1, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	f7ff fdcc 	bl	800b50c <__smakebuf_r>
 800b974:	89a0      	ldrh	r0, [r4, #12]
 800b976:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b97a:	f010 0301 	ands.w	r3, r0, #1
 800b97e:	d00a      	beq.n	800b996 <__swsetup_r+0x9e>
 800b980:	2300      	movs	r3, #0
 800b982:	60a3      	str	r3, [r4, #8]
 800b984:	6963      	ldr	r3, [r4, #20]
 800b986:	425b      	negs	r3, r3
 800b988:	61a3      	str	r3, [r4, #24]
 800b98a:	6923      	ldr	r3, [r4, #16]
 800b98c:	b943      	cbnz	r3, 800b9a0 <__swsetup_r+0xa8>
 800b98e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b992:	d1c4      	bne.n	800b91e <__swsetup_r+0x26>
 800b994:	bd38      	pop	{r3, r4, r5, pc}
 800b996:	0781      	lsls	r1, r0, #30
 800b998:	bf58      	it	pl
 800b99a:	6963      	ldrpl	r3, [r4, #20]
 800b99c:	60a3      	str	r3, [r4, #8]
 800b99e:	e7f4      	b.n	800b98a <__swsetup_r+0x92>
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	e7f7      	b.n	800b994 <__swsetup_r+0x9c>
 800b9a4:	24000088 	.word	0x24000088

0800b9a8 <_raise_r>:
 800b9a8:	291f      	cmp	r1, #31
 800b9aa:	b538      	push	{r3, r4, r5, lr}
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	460d      	mov	r5, r1
 800b9b0:	d904      	bls.n	800b9bc <_raise_r+0x14>
 800b9b2:	2316      	movs	r3, #22
 800b9b4:	6003      	str	r3, [r0, #0]
 800b9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ba:	bd38      	pop	{r3, r4, r5, pc}
 800b9bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b9be:	b112      	cbz	r2, 800b9c6 <_raise_r+0x1e>
 800b9c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9c4:	b94b      	cbnz	r3, 800b9da <_raise_r+0x32>
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f000 f830 	bl	800ba2c <_getpid_r>
 800b9cc:	462a      	mov	r2, r5
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9d6:	f000 b817 	b.w	800ba08 <_kill_r>
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d00a      	beq.n	800b9f4 <_raise_r+0x4c>
 800b9de:	1c59      	adds	r1, r3, #1
 800b9e0:	d103      	bne.n	800b9ea <_raise_r+0x42>
 800b9e2:	2316      	movs	r3, #22
 800b9e4:	6003      	str	r3, [r0, #0]
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	e7e7      	b.n	800b9ba <_raise_r+0x12>
 800b9ea:	2400      	movs	r4, #0
 800b9ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	4798      	blx	r3
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	e7e0      	b.n	800b9ba <_raise_r+0x12>

0800b9f8 <raise>:
 800b9f8:	4b02      	ldr	r3, [pc, #8]	; (800ba04 <raise+0xc>)
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f7ff bfd3 	b.w	800b9a8 <_raise_r>
 800ba02:	bf00      	nop
 800ba04:	24000088 	.word	0x24000088

0800ba08 <_kill_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d07      	ldr	r5, [pc, #28]	; (800ba28 <_kill_r+0x20>)
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	4611      	mov	r1, r2
 800ba14:	602b      	str	r3, [r5, #0]
 800ba16:	f7f5 f9b8 	bl	8000d8a <_kill>
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	d102      	bne.n	800ba24 <_kill_r+0x1c>
 800ba1e:	682b      	ldr	r3, [r5, #0]
 800ba20:	b103      	cbz	r3, 800ba24 <_kill_r+0x1c>
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	bd38      	pop	{r3, r4, r5, pc}
 800ba26:	bf00      	nop
 800ba28:	240015c8 	.word	0x240015c8

0800ba2c <_getpid_r>:
 800ba2c:	f7f5 b9a5 	b.w	8000d7a <_getpid>

0800ba30 <_gettimeofday>:
 800ba30:	4b02      	ldr	r3, [pc, #8]	; (800ba3c <_gettimeofday+0xc>)
 800ba32:	2258      	movs	r2, #88	; 0x58
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3a:	4770      	bx	lr
 800ba3c:	240015c8 	.word	0x240015c8

0800ba40 <_init>:
 800ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba42:	bf00      	nop
 800ba44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba46:	bc08      	pop	{r3}
 800ba48:	469e      	mov	lr, r3
 800ba4a:	4770      	bx	lr

0800ba4c <_fini>:
 800ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4e:	bf00      	nop
 800ba50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba52:	bc08      	pop	{r3}
 800ba54:	469e      	mov	lr, r3
 800ba56:	4770      	bx	lr
