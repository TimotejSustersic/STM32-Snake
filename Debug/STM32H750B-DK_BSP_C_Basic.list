
STM32H750B-DK_BSP_C_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c338  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d37c  0800d37c  0001d37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d380  0800d380  0001d380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  24000000  0800d384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001554  24000094  0800d418  00020094  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240015e8  0800d418  000215e8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031463  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005d01  00000000  00000000  00051568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000025c0  00000000  00000000  00057270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d76  00000000  00000000  00059830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009f26  00000000  00000000  0005b5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003413c  00000000  00000000  000654cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a912f  00000000  00000000  00099608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ac10  00000000  00000000  00242738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000060  00000000  00000000  0024d348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000094 	.word	0x24000094
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c5c0 	.word	0x0800c5c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000098 	.word	0x24000098
 80002dc:	0800c5c0 	.word	0x0800c5c0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <gameMain>:
static uint32_t ButtonPressed(int GPIO, int pin);
static void resetVariables();
static void addtoSnake(int x, int y, int new);
static void Init_Buttons(void);

void gameMain() {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

    Init_Buttons();
 8000386:	f000 fa6f 	bl	8000868 <Init_Buttons>

    // LTCD setup
    BSP_LCD_GetXSize(0, &x_size);
 800038a:	492b      	ldr	r1, [pc, #172]	; (8000438 <gameMain+0xb8>)
 800038c:	2000      	movs	r0, #0
 800038e:	f002 fa7b 	bl	8002888 <BSP_LCD_GetXSize>
    BSP_LCD_GetYSize(0, &y_size);
 8000392:	492a      	ldr	r1, [pc, #168]	; (800043c <gameMain+0xbc>)
 8000394:	2000      	movs	r0, #0
 8000396:	f002 fa95 	bl	80028c4 <BSP_LCD_GetYSize>
    
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800039a:	f04f 30ff 	mov.w	r0, #4294967295
 800039e:	f000 fca7 	bl	8000cf0 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetLayer(0);
 80003a2:	2000      	movs	r0, #0
 80003a4:	f000 fc86 	bl	8000cb4 <UTIL_LCD_SetLayer>

    x_grid = x_size / cellSize;
 80003a8:	4b23      	ldr	r3, [pc, #140]	; (8000438 <gameMain+0xb8>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a24      	ldr	r2, [pc, #144]	; (8000440 <gameMain+0xc0>)
 80003ae:	6812      	ldr	r2, [r2, #0]
 80003b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b23      	ldr	r3, [pc, #140]	; (8000444 <gameMain+0xc4>)
 80003b8:	601a      	str	r2, [r3, #0]
    y_grid = y_size / cellSize;
 80003ba:	4b20      	ldr	r3, [pc, #128]	; (800043c <gameMain+0xbc>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a20      	ldr	r2, [pc, #128]	; (8000440 <gameMain+0xc0>)
 80003c0:	6812      	ldr	r2, [r2, #0]
 80003c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <gameMain+0xc8>)
 80003ca:	601a      	str	r2, [r3, #0]

    x_border = (x_size - (x_grid * cellSize)) / 2; 
 80003cc:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <gameMain+0xb8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a1c      	ldr	r2, [pc, #112]	; (8000444 <gameMain+0xc4>)
 80003d2:	6812      	ldr	r2, [r2, #0]
 80003d4:	491a      	ldr	r1, [pc, #104]	; (8000440 <gameMain+0xc0>)
 80003d6:	6809      	ldr	r1, [r1, #0]
 80003d8:	fb01 f202 	mul.w	r2, r1, r2
 80003dc:	1a9b      	subs	r3, r3, r2
 80003de:	085b      	lsrs	r3, r3, #1
 80003e0:	461a      	mov	r2, r3
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <gameMain+0xcc>)
 80003e4:	601a      	str	r2, [r3, #0]
    y_border = (y_size - (y_grid * cellSize)) / 2; 
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <gameMain+0xbc>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a17      	ldr	r2, [pc, #92]	; (8000448 <gameMain+0xc8>)
 80003ec:	6812      	ldr	r2, [r2, #0]
 80003ee:	4914      	ldr	r1, [pc, #80]	; (8000440 <gameMain+0xc0>)
 80003f0:	6809      	ldr	r1, [r1, #0]
 80003f2:	fb01 f202 	mul.w	r2, r1, r2
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	085b      	lsrs	r3, r3, #1
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <gameMain+0xd0>)
 80003fe:	601a      	str	r2, [r3, #0]

    // create start node
    struct node *newNode = (struct node*) malloc(sizeof(struct node));
 8000400:	2010      	movs	r0, #16
 8000402:	f00a fef3 	bl	800b1ec <malloc>
 8000406:	4603      	mov	r3, r0
 8000408:	607b      	str	r3, [r7, #4]
    head = newNode;
 800040a:	4a12      	ldr	r2, [pc, #72]	; (8000454 <gameMain+0xd4>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6013      	str	r3, [r2, #0]
    tail = newNode;
 8000410:	4a11      	ldr	r2, [pc, #68]	; (8000458 <gameMain+0xd8>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6013      	str	r3, [r2, #0]
     * 2. Game Over
    */
    while (1)
    {
        // game
        if (gameStage == 0)
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <gameMain+0xdc>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d102      	bne.n	8000424 <gameMain+0xa4>
            gameStart();
 800041e:	f000 f81f 	bl	8000460 <gameStart>
 8000422:	e7f8      	b.n	8000416 <gameMain+0x96>
        else if (gameStage == 1)
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <gameMain+0xdc>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d102      	bne.n	8000432 <gameMain+0xb2>
            game();
 800042c:	f000 f832 	bl	8000494 <game>
 8000430:	e7f1      	b.n	8000416 <gameMain+0x96>
        else
            gameOver();
 8000432:	f000 f8a9 	bl	8000588 <gameOver>
        if (gameStage == 0)
 8000436:	e7ee      	b.n	8000416 <gameMain+0x96>
 8000438:	240000b8 	.word	0x240000b8
 800043c:	240000bc 	.word	0x240000bc
 8000440:	24000000 	.word	0x24000000
 8000444:	240000c4 	.word	0x240000c4
 8000448:	240000c8 	.word	0x240000c8
 800044c:	240000cc 	.word	0x240000cc
 8000450:	240000d0 	.word	0x240000d0
 8000454:	240000b0 	.word	0x240000b0
 8000458:	240000b4 	.word	0x240000b4
 800045c:	240000c0 	.word	0x240000c0

08000460 <gameStart>:
    }
    
}

static void gameStart() {
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

    // 1. Draw shit and reset variables
    resetVariables();
 8000464:	f000 f9ba 	bl	80007dc <resetVariables>
    DrawCanvas();
 8000468:	f000 f8da 	bl	8000620 <DrawCanvas>

    // 2. wait for user input
    while (!BSP_PB_GetState(BUTTON_USER_PIN)) { }
 800046c:	bf00      	nop
 800046e:	2000      	movs	r0, #0
 8000470:	f001 fc20 	bl	8001cb4 <BSP_PB_GetState>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f9      	beq.n	800046e <gameStart+0xe>

     DrawGridCell(0, 0, 2);
 800047a:	2202      	movs	r2, #2
 800047c:	2100      	movs	r1, #0
 800047e:	2000      	movs	r0, #0
 8000480:	f000 f91a 	bl	80006b8 <DrawGridCell>
    
    gameStage = 1;
 8000484:	4b02      	ldr	r3, [pc, #8]	; (8000490 <gameStart+0x30>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	240000c0 	.word	0x240000c0

08000494 <game>:

// game logic
static void game() {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0

    // initial
    BSP_LED_Off(LED_GREEN);
 800049a:	2000      	movs	r0, #0
 800049c:	f001 fb7a 	bl	8001b94 <BSP_LED_Off>

    // New Location //
    ////////////////////////////
    int x_new = head->x; 
 80004a0:	4b35      	ldr	r3, [pc, #212]	; (8000578 <game+0xe4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	607b      	str	r3, [r7, #4]
    int y_new = head->y;
 80004a8:	4b33      	ldr	r3, [pc, #204]	; (8000578 <game+0xe4>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	603b      	str	r3, [r7, #0]
    
    if (HAL_GPIO_ReadPin(GPIOB, BUTTON_UP) == GPIO_PIN_RESET)// && smer != 2)
 80004b0:	2140      	movs	r1, #64	; 0x40
 80004b2:	4832      	ldr	r0, [pc, #200]	; (800057c <game+0xe8>)
 80004b4:	f005 fbfe 	bl	8005cb4 <HAL_GPIO_ReadPin>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d105      	bne.n	80004ca <game+0x36>
        DrawGridCell(5, 10, 2);
 80004be:	2202      	movs	r2, #2
 80004c0:	210a      	movs	r1, #10
 80004c2:	2005      	movs	r0, #5
 80004c4:	f000 f8f8 	bl	80006b8 <DrawGridCell>
 80004c8:	e004      	b.n	80004d4 <game+0x40>
    else 
        DrawGridCell(5, 10, 3);
 80004ca:	2203      	movs	r2, #3
 80004cc:	210a      	movs	r1, #10
 80004ce:	2005      	movs	r0, #5
 80004d0:	f000 f8f2 	bl	80006b8 <DrawGridCell>
        smer = 0;
 80004d4:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <game+0xec>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_RIGHT) == GPIO_PIN_RESET)// && smer != 3)
 80004da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004de:	4829      	ldr	r0, [pc, #164]	; (8000584 <game+0xf0>)
 80004e0:	f005 fbe8 	bl	8005cb4 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d105      	bne.n	80004f6 <game+0x62>
        // smer = 1;
        DrawGridCell(5, 5, 2);
 80004ea:	2202      	movs	r2, #2
 80004ec:	2105      	movs	r1, #5
 80004ee:	2005      	movs	r0, #5
 80004f0:	f000 f8e2 	bl	80006b8 <DrawGridCell>
 80004f4:	e004      	b.n	8000500 <game+0x6c>
    else
        DrawGridCell(5, 5, 3);
 80004f6:	2203      	movs	r2, #3
 80004f8:	2105      	movs	r1, #5
 80004fa:	2005      	movs	r0, #5
 80004fc:	f000 f8dc 	bl	80006b8 <DrawGridCell>
    if (HAL_GPIO_ReadPin(GPIOB, BUTTON_DOWN) == GPIO_PIN_RESET)// && smer != 0)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	481e      	ldr	r0, [pc, #120]	; (800057c <game+0xe8>)
 8000504:	f005 fbd6 	bl	8005cb4 <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d105      	bne.n	800051a <game+0x86>
        // smer = 2;
        DrawGridCell(10, 5, 2);
 800050e:	2202      	movs	r2, #2
 8000510:	2105      	movs	r1, #5
 8000512:	200a      	movs	r0, #10
 8000514:	f000 f8d0 	bl	80006b8 <DrawGridCell>
 8000518:	e004      	b.n	8000524 <game+0x90>
        else
        DrawGridCell(10, 5, 3);
 800051a:	2203      	movs	r2, #3
 800051c:	2105      	movs	r1, #5
 800051e:	200a      	movs	r0, #10
 8000520:	f000 f8ca 	bl	80006b8 <DrawGridCell>
    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_LEFT) == GPIO_PIN_RESET)// && smer != 1)
 8000524:	2140      	movs	r1, #64	; 0x40
 8000526:	4817      	ldr	r0, [pc, #92]	; (8000584 <game+0xf0>)
 8000528:	f005 fbc4 	bl	8005cb4 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d105      	bne.n	800053e <game+0xaa>
        // smer = 3;
        DrawGridCell(10, 10, 2);
 8000532:	2202      	movs	r2, #2
 8000534:	210a      	movs	r1, #10
 8000536:	200a      	movs	r0, #10
 8000538:	f000 f8be 	bl	80006b8 <DrawGridCell>
 800053c:	e004      	b.n	8000548 <game+0xb4>
        else
        DrawGridCell(10, 10, 3);
 800053e:	2203      	movs	r2, #3
 8000540:	210a      	movs	r1, #10
 8000542:	200a      	movs	r0, #10
 8000544:	f000 f8b8 	bl	80006b8 <DrawGridCell>
    if (BSP_PB_GetState(BUTTON_USER_PIN))
 8000548:	2000      	movs	r0, #0
 800054a:	f001 fbb3 	bl	8001cb4 <BSP_PB_GetState>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d005      	beq.n	8000560 <game+0xcc>
        // smer = 3;
        DrawGridCell(15, 15, 2);
 8000554:	2202      	movs	r2, #2
 8000556:	210f      	movs	r1, #15
 8000558:	200f      	movs	r0, #15
 800055a:	f000 f8ad 	bl	80006b8 <DrawGridCell>
 800055e:	e004      	b.n	800056a <game+0xd6>
        else
        DrawGridCell(15, 15, 3);
 8000560:	2203      	movs	r2, #3
 8000562:	210f      	movs	r1, #15
 8000564:	200f      	movs	r0, #15
 8000566:	f000 f8a7 	bl	80006b8 <DrawGridCell>

    HAL_Delay(100);
 800056a:	2064      	movs	r0, #100	; 0x64
 800056c:	f003 f8da 	bl	8003724 <HAL_Delay>
    return;
 8000570:	bf00      	nop
    ////////////////////////////

    addtoSnake(x_new, y_new, appleCollision);

    HAL_Delay(1000);
}
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	240000b0 	.word	0x240000b0
 800057c:	58020400 	.word	0x58020400
 8000580:	24000008 	.word	0x24000008
 8000584:	58020000 	.word	0x58020000

08000588 <gameOver>:

static void gameOver() {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af02      	add	r7, sp, #8

    // Draw Game over and display score
    UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800058e:	f04f 30ff 	mov.w	r0, #4294967295
 8000592:	f000 fc5d 	bl	8000e50 <UTIL_LCD_Clear>

    BSP_LED_Off(LED_GREEN);
 8000596:	2000      	movs	r0, #0
 8000598:	f001 fafc 	bl	8001b94 <BSP_LED_Off>
    BSP_LED_On(LED_RED);
 800059c:	2001      	movs	r0, #1
 800059e:	f001 fadb 	bl	8001b58 <BSP_LED_On>

    UTIL_LCD_SetFont(&Font16);
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <gameOver+0x84>)
 80005a4:	f000 fbb8 	bl	8000d18 <UTIL_LCD_SetFont>
    UTIL_LCD_DrawRect(400, 400, 400, 50, UTIL_LCD_COLOR_BLACK);
 80005a8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2332      	movs	r3, #50	; 0x32
 80005b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80005b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80005bc:	f000 fd42 	bl	8001044 <UTIL_LCD_DrawRect>

    char go;
    sprintf(go, "Game Over");
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	4913      	ldr	r1, [pc, #76]	; (8000610 <gameOver+0x88>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f00a ffbd 	bl	800b544 <siprintf>
    UTIL_LCD_DisplayStringAt(450, 450, (uint8_t *)go, CENTER_MODE);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	461a      	mov	r2, r3
 80005ce:	2301      	movs	r3, #1
 80005d0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80005d4:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80005d8:	f000 fc86 	bl	8000ee8 <UTIL_LCD_DisplayStringAt>
    char sc;
    sprintf(sc, "Score: %d", snakeLength);
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <gameOver+0x8c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	490c      	ldr	r1, [pc, #48]	; (8000618 <gameOver+0x90>)
 80005e8:	f00a ffac 	bl	800b544 <siprintf>
    UTIL_LCD_DisplayStringAt(450, 500, (uint8_t *)sc, CENTER_MODE);
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	461a      	mov	r2, r3
 80005f0:	2301      	movs	r3, #1
 80005f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005f6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80005fa:	f000 fc75 	bl	8000ee8 <UTIL_LCD_DisplayStringAt>

    // wait for 5 seconds
    // HAL_Delay(5000);
    // back to start
    gameStage = 0;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <gameOver+0x94>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2400000c 	.word	0x2400000c
 8000610:	0800c5d8 	.word	0x0800c5d8
 8000614:	24000004 	.word	0x24000004
 8000618:	0800c5e4 	.word	0x0800c5e4
 800061c:	240000c0 	.word	0x240000c0

08000620 <DrawCanvas>:

static void DrawCanvas() {    
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af02      	add	r7, sp, #8

    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000626:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800062a:	f000 fc11 	bl	8000e50 <UTIL_LCD_Clear>
    // main platform
    UTIL_LCD_DrawRect(x_border, y_border, x_size - 2*x_border, y_size - 2*y_border, UTIL_LCD_COLOR_WHITE);
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <DrawCanvas+0x80>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <DrawCanvas+0x84>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	461c      	mov	r4, r3
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <DrawCanvas+0x88>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <DrawCanvas+0x80>)
 8000640:	6812      	ldr	r2, [r2, #0]
 8000642:	0052      	lsls	r2, r2, #1
 8000644:	1a99      	subs	r1, r3, r2
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <DrawCanvas+0x8c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a16      	ldr	r2, [pc, #88]	; (80006a4 <DrawCanvas+0x84>)
 800064c:	6812      	ldr	r2, [r2, #0]
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	f04f 32ff 	mov.w	r2, #4294967295
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	460a      	mov	r2, r1
 800065a:	4621      	mov	r1, r4
 800065c:	f000 fcf2 	bl	8001044 <UTIL_LCD_DrawRect>

    // grid
    for (int i = 0; i < x_grid; i++) 
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	e012      	b.n	800068c <DrawCanvas+0x6c>
        for (int j = 0; j < y_grid; j++) 
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	e007      	b.n	800067c <DrawCanvas+0x5c>
            DrawGridCell(i, j, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	6839      	ldr	r1, [r7, #0]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f821 	bl	80006b8 <DrawGridCell>
        for (int j = 0; j < y_grid; j++) 
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <DrawCanvas+0x90>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	429a      	cmp	r2, r3
 8000684:	dbf2      	blt.n	800066c <DrawCanvas+0x4c>
    for (int i = 0; i < x_grid; i++) 
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3301      	adds	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <DrawCanvas+0x94>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	429a      	cmp	r2, r3
 8000694:	dbe7      	blt.n	8000666 <DrawCanvas+0x46>
}
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bd90      	pop	{r4, r7, pc}
 80006a0:	240000cc 	.word	0x240000cc
 80006a4:	240000d0 	.word	0x240000d0
 80006a8:	240000b8 	.word	0x240000b8
 80006ac:	240000bc 	.word	0x240000bc
 80006b0:	240000c8 	.word	0x240000c8
 80006b4:	240000c4 	.word	0x240000c4

080006b8 <DrawGridCell>:

static void DrawGridCell(int x, int y, int type) {
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af02      	add	r7, sp, #8
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]

    // if we want to draw off grid its an error and game over
    if (
        x >= x_grid || 
 80006c4:	4b3d      	ldr	r3, [pc, #244]	; (80007bc <DrawGridCell+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
    if (
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	da0a      	bge.n	80006e4 <DrawGridCell+0x2c>
        y >= y_grid ||
 80006ce:	4b3c      	ldr	r3, [pc, #240]	; (80007c0 <DrawGridCell+0x108>)
 80006d0:	681b      	ldr	r3, [r3, #0]
        x >= x_grid || 
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	da05      	bge.n	80006e4 <DrawGridCell+0x2c>
        y >= y_grid ||
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db02      	blt.n	80006e4 <DrawGridCell+0x2c>
        x < 0 || 
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	da02      	bge.n	80006ea <DrawGridCell+0x32>
        y < 0           
    ) {
        gameStage = 2;
 80006e4:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <DrawGridCell+0x10c>)
 80006e6:	2202      	movs	r2, #2
 80006e8:	601a      	str	r2, [r3, #0]
    }

    int x_pos = x * cellSize + x_border;
 80006ea:	4b37      	ldr	r3, [pc, #220]	; (80007c8 <DrawGridCell+0x110>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	fb03 f202 	mul.w	r2, r3, r2
 80006f4:	4b35      	ldr	r3, [pc, #212]	; (80007cc <DrawGridCell+0x114>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	617b      	str	r3, [r7, #20]
    int y_pos = y * cellSize + y_border;
 80006fc:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <DrawGridCell+0x110>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	fb03 f202 	mul.w	r2, r3, r2
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <DrawGridCell+0x118>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4413      	add	r3, r2
 800070c:	613b      	str	r3, [r7, #16]

    // snake Body
    if (type == 1) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d10e      	bne.n	8000732 <DrawGridCell+0x7a>
        // UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_LIGHTMAGENTA);
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_LIGHTMAGENTA);
 8000714:	6978      	ldr	r0, [r7, #20]
 8000716:	6939      	ldr	r1, [r7, #16]
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <DrawGridCell+0x110>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <DrawGridCell+0x110>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	461c      	mov	r4, r3
 8000724:	f46f 43fe 	mvn.w	r3, #32512	; 0x7f00
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	4623      	mov	r3, r4
 800072c:	f000 fcb4 	bl	8001098 <UTIL_LCD_FillRect>
    // empty cell
    else if (type == 0) {
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_BLACK);
        UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, 0xFF070707UL);
    }
}
 8000730:	e040      	b.n	80007b4 <DrawGridCell+0xfc>
    else if (type == 2) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d10e      	bne.n	8000756 <DrawGridCell+0x9e>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_MAGENTA);
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	6939      	ldr	r1, [r7, #16]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <DrawGridCell+0x110>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <DrawGridCell+0x110>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	461c      	mov	r4, r3
 8000748:	f46f 437f 	mvn.w	r3, #65280	; 0xff00
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	4623      	mov	r3, r4
 8000750:	f000 fca2 	bl	8001098 <UTIL_LCD_FillRect>
}
 8000754:	e02e      	b.n	80007b4 <DrawGridCell+0xfc>
    else if (type == 3) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b03      	cmp	r3, #3
 800075a:	d10d      	bne.n	8000778 <DrawGridCell+0xc0>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_DARKRED);
 800075c:	6978      	ldr	r0, [r7, #20]
 800075e:	6939      	ldr	r1, [r7, #16]
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <DrawGridCell+0x110>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <DrawGridCell+0x110>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	461c      	mov	r4, r3
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <DrawGridCell+0x11c>)
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	4623      	mov	r3, r4
 8000772:	f000 fc91 	bl	8001098 <UTIL_LCD_FillRect>
}
 8000776:	e01d      	b.n	80007b4 <DrawGridCell+0xfc>
    else if (type == 0) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d11a      	bne.n	80007b4 <DrawGridCell+0xfc>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_BLACK);
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	6939      	ldr	r1, [r7, #16]
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <DrawGridCell+0x110>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <DrawGridCell+0x110>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	461c      	mov	r4, r3
 800078e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	4623      	mov	r3, r4
 8000796:	f000 fc7f 	bl	8001098 <UTIL_LCD_FillRect>
        UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, 0xFF070707UL);
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	6939      	ldr	r1, [r7, #16]
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <DrawGridCell+0x110>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <DrawGridCell+0x110>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	461c      	mov	r4, r3
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <DrawGridCell+0x120>)
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	4623      	mov	r3, r4
 80007b0:	f000 fc48 	bl	8001044 <UTIL_LCD_DrawRect>
}
 80007b4:	bf00      	nop
 80007b6:	371c      	adds	r7, #28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	240000c4 	.word	0x240000c4
 80007c0:	240000c8 	.word	0x240000c8
 80007c4:	240000c0 	.word	0x240000c0
 80007c8:	24000000 	.word	0x24000000
 80007cc:	240000cc 	.word	0x240000cc
 80007d0:	240000d0 	.word	0x240000d0
 80007d4:	ff800000 	.word	0xff800000
 80007d8:	ff070707 	.word	0xff070707

080007dc <resetVariables>:
        pressed = HAL_GPIO_ReadPin(GPIO, pin);
            
    return HAL_GetTick() - startTime;
}

static void resetVariables() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

    BSP_LED_Off(LED_GREEN);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f001 f9d6 	bl	8001b94 <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f001 f9d3 	bl	8001b94 <BSP_LED_Off>

    // pobrisemo kaco
    while (snakeLength > 1)
 80007ee:	e00f      	b.n	8000810 <resetVariables+0x34>
    {
        node_t* deletingNode = head;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <resetVariables+0x7c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	607b      	str	r3, [r7, #4]
        head = head->next;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <resetVariables+0x7c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <resetVariables+0x7c>)
 80007fe:	6013      	str	r3, [r2, #0]
        free(deletingNode);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f00a fcfb 	bl	800b1fc <free>
        snakeLength--;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <resetVariables+0x80>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	3b01      	subs	r3, #1
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <resetVariables+0x80>)
 800080e:	6013      	str	r3, [r2, #0]
    while (snakeLength > 1)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <resetVariables+0x80>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	dceb      	bgt.n	80007f0 <resetVariables+0x14>
    }

    head->x = x_grid / 2;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <resetVariables+0x84>)
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <resetVariables+0x7c>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	460b      	mov	r3, r1
 8000822:	2b00      	cmp	r3, #0
 8000824:	da00      	bge.n	8000828 <resetVariables+0x4c>
 8000826:	3301      	adds	r3, #1
 8000828:	105b      	asrs	r3, r3, #1
 800082a:	6013      	str	r3, [r2, #0]
    head->y = y_grid / 2;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <resetVariables+0x88>)
 800082e:	6819      	ldr	r1, [r3, #0]
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <resetVariables+0x7c>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	460b      	mov	r3, r1
 8000836:	2b00      	cmp	r3, #0
 8000838:	da00      	bge.n	800083c <resetVariables+0x60>
 800083a:	3301      	adds	r3, #1
 800083c:	105b      	asrs	r3, r3, #1
 800083e:	6053      	str	r3, [r2, #4]
    head->next = NULL;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <resetVariables+0x7c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
    head->prev = NULL;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <resetVariables+0x7c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	240000b0 	.word	0x240000b0
 800085c:	24000004 	.word	0x24000004
 8000860:	240000c4 	.word	0x240000c4
 8000864:	240000c8 	.word	0x240000c8

08000868 <Init_Buttons>:
        // s pomnilnika
        free(deletingNode);
    }
}

static void Init_Buttons(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <Init_Buttons+0x84>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <Init_Buttons+0x84>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <Init_Buttons+0x84>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <Init_Buttons+0x84>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <Init_Buttons+0x84>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <Init_Buttons+0x84>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
   
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]

    GPIO_InitStruct.Pin = BUTTON_LEFT | BUTTON_RIGHT;
 80008c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008c6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <Init_Buttons+0x88>)
 80008d0:	f005 f840 	bl	8005954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUTTON_UP | BUTTON_DOWN;
 80008d4:	23c0      	movs	r3, #192	; 0xc0
 80008d6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <Init_Buttons+0x8c>)
 80008e0:	f005 f838 	bl	8005954 <HAL_GPIO_Init>
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58024400 	.word	0x58024400
 80008f0:	58020000 	.word	0x58020000
 80008f4:	58020400 	.word	0x58020400

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
  */
  HAL_Init();
 80008fc:	f002 fe80 	bl	8003600 <HAL_Init>

  SystemClock_Config();
 8000900:	f000 f836 	bl	8000970 <SystemClock_Config>

  BSP_PB_Init(BUTTON_USER_PIN, BUTTON_MODE_GPIO);
 8000904:	2100      	movs	r1, #0
 8000906:	2000      	movs	r0, #0
 8000908:	f001 f962 	bl	8001bd0 <BSP_PB_Init>
  BSP_LED_Init(LED_GREEN);
 800090c:	2000      	movs	r0, #0
 800090e:	f001 f8c5 	bl	8001a9c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000912:	2001      	movs	r0, #1
 8000914:	f001 f8c2 	bl	8001a9c <BSP_LED_Init>

 	srand(time(NULL));   // Initialization, should only be called once.
 8000918:	2000      	movs	r0, #0
 800091a:	f00a fe7f 	bl	800b61c <time>
 800091e:	4602      	mov	r2, r0
 8000920:	460b      	mov	r3, r1
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	f00a fd1d 	bl	800b364 <srand>
	// HAL_IncTick();

  ////////////////////////////////////////////////////////
  // LTDC INIT
  ////////////////////////////////////////////////////////
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 800092a:	2101      	movs	r1, #1
 800092c:	2000      	movs	r0, #0
 800092e:	f001 fdcf 	bl	80024d0 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <main+0x4c>)
 8000934:	f000 f968 	bl	8000c08 <UTIL_LCD_SetFuncDriver>

  gameMain();
 8000938:	f7ff fd22 	bl	8000380 <gameMain>

  return 0;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0800d270 	.word	0x0800d270

08000948 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <BSP_PB_Callback+0x24>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	240000d4 	.word	0x240000d4

08000970 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09e      	sub	sp, #120	; 0x78
 8000974:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800097c:	2002      	movs	r0, #2
 800097e:	f006 fbd7 	bl	8007130 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b42      	ldr	r3, [pc, #264]	; (8000a90 <SystemClock_Config+0x120>)
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	4a41      	ldr	r2, [pc, #260]	; (8000a90 <SystemClock_Config+0x120>)
 800098c:	f023 0301 	bic.w	r3, r3, #1
 8000990:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000992:	4b3f      	ldr	r3, [pc, #252]	; (8000a90 <SystemClock_Config+0x120>)
 8000994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b3d      	ldr	r3, [pc, #244]	; (8000a94 <SystemClock_Config+0x124>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a3c      	ldr	r2, [pc, #240]	; (8000a94 <SystemClock_Config+0x124>)
 80009a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b3a      	ldr	r3, [pc, #232]	; (8000a94 <SystemClock_Config+0x124>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b4:	bf00      	nop
 80009b6:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <SystemClock_Config+0x124>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c2:	d1f8      	bne.n	80009b6 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009cc:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	2302      	movs	r3, #2
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80009de:	2305      	movs	r3, #5
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 80009e2:	23a0      	movs	r3, #160	; 0xa0
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f2:	2304      	movs	r3, #4
 80009f4:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009fa:	2308      	movs	r3, #8
 80009fc:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4618      	mov	r0, r3
 8000a04:	f006 fbce 	bl	80071a4 <HAL_RCC_OscConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000a0e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a16:	f000 f841 	bl	8000a9c <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000a1a:	233f      	movs	r3, #63	; 0x3f
 8000a1c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a26:	2308      	movs	r3, #8
 8000a28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2e:	2340      	movs	r3, #64	; 0x40
 8000a30:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a36:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a38:	2340      	movs	r3, #64	; 0x40
 8000a3a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a40:	2104      	movs	r1, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f007 f808 	bl	8007a58 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000a4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a56:	f000 f821 	bl	8000a9c <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <SystemClock_Config+0x128>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <SystemClock_Config+0x128>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <SystemClock_Config+0x128>)
 8000a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <SystemClock_Config+0x128>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <SystemClock_Config+0x128>)
 8000a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 8000a84:	f002 fe7e 	bl	8003784 <HAL_EnableCompensationCell>
}
 8000a88:	bf00      	nop
 8000a8a:	3778      	adds	r7, #120	; 0x78
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	58000400 	.word	0x58000400
 8000a94:	58024800 	.word	0x58024800
 8000a98:	58024400 	.word	0x58024400

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f001 f857 	bl	8001b58 <BSP_LED_On>
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <Error_Handler+0xe>

08000aac <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db04      	blt.n	8000ac4 <_isatty+0x18>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	dc01      	bgt.n	8000ac4 <_isatty+0x18>
    return 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e005      	b.n	8000ad0 <_isatty+0x24>

  errno = EBADF;
 8000ac4:	f00a fe2c 	bl	800b720 <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2209      	movs	r2, #9
 8000acc:	601a      	str	r2, [r3, #0]
  return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_close>:

int _close(int fd) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db04      	blt.n	8000af0 <_close+0x18>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	dc01      	bgt.n	8000af0 <_close+0x18>
    return 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e006      	b.n	8000afe <_close+0x26>

  errno = EBADF;
 8000af0:	f00a fe16 	bl	800b720 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2209      	movs	r2, #9
 8000af8:	601a      	str	r2, [r3, #0]
  return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b084      	sub	sp, #16
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000b12:	f00a fe05 	bl	800b720 <__errno>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2209      	movs	r2, #9
 8000b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_fstat>:



int _fstat(int fd, struct stat* st) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db08      	blt.n	8000b4a <_fstat+0x22>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	dc05      	bgt.n	8000b4a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b44:	605a      	str	r2, [r3, #4]
    return 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e005      	b.n	8000b56 <_fstat+0x2e>
  }

  errno = EBADF;
 8000b4a:	f00a fde9 	bl	800b720 <__errno>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2209      	movs	r2, #9
 8000b52:	601a      	str	r2, [r3, #0]
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <_read>:


int _read(int fd, char* ptr, int len) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d110      	bne.n	8000b94 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <_read+0x4c>)
 8000b74:	6818      	ldr	r0, [r3, #0]
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	f009 fa51 	bl	800a024 <HAL_UART_Receive>
 8000b82:	4603      	mov	r3, r0
 8000b84:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b86:	7dfb      	ldrb	r3, [r7, #23]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d101      	bne.n	8000b90 <_read+0x30>
      return 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e008      	b.n	8000ba2 <_read+0x42>
    else
      return EIO;
 8000b90:	2305      	movs	r3, #5
 8000b92:	e006      	b.n	8000ba2 <_read+0x42>
  }
  errno = EBADF;
 8000b94:	f00a fdc4 	bl	800b720 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2209      	movs	r2, #9
 8000b9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	240001b8 	.word	0x240001b8

08000bb0 <_write>:

int _write(int fd, char* ptr, int len) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d002      	beq.n	8000bc8 <_write+0x18>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d111      	bne.n	8000bec <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <_write+0x54>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	f009 f997 	bl	8009f08 <HAL_UART_Transmit>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000bde:	7dfb      	ldrb	r3, [r7, #23]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <_write+0x38>
      return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	e008      	b.n	8000bfa <_write+0x4a>
    else
      return EIO;
 8000be8:	2305      	movs	r3, #5
 8000bea:	e006      	b.n	8000bfa <_write+0x4a>
  }
  errno = EBADF;
 8000bec:	f00a fd98 	bl	800b720 <__errno>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2209      	movs	r2, #9
 8000bf4:	601a      	str	r2, [r3, #0]
  return -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	240001b8 	.word	0x240001b8

08000c08 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c16:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c1e:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c26:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c2e:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c36:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c3e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c46:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c4e:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c56:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c5e:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c66:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <UTIL_LCD_SetFuncDriver+0xa0>)
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <UTIL_LCD_SetFuncDriver+0xa4>)
 8000c86:	4611      	mov	r1, r2
 8000c88:	2000      	movs	r0, #0
 8000c8a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <UTIL_LCD_SetFuncDriver+0xa8>)
 8000c92:	4611      	mov	r1, r2
 8000c94:	2000      	movs	r0, #0
 8000c96:	4798      	blx	r3
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	240001fc 	.word	0x240001fc
 8000ca4:	240001bc 	.word	0x240001bc
 8000ca8:	240001d0 	.word	0x240001d0
 8000cac:	240001d4 	.word	0x240001d4
 8000cb0:	240001d8 	.word	0x240001d8

08000cb4 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <UTIL_LCD_SetLayer+0x34>)
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00c      	beq.n	8000cde <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <UTIL_LCD_SetLayer+0x34>)
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	4a08      	ldr	r2, [pc, #32]	; (8000cec <UTIL_LCD_SetLayer+0x38>)
 8000cca:	6912      	ldr	r2, [r2, #16]
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	4610      	mov	r0, r2
 8000cd0:	4798      	blx	r3
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <UTIL_LCD_SetLayer+0x38>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60d3      	str	r3, [r2, #12]
    }
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	240001fc 	.word	0x240001fc
 8000cec:	240001bc 	.word	0x240001bc

08000cf0 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <UTIL_LCD_SetBackColor+0x24>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <UTIL_LCD_SetBackColor+0x24>)
 8000cfe:	015b      	lsls	r3, r3, #5
 8000d00:	4413      	add	r3, r2
 8000d02:	3304      	adds	r3, #4
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	240001bc 	.word	0x240001bc

08000d18 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <UTIL_LCD_SetFont+0x24>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <UTIL_LCD_SetFont+0x24>)
 8000d26:	015b      	lsls	r3, r3, #5
 8000d28:	4413      	add	r3, r2
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	240001bc 	.word	0x240001bc

08000d40 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <UTIL_LCD_FillRGBRect+0x30>)
 8000d50:	685c      	ldr	r4, [r3, #4]
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <UTIL_LCD_FillRGBRect+0x34>)
 8000d54:	6918      	ldr	r0, [r3, #16]
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	68f9      	ldr	r1, [r7, #12]
 8000d64:	47a0      	blx	r4
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd90      	pop	{r4, r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	240001fc 	.word	0x240001fc
 8000d74:	240001bc 	.word	0x240001bc

08000d78 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <UTIL_LCD_DrawHLine+0x64>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d118      	bne.n	8000dc0 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <UTIL_LCD_DrawHLine+0x68>)
 8000d90:	689c      	ldr	r4, [r3, #8]
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <UTIL_LCD_DrawHLine+0x64>)
 8000d94:	6918      	ldr	r0, [r3, #16]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	f003 021f 	and.w	r2, r3, #31
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	0a9b      	lsrs	r3, r3, #10
 8000da2:	015b      	lsls	r3, r3, #5
 8000da4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000da8:	431a      	orrs	r2, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	0cdb      	lsrs	r3, r3, #19
 8000dae:	02db      	lsls	r3, r3, #11
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68f9      	ldr	r1, [r7, #12]
 8000dbc:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8000dbe:	e009      	b.n	8000dd4 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <UTIL_LCD_DrawHLine+0x68>)
 8000dc2:	689c      	ldr	r4, [r3, #8]
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <UTIL_LCD_DrawHLine+0x64>)
 8000dc6:	6918      	ldr	r0, [r3, #16]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	68f9      	ldr	r1, [r7, #12]
 8000dd2:	47a0      	blx	r4
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	240001bc 	.word	0x240001bc
 8000de0:	240001fc 	.word	0x240001fc

08000de4 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <UTIL_LCD_DrawVLine+0x64>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d118      	bne.n	8000e2c <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <UTIL_LCD_DrawVLine+0x68>)
 8000dfc:	68dc      	ldr	r4, [r3, #12]
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <UTIL_LCD_DrawVLine+0x64>)
 8000e00:	6918      	ldr	r0, [r3, #16]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	f003 021f 	and.w	r2, r3, #31
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	0a9b      	lsrs	r3, r3, #10
 8000e0e:	015b      	lsls	r3, r3, #5
 8000e10:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000e14:	431a      	orrs	r2, r3
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	0cdb      	lsrs	r3, r3, #19
 8000e1a:	02db      	lsls	r3, r3, #11
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	68f9      	ldr	r1, [r7, #12]
 8000e28:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8000e2a:	e009      	b.n	8000e40 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <UTIL_LCD_DrawVLine+0x68>)
 8000e2e:	68dc      	ldr	r4, [r3, #12]
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <UTIL_LCD_DrawVLine+0x64>)
 8000e32:	6918      	ldr	r0, [r3, #16]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	68f9      	ldr	r1, [r7, #12]
 8000e3e:	47a0      	blx	r4
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	240001bc 	.word	0x240001bc
 8000e4c:	240001fc 	.word	0x240001fc

08000e50 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af02      	add	r7, sp, #8
 8000e56:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <UTIL_LCD_Clear+0x28>)
 8000e5a:	695a      	ldr	r2, [r3, #20]
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <UTIL_LCD_Clear+0x28>)
 8000e5e:	6999      	ldr	r1, [r3, #24]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	460b      	mov	r3, r1
 8000e66:	2100      	movs	r1, #0
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f000 f915 	bl	8001098 <UTIL_LCD_FillRect>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	240001bc 	.word	0x240001bc

08000e7c <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	4613      	mov	r3, r2
 8000e88:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <UTIL_LCD_DisplayChar+0x68>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <UTIL_LCD_DisplayChar+0x68>)
 8000e90:	015b      	lsls	r3, r3, #5
 8000e92:	4413      	add	r3, r2
 8000e94:	3308      	adds	r3, #8
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8000e9e:	4911      	ldr	r1, [pc, #68]	; (8000ee4 <UTIL_LCD_DisplayChar+0x68>)
 8000ea0:	68c9      	ldr	r1, [r1, #12]
 8000ea2:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <UTIL_LCD_DisplayChar+0x68>)
 8000ea4:	0149      	lsls	r1, r1, #5
 8000ea6:	4401      	add	r1, r0
 8000ea8:	3108      	adds	r1, #8
 8000eaa:	6809      	ldr	r1, [r1, #0]
 8000eac:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8000eae:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <UTIL_LCD_DisplayChar+0x68>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <UTIL_LCD_DisplayChar+0x68>)
 8000eb8:	015b      	lsls	r3, r3, #5
 8000eba:	4403      	add	r3, r0
 8000ebc:	3308      	adds	r3, #8
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	889b      	ldrh	r3, [r3, #4]
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	da00      	bge.n	8000eca <UTIL_LCD_DisplayChar+0x4e>
 8000ec8:	3307      	adds	r3, #7
 8000eca:	10db      	asrs	r3, r3, #3
 8000ecc:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8000ed0:	4413      	add	r3, r2
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f000 f918 	bl	800110c <DrawChar>
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	240001bc 	.word	0x240001bc

08000ee8 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000f0a:	e002      	b.n	8000f12 <UTIL_LCD_DisplayStringAt+0x2a>
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	61ba      	str	r2, [r7, #24]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1f6      	bne.n	8000f0c <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8000f1e:	4b48      	ldr	r3, [pc, #288]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a47      	ldr	r2, [pc, #284]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000f24:	68d2      	ldr	r2, [r2, #12]
 8000f26:	4946      	ldr	r1, [pc, #280]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000f28:	0152      	lsls	r2, r2, #5
 8000f2a:	440a      	add	r2, r1
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	8892      	ldrh	r2, [r2, #4]
 8000f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f36:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d018      	beq.n	8000f70 <UTIL_LCD_DisplayStringAt+0x88>
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	dc2a      	bgt.n	8000f98 <UTIL_LCD_DisplayStringAt+0xb0>
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d002      	beq.n	8000f4c <UTIL_LCD_DisplayStringAt+0x64>
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d015      	beq.n	8000f76 <UTIL_LCD_DisplayStringAt+0x8e>
 8000f4a:	e025      	b.n	8000f98 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	4a3b      	ldr	r2, [pc, #236]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000f54:	68d2      	ldr	r2, [r2, #12]
 8000f56:	493a      	ldr	r1, [pc, #232]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000f58:	0152      	lsls	r2, r2, #5
 8000f5a:	440a      	add	r2, r1
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	6812      	ldr	r2, [r2, #0]
 8000f60:	8892      	ldrh	r2, [r2, #4]
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
 8000f66:	085b      	lsrs	r3, r3, #1
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f6e:	e016      	b.n	8000f9e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f74:	e013      	b.n	8000f9e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	4a30      	ldr	r2, [pc, #192]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000f7e:	68d2      	ldr	r2, [r2, #12]
 8000f80:	492f      	ldr	r1, [pc, #188]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000f82:	0152      	lsls	r2, r2, #5
 8000f84:	440a      	add	r2, r1
 8000f86:	3208      	adds	r2, #8
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	8892      	ldrh	r2, [r2, #4]
 8000f8c:	fb03 f202 	mul.w	r2, r3, r2
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f96:	e002      	b.n	8000f9e <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000f9c:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <UTIL_LCD_DisplayStringAt+0xc4>
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000faa:	d31b      	bcc.n	8000fe4 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8000fb0:	e018      	b.n	8000fe4 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fbc:	f7ff ff5e 	bl	8000e7c <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000fc6:	015b      	lsls	r3, r3, #5
 8000fc8:	4413      	add	r3, r2
 8000fca:	3308      	adds	r3, #8
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	889b      	ldrh	r3, [r3, #4]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	4413      	add	r3, r2
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
    i++;
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf14      	ite	ne
 8000fec:	2301      	movne	r3, #1
 8000fee:	2300      	moveq	r3, #0
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000ff4:	6959      	ldr	r1, [r3, #20]
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8000ffc:	015b      	lsls	r3, r3, #5
 8000ffe:	4403      	add	r3, r0
 8001000:	3308      	adds	r3, #8
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	889b      	ldrh	r3, [r3, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	fb00 f303 	mul.w	r3, r0, r3
 800100e:	1acb      	subs	r3, r1, r3
 8001010:	b29b      	uxth	r3, r3
 8001012:	490b      	ldr	r1, [pc, #44]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8001014:	68c9      	ldr	r1, [r1, #12]
 8001016:	480a      	ldr	r0, [pc, #40]	; (8001040 <UTIL_LCD_DisplayStringAt+0x158>)
 8001018:	0149      	lsls	r1, r1, #5
 800101a:	4401      	add	r1, r0
 800101c:	3108      	adds	r1, #8
 800101e:	6809      	ldr	r1, [r1, #0]
 8001020:	8889      	ldrh	r1, [r1, #4]
 8001022:	428b      	cmp	r3, r1
 8001024:	bf2c      	ite	cs
 8001026:	2301      	movcs	r3, #1
 8001028:	2300      	movcc	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4013      	ands	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1be      	bne.n	8000fb2 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	240001bc 	.word	0x240001bc

08001044 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff fe8d 	bl	8000d78 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	4413      	add	r3, r2
 8001064:	1e59      	subs	r1, r3, #1
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff fe84 	bl	8000d78 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff feb4 	bl	8000de4 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	1e58      	subs	r0, r3, #1
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	f7ff feab 	bl	8000de4 <UTIL_LCD_DrawVLine>
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b087      	sub	sp, #28
 800109c:	af02      	add	r7, sp, #8
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <UTIL_LCD_FillRect+0x6c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d11a      	bne.n	80010e4 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <UTIL_LCD_FillRect+0x70>)
 80010b0:	691c      	ldr	r4, [r3, #16]
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <UTIL_LCD_FillRect+0x6c>)
 80010b4:	6918      	ldr	r0, [r3, #16]
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	f003 021f 	and.w	r2, r3, #31
 80010be:	6a3b      	ldr	r3, [r7, #32]
 80010c0:	0a9b      	lsrs	r3, r3, #10
 80010c2:	015b      	lsls	r3, r3, #5
 80010c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80010c8:	431a      	orrs	r2, r3
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	0cdb      	lsrs	r3, r3, #19
 80010ce:	02db      	lsls	r3, r3, #11
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	68f9      	ldr	r1, [r7, #12]
 80010e0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80010e2:	e00b      	b.n	80010fc <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <UTIL_LCD_FillRect+0x70>)
 80010e6:	691c      	ldr	r4, [r3, #16]
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <UTIL_LCD_FillRect+0x6c>)
 80010ea:	6918      	ldr	r0, [r3, #16]
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	47a0      	blx	r4
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	240001bc 	.word	0x240001bc
 8001108:	240001fc 	.word	0x240001fc

0800110c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0b2      	sub	sp, #200	; 0xc8
 8001110:	af02      	add	r7, sp, #8
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001124:	4ba5      	ldr	r3, [pc, #660]	; (80013bc <DrawChar+0x2b0>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4aa4      	ldr	r2, [pc, #656]	; (80013bc <DrawChar+0x2b0>)
 800112a:	015b      	lsls	r3, r3, #5
 800112c:	4413      	add	r3, r2
 800112e:	3308      	adds	r3, #8
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	88db      	ldrh	r3, [r3, #6]
 8001134:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001138:	4ba0      	ldr	r3, [pc, #640]	; (80013bc <DrawChar+0x2b0>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4a9f      	ldr	r2, [pc, #636]	; (80013bc <DrawChar+0x2b0>)
 800113e:	015b      	lsls	r3, r3, #5
 8001140:	4413      	add	r3, r2
 8001142:	3308      	adds	r3, #8
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	889b      	ldrh	r3, [r3, #4]
 8001148:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 800114c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001150:	3307      	adds	r3, #7
 8001152:	f023 0207 	bic.w	r2, r3, #7
 8001156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001166:	e11c      	b.n	80013a2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8001168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800116c:	3307      	adds	r3, #7
 800116e:	08db      	lsrs	r3, r3, #3
 8001170:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 8001180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001184:	3307      	adds	r3, #7
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d002      	beq.n	8001192 <DrawChar+0x86>
 800118c:	2b02      	cmp	r3, #2
 800118e:	d006      	beq.n	800119e <DrawChar+0x92>
 8001190:	e011      	b.n	80011b6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8001192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800119c:	e01d      	b.n	80011da <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800119e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80011aa:	3201      	adds	r2, #1
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80011b4:	e011      	b.n	80011da <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80011b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011c2:	3301      	adds	r3, #1
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	4313      	orrs	r3, r2
 80011ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80011ce:	3202      	adds	r2, #2
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80011d8:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80011da:	4b78      	ldr	r3, [pc, #480]	; (80013bc <DrawChar+0x2b0>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	4a77      	ldr	r2, [pc, #476]	; (80013bc <DrawChar+0x2b0>)
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	4413      	add	r3, r2
 80011e4:	331c      	adds	r3, #28
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	f040 808c 	bne.w	8001306 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80011f4:	e074      	b.n	80012e0 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 80011f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80011fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011fe:	1ad2      	subs	r2, r2, r3
 8001200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001204:	4413      	add	r3, r2
 8001206:	3b01      	subs	r3, #1
 8001208:	2201      	movs	r2, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	461a      	mov	r2, r3
 8001210:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d02d      	beq.n	8001276 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800121a:	4b68      	ldr	r3, [pc, #416]	; (80013bc <DrawChar+0x2b0>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	4a67      	ldr	r2, [pc, #412]	; (80013bc <DrawChar+0x2b0>)
 8001220:	015b      	lsls	r3, r3, #5
 8001222:	4413      	add	r3, r2
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	08db      	lsrs	r3, r3, #3
 8001228:	b29b      	uxth	r3, r3
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b62      	ldr	r3, [pc, #392]	; (80013bc <DrawChar+0x2b0>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4961      	ldr	r1, [pc, #388]	; (80013bc <DrawChar+0x2b0>)
 8001236:	015b      	lsls	r3, r3, #5
 8001238:	440b      	add	r3, r1
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0a9b      	lsrs	r3, r3, #10
 800123e:	b29b      	uxth	r3, r3
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	b29b      	uxth	r3, r3
 8001244:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001248:	b29b      	uxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <DrawChar+0x2b0>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	495a      	ldr	r1, [pc, #360]	; (80013bc <DrawChar+0x2b0>)
 8001254:	015b      	lsls	r3, r3, #5
 8001256:	440b      	add	r3, r1
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0cdb      	lsrs	r3, r3, #19
 800125c:	b29b      	uxth	r3, r3
 800125e:	02db      	lsls	r3, r3, #11
 8001260:	b29b      	uxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b29a      	uxth	r2, r3
 8001266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	33c0      	adds	r3, #192	; 0xc0
 800126e:	443b      	add	r3, r7
 8001270:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8001274:	e02f      	b.n	80012d6 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8001276:	4b51      	ldr	r3, [pc, #324]	; (80013bc <DrawChar+0x2b0>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	4a50      	ldr	r2, [pc, #320]	; (80013bc <DrawChar+0x2b0>)
 800127c:	015b      	lsls	r3, r3, #5
 800127e:	4413      	add	r3, r2
 8001280:	3304      	adds	r3, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	08db      	lsrs	r3, r3, #3
 8001286:	b29b      	uxth	r3, r3
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <DrawChar+0x2b0>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	494a      	ldr	r1, [pc, #296]	; (80013bc <DrawChar+0x2b0>)
 8001294:	015b      	lsls	r3, r3, #5
 8001296:	440b      	add	r3, r1
 8001298:	3304      	adds	r3, #4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0a9b      	lsrs	r3, r3, #10
 800129e:	b29b      	uxth	r3, r3
 80012a0:	015b      	lsls	r3, r3, #5
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	4b43      	ldr	r3, [pc, #268]	; (80013bc <DrawChar+0x2b0>)
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	4942      	ldr	r1, [pc, #264]	; (80013bc <DrawChar+0x2b0>)
 80012b4:	015b      	lsls	r3, r3, #5
 80012b6:	440b      	add	r3, r1
 80012b8:	3304      	adds	r3, #4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0cdb      	lsrs	r3, r3, #19
 80012be:	b29b      	uxth	r3, r3
 80012c0:	02db      	lsls	r3, r3, #11
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	33c0      	adds	r3, #192	; 0xc0
 80012d0:	443b      	add	r3, r7
 80012d2:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 80012d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012da:	3301      	adds	r3, #1
 80012dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80012e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80012e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d384      	bcc.n	80011f6 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	1c4b      	adds	r3, r1, #1
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80012f6:	2301      	movs	r3, #1
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff fd1e 	bl	8000d40 <UTIL_LCD_FillRGBRect>
 8001304:	e048      	b.n	8001398 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8001306:	2300      	movs	r3, #0
 8001308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800130c:	e032      	b.n	8001374 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 800130e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001316:	1ad2      	subs	r2, r2, r3
 8001318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800131c:	4413      	add	r3, r2
 800131e:	3b01      	subs	r3, #1
 8001320:	2201      	movs	r2, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	461a      	mov	r2, r3
 8001328:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00d      	beq.n	800134e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <DrawChar+0x2b0>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	4a21      	ldr	r2, [pc, #132]	; (80013bc <DrawChar+0x2b0>)
 8001338:	015b      	lsls	r3, r3, #5
 800133a:	4413      	add	r3, r2
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	33c0      	adds	r3, #192	; 0xc0
 8001346:	443b      	add	r3, r7
 8001348:	f843 2cac 	str.w	r2, [r3, #-172]
 800134c:	e00d      	b.n	800136a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <DrawChar+0x2b0>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <DrawChar+0x2b0>)
 8001354:	015b      	lsls	r3, r3, #5
 8001356:	4413      	add	r3, r2
 8001358:	3304      	adds	r3, #4
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	33c0      	adds	r3, #192	; 0xc0
 8001364:	443b      	add	r3, r7
 8001366:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 800136a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001374:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800137c:	429a      	cmp	r2, r3
 800137e:	d3c6      	bcc.n	800130e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	1c4b      	adds	r3, r1, #1
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	f107 0214 	add.w	r2, r7, #20
 800138a:	2301      	movs	r3, #1
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff fcd4 	bl	8000d40 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8001398:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800139c:	3301      	adds	r3, #1
 800139e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80013a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80013a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013aa:	429a      	cmp	r2, r3
 80013ac:	f4ff aedc 	bcc.w	8001168 <DrawChar+0x5c>
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	37c0      	adds	r7, #192	; 0xc0
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	240001bc 	.word	0x240001bc

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_MspInit+0x74>)
 80013c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_MspInit+0x74>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_MspInit+0x74>)
 80013d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	210f      	movs	r1, #15
 80013e8:	f06f 0001 	mvn.w	r0, #1
 80013ec:	f002 fab5 	bl	800395a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_MspInit+0x74>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_MspInit+0x74>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_MspInit+0x74>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800140e:	2308      	movs	r3, #8
 8001410:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	4619      	mov	r1, r3
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <HAL_MspInit+0x78>)
 8001426:	f004 fa95 	bl	8005954 <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	58024400 	.word	0x58024400
 8001438:	58021000 	.word	0x58021000

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f002 f93a 	bl	80036e4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001470:	f009 fe30 	bl	800b0d4 <xTaskGetSchedulerState>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d001      	beq.n	800147e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800147a:	f009 fe95 	bl	800b1a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}

08001482 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 fc2a 	bl	8001ce0 <BSP_PB_IRQHandler>
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM3_IRQHandler+0x10>)
 8001496:	f008 fb2d 	bl	8009af4 <HAL_TIM_IRQHandler>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2400016c 	.word	0x2400016c

080014a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <USART3_IRQHandler+0x10>)
 80014aa:	f008 fe83 	bl	800a1b4 <HAL_UART_IRQHandler>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	240000d8 	.word	0x240000d8

080014b8 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 80014bc:	2000      	movs	r0, #0
 80014be:	f000 fc29 	bl	8001d14 <BSP_AUDIO_OUT_IRQHandler>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <DMA2_Stream4_IRQHandler+0x14>)
 80014ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 ffda 	bl	800448c <HAL_DMA_IRQHandler>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	240002dc 	.word	0x240002dc

080014e0 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 80014e4:	2130      	movs	r1, #48	; 0x30
 80014e6:	2001      	movs	r0, #1
 80014e8:	f000 fc28 	bl	8001d3c <BSP_AUDIO_IN_IRQHandler>

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f001 ff6f 	bl	80033d8 <BSP_SDRAM_IRQHandler>

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  return 1;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_kill>:

int _kill(int pid, int sig)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001518:	f00a f902 	bl	800b720 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	2216      	movs	r2, #22
 8001520:	601a      	str	r2, [r3, #0]
  return -1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <_exit>:

void _exit (int status)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001536:	f04f 31ff 	mov.w	r1, #4294967295
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffe7 	bl	800150e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001540:	e7fe      	b.n	8001540 <_exit+0x12>
	...

08001544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001574:	f00a f8d4 	bl	800b720 <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24080000 	.word	0x24080000
 80015a4:	00000400 	.word	0x00000400
 80015a8:	24000228 	.word	0x24000228
 80015ac:	240015e8 	.word	0x240015e8

080015b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015b4:	4b37      	ldr	r3, [pc, #220]	; (8001694 <SystemInit+0xe4>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ba:	4a36      	ldr	r2, [pc, #216]	; (8001694 <SystemInit+0xe4>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <SystemInit+0xe8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	d807      	bhi.n	80015e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <SystemInit+0xe8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 030f 	bic.w	r3, r3, #15
 80015d8:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <SystemInit+0xe8>)
 80015da:	f043 0307 	orr.w	r3, r3, #7
 80015de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <SystemInit+0xec>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2d      	ldr	r2, [pc, #180]	; (800169c <SystemInit+0xec>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <SystemInit+0xec>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <SystemInit+0xec>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4929      	ldr	r1, [pc, #164]	; (800169c <SystemInit+0xec>)
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <SystemInit+0xf0>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <SystemInit+0xe8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <SystemInit+0xe8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 030f 	bic.w	r3, r3, #15
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <SystemInit+0xe8>)
 8001614:	f043 0307 	orr.w	r3, r3, #7
 8001618:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <SystemInit+0xec>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <SystemInit+0xec>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <SystemInit+0xec>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <SystemInit+0xec>)
 800162e:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <SystemInit+0xf4>)
 8001630:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <SystemInit+0xec>)
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <SystemInit+0xf8>)
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <SystemInit+0xec>)
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <SystemInit+0xfc>)
 800163c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <SystemInit+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <SystemInit+0xec>)
 8001646:	4a19      	ldr	r2, [pc, #100]	; (80016ac <SystemInit+0xfc>)
 8001648:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <SystemInit+0xec>)
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <SystemInit+0xec>)
 8001652:	4a16      	ldr	r2, [pc, #88]	; (80016ac <SystemInit+0xfc>)
 8001654:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <SystemInit+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <SystemInit+0xec>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <SystemInit+0xec>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <SystemInit+0xec>)
 800166a:	2200      	movs	r2, #0
 800166c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <SystemInit+0x100>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <SystemInit+0x104>)
 8001674:	4013      	ands	r3, r2
 8001676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167a:	d202      	bcs.n	8001682 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <SystemInit+0x108>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <SystemInit+0x10c>)
 8001684:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001688:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00
 8001698:	52002000 	.word	0x52002000
 800169c:	58024400 	.word	0x58024400
 80016a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80016a4:	02020200 	.word	0x02020200
 80016a8:	01ff0000 	.word	0x01ff0000
 80016ac:	01010280 	.word	0x01010280
 80016b0:	5c001000 	.word	0x5c001000
 80016b4:	ffff0000 	.word	0xffff0000
 80016b8:	51008108 	.word	0x51008108
 80016bc:	52004000 	.word	0x52004000

080016c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016c4:	f7ff ff74 	bl	80015b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ca:	490d      	ldr	r1, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e0:	4c0a      	ldr	r4, [pc, #40]	; (800170c <LoopFillZerobss+0x22>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ee:	f00a f81d 	bl	800b72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f2:	f7ff f901 	bl	80008f8 <main>
  bx  lr
 80016f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001700:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8001704:	0800d384 	.word	0x0800d384
  ldr r2, =_sbss
 8001708:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 800170c:	240015e8 	.word	0x240015e8

08001710 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <ADC3_IRQHandler>
	...

08001714 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	e02c      	b.n	8001786 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	891a      	ldrh	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <FT5336_RegisterBusIO+0x7c>)
 8001760:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <FT5336_RegisterBusIO+0x80>)
 8001766:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4798      	blx	r3
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	e002      	b.n	8001786 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	080017b9 	.word	0x080017b9
 8001794:	080017ed 	.word	0x080017ed

08001798 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3318      	adds	r3, #24
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f850 	bl	800184e <ft5336_chip_id>
 80017ae:	4603      	mov	r3, r0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	461a      	mov	r2, r3
 80017c4:	460b      	mov	r3, r1
 80017c6:	72fb      	strb	r3, [r7, #11]
 80017c8:	4613      	mov	r3, r2
 80017ca:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	691c      	ldr	r4, [r3, #16]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	8918      	ldrh	r0, [r3, #8]
 80017d8:	7afb      	ldrb	r3, [r7, #11]
 80017da:	b299      	uxth	r1, r3
 80017dc:	893b      	ldrh	r3, [r7, #8]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	47a0      	blx	r4
 80017e2:	4603      	mov	r3, r0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	460b      	mov	r3, r1
 80017fa:	72fb      	strb	r3, [r7, #11]
 80017fc:	4613      	mov	r3, r2
 80017fe:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	68dc      	ldr	r4, [r3, #12]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	8918      	ldrh	r0, [r3, #8]
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	b299      	uxth	r1, r3
 8001810:	893b      	ldrh	r3, [r7, #8]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	47a0      	blx	r4
 8001816:	4603      	mov	r3, r0
}
 8001818:	4618      	mov	r0, r3
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}

08001820 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	461a      	mov	r2, r3
 800182c:	460b      	mov	r3, r1
 800182e:	72fb      	strb	r3, [r7, #11]
 8001830:	4613      	mov	r3, r2
 8001832:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685c      	ldr	r4, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6898      	ldr	r0, [r3, #8]
 800183c:	893b      	ldrh	r3, [r7, #8]
 800183e:	7af9      	ldrb	r1, [r7, #11]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	47a0      	blx	r4
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}

0800184e <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8001858:	2301      	movs	r3, #1
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	21a8      	movs	r1, #168	; 0xa8
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffde 	bl	8001820 <ft5336_read_reg>
 8001864:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f831 	bl	8001904 <MT48LC4M32B2_ClockEnable>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d128      	bne.n	80018fa <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 80018a8:	2001      	movs	r0, #1
 80018aa:	f000 f8e1 	bl	8001a70 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4619      	mov	r1, r3
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f849 	bl	800194c <MT48LC4M32B2_Precharge>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d11c      	bne.n	80018fa <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6819      	ldr	r1, [r3, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	461a      	mov	r2, r3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f896 	bl	80019fc <MT48LC4M32B2_RefreshMode>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d111      	bne.n	80018fa <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f85b 	bl	8001994 <MT48LC4M32B2_ModeRegConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4619      	mov	r1, r3
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f8ac 	bl	8001a48 <MT48LC4M32B2_RefreshRate>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MT48LC4M32B2_ClockEnable+0x44>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001914:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <MT48LC4M32B2_ClockEnable+0x44>)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MT48LC4M32B2_ClockEnable+0x44>)
 800191c:	2201      	movs	r2, #1
 800191e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MT48LC4M32B2_ClockEnable+0x44>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192a:	4907      	ldr	r1, [pc, #28]	; (8001948 <MT48LC4M32B2_ClockEnable+0x44>)
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f007 ffbd 	bl	80098ac <HAL_SDRAM_SendCommand>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	e000      	b.n	8001940 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800193e:	2300      	movs	r3, #0
  }
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2400022c 	.word	0x2400022c

0800194c <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MT48LC4M32B2_Precharge+0x44>)
 8001958:	2202      	movs	r2, #2
 800195a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800195c:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <MT48LC4M32B2_Precharge+0x44>)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <MT48LC4M32B2_Precharge+0x44>)
 8001964:	2201      	movs	r2, #1
 8001966:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MT48LC4M32B2_Precharge+0x44>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800196e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001972:	4907      	ldr	r1, [pc, #28]	; (8001990 <MT48LC4M32B2_Precharge+0x44>)
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f007 ff99 	bl	80098ac <HAL_SDRAM_SendCommand>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e000      	b.n	8001988 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001986:	2300      	movs	r3, #0
  }
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2400022c 	.word	0x2400022c

08001994 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80019a6:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80019ac:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80019b2:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80019be:	2204      	movs	r2, #4
 80019c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80019c8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80019d0:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	4907      	ldr	r1, [pc, #28]	; (80019f8 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f007 ff65 	bl	80098ac <HAL_SDRAM_SendCommand>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	e000      	b.n	80019f0 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80019ee:	2300      	movs	r3, #0
  }
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2400022c 	.word	0x2400022c

080019fc <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <MT48LC4M32B2_RefreshMode+0x48>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8001a0e:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <MT48LC4M32B2_RefreshMode+0x48>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MT48LC4M32B2_RefreshMode+0x48>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <MT48LC4M32B2_RefreshMode+0x48>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a24:	4907      	ldr	r1, [pc, #28]	; (8001a44 <MT48LC4M32B2_RefreshMode+0x48>)
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f007 ff40 	bl	80098ac <HAL_SDRAM_SendCommand>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e000      	b.n	8001a3a <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001a38:	2300      	movs	r3, #0
  }
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2400022c 	.word	0x2400022c

08001a48 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8001a52:	6839      	ldr	r1, [r7, #0]
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f007 ff5e 	bl	8009916 <HAL_SDRAM_ProgramRefreshRate>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	e000      	b.n	8001a68 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001a66:	2300      	movs	r3, #0
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8001a78:	f001 fe48 	bl	800370c <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001a7e:	bf00      	nop
 8001a80:	f001 fe44 	bl	800370c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10f      	bne.n	8001ad0 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <BSP_LED_Init+0xb0>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab6:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <BSP_LED_Init+0xb0>)
 8001ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac0:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <BSP_LED_Init+0xb0>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	e015      	b.n	8001afc <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d10f      	bne.n	8001af6 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <BSP_LED_Init+0xb0>)
 8001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001adc:	4a1b      	ldr	r2, [pc, #108]	; (8001b4c <BSP_LED_Init+0xb0>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <BSP_LED_Init+0xb0>)
 8001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	e002      	b.n	8001afc <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001af6:	f06f 0301 	mvn.w	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <BSP_LED_Init+0xb4>)
 8001b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b04:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <BSP_LED_Init+0xb8>)
 8001b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1a:	f107 0210 	add.w	r2, r7, #16
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 ff17 	bl	8005954 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <BSP_LED_Init+0xb8>)
 8001b2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <BSP_LED_Init+0xb4>)
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f004 f8d2 	bl	8005ce4 <HAL_GPIO_WritePin>
  return ret;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 8001b42:	4618      	mov	r0, r3
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	58024400 	.word	0x58024400
 8001b50:	0800d1e0 	.word	0x0800d1e0
 8001b54:	2400001c 	.word	0x2400001c

08001b58 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <BSP_LED_On+0x34>)
 8001b6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <BSP_LED_On+0x38>)
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f004 f8b2 	bl	8005ce4 <HAL_GPIO_WritePin>
  return ret;
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2400001c 	.word	0x2400001c
 8001b90:	0800d1e0 	.word	0x0800d1e0

08001b94 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <BSP_LED_Off+0x34>)
 8001ba6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <BSP_LED_Off+0x38>)
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f004 f894 	bl	8005ce4 <HAL_GPIO_WritePin>
  return ret;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2400001c 	.word	0x2400001c
 8001bcc:	0800d1e0 	.word	0x0800d1e0

08001bd0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460a      	mov	r2, r1
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001be0:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <BSP_PB_Init+0xcc>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <BSP_PB_Init+0xcc>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <BSP_PB_Init+0xcc>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c02:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001c04:	2302      	movs	r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <BSP_PB_Init+0xd0>)
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	f107 020c 	add.w	r2, r7, #12
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fe95 	bl	8005954 <HAL_GPIO_Init>
 8001c2a:	e031      	b.n	8001c90 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001c2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c30:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a1a      	ldr	r2, [pc, #104]	; (8001ca0 <BSP_PB_Init+0xd0>)
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	f107 020c 	add.w	r2, r7, #12
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fe87 	bl	8005954 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <BSP_PB_Init+0xd4>)
 8001c4c:	441a      	add	r2, r3
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4915      	ldr	r1, [pc, #84]	; (8001ca8 <BSP_PB_Init+0xd8>)
 8001c52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f003 fe36 	bl	80058ca <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <BSP_PB_Init+0xd4>)
 8001c64:	1898      	adds	r0, r3, r2
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4a10      	ldr	r2, [pc, #64]	; (8001cac <BSP_PB_Init+0xdc>)
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2100      	movs	r1, #0
 8001c72:	f003 fe0b 	bl	800588c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001c76:	2028      	movs	r0, #40	; 0x28
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <BSP_PB_Init+0xe0>)
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	f001 fe69 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001c88:	2328      	movs	r3, #40	; 0x28
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fe7f 	bl	800398e <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	24000024 	.word	0x24000024
 8001ca4:	2400023c 	.word	0x2400023c
 8001ca8:	0800d1e8 	.word	0x0800d1e8
 8001cac:	24000028 	.word	0x24000028
 8001cb0:	2400002c 	.word	0x2400002c

08001cb4 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <BSP_PB_GetState+0x28>)
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fff1 	bl	8005cb4 <HAL_GPIO_ReadPin>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	24000024 	.word	0x24000024

08001ce0 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <BSP_PB_IRQHandler+0x20>)
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fdfe 	bl	80058f4 <HAL_EXTI_IRQHandler>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2400023c 	.word	0x2400023c

08001d04 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7fe fe1d 	bl	8000948 <BSP_PB_Callback>
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8001d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f002 fbaf 	bl	800448c <HAL_DMA_IRQHandler>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	24000244 	.word	0x24000244

08001d3c <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b30      	cmp	r3, #48	; 0x30
 8001d4a:	d002      	beq.n	8001d52 <BSP_AUDIO_IN_IRQHandler+0x16>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8001d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fb97 	bl	800448c <HAL_DMA_IRQHandler>
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	240002dc 	.word	0x240002dc

08001d6c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <BSP_I2C4_Init+0x64>)
 8001d78:	4a16      	ldr	r2, [pc, #88]	; (8001dd4 <BSP_I2C4_Init+0x68>)
 8001d7a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <BSP_I2C4_Init+0x6c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d11f      	bne.n	8001dc4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <BSP_I2C4_Init+0x6c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <BSP_I2C4_Init+0x6c>)
 8001d8c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8001d8e:	4810      	ldr	r0, [pc, #64]	; (8001dd0 <BSP_I2C4_Init+0x64>)
 8001d90:	f004 f976 	bl	8006080 <HAL_I2C_GetState>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d114      	bne.n	8001dc4 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <BSP_I2C4_Init+0x64>)
 8001d9c:	f000 fb06 	bl	80023ac <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8001da0:	f006 f9ba 	bl	8008118 <HAL_RCC_GetPCLK2Freq>
 8001da4:	4603      	mov	r3, r0
 8001da6:	490d      	ldr	r1, [pc, #52]	; (8001ddc <BSP_I2C4_Init+0x70>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f889 	bl	8001ec0 <I2C_GetTiming>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4619      	mov	r1, r3
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <BSP_I2C4_Init+0x64>)
 8001db4:	f000 f814 	bl	8001de0 <MX_I2C4_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001dbe:	f06f 0307 	mvn.w	r3, #7
 8001dc2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	24000d7c 	.word	0x24000d7c
 8001dd4:	58001c00 	.word	0x58001c00
 8001dd8:	24000374 	.word	0x24000374
 8001ddc:	000186a0 	.word	0x000186a0

08001de0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f003 ff7a 	bl	8005d18 <HAL_I2C_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	e014      	b.n	8001e5a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f004 fba0 	bl	800657c <HAL_I2CEx_ConfigAnalogFilter>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	e008      	b.n	8001e5a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8001e48:	2100      	movs	r1, #0
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f004 fbe1 	bl	8006612 <HAL_I2CEx_ConfigDigitalFilter>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60ba      	str	r2, [r7, #8]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	81fb      	strh	r3, [r7, #14]
 8001e72:	460b      	mov	r3, r1
 8001e74:	81bb      	strh	r3, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001e7a:	89b9      	ldrh	r1, [r7, #12]
 8001e7c:	89f8      	ldrh	r0, [r7, #14]
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f000 fafd 	bl	8002484 <I2C4_ReadReg>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e00c      	b.n	8001eb0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001e96:	4809      	ldr	r0, [pc, #36]	; (8001ebc <BSP_I2C4_ReadReg+0x58>)
 8001e98:	f004 f900 	bl	800609c <HAL_I2C_GetError>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d103      	bne.n	8001eaa <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001ea2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e002      	b.n	8001eb0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001eaa:	f06f 0303 	mvn.w	r3, #3
 8001eae:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8001eb0:	697b      	ldr	r3, [r7, #20]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	24000d7c 	.word	0x24000d7c

08001ec0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d06b      	beq.n	8001fac <I2C_GetTiming+0xec>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d068      	beq.n	8001fac <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e060      	b.n	8001fa2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001ee0:	4a35      	ldr	r2, [pc, #212]	; (8001fb8 <I2C_GetTiming+0xf8>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	212c      	movs	r1, #44	; 0x2c
 8001ee6:	fb01 f303 	mul.w	r3, r1, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d352      	bcc.n	8001f9c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8001ef6:	4a30      	ldr	r2, [pc, #192]	; (8001fb8 <I2C_GetTiming+0xf8>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3308      	adds	r3, #8
 8001f04:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d847      	bhi.n	8001f9c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8001f0c:	6939      	ldr	r1, [r7, #16]
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f856 	bl	8001fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8001f14:	6939      	ldr	r1, [r7, #16]
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f940 	bl	800219c <I2C_Compute_SCLL_SCLH>
 8001f1c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b7f      	cmp	r3, #127	; 0x7f
 8001f22:	d842      	bhi.n	8001faa <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001f24:	4925      	ldr	r1, [pc, #148]	; (8001fbc <I2C_GetTiming+0xfc>)
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001f36:	4821      	ldr	r0, [pc, #132]	; (8001fbc <I2C_GetTiming+0xfc>)
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4403      	add	r3, r0
 8001f44:	3304      	adds	r3, #4
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	051b      	lsls	r3, r3, #20
 8001f4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001f4e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001f50:	481a      	ldr	r0, [pc, #104]	; (8001fbc <I2C_GetTiming+0xfc>)
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4403      	add	r3, r0
 8001f5e:	3308      	adds	r3, #8
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	041b      	lsls	r3, r3, #16
 8001f64:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001f68:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <I2C_GetTiming+0xfc>)
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4403      	add	r3, r0
 8001f78:	330c      	adds	r3, #12
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001f80:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8001f82:	480e      	ldr	r0, [pc, #56]	; (8001fbc <I2C_GetTiming+0xfc>)
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4403      	add	r3, r0
 8001f90:	3310      	adds	r3, #16
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001f96:	430b      	orrs	r3, r1
 8001f98:	617b      	str	r3, [r7, #20]
        }
        break;
 8001f9a:	e006      	b.n	8001faa <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d99b      	bls.n	8001ee0 <I2C_GetTiming+0x20>
 8001fa8:	e000      	b.n	8001fac <I2C_GetTiming+0xec>
        break;
 8001faa:	bf00      	nop
      }
    }
  }

  return ret;
 8001fac:	697b      	ldr	r3, [r7, #20]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	0800d1ec 	.word	0x0800d1ec
 8001fbc:	24000378 	.word	0x24000378

08001fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b08f      	sub	sp, #60	; 0x3c
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8001fca:	2310      	movs	r3, #16
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	085a      	lsrs	r2, r3, #1
 8001fd2:	4b6e      	ldr	r3, [pc, #440]	; (800218c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8001fd4:	4413      	add	r3, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fdc:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8001fde:	2332      	movs	r3, #50	; 0x32
 8001fe0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8001fe2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fe6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001fe8:	4a69      	ldr	r2, [pc, #420]	; (8002190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3324      	adds	r3, #36	; 0x24
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	4a65      	ldr	r2, [pc, #404]	; (8002190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	4413      	add	r3, r2
 8002006:	330c      	adds	r3, #12
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800200c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800200e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002010:	495f      	ldr	r1, [pc, #380]	; (8002190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	202c      	movs	r0, #44	; 0x2c
 8002016:	fb00 f303 	mul.w	r3, r0, r3
 800201a:	440b      	add	r3, r1
 800201c:	3328      	adds	r3, #40	; 0x28
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3303      	adds	r3, #3
 8002022:	69f9      	ldr	r1, [r7, #28]
 8002024:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	3310      	adds	r3, #16
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	4a54      	ldr	r2, [pc, #336]	; (8002190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3320      	adds	r3, #32
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002050:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002052:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002054:	494e      	ldr	r1, [pc, #312]	; (8002190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	202c      	movs	r0, #44	; 0x2c
 800205a:	fb00 f303 	mul.w	r3, r0, r3
 800205e:	440b      	add	r3, r1
 8002060:	3328      	adds	r3, #40	; 0x28
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3304      	adds	r3, #4
 8002066:	69f9      	ldr	r1, [r7, #28]
 8002068:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002070:	4a47      	ldr	r2, [pc, #284]	; (8002190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	3320      	adds	r3, #32
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	4a43      	ldr	r2, [pc, #268]	; (8002190 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3314      	adds	r3, #20
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4403      	add	r3, r0
 8002094:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002098:	2b00      	cmp	r3, #0
 800209a:	dc01      	bgt.n	80020a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	dc01      	bgt.n	80020aa <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ae:	e062      	b.n	8002176 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
 80020b4:	e059      	b.n	800216a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	3301      	adds	r3, #1
 80020ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020bc:	3201      	adds	r2, #1
 80020be:	fb03 f202 	mul.w	r2, r3, r2
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d348      	bcc.n	8002164 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	e042      	b.n	800215e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	3301      	adds	r3, #1
 80020dc:	6a3a      	ldr	r2, [r7, #32]
 80020de:	fb03 f202 	mul.w	r2, r3, r2
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80020ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d332      	bcc.n	8002158 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d82e      	bhi.n	8002158 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80020fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	429a      	cmp	r2, r3
 8002100:	d02a      	beq.n	8002158 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4924      	ldr	r1, [pc, #144]	; (8002198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002114:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002116:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	491f      	ldr	r1, [pc, #124]	; (8002198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3304      	adds	r3, #4
 8002128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4919      	ldr	r1, [pc, #100]	; (8002198 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3308      	adds	r3, #8
 800213e:	6a3a      	ldr	r2, [r7, #32]
 8002140:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800214e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b7f      	cmp	r3, #127	; 0x7f
 8002156:	d812      	bhi.n	800217e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	3301      	adds	r3, #1
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2b0f      	cmp	r3, #15
 8002162:	d9b9      	bls.n	80020d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	3301      	adds	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d9a2      	bls.n	80020b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	3301      	adds	r3, #1
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d999      	bls.n	80020b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800217c:	e000      	b.n	8002180 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800217e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002180:	373c      	adds	r7, #60	; 0x3c
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	3b9aca00 	.word	0x3b9aca00
 8002190:	0800d1ec 	.word	0x0800d1ec
 8002194:	24000d78 	.word	0x24000d78
 8002198:	24000378 	.word	0x24000378

0800219c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800219c:	b480      	push	{r7}
 800219e:	b093      	sub	sp, #76	; 0x4c
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	085a      	lsrs	r2, r3, #1
 80021b0:	4b7a      	ldr	r3, [pc, #488]	; (800239c <I2C_Compute_SCLL_SCLH+0x200>)
 80021b2:	4413      	add	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80021bc:	4a78      	ldr	r2, [pc, #480]	; (80023a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	085a      	lsrs	r2, r3, #1
 80021cc:	4b73      	ldr	r3, [pc, #460]	; (800239c <I2C_Compute_SCLL_SCLH+0x200>)
 80021ce:	4413      	add	r3, r2
 80021d0:	4973      	ldr	r1, [pc, #460]	; (80023a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	202c      	movs	r0, #44	; 0x2c
 80021d6:	fb00 f202 	mul.w	r2, r0, r2
 80021da:	440a      	add	r2, r1
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	fbb3 f3f2 	udiv	r3, r3, r2
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80021e4:	2332      	movs	r3, #50	; 0x32
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80021e8:	4a6d      	ldr	r2, [pc, #436]	; (80023a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3328      	adds	r3, #40	; 0x28
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002200:	4a67      	ldr	r2, [pc, #412]	; (80023a0 <I2C_Compute_SCLL_SCLH+0x204>)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a62      	ldr	r2, [pc, #392]	; (800239c <I2C_Compute_SCLL_SCLH+0x200>)
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002218:	4a61      	ldr	r2, [pc, #388]	; (80023a0 <I2C_Compute_SCLL_SCLH+0x204>)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3308      	adds	r3, #8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a5c      	ldr	r2, [pc, #368]	; (800239c <I2C_Compute_SCLL_SCLH+0x200>)
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002232:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002234:	2300      	movs	r3, #0
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
 8002238:	e0a3      	b.n	8002382 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800223a:	495a      	ldr	r1, [pc, #360]	; (80023a4 <I2C_Compute_SCLL_SCLH+0x208>)
 800223c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002254:	2300      	movs	r3, #0
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002258:	e08c      	b.n	8002374 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	441a      	add	r2, r3
 8002260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002262:	3301      	adds	r3, #1
 8002264:	6979      	ldr	r1, [r7, #20]
 8002266:	fb03 f101 	mul.w	r1, r3, r1
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	440b      	add	r3, r1
 8002270:	4413      	add	r3, r2
 8002272:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002274:	4a4a      	ldr	r2, [pc, #296]	; (80023a0 <I2C_Compute_SCLL_SCLH+0x204>)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	212c      	movs	r1, #44	; 0x2c
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3318      	adds	r3, #24
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	429a      	cmp	r2, r3
 8002288:	d971      	bls.n	800236e <I2C_Compute_SCLL_SCLH+0x1d2>
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	1ad2      	subs	r2, r2, r3
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002298:	429a      	cmp	r2, r3
 800229a:	d268      	bcs.n	800236e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800229c:	2300      	movs	r3, #0
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
 80022a0:	e062      	b.n	8002368 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	441a      	add	r2, r3
 80022a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022aa:	3301      	adds	r3, #1
 80022ac:	6979      	ldr	r1, [r7, #20]
 80022ae:	fb03 f101 	mul.w	r1, r3, r1
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	4413      	add	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	441a      	add	r2, r3
 80022c2:	4937      	ldr	r1, [pc, #220]	; (80023a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	202c      	movs	r0, #44	; 0x2c
 80022c8:	fb00 f303 	mul.w	r3, r0, r3
 80022cc:	440b      	add	r3, r1
 80022ce:	3320      	adds	r3, #32
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	441a      	add	r2, r3
 80022d4:	4932      	ldr	r1, [pc, #200]	; (80023a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	202c      	movs	r0, #44	; 0x2c
 80022da:	fb00 f303 	mul.w	r3, r0, r3
 80022de:	440b      	add	r3, r1
 80022e0:	3324      	adds	r3, #36	; 0x24
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d338      	bcc.n	8002362 <I2C_Compute_SCLL_SCLH+0x1c6>
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d834      	bhi.n	8002362 <I2C_Compute_SCLL_SCLH+0x1c6>
 80022f8:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	331c      	adds	r3, #28
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	429a      	cmp	r2, r3
 800230c:	d329      	bcc.n	8002362 <I2C_Compute_SCLL_SCLH+0x1c6>
 800230e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	429a      	cmp	r2, r3
 8002314:	d225      	bcs.n	8002362 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	2b00      	cmp	r3, #0
 8002322:	da02      	bge.n	800232a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	425b      	negs	r3, r3
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800232e:	429a      	cmp	r2, r3
 8002330:	d917      	bls.n	8002362 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8002336:	491b      	ldr	r1, [pc, #108]	; (80023a4 <I2C_Compute_SCLL_SCLH+0x208>)
 8002338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3310      	adds	r3, #16
 8002346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002348:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800234a:	4916      	ldr	r1, [pc, #88]	; (80023a4 <I2C_Compute_SCLL_SCLH+0x208>)
 800234c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	330c      	adds	r3, #12
 800235a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800235c:	601a      	str	r2, [r3, #0]
              ret = count;
 800235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002360:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	3301      	adds	r3, #1
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	2bff      	cmp	r3, #255	; 0xff
 800236c:	d999      	bls.n	80022a2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800236e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002370:	3301      	adds	r3, #1
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002376:	2bff      	cmp	r3, #255	; 0xff
 8002378:	f67f af6f 	bls.w	800225a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237e:	3301      	adds	r3, #1
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <I2C_Compute_SCLL_SCLH+0x20c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002388:	429a      	cmp	r2, r3
 800238a:	f4ff af56 	bcc.w	800223a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800238e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002390:	4618      	mov	r0, r3
 8002392:	374c      	adds	r7, #76	; 0x4c
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	3b9aca00 	.word	0x3b9aca00
 80023a0:	0800d1ec 	.word	0x0800d1ec
 80023a4:	24000378 	.word	0x24000378
 80023a8:	24000d78 	.word	0x24000d78

080023ac <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <I2C4_MspInit+0xd0>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	4a30      	ldr	r2, [pc, #192]	; (800247c <I2C4_MspInit+0xd0>)
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <I2C4_MspInit+0xd0>)
 80023c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <I2C4_MspInit+0xd0>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <I2C4_MspInit+0xd0>)
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <I2C4_MspInit+0xd0>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80023f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80023f6:	2312      	movs	r3, #18
 80023f8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80023fe:	2302      	movs	r3, #2
 8002400:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002402:	2304      	movs	r3, #4
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	481c      	ldr	r0, [pc, #112]	; (8002480 <I2C4_MspInit+0xd4>)
 800240e:	f003 faa1 	bl	8005954 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002416:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002418:	2312      	movs	r3, #18
 800241a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002420:	2302      	movs	r3, #2
 8002422:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002424:	2304      	movs	r3, #4
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4814      	ldr	r0, [pc, #80]	; (8002480 <I2C4_MspInit+0xd4>)
 8002430:	f003 fa90 	bl	8005954 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <I2C4_MspInit+0xd0>)
 8002436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <I2C4_MspInit+0xd0>)
 800243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002440:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <I2C4_MspInit+0xd0>)
 8002446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800244a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <I2C4_MspInit+0xd0>)
 8002454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002458:	4a08      	ldr	r2, [pc, #32]	; (800247c <I2C4_MspInit+0xd0>)
 800245a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <I2C4_MspInit+0xd0>)
 8002464:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <I2C4_MspInit+0xd0>)
 800246a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800246e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	58024400 	.word	0x58024400
 8002480:	58020c00 	.word	0x58020c00

08002484 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af04      	add	r7, sp, #16
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	4603      	mov	r3, r0
 800248e:	81fb      	strh	r3, [r7, #14]
 8002490:	460b      	mov	r3, r1
 8002492:	81bb      	strh	r3, [r7, #12]
 8002494:	4613      	mov	r3, r2
 8002496:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002498:	8978      	ldrh	r0, [r7, #10]
 800249a:	89ba      	ldrh	r2, [r7, #12]
 800249c:	89f9      	ldrh	r1, [r7, #14]
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	9302      	str	r3, [sp, #8]
 80024a4:	8b3b      	ldrh	r3, [r7, #24]
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4603      	mov	r3, r0
 80024ae:	4807      	ldr	r0, [pc, #28]	; (80024cc <I2C4_ReadReg+0x48>)
 80024b0:	f003 fccc 	bl	8005e4c <HAL_I2C_Mem_Read>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e001      	b.n	80024c2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80024be:	f06f 0307 	mvn.w	r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	24000d7c 	.word	0x24000d7c

080024d0 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80024da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80024e4:	2200      	movs	r2, #0
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f805 	bl	80024f8 <BSP_LCD_InitEx>
 80024ee:	4603      	mov	r3, r0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09e      	sub	sp, #120	; 0x78
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002506:	2300      	movs	r3, #0
 8002508:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d808      	bhi.n	8002526 <BSP_LCD_InitEx+0x2e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <BSP_LCD_InitEx+0x2e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d006      	beq.n	800252e <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002526:	f06f 0301 	mvn.w	r3, #1
 800252a:	677b      	str	r3, [r7, #116]	; 0x74
 800252c:	e0a8      	b.n	8002680 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d109      	bne.n	8002548 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8002534:	2302      	movs	r3, #2
 8002536:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 8002538:	4a54      	ldr	r2, [pc, #336]	; (800268c <BSP_LCD_InitEx+0x194>)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015b      	lsls	r3, r3, #5
 800253e:	4413      	add	r3, r2
 8002540:	3310      	adds	r3, #16
 8002542:	2202      	movs	r2, #2
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e008      	b.n	800255a <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8002548:	2300      	movs	r3, #0
 800254a:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 800254c:	4a4f      	ldr	r2, [pc, #316]	; (800268c <BSP_LCD_InitEx+0x194>)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	015b      	lsls	r3, r3, #5
 8002552:	4413      	add	r3, r2
 8002554:	3310      	adds	r3, #16
 8002556:	2204      	movs	r2, #4
 8002558:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800255a:	4a4c      	ldr	r2, [pc, #304]	; (800268c <BSP_LCD_InitEx+0x194>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015b      	lsls	r3, r3, #5
 8002560:	4413      	add	r3, r2
 8002562:	330c      	adds	r3, #12
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8002568:	4a48      	ldr	r2, [pc, #288]	; (800268c <BSP_LCD_InitEx+0x194>)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	4413      	add	r3, r2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8002574:	4a45      	ldr	r2, [pc, #276]	; (800268c <BSP_LCD_InitEx+0x194>)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	015b      	lsls	r3, r3, #5
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002582:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8002584:	4b42      	ldr	r3, [pc, #264]	; (8002690 <BSP_LCD_InitEx+0x198>)
 8002586:	4a43      	ldr	r2, [pc, #268]	; (8002694 <BSP_LCD_InitEx+0x19c>)
 8002588:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 800258a:	4b43      	ldr	r3, [pc, #268]	; (8002698 <BSP_LCD_InitEx+0x1a0>)
 800258c:	4a43      	ldr	r2, [pc, #268]	; (800269c <BSP_LCD_InitEx+0x1a4>)
 800258e:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8002590:	483f      	ldr	r0, [pc, #252]	; (8002690 <BSP_LCD_InitEx+0x198>)
 8002592:	f000 fd1b 	bl	8002fcc <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8002596:	4840      	ldr	r0, [pc, #256]	; (8002698 <BSP_LCD_InitEx+0x1a0>)
 8002598:	f000 fde4 	bl	8003164 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 800259c:	4b40      	ldr	r3, [pc, #256]	; (80026a0 <BSP_LCD_InitEx+0x1a8>)
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 80025a0:	4b40      	ldr	r3, [pc, #256]	; (80026a4 <BSP_LCD_InitEx+0x1ac>)
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 80025a4:	2370      	movs	r3, #112	; 0x70
 80025a6:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 80025a8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80025ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff f8ae 	bl	8001714 <FT5336_RegisterBusIO>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	da03      	bge.n	80025c6 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80025be:	f06f 0304 	mvn.w	r3, #4
 80025c2:	677b      	str	r3, [r7, #116]	; 0x74
 80025c4:	e02b      	b.n	800261e <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 80025c6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80025ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f8e1 	bl	8001798 <FT5336_ReadID>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da03      	bge.n	80025e4 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80025dc:	f06f 0304 	mvn.w	r3, #4
 80025e0:	677b      	str	r3, [r7, #116]	; 0x74
 80025e2:	e01c      	b.n	800261e <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 80025e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e6:	2b51      	cmp	r3, #81	; 0x51
 80025e8:	d003      	beq.n	80025f2 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80025ea:	f06f 0306 	mvn.w	r3, #6
 80025ee:	677b      	str	r3, [r7, #116]	; 0x74
 80025f0:	e015      	b.n	800261e <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 80025f2:	4827      	ldr	r0, [pc, #156]	; (8002690 <BSP_LCD_InitEx+0x198>)
 80025f4:	f000 f8e8 	bl	80027c8 <MX_LTDC_ClockConfig>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80025fe:	f06f 0303 	mvn.w	r3, #3
 8002602:	677b      	str	r3, [r7, #116]	; 0x74
 8002604:	e00b      	b.n	800261e <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8002606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800260a:	6839      	ldr	r1, [r7, #0]
 800260c:	4820      	ldr	r0, [pc, #128]	; (8002690 <BSP_LCD_InitEx+0x198>)
 800260e:	f000 f84d 	bl	80026ac <MX_LTDC_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002618:	f06f 0303 	mvn.w	r3, #3
 800261c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 800261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002620:	2b00      	cmp	r3, #0
 8002622:	d12d      	bne.n	8002680 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8002624:	2000      	movs	r0, #0
 8002626:	f000 fe2f 	bl	8003288 <BSP_SDRAM_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8002630:	f06f 0303 	mvn.w	r3, #3
 8002634:	e025      	b.n	8002682 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8002642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002646:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 8002648:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 800264c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	461a      	mov	r2, r3
 8002658:	2100      	movs	r1, #0
 800265a:	480d      	ldr	r0, [pc, #52]	; (8002690 <BSP_LCD_InitEx+0x198>)
 800265c:	f000 f872 	bl	8002744 <MX_LTDC_ConfigLayer>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8002666:	f06f 0303 	mvn.w	r3, #3
 800266a:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 800266c:	480e      	ldr	r0, [pc, #56]	; (80026a8 <BSP_LCD_InitEx+0x1b0>)
 800266e:	f000 fde1 	bl	8003234 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 8002672:	4a06      	ldr	r2, [pc, #24]	; (800268c <BSP_LCD_InitEx+0x194>)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	015b      	lsls	r3, r3, #5
 8002678:	4413      	add	r3, r2
 800267a:	3318      	adds	r3, #24
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8002680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8002682:	4618      	mov	r0, r3
 8002684:	3778      	adds	r7, #120	; 0x78
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	24000f2c 	.word	0x24000f2c
 8002690:	24000e84 	.word	0x24000e84
 8002694:	50001000 	.word	0x50001000
 8002698:	24000e1c 	.word	0x24000e1c
 800269c:	52001000 	.word	0x52001000
 80026a0:	08001d6d 	.word	0x08001d6d
 80026a4:	08001e65 	.word	0x08001e65
 80026a8:	24000dd0 	.word	0x24000dd0

080026ac <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a21      	ldr	r2, [pc, #132]	; (8002740 <MX_LTDC_Init+0x94>)
 80026bc:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2228      	movs	r2, #40	; 0x28
 80026da:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	222a      	movs	r2, #42	; 0x2a
 80026e0:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f103 0235 	add.w	r2, r3, #53	; 0x35
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2209      	movs	r2, #9
 80026fa:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	220b      	movs	r2, #11
 8002700:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 020b 	add.w	r2, r3, #11
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f103 020d 	add.w	r2, r3, #13
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	22ff      	movs	r2, #255	; 0xff
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	22ff      	movs	r2, #255	; 0xff
 800272a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f003 ffbc 	bl	80066ac <HAL_LTDC_Init>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	50001000 	.word	0x50001000

08002744 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b092      	sub	sp, #72	; 0x48
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 800276e:	23ff      	movs	r3, #255	; 0xff
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002776:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800277c:	2307      	movs	r3, #7
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	4619      	mov	r1, r3
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f004 f851 	bl	8006860 <HAL_LTDC_ConfigLayer>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3748      	adds	r7, #72	; 0x48
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0b2      	sub	sp, #200	; 0xc8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80027d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 80027dc:	2305      	movs	r3, #5
 80027de:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 80027e0:	23a0      	movs	r3, #160	; 0xa0
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80027e4:	2302      	movs	r3, #2
 80027e6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80027e8:	2302      	movs	r3, #2
 80027ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 80027ec:	2353      	movs	r3, #83	; 0x53
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80027f8:	f107 0308 	add.w	r3, r7, #8
 80027fc:	4618      	mov	r0, r3
 80027fe:	f005 fca1 	bl	8008144 <HAL_RCCEx_PeriphCLKConfig>
 8002802:	4603      	mov	r3, r0
}
 8002804:	4618      	mov	r0, r3
 8002806:	37c8      	adds	r7, #200	; 0xc8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002820:	f06f 0301 	mvn.w	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	e007      	b.n	8002838 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <BSP_LCD_GetPixelFormat+0x3c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	015b      	lsls	r3, r3, #5
 800282e:	4413      	add	r3, r2
 8002830:	330c      	adds	r3, #12
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002838:	68fb      	ldr	r3, [r7, #12]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	24000f2c 	.word	0x24000f2c

0800284c <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002860:	f06f 0301 	mvn.w	r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e006      	b.n	8002876 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <BSP_LCD_SetActiveLayer+0x38>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	015b      	lsls	r3, r3, #5
 800286e:	4413      	add	r3, r2
 8002870:	3308      	adds	r3, #8
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	24000f2c 	.word	0x24000f2c

08002888 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800289c:	f06f 0301 	mvn.w	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	e006      	b.n	80028b2 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80028a4:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <BSP_LCD_GetXSize+0x38>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	015b      	lsls	r3, r3, #5
 80028aa:	4413      	add	r3, r2
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	24000f2c 	.word	0x24000f2c

080028c4 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028d8:	f06f 0301 	mvn.w	r3, #1
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e007      	b.n	80028f0 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80028e0:	4a07      	ldr	r2, [pc, #28]	; (8002900 <BSP_LCD_GetYSize+0x3c>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	015b      	lsls	r3, r3, #5
 80028e6:	4413      	add	r3, r2
 80028e8:	3304      	adds	r3, #4
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80028f0:	68fb      	ldr	r3, [r7, #12]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	24000f2c 	.word	0x24000f2c

08002904 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08e      	sub	sp, #56	; 0x38
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	330a      	adds	r3, #10
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	330b      	adds	r3, #11
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	441a      	add	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	330c      	adds	r3, #12
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	441a      	add	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	330d      	adds	r3, #13
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	4413      	add	r3, r2
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	3312      	adds	r3, #18
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	3313      	adds	r3, #19
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	441a      	add	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	441a      	add	r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	3315      	adds	r3, #21
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	4413      	add	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3316      	adds	r3, #22
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	3317      	adds	r3, #23
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	441a      	add	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	3318      	adds	r3, #24
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	441a      	add	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	3319      	adds	r3, #25
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	4413      	add	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	331c      	adds	r3, #28
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	331d      	adds	r3, #29
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	4413      	add	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80029a2:	4a37      	ldr	r2, [pc, #220]	; (8002a80 <BSP_LCD_DrawBitmap+0x17c>)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	015b      	lsls	r3, r3, #5
 80029a8:	4413      	add	r3, r2
 80029aa:	3308      	adds	r3, #8
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a35      	ldr	r2, [pc, #212]	; (8002a84 <BSP_LCD_DrawBitmap+0x180>)
 80029b0:	2134      	movs	r1, #52	; 0x34
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	335c      	adds	r3, #92	; 0x5c
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4930      	ldr	r1, [pc, #192]	; (8002a80 <BSP_LCD_DrawBitmap+0x17c>)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	015b      	lsls	r3, r3, #5
 80029c2:	440b      	add	r3, r1
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	fb03 f101 	mul.w	r1, r3, r1
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	440b      	add	r3, r1
 80029d0:	482b      	ldr	r0, [pc, #172]	; (8002a80 <BSP_LCD_DrawBitmap+0x17c>)
 80029d2:	68f9      	ldr	r1, [r7, #12]
 80029d4:	0149      	lsls	r1, r1, #5
 80029d6:	4401      	add	r1, r0
 80029d8:	3110      	adds	r1, #16
 80029da:	6809      	ldr	r1, [r1, #0]
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	3b20      	subs	r3, #32
 80029e8:	2b07      	cmp	r3, #7
 80029ea:	d802      	bhi.n	80029f2 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
 80029f0:	e008      	b.n	8002a04 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	3b10      	subs	r3, #16
 80029f6:	2b07      	cmp	r3, #7
 80029f8:	d802      	bhi.n	8002a00 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 80029fa:	2302      	movs	r3, #2
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	e001      	b.n	8002a04 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002a00:	2301      	movs	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	08d2      	lsrs	r2, r2, #3
 8002a12:	fb03 f202 	mul.w	r2, r3, r2
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	4413      	add	r3, r2
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a24:	e023      	b.n	8002a6e <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6a39      	ldr	r1, [r7, #32]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fa77 	bl	8002f24 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <BSP_LCD_DrawBitmap+0x17c>)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	015b      	lsls	r3, r3, #5
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	490f      	ldr	r1, [pc, #60]	; (8002a80 <BSP_LCD_DrawBitmap+0x17c>)
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	0152      	lsls	r2, r2, #5
 8002a46:	440a      	add	r2, r1
 8002a48:	3210      	adds	r2, #16
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a52:	4413      	add	r3, r2
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	08db      	lsrs	r3, r3, #3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	425b      	negs	r3, r3
 8002a62:	6a3a      	ldr	r2, [r7, #32]
 8002a64:	4413      	add	r3, r2
 8002a66:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3d7      	bcc.n	8002a26 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8002a76:	69fb      	ldr	r3, [r7, #28]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3730      	adds	r7, #48	; 0x30
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	24000f2c 	.word	0x24000f2c
 8002a84:	24000e84 	.word	0x24000e84

08002a88 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e032      	b.n	8002b06 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	e028      	b.n	8002af8 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	3303      	adds	r3, #3
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	18d1      	adds	r1, r2, r3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	441a      	add	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f95e 	bl	8002d9c <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <BSP_LCD_FillRGBRect+0x90>)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015b      	lsls	r3, r3, #5
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3310      	adds	r3, #16
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4413      	add	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3d2      	bcc.n	8002aa6 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d3c8      	bcc.n	8002aa0 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	24000f2c 	.word	0x24000f2c

08002b1c <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002b2a:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <BSP_LCD_DrawHLine+0x94>)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015b      	lsls	r3, r3, #5
 8002b30:	4413      	add	r3, r2
 8002b32:	3308      	adds	r3, #8
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <BSP_LCD_DrawHLine+0x98>)
 8002b38:	2134      	movs	r1, #52	; 0x34
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	335c      	adds	r3, #92	; 0x5c
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	491a      	ldr	r1, [pc, #104]	; (8002bb0 <BSP_LCD_DrawHLine+0x94>)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	015b      	lsls	r3, r3, #5
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4817      	ldr	r0, [pc, #92]	; (8002bb0 <BSP_LCD_DrawHLine+0x94>)
 8002b52:	68f9      	ldr	r1, [r7, #12]
 8002b54:	0149      	lsls	r1, r1, #5
 8002b56:	4401      	add	r1, r0
 8002b58:	6809      	ldr	r1, [r1, #0]
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	fb01 f000 	mul.w	r0, r1, r0
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	4401      	add	r1, r0
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	441a      	add	r2, r3
 8002b72:	490f      	ldr	r1, [pc, #60]	; (8002bb0 <BSP_LCD_DrawHLine+0x94>)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015b      	lsls	r3, r3, #5
 8002b78:	440b      	add	r3, r1
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d907      	bls.n	8002b90 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <BSP_LCD_DrawHLine+0x94>)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015b      	lsls	r3, r3, #5
 8002b86:	4413      	add	r3, r2
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	2300      	movs	r3, #0
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f956 	bl	8002e50 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	24000f2c 	.word	0x24000f2c
 8002bb4:	24000e84 	.word	0x24000e84

08002bb8 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002bc6:	4a24      	ldr	r2, [pc, #144]	; (8002c58 <BSP_LCD_DrawVLine+0xa0>)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	015b      	lsls	r3, r3, #5
 8002bcc:	4413      	add	r3, r2
 8002bce:	3308      	adds	r3, #8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <BSP_LCD_DrawVLine+0xa4>)
 8002bd4:	2134      	movs	r1, #52	; 0x34
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	335c      	adds	r3, #92	; 0x5c
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	491d      	ldr	r1, [pc, #116]	; (8002c58 <BSP_LCD_DrawVLine+0xa0>)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	015b      	lsls	r3, r3, #5
 8002be6:	440b      	add	r3, r1
 8002be8:	3310      	adds	r3, #16
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	481a      	ldr	r0, [pc, #104]	; (8002c58 <BSP_LCD_DrawVLine+0xa0>)
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	0149      	lsls	r1, r1, #5
 8002bf2:	4401      	add	r1, r0
 8002bf4:	6809      	ldr	r1, [r1, #0]
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	fb01 f000 	mul.w	r0, r1, r0
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4401      	add	r1, r0
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	441a      	add	r2, r3
 8002c0e:	4912      	ldr	r1, [pc, #72]	; (8002c58 <BSP_LCD_DrawVLine+0xa0>)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015b      	lsls	r3, r3, #5
 8002c14:	440b      	add	r3, r1
 8002c16:	3304      	adds	r3, #4
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d908      	bls.n	8002c30 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	; (8002c58 <BSP_LCD_DrawVLine+0xa0>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	015b      	lsls	r3, r3, #5
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002c30:	6979      	ldr	r1, [r7, #20]
 8002c32:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <BSP_LCD_DrawVLine+0xa0>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	015b      	lsls	r3, r3, #5
 8002c38:	4413      	add	r3, r2
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	6a3a      	ldr	r2, [r7, #32]
 8002c40:	9201      	str	r2, [sp, #4]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f901 	bl	8002e50 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	24000f2c 	.word	0x24000f2c
 8002c5c:	24000e84 	.word	0x24000e84

08002c60 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <BSP_LCD_FillRect+0x7c>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	015b      	lsls	r3, r3, #5
 8002c74:	4413      	add	r3, r2
 8002c76:	3308      	adds	r3, #8
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <BSP_LCD_FillRect+0x80>)
 8002c7c:	2134      	movs	r1, #52	; 0x34
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	335c      	adds	r3, #92	; 0x5c
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4914      	ldr	r1, [pc, #80]	; (8002cdc <BSP_LCD_FillRect+0x7c>)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	015b      	lsls	r3, r3, #5
 8002c8e:	440b      	add	r3, r1
 8002c90:	3310      	adds	r3, #16
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4811      	ldr	r0, [pc, #68]	; (8002cdc <BSP_LCD_FillRect+0x7c>)
 8002c96:	68f9      	ldr	r1, [r7, #12]
 8002c98:	0149      	lsls	r1, r1, #5
 8002c9a:	4401      	add	r1, r0
 8002c9c:	6809      	ldr	r1, [r1, #0]
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	fb01 f000 	mul.w	r0, r1, r0
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	4401      	add	r1, r0
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002cb0:	6979      	ldr	r1, [r7, #20]
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <BSP_LCD_FillRect+0x7c>)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	015b      	lsls	r3, r3, #5
 8002cb8:	4413      	add	r3, r2
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc2:	9201      	str	r2, [sp, #4]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f8c0 	bl	8002e50 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	24000f2c 	.word	0x24000f2c
 8002ce0:	24000e84 	.word	0x24000e84

08002ce4 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002cf2:	4a28      	ldr	r2, [pc, #160]	; (8002d94 <BSP_LCD_ReadPixel+0xb0>)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	015b      	lsls	r3, r3, #5
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <BSP_LCD_ReadPixel+0xb4>)
 8002d00:	2134      	movs	r1, #52	; 0x34
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3348      	adds	r3, #72	; 0x48
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11c      	bne.n	8002d4a <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <BSP_LCD_ReadPixel+0xb0>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015b      	lsls	r3, r3, #5
 8002d16:	4413      	add	r3, r2
 8002d18:	3308      	adds	r3, #8
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <BSP_LCD_ReadPixel+0xb4>)
 8002d1e:	2134      	movs	r1, #52	; 0x34
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	335c      	adds	r3, #92	; 0x5c
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	491a      	ldr	r1, [pc, #104]	; (8002d94 <BSP_LCD_ReadPixel+0xb0>)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	015b      	lsls	r3, r3, #5
 8002d30:	440b      	add	r3, r1
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	fb03 f101 	mul.w	r1, r3, r1
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	440b      	add	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e01d      	b.n	8002d86 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002d4a:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <BSP_LCD_ReadPixel+0xb0>)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	015b      	lsls	r3, r3, #5
 8002d50:	4413      	add	r3, r2
 8002d52:	3308      	adds	r3, #8
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <BSP_LCD_ReadPixel+0xb4>)
 8002d58:	2134      	movs	r1, #52	; 0x34
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	335c      	adds	r3, #92	; 0x5c
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	490b      	ldr	r1, [pc, #44]	; (8002d94 <BSP_LCD_ReadPixel+0xb0>)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	440b      	add	r3, r1
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	fb03 f101 	mul.w	r1, r3, r1
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	440b      	add	r3, r1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	24000f2c 	.word	0x24000f2c
 8002d98:	24000e84 	.word	0x24000e84

08002d9c <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002daa:	4a27      	ldr	r2, [pc, #156]	; (8002e48 <BSP_LCD_WritePixel+0xac>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015b      	lsls	r3, r3, #5
 8002db0:	4413      	add	r3, r2
 8002db2:	3308      	adds	r3, #8
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <BSP_LCD_WritePixel+0xb0>)
 8002db8:	2134      	movs	r1, #52	; 0x34
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3348      	adds	r3, #72	; 0x48
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11c      	bne.n	8002e02 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8002dc8:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <BSP_LCD_WritePixel+0xac>)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	015b      	lsls	r3, r3, #5
 8002dce:	4413      	add	r3, r2
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <BSP_LCD_WritePixel+0xb0>)
 8002dd6:	2134      	movs	r1, #52	; 0x34
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	335c      	adds	r3, #92	; 0x5c
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4919      	ldr	r1, [pc, #100]	; (8002e48 <BSP_LCD_WritePixel+0xac>)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015b      	lsls	r3, r3, #5
 8002de8:	440b      	add	r3, r1
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	fb03 f101 	mul.w	r1, r3, r1
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	440b      	add	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	e01b      	b.n	8002e3a <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8002e02:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <BSP_LCD_WritePixel+0xac>)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	015b      	lsls	r3, r3, #5
 8002e08:	4413      	add	r3, r2
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <BSP_LCD_WritePixel+0xb0>)
 8002e10:	2134      	movs	r1, #52	; 0x34
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	335c      	adds	r3, #92	; 0x5c
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	490a      	ldr	r1, [pc, #40]	; (8002e48 <BSP_LCD_WritePixel+0xac>)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	015b      	lsls	r3, r3, #5
 8002e22:	440b      	add	r3, r1
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	fb03 f101 	mul.w	r1, r3, r1
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	440b      	add	r3, r1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	b292      	uxth	r2, r2
 8002e38:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	24000f2c 	.word	0x24000f2c
 8002e4c:	24000e84 	.word	0x24000e84

08002e50 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <LL_FillBuffer+0xc8>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	015b      	lsls	r3, r3, #5
 8002e68:	4413      	add	r3, r2
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d129      	bne.n	8002ec6 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002e72:	2302      	movs	r3, #2
 8002e74:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	0adb      	lsrs	r3, r3, #11
 8002e7a:	f003 021f 	and.w	r2, r3, #31
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	4413      	add	r3, r2
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	3317      	adds	r3, #23
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	0419      	lsls	r1, r3, #16
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e96:	4613      	mov	r3, r2
 8002e98:	01db      	lsls	r3, r3, #7
 8002e9a:	4413      	add	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3321      	adds	r3, #33	; 0x21
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	4319      	orrs	r1, r3
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	f003 021f 	and.w	r2, r3, #31
 8002eae:	4613      	mov	r3, r2
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	4413      	add	r3, r2
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	3317      	adds	r3, #23
 8002eba:	099b      	lsrs	r3, r3, #6
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec2:	613b      	str	r3, [r7, #16]
    break;
 8002ec4:	e002      	b.n	8002ecc <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
    break;
 8002eca:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <LL_FillBuffer+0xcc>)
 8002ece:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ed2:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002ed4:	4a11      	ldr	r2, [pc, #68]	; (8002f1c <LL_FillBuffer+0xcc>)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8002eda:	4a10      	ldr	r2, [pc, #64]	; (8002f1c <LL_FillBuffer+0xcc>)
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <LL_FillBuffer+0xcc>)
 8002ee2:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <LL_FillBuffer+0xd0>)
 8002ee4:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002ee6:	480d      	ldr	r0, [pc, #52]	; (8002f1c <LL_FillBuffer+0xcc>)
 8002ee8:	f002 f9fa 	bl	80052e0 <HAL_DMA2D_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6939      	ldr	r1, [r7, #16]
 8002efc:	4807      	ldr	r0, [pc, #28]	; (8002f1c <LL_FillBuffer+0xcc>)
 8002efe:	f002 fa5d 	bl	80053bc <HAL_DMA2D_Start>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d103      	bne.n	8002f10 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8002f08:	2132      	movs	r1, #50	; 0x32
 8002f0a:	4804      	ldr	r0, [pc, #16]	; (8002f1c <LL_FillBuffer+0xcc>)
 8002f0c:	f002 fa81 	bl	8005412 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8002f10:	bf00      	nop
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	24000f2c 	.word	0x24000f2c
 8002f1c:	24000e1c 	.word	0x24000e1c
 8002f20:	52001000 	.word	0x52001000

08002f24 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002f32:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <LL_ConvertLineToRGB+0x9c>)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	015b      	lsls	r3, r3, #5
 8002f38:	4413      	add	r3, r2
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d102      	bne.n	8002f48 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002f42:	2302      	movs	r3, #2
 8002f44:	617b      	str	r3, [r7, #20]
    break;
 8002f46:	e002      	b.n	8002f4e <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
    break;
 8002f4c:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f54:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002f56:	4a1b      	ldr	r2, [pc, #108]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f6a:	22ff      	movs	r2, #255	; 0xff
 8002f6c:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <LL_ConvertLineToRGB+0xa4>)
 8002f7e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002f80:	4810      	ldr	r0, [pc, #64]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f82:	f002 f9ad 	bl	80052e0 <HAL_DMA2D_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d115      	bne.n	8002fb8 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002f90:	f002 fb28 	bl	80055e4 <HAL_DMA2D_ConfigLayer>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	4807      	ldr	r0, [pc, #28]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002fa6:	f002 fa09 	bl	80053bc <HAL_DMA2D_Start>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d103      	bne.n	8002fb8 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8002fb0:	2132      	movs	r1, #50	; 0x32
 8002fb2:	4804      	ldr	r0, [pc, #16]	; (8002fc4 <LL_ConvertLineToRGB+0xa0>)
 8002fb4:	f002 fa2d 	bl	8005412 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	24000f2c 	.word	0x24000f2c
 8002fc4:	24000e1c 	.word	0x24000e1c
 8002fc8:	52001000 	.word	0x52001000

08002fcc <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08e      	sub	sp, #56	; 0x38
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5b      	ldr	r2, [pc, #364]	; (8003148 <LTDC_MspInit+0x17c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	f040 80b0 	bne.w	8003140 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002fe0:	4b5a      	ldr	r3, [pc, #360]	; (800314c <LTDC_MspInit+0x180>)
 8002fe2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002fe6:	4a59      	ldr	r2, [pc, #356]	; (800314c <LTDC_MspInit+0x180>)
 8002fe8:	f043 0308 	orr.w	r3, r3, #8
 8002fec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002ff0:	4b56      	ldr	r3, [pc, #344]	; (800314c <LTDC_MspInit+0x180>)
 8002ff2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	623b      	str	r3, [r7, #32]
 8002ffc:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ffe:	4b53      	ldr	r3, [pc, #332]	; (800314c <LTDC_MspInit+0x180>)
 8003000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003004:	4a51      	ldr	r2, [pc, #324]	; (800314c <LTDC_MspInit+0x180>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800300e:	4b4f      	ldr	r3, [pc, #316]	; (800314c <LTDC_MspInit+0x180>)
 8003010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800301c:	4b4b      	ldr	r3, [pc, #300]	; (800314c <LTDC_MspInit+0x180>)
 800301e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003022:	4a4a      	ldr	r2, [pc, #296]	; (800314c <LTDC_MspInit+0x180>)
 8003024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800302c:	4b47      	ldr	r3, [pc, #284]	; (800314c <LTDC_MspInit+0x180>)
 800302e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800303a:	4b44      	ldr	r3, [pc, #272]	; (800314c <LTDC_MspInit+0x180>)
 800303c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003040:	4a42      	ldr	r2, [pc, #264]	; (800314c <LTDC_MspInit+0x180>)
 8003042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800304a:	4b40      	ldr	r3, [pc, #256]	; (800314c <LTDC_MspInit+0x180>)
 800304c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003058:	4b3c      	ldr	r3, [pc, #240]	; (800314c <LTDC_MspInit+0x180>)
 800305a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305e:	4a3b      	ldr	r2, [pc, #236]	; (800314c <LTDC_MspInit+0x180>)
 8003060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003068:	4b38      	ldr	r3, [pc, #224]	; (800314c <LTDC_MspInit+0x180>)
 800306a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003076:	4b35      	ldr	r3, [pc, #212]	; (800314c <LTDC_MspInit+0x180>)
 8003078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307c:	4a33      	ldr	r2, [pc, #204]	; (800314c <LTDC_MspInit+0x180>)
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <LTDC_MspInit+0x180>)
 8003088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8003094:	f24d 2303 	movw	r3, #53763	; 0xd203
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80030a2:	2302      	movs	r3, #2
 80030a4:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80030a6:	230e      	movs	r3, #14
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80030aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ae:	4619      	mov	r1, r3
 80030b0:	4827      	ldr	r0, [pc, #156]	; (8003150 <LTDC_MspInit+0x184>)
 80030b2:	f002 fc4f 	bl	8005954 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 80030b6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80030bc:	230e      	movs	r3, #14
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80030c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c4:	4619      	mov	r1, r3
 80030c6:	4823      	ldr	r0, [pc, #140]	; (8003154 <LTDC_MspInit+0x188>)
 80030c8:	f002 fc44 	bl	8005954 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80030cc:	23ff      	movs	r3, #255	; 0xff
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80030d0:	230e      	movs	r3, #14
 80030d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80030d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d8:	4619      	mov	r1, r3
 80030da:	481f      	ldr	r0, [pc, #124]	; (8003158 <LTDC_MspInit+0x18c>)
 80030dc:	f002 fc3a 	bl	8005954 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 80030e0:	f240 2302 	movw	r3, #514	; 0x202
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80030e6:	2302      	movs	r3, #2
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80030ee:	2302      	movs	r3, #2
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80030f2:	230e      	movs	r3, #14
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80030f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fa:	4619      	mov	r1, r3
 80030fc:	4817      	ldr	r0, [pc, #92]	; (800315c <LTDC_MspInit+0x190>)
 80030fe:	f002 fc29 	bl	8005954 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003106:	2301      	movs	r3, #1
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800310a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310e:	4619      	mov	r1, r3
 8003110:	4813      	ldr	r0, [pc, #76]	; (8003160 <LTDC_MspInit+0x194>)
 8003112:	f002 fc1f 	bl	8005954 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8003116:	2201      	movs	r2, #1
 8003118:	2180      	movs	r1, #128	; 0x80
 800311a:	4811      	ldr	r0, [pc, #68]	; (8003160 <LTDC_MspInit+0x194>)
 800311c:	f002 fde2 	bl	8005ce4 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <LTDC_MspInit+0x180>)
 8003122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <LTDC_MspInit+0x180>)
 8003128:	f043 0308 	orr.w	r3, r3, #8
 800312c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <LTDC_MspInit+0x180>)
 8003132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003136:	4a05      	ldr	r2, [pc, #20]	; (800314c <LTDC_MspInit+0x180>)
 8003138:	f023 0308 	bic.w	r3, r3, #8
 800313c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8003140:	bf00      	nop
 8003142:	3738      	adds	r7, #56	; 0x38
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	50001000 	.word	0x50001000
 800314c:	58024400 	.word	0x58024400
 8003150:	58022000 	.word	0x58022000
 8003154:	58022400 	.word	0x58022400
 8003158:	58022800 	.word	0x58022800
 800315c:	58021c00 	.word	0x58021c00
 8003160:	58020c00 	.word	0x58020c00

08003164 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <DMA2D_MspInit+0x54>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d11a      	bne.n	80031ac <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003176:	4b11      	ldr	r3, [pc, #68]	; (80031bc <DMA2D_MspInit+0x58>)
 8003178:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800317c:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <DMA2D_MspInit+0x58>)
 800317e:	f043 0310 	orr.w	r3, r3, #16
 8003182:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <DMA2D_MspInit+0x58>)
 8003188:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <DMA2D_MspInit+0x58>)
 8003196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003198:	4a08      	ldr	r2, [pc, #32]	; (80031bc <DMA2D_MspInit+0x58>)
 800319a:	f043 0310 	orr.w	r3, r3, #16
 800319e:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <DMA2D_MspInit+0x58>)
 80031a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a4:	4a05      	ldr	r2, [pc, #20]	; (80031bc <DMA2D_MspInit+0x58>)
 80031a6:	f023 0310 	bic.w	r3, r3, #16
 80031aa:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	52001000 	.word	0x52001000
 80031bc:	58024400 	.word	0x58024400

080031c0 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <TIMx_PWM_MspInit+0x6c>)
 80031ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <TIMx_PWM_MspInit+0x6c>)
 80031d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <TIMx_PWM_MspInit+0x6c>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <TIMx_PWM_MspInit+0x6c>)
 80031e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ec:	4a0f      	ldr	r2, [pc, #60]	; (800322c <TIMx_PWM_MspInit+0x6c>)
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <TIMx_PWM_MspInit+0x6c>)
 80031f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800320c:	2301      	movs	r3, #1
 800320e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8003210:	2303      	movs	r3, #3
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8003214:	2301      	movs	r3, #1
 8003216:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	4619      	mov	r1, r3
 800321e:	4804      	ldr	r0, [pc, #16]	; (8003230 <TIMx_PWM_MspInit+0x70>)
 8003220:	f002 fb98 	bl	8005954 <HAL_GPIO_Init>
}
 8003224:	bf00      	nop
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	58024400 	.word	0x58024400
 8003230:	58022800 	.word	0x58022800

08003234 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a11      	ldr	r2, [pc, #68]	; (8003284 <TIMx_PWM_Init+0x50>)
 8003240:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f006 fbe6 	bl	8009a14 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ffb9 	bl	80031c0 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2204      	movs	r2, #4
 8003252:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f24c 3250 	movw	r2, #50000	; 0xc350
 800325a:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f006 fb76 	bl	8009966 <HAL_TIM_PWM_Init>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40010400 	.word	0x40010400

08003288 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800329a:	f06f 0301 	mvn.w	r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e044      	b.n	800332c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2234      	movs	r2, #52	; 0x34
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	4a23      	ldr	r2, [pc, #140]	; (8003338 <BSP_SDRAM_Init+0xb0>)
 80032ac:	4413      	add	r3, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f8a8 	bl	8003404 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2234      	movs	r2, #52	; 0x34
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <BSP_SDRAM_Init+0xb0>)
 80032be:	4413      	add	r3, r2
 80032c0:	2210      	movs	r2, #16
 80032c2:	2104      	movs	r1, #4
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f83b 	bl	8003340 <MX_SDRAM_BANK2_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e029      	b.n	800332c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <BSP_SDRAM_Init+0xb4>)
 80032da:	2208      	movs	r2, #8
 80032dc:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <BSP_SDRAM_Init+0xb4>)
 80032e0:	2203      	movs	r2, #3
 80032e2:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <BSP_SDRAM_Init+0xb4>)
 80032e6:	f240 6203 	movw	r2, #1539	; 0x603
 80032ea:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <BSP_SDRAM_Init+0xb4>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 80032f2:	4b12      	ldr	r3, [pc, #72]	; (800333c <BSP_SDRAM_Init+0xb4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <BSP_SDRAM_Init+0xb4>)
 80032fa:	2230      	movs	r2, #48	; 0x30
 80032fc:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <BSP_SDRAM_Init+0xb4>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <BSP_SDRAM_Init+0xb4>)
 8003306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2234      	movs	r2, #52	; 0x34
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	4a08      	ldr	r2, [pc, #32]	; (8003338 <BSP_SDRAM_Init+0xb0>)
 8003316:	4413      	add	r3, r2
 8003318:	4908      	ldr	r1, [pc, #32]	; (800333c <BSP_SDRAM_Init+0xb4>)
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fab3 	bl	8001886 <MT48LC4M32B2_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8003326:	f06f 0304 	mvn.w	r3, #4
 800332a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800332c:	68fb      	ldr	r3, [r7, #12]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	24000f4c 	.word	0x24000f4c
 800333c:	24000f80 	.word	0x24000f80

08003340 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08c      	sub	sp, #48	; 0x30
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800334c:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <MX_SDRAM_BANK2_Init+0x90>)
 800334e:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <MX_SDRAM_BANK2_Init+0x94>)
 8003350:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800336a:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <MX_SDRAM_BANK2_Init+0x90>)
 800336c:	2240      	movs	r2, #64	; 0x40
 800336e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003376:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003384:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8003394:	2302      	movs	r3, #2
 8003396:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003398:	2307      	movs	r3, #7
 800339a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800339c:	2304      	movs	r3, #4
 800339e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 80033a0:	2307      	movs	r3, #7
 80033a2:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 80033a4:	2302      	movs	r3, #2
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 80033a8:	2302      	movs	r3, #2
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 80033ac:	2302      	movs	r3, #2
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	4619      	mov	r1, r3
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f006 fa32 	bl	8009820 <HAL_SDRAM_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3730      	adds	r7, #48	; 0x30
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	24000f4c 	.word	0x24000f4c
 80033d4:	52004140 	.word	0x52004140

080033d8 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 80033e0:	4a07      	ldr	r2, [pc, #28]	; (8003400 <BSP_SDRAM_IRQHandler+0x28>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2134      	movs	r1, #52	; 0x34
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3330      	adds	r3, #48	; 0x30
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 fcb1 	bl	8006d58 <HAL_MDMA_IRQHandler>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	24000f4c 	.word	0x24000f4c

08003404 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08e      	sub	sp, #56	; 0x38
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800340c:	4b73      	ldr	r3, [pc, #460]	; (80035dc <SDRAM_MspInit+0x1d8>)
 800340e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003412:	4a72      	ldr	r2, [pc, #456]	; (80035dc <SDRAM_MspInit+0x1d8>)
 8003414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003418:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800341c:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <SDRAM_MspInit+0x1d8>)
 800341e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800342a:	4b6c      	ldr	r3, [pc, #432]	; (80035dc <SDRAM_MspInit+0x1d8>)
 800342c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003430:	4a6a      	ldr	r2, [pc, #424]	; (80035dc <SDRAM_MspInit+0x1d8>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800343a:	4b68      	ldr	r3, [pc, #416]	; (80035dc <SDRAM_MspInit+0x1d8>)
 800343c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003448:	4b64      	ldr	r3, [pc, #400]	; (80035dc <SDRAM_MspInit+0x1d8>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344e:	4a63      	ldr	r2, [pc, #396]	; (80035dc <SDRAM_MspInit+0x1d8>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003458:	4b60      	ldr	r3, [pc, #384]	; (80035dc <SDRAM_MspInit+0x1d8>)
 800345a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003466:	4b5d      	ldr	r3, [pc, #372]	; (80035dc <SDRAM_MspInit+0x1d8>)
 8003468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800346c:	4a5b      	ldr	r2, [pc, #364]	; (80035dc <SDRAM_MspInit+0x1d8>)
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003476:	4b59      	ldr	r3, [pc, #356]	; (80035dc <SDRAM_MspInit+0x1d8>)
 8003478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003484:	4b55      	ldr	r3, [pc, #340]	; (80035dc <SDRAM_MspInit+0x1d8>)
 8003486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800348a:	4a54      	ldr	r2, [pc, #336]	; (80035dc <SDRAM_MspInit+0x1d8>)
 800348c:	f043 0320 	orr.w	r3, r3, #32
 8003490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003494:	4b51      	ldr	r3, [pc, #324]	; (80035dc <SDRAM_MspInit+0x1d8>)
 8003496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034a2:	4b4e      	ldr	r3, [pc, #312]	; (80035dc <SDRAM_MspInit+0x1d8>)
 80034a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a8:	4a4c      	ldr	r2, [pc, #304]	; (80035dc <SDRAM_MspInit+0x1d8>)
 80034aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034b2:	4b4a      	ldr	r3, [pc, #296]	; (80035dc <SDRAM_MspInit+0x1d8>)
 80034b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034c0:	4b46      	ldr	r3, [pc, #280]	; (80035dc <SDRAM_MspInit+0x1d8>)
 80034c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c6:	4a45      	ldr	r2, [pc, #276]	; (80035dc <SDRAM_MspInit+0x1d8>)
 80034c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d0:	4b42      	ldr	r3, [pc, #264]	; (80035dc <SDRAM_MspInit+0x1d8>)
 80034d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80034e2:	2301      	movs	r3, #1
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e6:	2303      	movs	r3, #3
 80034e8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80034ea:	230c      	movs	r3, #12
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80034ee:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80034f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f8:	4619      	mov	r1, r3
 80034fa:	4839      	ldr	r0, [pc, #228]	; (80035e0 <SDRAM_MspInit+0x1dc>)
 80034fc:	f002 fa2a 	bl	8005954 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003500:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350a:	4619      	mov	r1, r3
 800350c:	4835      	ldr	r0, [pc, #212]	; (80035e4 <SDRAM_MspInit+0x1e0>)
 800350e:	f002 fa21 	bl	8005954 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003512:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351c:	4619      	mov	r1, r3
 800351e:	4832      	ldr	r0, [pc, #200]	; (80035e8 <SDRAM_MspInit+0x1e4>)
 8003520:	f002 fa18 	bl	8005954 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8003524:	f248 1333 	movw	r3, #33075	; 0x8133
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800352a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352e:	4619      	mov	r1, r3
 8003530:	482e      	ldr	r0, [pc, #184]	; (80035ec <SDRAM_MspInit+0x1e8>)
 8003532:	f002 fa0f 	bl	8005954 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8003536:	23e0      	movs	r3, #224	; 0xe0
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	4619      	mov	r1, r3
 8003540:	482b      	ldr	r0, [pc, #172]	; (80035f0 <SDRAM_MspInit+0x1ec>)
 8003542:	f002 fa07 	bl	8005954 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 8003548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800354c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800354e:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 8003550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003554:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8003556:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8003562:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 8003564:	f240 2202 	movw	r2, #514	; 0x202
 8003568:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 800356c:	f640 0208 	movw	r2, #2056	; 0x808
 8003570:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8003572:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 8003574:	2220      	movs	r2, #32
 8003576:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 8003580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 8003588:	2200      	movs	r2, #0
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 800359a:	2200      	movs	r2, #0
 800359c:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 80035a6:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <SDRAM_MspInit+0x1f4>)
 80035a8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <SDRAM_MspInit+0x1f8>)
 80035ac:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
 80035b0:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <SDRAM_MspInit+0x1f8>)
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 80035b6:	480f      	ldr	r0, [pc, #60]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 80035b8:	f003 fb76 	bl	8006ca8 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 80035bc:	480d      	ldr	r0, [pc, #52]	; (80035f4 <SDRAM_MspInit+0x1f0>)
 80035be:	f003 fb27 	bl	8006c10 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	210f      	movs	r1, #15
 80035c6:	207a      	movs	r0, #122	; 0x7a
 80035c8:	f000 f9c7 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80035cc:	207a      	movs	r0, #122	; 0x7a
 80035ce:	f000 f9de 	bl	800398e <HAL_NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3738      	adds	r7, #56	; 0x38
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	58024400 	.word	0x58024400
 80035e0:	58020c00 	.word	0x58020c00
 80035e4:	58021000 	.word	0x58021000
 80035e8:	58021400 	.word	0x58021400
 80035ec:	58021800 	.word	0x58021800
 80035f0:	58021c00 	.word	0x58021c00
 80035f4:	24000fa0 	.word	0x24000fa0
 80035f8:	52000040 	.word	0x52000040
 80035fc:	24000f4c 	.word	0x24000f4c

08003600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003606:	2003      	movs	r0, #3
 8003608:	f000 f99c 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800360c:	f004 fbda 	bl	8007dc4 <HAL_RCC_GetSysClockFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <HAL_Init+0x68>)
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	4913      	ldr	r1, [pc, #76]	; (800366c <HAL_Init+0x6c>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_Init+0x68>)
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	4a0e      	ldr	r2, [pc, #56]	; (800366c <HAL_Init+0x6c>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
 8003640:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <HAL_Init+0x70>)
 8003642:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <HAL_Init+0x74>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800364a:	200f      	movs	r0, #15
 800364c:	f000 f814 	bl	8003678 <HAL_InitTick>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e002      	b.n	8003660 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800365a:	f7fd feb1 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	58024400 	.word	0x58024400
 800366c:	0800d1d0 	.word	0x0800d1d0
 8003670:	24000018 	.word	0x24000018
 8003674:	24000014 	.word	0x24000014

08003678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_InitTick+0x60>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e021      	b.n	80036d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800368c:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_InitTick+0x64>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_InitTick+0x60>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	4619      	mov	r1, r3
 8003696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800369a:	fbb3 f3f1 	udiv	r3, r3, r1
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f981 	bl	80039aa <HAL_SYSTICK_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00e      	b.n	80036d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d80a      	bhi.n	80036ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b8:	2200      	movs	r2, #0
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	f000 f94b 	bl	800395a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c4:	4a06      	ldr	r2, [pc, #24]	; (80036e0 <HAL_InitTick+0x68>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	24000034 	.word	0x24000034
 80036dc:	24000014 	.word	0x24000014
 80036e0:	24000030 	.word	0x24000030

080036e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_IncTick+0x20>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <HAL_IncTick+0x24>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4413      	add	r3, r2
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <HAL_IncTick+0x24>)
 80036f6:	6013      	str	r3, [r2, #0]
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	24000034 	.word	0x24000034
 8003708:	2400100c 	.word	0x2400100c

0800370c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return uwTick;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_GetTick+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	2400100c 	.word	0x2400100c

08003724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800372c:	f7ff ffee 	bl	800370c <HAL_GetTick>
 8003730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d005      	beq.n	800374a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_Delay+0x44>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800374a:	bf00      	nop
 800374c:	f7ff ffde 	bl	800370c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	429a      	cmp	r2, r3
 800375a:	d8f7      	bhi.n	800374c <HAL_Delay+0x28>
  {
  }
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	24000034 	.word	0x24000034

0800376c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_GetREVID+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0c1b      	lsrs	r3, r3, #16
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	5c001000 	.word	0x5c001000

08003784 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_EnableCompensationCell+0x1c>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_EnableCompensationCell+0x1c>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6213      	str	r3, [r2, #32]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	58000400 	.word	0x58000400

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <__NVIC_SetPriorityGrouping+0x40>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d2:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <__NVIC_SetPriorityGrouping+0x40>)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00
 80037e8:	05fa0000 	.word	0x05fa0000

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003968:	f7ff ff40 	bl	80037ec <__NVIC_GetPriorityGrouping>
 800396c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f7ff ff90 	bl	8003898 <NVIC_EncodePriority>
 8003978:	4602      	mov	r2, r0
 800397a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff5f 	bl	8003844 <__NVIC_SetPriority>
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff33 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffa4 	bl	8003900 <SysTick_Config>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80039cc:	f7ff fe9e 	bl	800370c <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e2dc      	b.n	8003f96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d008      	beq.n	80039fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e2cd      	b.n	8003f96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a76      	ldr	r2, [pc, #472]	; (8003bd8 <HAL_DMA_Abort+0x214>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d04a      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a74      	ldr	r2, [pc, #464]	; (8003bdc <HAL_DMA_Abort+0x218>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d045      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a73      	ldr	r2, [pc, #460]	; (8003be0 <HAL_DMA_Abort+0x21c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d040      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a71      	ldr	r2, [pc, #452]	; (8003be4 <HAL_DMA_Abort+0x220>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d03b      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a70      	ldr	r2, [pc, #448]	; (8003be8 <HAL_DMA_Abort+0x224>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d036      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a6e      	ldr	r2, [pc, #440]	; (8003bec <HAL_DMA_Abort+0x228>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d031      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6d      	ldr	r2, [pc, #436]	; (8003bf0 <HAL_DMA_Abort+0x22c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d02c      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a6b      	ldr	r2, [pc, #428]	; (8003bf4 <HAL_DMA_Abort+0x230>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d027      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6a      	ldr	r2, [pc, #424]	; (8003bf8 <HAL_DMA_Abort+0x234>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d022      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a68      	ldr	r2, [pc, #416]	; (8003bfc <HAL_DMA_Abort+0x238>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01d      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a67      	ldr	r2, [pc, #412]	; (8003c00 <HAL_DMA_Abort+0x23c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a65      	ldr	r2, [pc, #404]	; (8003c04 <HAL_DMA_Abort+0x240>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a64      	ldr	r2, [pc, #400]	; (8003c08 <HAL_DMA_Abort+0x244>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a62      	ldr	r2, [pc, #392]	; (8003c0c <HAL_DMA_Abort+0x248>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a61      	ldr	r2, [pc, #388]	; (8003c10 <HAL_DMA_Abort+0x24c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_DMA_Abort+0xd6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a5f      	ldr	r2, [pc, #380]	; (8003c14 <HAL_DMA_Abort+0x250>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Abort+0xda>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_DMA_Abort+0xdc>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d013      	beq.n	8003acc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 021e 	bic.w	r2, r2, #30
 8003ab2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ac2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e00a      	b.n	8003ae2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 020e 	bic.w	r2, r2, #14
 8003ada:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3c      	ldr	r2, [pc, #240]	; (8003bd8 <HAL_DMA_Abort+0x214>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d072      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a3a      	ldr	r2, [pc, #232]	; (8003bdc <HAL_DMA_Abort+0x218>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d06d      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a39      	ldr	r2, [pc, #228]	; (8003be0 <HAL_DMA_Abort+0x21c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d068      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a37      	ldr	r2, [pc, #220]	; (8003be4 <HAL_DMA_Abort+0x220>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d063      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a36      	ldr	r2, [pc, #216]	; (8003be8 <HAL_DMA_Abort+0x224>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d05e      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a34      	ldr	r2, [pc, #208]	; (8003bec <HAL_DMA_Abort+0x228>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d059      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <HAL_DMA_Abort+0x22c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d054      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a31      	ldr	r2, [pc, #196]	; (8003bf4 <HAL_DMA_Abort+0x230>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d04f      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a30      	ldr	r2, [pc, #192]	; (8003bf8 <HAL_DMA_Abort+0x234>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d04a      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2e      	ldr	r2, [pc, #184]	; (8003bfc <HAL_DMA_Abort+0x238>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d045      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2d      	ldr	r2, [pc, #180]	; (8003c00 <HAL_DMA_Abort+0x23c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d040      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2b      	ldr	r2, [pc, #172]	; (8003c04 <HAL_DMA_Abort+0x240>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d03b      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <HAL_DMA_Abort+0x244>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a28      	ldr	r2, [pc, #160]	; (8003c0c <HAL_DMA_Abort+0x248>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <HAL_DMA_Abort+0x24c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d02c      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <HAL_DMA_Abort+0x250>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d027      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a24      	ldr	r2, [pc, #144]	; (8003c18 <HAL_DMA_Abort+0x254>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <HAL_DMA_Abort+0x258>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_DMA_Abort+0x25c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d018      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_DMA_Abort+0x260>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <HAL_DMA_Abort+0x264>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_DMA_Abort+0x268>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <HAL_DMA_Abort+0x26c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_DMA_Abort+0x20e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_DMA_Abort+0x270>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d132      	bne.n	8003c38 <HAL_DMA_Abort+0x274>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e031      	b.n	8003c3a <HAL_DMA_Abort+0x276>
 8003bd6:	bf00      	nop
 8003bd8:	40020010 	.word	0x40020010
 8003bdc:	40020028 	.word	0x40020028
 8003be0:	40020040 	.word	0x40020040
 8003be4:	40020058 	.word	0x40020058
 8003be8:	40020070 	.word	0x40020070
 8003bec:	40020088 	.word	0x40020088
 8003bf0:	400200a0 	.word	0x400200a0
 8003bf4:	400200b8 	.word	0x400200b8
 8003bf8:	40020410 	.word	0x40020410
 8003bfc:	40020428 	.word	0x40020428
 8003c00:	40020440 	.word	0x40020440
 8003c04:	40020458 	.word	0x40020458
 8003c08:	40020470 	.word	0x40020470
 8003c0c:	40020488 	.word	0x40020488
 8003c10:	400204a0 	.word	0x400204a0
 8003c14:	400204b8 	.word	0x400204b8
 8003c18:	58025408 	.word	0x58025408
 8003c1c:	5802541c 	.word	0x5802541c
 8003c20:	58025430 	.word	0x58025430
 8003c24:	58025444 	.word	0x58025444
 8003c28:	58025458 	.word	0x58025458
 8003c2c:	5802546c 	.word	0x5802546c
 8003c30:	58025480 	.word	0x58025480
 8003c34:	58025494 	.word	0x58025494
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6d      	ldr	r2, [pc, #436]	; (8003e08 <HAL_DMA_Abort+0x444>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d04a      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a6b      	ldr	r2, [pc, #428]	; (8003e0c <HAL_DMA_Abort+0x448>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d045      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a6a      	ldr	r2, [pc, #424]	; (8003e10 <HAL_DMA_Abort+0x44c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d040      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a68      	ldr	r2, [pc, #416]	; (8003e14 <HAL_DMA_Abort+0x450>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d03b      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a67      	ldr	r2, [pc, #412]	; (8003e18 <HAL_DMA_Abort+0x454>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d036      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a65      	ldr	r2, [pc, #404]	; (8003e1c <HAL_DMA_Abort+0x458>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d031      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a64      	ldr	r2, [pc, #400]	; (8003e20 <HAL_DMA_Abort+0x45c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d02c      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a62      	ldr	r2, [pc, #392]	; (8003e24 <HAL_DMA_Abort+0x460>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d027      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a61      	ldr	r2, [pc, #388]	; (8003e28 <HAL_DMA_Abort+0x464>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d022      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a5f      	ldr	r2, [pc, #380]	; (8003e2c <HAL_DMA_Abort+0x468>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01d      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a5e      	ldr	r2, [pc, #376]	; (8003e30 <HAL_DMA_Abort+0x46c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5c      	ldr	r2, [pc, #368]	; (8003e34 <HAL_DMA_Abort+0x470>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a5b      	ldr	r2, [pc, #364]	; (8003e38 <HAL_DMA_Abort+0x474>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a59      	ldr	r2, [pc, #356]	; (8003e3c <HAL_DMA_Abort+0x478>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a58      	ldr	r2, [pc, #352]	; (8003e40 <HAL_DMA_Abort+0x47c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_DMA_Abort+0x32a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a56      	ldr	r2, [pc, #344]	; (8003e44 <HAL_DMA_Abort+0x480>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <HAL_DMA_Abort+0x33c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e007      	b.n	8003d10 <HAL_DMA_Abort+0x34c>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0201 	bic.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d10:	e013      	b.n	8003d3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d12:	f7ff fcfb 	bl	800370c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b05      	cmp	r3, #5
 8003d1e:	d90c      	bls.n	8003d3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e12d      	b.n	8003f96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <HAL_DMA_Abort+0x444>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2d      	ldr	r2, [pc, #180]	; (8003e0c <HAL_DMA_Abort+0x448>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <HAL_DMA_Abort+0x44c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2a      	ldr	r2, [pc, #168]	; (8003e14 <HAL_DMA_Abort+0x450>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <HAL_DMA_Abort+0x454>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <HAL_DMA_Abort+0x458>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <HAL_DMA_Abort+0x45c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a24      	ldr	r2, [pc, #144]	; (8003e24 <HAL_DMA_Abort+0x460>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_DMA_Abort+0x464>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <HAL_DMA_Abort+0x468>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a20      	ldr	r2, [pc, #128]	; (8003e30 <HAL_DMA_Abort+0x46c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_DMA_Abort+0x470>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <HAL_DMA_Abort+0x474>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <HAL_DMA_Abort+0x478>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <HAL_DMA_Abort+0x47c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_Abort+0x422>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <HAL_DMA_Abort+0x480>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_DMA_Abort+0x426>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_DMA_Abort+0x428>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d02b      	beq.n	8003e48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	223f      	movs	r2, #63	; 0x3f
 8003e00:	409a      	lsls	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	e02a      	b.n	8003e5e <HAL_DMA_Abort+0x49a>
 8003e08:	40020010 	.word	0x40020010
 8003e0c:	40020028 	.word	0x40020028
 8003e10:	40020040 	.word	0x40020040
 8003e14:	40020058 	.word	0x40020058
 8003e18:	40020070 	.word	0x40020070
 8003e1c:	40020088 	.word	0x40020088
 8003e20:	400200a0 	.word	0x400200a0
 8003e24:	400200b8 	.word	0x400200b8
 8003e28:	40020410 	.word	0x40020410
 8003e2c:	40020428 	.word	0x40020428
 8003e30:	40020440 	.word	0x40020440
 8003e34:	40020458 	.word	0x40020458
 8003e38:	40020470 	.word	0x40020470
 8003e3c:	40020488 	.word	0x40020488
 8003e40:	400204a0 	.word	0x400204a0
 8003e44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2201      	movs	r2, #1
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a4f      	ldr	r2, [pc, #316]	; (8003fa0 <HAL_DMA_Abort+0x5dc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d072      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a4d      	ldr	r2, [pc, #308]	; (8003fa4 <HAL_DMA_Abort+0x5e0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d06d      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a4c      	ldr	r2, [pc, #304]	; (8003fa8 <HAL_DMA_Abort+0x5e4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d068      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a4a      	ldr	r2, [pc, #296]	; (8003fac <HAL_DMA_Abort+0x5e8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d063      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a49      	ldr	r2, [pc, #292]	; (8003fb0 <HAL_DMA_Abort+0x5ec>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d05e      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a47      	ldr	r2, [pc, #284]	; (8003fb4 <HAL_DMA_Abort+0x5f0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d059      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a46      	ldr	r2, [pc, #280]	; (8003fb8 <HAL_DMA_Abort+0x5f4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d054      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a44      	ldr	r2, [pc, #272]	; (8003fbc <HAL_DMA_Abort+0x5f8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04f      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a43      	ldr	r2, [pc, #268]	; (8003fc0 <HAL_DMA_Abort+0x5fc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a41      	ldr	r2, [pc, #260]	; (8003fc4 <HAL_DMA_Abort+0x600>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a40      	ldr	r2, [pc, #256]	; (8003fc8 <HAL_DMA_Abort+0x604>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a3e      	ldr	r2, [pc, #248]	; (8003fcc <HAL_DMA_Abort+0x608>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a3d      	ldr	r2, [pc, #244]	; (8003fd0 <HAL_DMA_Abort+0x60c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3b      	ldr	r2, [pc, #236]	; (8003fd4 <HAL_DMA_Abort+0x610>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3a      	ldr	r2, [pc, #232]	; (8003fd8 <HAL_DMA_Abort+0x614>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_DMA_Abort+0x618>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a37      	ldr	r2, [pc, #220]	; (8003fe0 <HAL_DMA_Abort+0x61c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a35      	ldr	r2, [pc, #212]	; (8003fe4 <HAL_DMA_Abort+0x620>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a34      	ldr	r2, [pc, #208]	; (8003fe8 <HAL_DMA_Abort+0x624>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a32      	ldr	r2, [pc, #200]	; (8003fec <HAL_DMA_Abort+0x628>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a31      	ldr	r2, [pc, #196]	; (8003ff0 <HAL_DMA_Abort+0x62c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a2f      	ldr	r2, [pc, #188]	; (8003ff4 <HAL_DMA_Abort+0x630>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2e      	ldr	r2, [pc, #184]	; (8003ff8 <HAL_DMA_Abort+0x634>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_Abort+0x58a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2c      	ldr	r2, [pc, #176]	; (8003ffc <HAL_DMA_Abort+0x638>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_DMA_Abort+0x58e>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_DMA_Abort+0x590>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
 8003fe0:	58025408 	.word	0x58025408
 8003fe4:	5802541c 	.word	0x5802541c
 8003fe8:	58025430 	.word	0x58025430
 8003fec:	58025444 	.word	0x58025444
 8003ff0:	58025458 	.word	0x58025458
 8003ff4:	5802546c 	.word	0x5802546c
 8003ff8:	58025480 	.word	0x58025480
 8003ffc:	58025494 	.word	0x58025494

08004000 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e237      	b.n	8004482 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d004      	beq.n	8004028 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2280      	movs	r2, #128	; 0x80
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e22c      	b.n	8004482 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a5c      	ldr	r2, [pc, #368]	; (80041a0 <HAL_DMA_Abort_IT+0x1a0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d04a      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a5b      	ldr	r2, [pc, #364]	; (80041a4 <HAL_DMA_Abort_IT+0x1a4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d045      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a59      	ldr	r2, [pc, #356]	; (80041a8 <HAL_DMA_Abort_IT+0x1a8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d040      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_DMA_Abort_IT+0x1ac>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d03b      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a56      	ldr	r2, [pc, #344]	; (80041b0 <HAL_DMA_Abort_IT+0x1b0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d036      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a55      	ldr	r2, [pc, #340]	; (80041b4 <HAL_DMA_Abort_IT+0x1b4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d031      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a53      	ldr	r2, [pc, #332]	; (80041b8 <HAL_DMA_Abort_IT+0x1b8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d02c      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a52      	ldr	r2, [pc, #328]	; (80041bc <HAL_DMA_Abort_IT+0x1bc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d027      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a50      	ldr	r2, [pc, #320]	; (80041c0 <HAL_DMA_Abort_IT+0x1c0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d022      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a4f      	ldr	r2, [pc, #316]	; (80041c4 <HAL_DMA_Abort_IT+0x1c4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d01d      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a4d      	ldr	r2, [pc, #308]	; (80041c8 <HAL_DMA_Abort_IT+0x1c8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d018      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a4c      	ldr	r2, [pc, #304]	; (80041cc <HAL_DMA_Abort_IT+0x1cc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a4a      	ldr	r2, [pc, #296]	; (80041d0 <HAL_DMA_Abort_IT+0x1d0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00e      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a49      	ldr	r2, [pc, #292]	; (80041d4 <HAL_DMA_Abort_IT+0x1d4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a47      	ldr	r2, [pc, #284]	; (80041d8 <HAL_DMA_Abort_IT+0x1d8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_DMA_Abort_IT+0xc8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a46      	ldr	r2, [pc, #280]	; (80041dc <HAL_DMA_Abort_IT+0x1dc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_DMA_Abort_IT+0xcc>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <HAL_DMA_Abort_IT+0xce>
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8086 	beq.w	80041e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2204      	movs	r2, #4
 80040d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a2f      	ldr	r2, [pc, #188]	; (80041a0 <HAL_DMA_Abort_IT+0x1a0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d04a      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2e      	ldr	r2, [pc, #184]	; (80041a4 <HAL_DMA_Abort_IT+0x1a4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d045      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <HAL_DMA_Abort_IT+0x1a8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d040      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <HAL_DMA_Abort_IT+0x1ac>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d03b      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <HAL_DMA_Abort_IT+0x1b0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d036      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a28      	ldr	r2, [pc, #160]	; (80041b4 <HAL_DMA_Abort_IT+0x1b4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d031      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <HAL_DMA_Abort_IT+0x1b8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d02c      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a25      	ldr	r2, [pc, #148]	; (80041bc <HAL_DMA_Abort_IT+0x1bc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d027      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a23      	ldr	r2, [pc, #140]	; (80041c0 <HAL_DMA_Abort_IT+0x1c0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d022      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a22      	ldr	r2, [pc, #136]	; (80041c4 <HAL_DMA_Abort_IT+0x1c4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d01d      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <HAL_DMA_Abort_IT+0x1c8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d018      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <HAL_DMA_Abort_IT+0x1cc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d013      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_DMA_Abort_IT+0x1d0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00e      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_DMA_Abort_IT+0x1d4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d009      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1a      	ldr	r2, [pc, #104]	; (80041d8 <HAL_DMA_Abort_IT+0x1d8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <HAL_DMA_Abort_IT+0x17c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a19      	ldr	r2, [pc, #100]	; (80041dc <HAL_DMA_Abort_IT+0x1dc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d108      	bne.n	800418e <HAL_DMA_Abort_IT+0x18e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	e178      	b.n	8004480 <HAL_DMA_Abort_IT+0x480>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e16f      	b.n	8004480 <HAL_DMA_Abort_IT+0x480>
 80041a0:	40020010 	.word	0x40020010
 80041a4:	40020028 	.word	0x40020028
 80041a8:	40020040 	.word	0x40020040
 80041ac:	40020058 	.word	0x40020058
 80041b0:	40020070 	.word	0x40020070
 80041b4:	40020088 	.word	0x40020088
 80041b8:	400200a0 	.word	0x400200a0
 80041bc:	400200b8 	.word	0x400200b8
 80041c0:	40020410 	.word	0x40020410
 80041c4:	40020428 	.word	0x40020428
 80041c8:	40020440 	.word	0x40020440
 80041cc:	40020458 	.word	0x40020458
 80041d0:	40020470 	.word	0x40020470
 80041d4:	40020488 	.word	0x40020488
 80041d8:	400204a0 	.word	0x400204a0
 80041dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 020e 	bic.w	r2, r2, #14
 80041ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a6c      	ldr	r2, [pc, #432]	; (80043a8 <HAL_DMA_Abort_IT+0x3a8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d04a      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a6b      	ldr	r2, [pc, #428]	; (80043ac <HAL_DMA_Abort_IT+0x3ac>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d045      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a69      	ldr	r2, [pc, #420]	; (80043b0 <HAL_DMA_Abort_IT+0x3b0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d040      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a68      	ldr	r2, [pc, #416]	; (80043b4 <HAL_DMA_Abort_IT+0x3b4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d03b      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a66      	ldr	r2, [pc, #408]	; (80043b8 <HAL_DMA_Abort_IT+0x3b8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d036      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a65      	ldr	r2, [pc, #404]	; (80043bc <HAL_DMA_Abort_IT+0x3bc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d031      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a63      	ldr	r2, [pc, #396]	; (80043c0 <HAL_DMA_Abort_IT+0x3c0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d02c      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a62      	ldr	r2, [pc, #392]	; (80043c4 <HAL_DMA_Abort_IT+0x3c4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d027      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a60      	ldr	r2, [pc, #384]	; (80043c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5f      	ldr	r2, [pc, #380]	; (80043cc <HAL_DMA_Abort_IT+0x3cc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d01d      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5d      	ldr	r2, [pc, #372]	; (80043d0 <HAL_DMA_Abort_IT+0x3d0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a5c      	ldr	r2, [pc, #368]	; (80043d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a5a      	ldr	r2, [pc, #360]	; (80043d8 <HAL_DMA_Abort_IT+0x3d8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a59      	ldr	r2, [pc, #356]	; (80043dc <HAL_DMA_Abort_IT+0x3dc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a57      	ldr	r2, [pc, #348]	; (80043e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_DMA_Abort_IT+0x290>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a56      	ldr	r2, [pc, #344]	; (80043e4 <HAL_DMA_Abort_IT+0x3e4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <HAL_DMA_Abort_IT+0x2a2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e007      	b.n	80042b2 <HAL_DMA_Abort_IT+0x2b2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <HAL_DMA_Abort_IT+0x3a8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d072      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a3a      	ldr	r2, [pc, #232]	; (80043ac <HAL_DMA_Abort_IT+0x3ac>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d06d      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a39      	ldr	r2, [pc, #228]	; (80043b0 <HAL_DMA_Abort_IT+0x3b0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d068      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a37      	ldr	r2, [pc, #220]	; (80043b4 <HAL_DMA_Abort_IT+0x3b4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d063      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a36      	ldr	r2, [pc, #216]	; (80043b8 <HAL_DMA_Abort_IT+0x3b8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d05e      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a34      	ldr	r2, [pc, #208]	; (80043bc <HAL_DMA_Abort_IT+0x3bc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d059      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <HAL_DMA_Abort_IT+0x3c0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d054      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a31      	ldr	r2, [pc, #196]	; (80043c4 <HAL_DMA_Abort_IT+0x3c4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d04f      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a30      	ldr	r2, [pc, #192]	; (80043c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d04a      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2e      	ldr	r2, [pc, #184]	; (80043cc <HAL_DMA_Abort_IT+0x3cc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d045      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <HAL_DMA_Abort_IT+0x3d0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d040      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2b      	ldr	r2, [pc, #172]	; (80043d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d03b      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <HAL_DMA_Abort_IT+0x3d8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d036      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a28      	ldr	r2, [pc, #160]	; (80043dc <HAL_DMA_Abort_IT+0x3dc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d031      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a27      	ldr	r2, [pc, #156]	; (80043e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d02c      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <HAL_DMA_Abort_IT+0x3e4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d027      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <HAL_DMA_Abort_IT+0x3e8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d022      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a22      	ldr	r2, [pc, #136]	; (80043ec <HAL_DMA_Abort_IT+0x3ec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01d      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <HAL_DMA_Abort_IT+0x3f0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <HAL_DMA_Abort_IT+0x3f4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <HAL_DMA_Abort_IT+0x3f8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <HAL_DMA_Abort_IT+0x3fc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <HAL_DMA_Abort_IT+0x400>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_DMA_Abort_IT+0x3a2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_DMA_Abort_IT+0x404>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d132      	bne.n	8004408 <HAL_DMA_Abort_IT+0x408>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e031      	b.n	800440a <HAL_DMA_Abort_IT+0x40a>
 80043a6:	bf00      	nop
 80043a8:	40020010 	.word	0x40020010
 80043ac:	40020028 	.word	0x40020028
 80043b0:	40020040 	.word	0x40020040
 80043b4:	40020058 	.word	0x40020058
 80043b8:	40020070 	.word	0x40020070
 80043bc:	40020088 	.word	0x40020088
 80043c0:	400200a0 	.word	0x400200a0
 80043c4:	400200b8 	.word	0x400200b8
 80043c8:	40020410 	.word	0x40020410
 80043cc:	40020428 	.word	0x40020428
 80043d0:	40020440 	.word	0x40020440
 80043d4:	40020458 	.word	0x40020458
 80043d8:	40020470 	.word	0x40020470
 80043dc:	40020488 	.word	0x40020488
 80043e0:	400204a0 	.word	0x400204a0
 80043e4:	400204b8 	.word	0x400204b8
 80043e8:	58025408 	.word	0x58025408
 80043ec:	5802541c 	.word	0x5802541c
 80043f0:	58025430 	.word	0x58025430
 80043f4:	58025444 	.word	0x58025444
 80043f8:	58025458 	.word	0x58025458
 80043fc:	5802546c 	.word	0x5802546c
 8004400:	58025480 	.word	0x58025480
 8004404:	58025494 	.word	0x58025494
 8004408:	2300      	movs	r3, #0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d028      	beq.n	8004460 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800441c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2201      	movs	r2, #1
 800442e:	409a      	lsls	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800443c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004454:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800445e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop

0800448c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004498:	4b67      	ldr	r3, [pc, #412]	; (8004638 <HAL_DMA_IRQHandler+0x1ac>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a67      	ldr	r2, [pc, #412]	; (800463c <HAL_DMA_IRQHandler+0x1b0>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	0a9b      	lsrs	r3, r3, #10
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5f      	ldr	r2, [pc, #380]	; (8004640 <HAL_DMA_IRQHandler+0x1b4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04a      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a5d      	ldr	r2, [pc, #372]	; (8004644 <HAL_DMA_IRQHandler+0x1b8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d045      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a5c      	ldr	r2, [pc, #368]	; (8004648 <HAL_DMA_IRQHandler+0x1bc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d040      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a5a      	ldr	r2, [pc, #360]	; (800464c <HAL_DMA_IRQHandler+0x1c0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d03b      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a59      	ldr	r2, [pc, #356]	; (8004650 <HAL_DMA_IRQHandler+0x1c4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d036      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a57      	ldr	r2, [pc, #348]	; (8004654 <HAL_DMA_IRQHandler+0x1c8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d031      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a56      	ldr	r2, [pc, #344]	; (8004658 <HAL_DMA_IRQHandler+0x1cc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d02c      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a54      	ldr	r2, [pc, #336]	; (800465c <HAL_DMA_IRQHandler+0x1d0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d027      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a53      	ldr	r2, [pc, #332]	; (8004660 <HAL_DMA_IRQHandler+0x1d4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a51      	ldr	r2, [pc, #324]	; (8004664 <HAL_DMA_IRQHandler+0x1d8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01d      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a50      	ldr	r2, [pc, #320]	; (8004668 <HAL_DMA_IRQHandler+0x1dc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a4e      	ldr	r2, [pc, #312]	; (800466c <HAL_DMA_IRQHandler+0x1e0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_DMA_IRQHandler+0x1e4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a4b      	ldr	r2, [pc, #300]	; (8004674 <HAL_DMA_IRQHandler+0x1e8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a4a      	ldr	r2, [pc, #296]	; (8004678 <HAL_DMA_IRQHandler+0x1ec>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_DMA_IRQHandler+0xd2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a48      	ldr	r2, [pc, #288]	; (800467c <HAL_DMA_IRQHandler+0x1f0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_DMA_IRQHandler+0xd6>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_DMA_IRQHandler+0xd8>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 842b 	beq.w	8004dc0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2208      	movs	r2, #8
 8004574:	409a      	lsls	r2, r3
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80a2 	beq.w	80046c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2e      	ldr	r2, [pc, #184]	; (8004640 <HAL_DMA_IRQHandler+0x1b4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d04a      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <HAL_DMA_IRQHandler+0x1b8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d045      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a2b      	ldr	r2, [pc, #172]	; (8004648 <HAL_DMA_IRQHandler+0x1bc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d040      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2a      	ldr	r2, [pc, #168]	; (800464c <HAL_DMA_IRQHandler+0x1c0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d03b      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a28      	ldr	r2, [pc, #160]	; (8004650 <HAL_DMA_IRQHandler+0x1c4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d036      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a27      	ldr	r2, [pc, #156]	; (8004654 <HAL_DMA_IRQHandler+0x1c8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d031      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a25      	ldr	r2, [pc, #148]	; (8004658 <HAL_DMA_IRQHandler+0x1cc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d02c      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a24      	ldr	r2, [pc, #144]	; (800465c <HAL_DMA_IRQHandler+0x1d0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d027      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a22      	ldr	r2, [pc, #136]	; (8004660 <HAL_DMA_IRQHandler+0x1d4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d022      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a21      	ldr	r2, [pc, #132]	; (8004664 <HAL_DMA_IRQHandler+0x1d8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d01d      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <HAL_DMA_IRQHandler+0x1dc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d018      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a1e      	ldr	r2, [pc, #120]	; (800466c <HAL_DMA_IRQHandler+0x1e0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d013      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_DMA_IRQHandler+0x1e4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00e      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <HAL_DMA_IRQHandler+0x1e8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d009      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <HAL_DMA_IRQHandler+0x1ec>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_DMA_IRQHandler+0x194>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a18      	ldr	r2, [pc, #96]	; (800467c <HAL_DMA_IRQHandler+0x1f0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d12f      	bne.n	8004680 <HAL_DMA_IRQHandler+0x1f4>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	e02e      	b.n	8004694 <HAL_DMA_IRQHandler+0x208>
 8004636:	bf00      	nop
 8004638:	24000014 	.word	0x24000014
 800463c:	1b4e81b5 	.word	0x1b4e81b5
 8004640:	40020010 	.word	0x40020010
 8004644:	40020028 	.word	0x40020028
 8004648:	40020040 	.word	0x40020040
 800464c:	40020058 	.word	0x40020058
 8004650:	40020070 	.word	0x40020070
 8004654:	40020088 	.word	0x40020088
 8004658:	400200a0 	.word	0x400200a0
 800465c:	400200b8 	.word	0x400200b8
 8004660:	40020410 	.word	0x40020410
 8004664:	40020428 	.word	0x40020428
 8004668:	40020440 	.word	0x40020440
 800466c:	40020458 	.word	0x40020458
 8004670:	40020470 	.word	0x40020470
 8004674:	40020488 	.word	0x40020488
 8004678:	400204a0 	.word	0x400204a0
 800467c:	400204b8 	.word	0x400204b8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf14      	ite	ne
 800468e:	2301      	movne	r3, #1
 8004690:	2300      	moveq	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d015      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0204 	bic.w	r2, r2, #4
 80046a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	2208      	movs	r2, #8
 80046b2:	409a      	lsls	r2, r3
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d06e      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a69      	ldr	r2, [pc, #420]	; (8004884 <HAL_DMA_IRQHandler+0x3f8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d04a      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a67      	ldr	r2, [pc, #412]	; (8004888 <HAL_DMA_IRQHandler+0x3fc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d045      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a66      	ldr	r2, [pc, #408]	; (800488c <HAL_DMA_IRQHandler+0x400>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d040      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a64      	ldr	r2, [pc, #400]	; (8004890 <HAL_DMA_IRQHandler+0x404>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d03b      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a63      	ldr	r2, [pc, #396]	; (8004894 <HAL_DMA_IRQHandler+0x408>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d036      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a61      	ldr	r2, [pc, #388]	; (8004898 <HAL_DMA_IRQHandler+0x40c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d031      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a60      	ldr	r2, [pc, #384]	; (800489c <HAL_DMA_IRQHandler+0x410>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d02c      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a5e      	ldr	r2, [pc, #376]	; (80048a0 <HAL_DMA_IRQHandler+0x414>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d027      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a5d      	ldr	r2, [pc, #372]	; (80048a4 <HAL_DMA_IRQHandler+0x418>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d022      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a5b      	ldr	r2, [pc, #364]	; (80048a8 <HAL_DMA_IRQHandler+0x41c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01d      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a5a      	ldr	r2, [pc, #360]	; (80048ac <HAL_DMA_IRQHandler+0x420>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d018      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a58      	ldr	r2, [pc, #352]	; (80048b0 <HAL_DMA_IRQHandler+0x424>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a57      	ldr	r2, [pc, #348]	; (80048b4 <HAL_DMA_IRQHandler+0x428>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00e      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a55      	ldr	r2, [pc, #340]	; (80048b8 <HAL_DMA_IRQHandler+0x42c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a54      	ldr	r2, [pc, #336]	; (80048bc <HAL_DMA_IRQHandler+0x430>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_DMA_IRQHandler+0x2ee>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a52      	ldr	r2, [pc, #328]	; (80048c0 <HAL_DMA_IRQHandler+0x434>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10a      	bne.n	8004790 <HAL_DMA_IRQHandler+0x304>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e003      	b.n	8004798 <HAL_DMA_IRQHandler+0x30c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2201      	movs	r2, #1
 80047a6:	409a      	lsls	r2, r3
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f043 0202 	orr.w	r2, r3, #2
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	2204      	movs	r2, #4
 80047c2:	409a      	lsls	r2, r3
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 808f 	beq.w	80048ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2c      	ldr	r2, [pc, #176]	; (8004884 <HAL_DMA_IRQHandler+0x3f8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <HAL_DMA_IRQHandler+0x3fc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a29      	ldr	r2, [pc, #164]	; (800488c <HAL_DMA_IRQHandler+0x400>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a27      	ldr	r2, [pc, #156]	; (8004890 <HAL_DMA_IRQHandler+0x404>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a26      	ldr	r2, [pc, #152]	; (8004894 <HAL_DMA_IRQHandler+0x408>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a24      	ldr	r2, [pc, #144]	; (8004898 <HAL_DMA_IRQHandler+0x40c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a23      	ldr	r2, [pc, #140]	; (800489c <HAL_DMA_IRQHandler+0x410>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <HAL_DMA_IRQHandler+0x414>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <HAL_DMA_IRQHandler+0x418>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <HAL_DMA_IRQHandler+0x41c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <HAL_DMA_IRQHandler+0x420>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <HAL_DMA_IRQHandler+0x424>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <HAL_DMA_IRQHandler+0x428>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_DMA_IRQHandler+0x42c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a17      	ldr	r2, [pc, #92]	; (80048bc <HAL_DMA_IRQHandler+0x430>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_DMA_IRQHandler+0x3e2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <HAL_DMA_IRQHandler+0x434>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d12a      	bne.n	80048c4 <HAL_DMA_IRQHandler+0x438>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e023      	b.n	80048cc <HAL_DMA_IRQHandler+0x440>
 8004884:	40020010 	.word	0x40020010
 8004888:	40020028 	.word	0x40020028
 800488c:	40020040 	.word	0x40020040
 8004890:	40020058 	.word	0x40020058
 8004894:	40020070 	.word	0x40020070
 8004898:	40020088 	.word	0x40020088
 800489c:	400200a0 	.word	0x400200a0
 80048a0:	400200b8 	.word	0x400200b8
 80048a4:	40020410 	.word	0x40020410
 80048a8:	40020428 	.word	0x40020428
 80048ac:	40020440 	.word	0x40020440
 80048b0:	40020458 	.word	0x40020458
 80048b4:	40020470 	.word	0x40020470
 80048b8:	40020488 	.word	0x40020488
 80048bc:	400204a0 	.word	0x400204a0
 80048c0:	400204b8 	.word	0x400204b8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2204      	movs	r2, #4
 80048da:	409a      	lsls	r2, r3
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2210      	movs	r2, #16
 80048f6:	409a      	lsls	r2, r3
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a6 	beq.w	8004a4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a85      	ldr	r2, [pc, #532]	; (8004b1c <HAL_DMA_IRQHandler+0x690>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d04a      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a83      	ldr	r2, [pc, #524]	; (8004b20 <HAL_DMA_IRQHandler+0x694>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d045      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a82      	ldr	r2, [pc, #520]	; (8004b24 <HAL_DMA_IRQHandler+0x698>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d040      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a80      	ldr	r2, [pc, #512]	; (8004b28 <HAL_DMA_IRQHandler+0x69c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d03b      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a7f      	ldr	r2, [pc, #508]	; (8004b2c <HAL_DMA_IRQHandler+0x6a0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d036      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7d      	ldr	r2, [pc, #500]	; (8004b30 <HAL_DMA_IRQHandler+0x6a4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d031      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7c      	ldr	r2, [pc, #496]	; (8004b34 <HAL_DMA_IRQHandler+0x6a8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d02c      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a7a      	ldr	r2, [pc, #488]	; (8004b38 <HAL_DMA_IRQHandler+0x6ac>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d027      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a79      	ldr	r2, [pc, #484]	; (8004b3c <HAL_DMA_IRQHandler+0x6b0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a77      	ldr	r2, [pc, #476]	; (8004b40 <HAL_DMA_IRQHandler+0x6b4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01d      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a76      	ldr	r2, [pc, #472]	; (8004b44 <HAL_DMA_IRQHandler+0x6b8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a74      	ldr	r2, [pc, #464]	; (8004b48 <HAL_DMA_IRQHandler+0x6bc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a73      	ldr	r2, [pc, #460]	; (8004b4c <HAL_DMA_IRQHandler+0x6c0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a71      	ldr	r2, [pc, #452]	; (8004b50 <HAL_DMA_IRQHandler+0x6c4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a70      	ldr	r2, [pc, #448]	; (8004b54 <HAL_DMA_IRQHandler+0x6c8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x516>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a6e      	ldr	r2, [pc, #440]	; (8004b58 <HAL_DMA_IRQHandler+0x6cc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10a      	bne.n	80049b8 <HAL_DMA_IRQHandler+0x52c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf14      	ite	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	2300      	moveq	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e009      	b.n	80049cc <HAL_DMA_IRQHandler+0x540>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d03e      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2210      	movs	r2, #16
 80049da:	409a      	lsls	r2, r3
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d108      	bne.n	8004a0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d024      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
 8004a0c:	e01f      	b.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d01b      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
 8004a1e:	e016      	b.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d107      	bne.n	8004a3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0208 	bic.w	r2, r2, #8
 8004a3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2220      	movs	r2, #32
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8110 	beq.w	8004c84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2c      	ldr	r2, [pc, #176]	; (8004b1c <HAL_DMA_IRQHandler+0x690>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d04a      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_DMA_IRQHandler+0x694>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d045      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a29      	ldr	r2, [pc, #164]	; (8004b24 <HAL_DMA_IRQHandler+0x698>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d040      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <HAL_DMA_IRQHandler+0x69c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d03b      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a26      	ldr	r2, [pc, #152]	; (8004b2c <HAL_DMA_IRQHandler+0x6a0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d036      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <HAL_DMA_IRQHandler+0x6a4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d031      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	; (8004b34 <HAL_DMA_IRQHandler+0x6a8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02c      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <HAL_DMA_IRQHandler+0x6ac>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d027      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a20      	ldr	r2, [pc, #128]	; (8004b3c <HAL_DMA_IRQHandler+0x6b0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d022      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <HAL_DMA_IRQHandler+0x6b4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01d      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <HAL_DMA_IRQHandler+0x6b8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_DMA_IRQHandler+0x6bc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <HAL_DMA_IRQHandler+0x6c0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_DMA_IRQHandler+0x6c4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <HAL_DMA_IRQHandler+0x6c8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x678>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <HAL_DMA_IRQHandler+0x6cc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d12b      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x6d0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e02a      	b.n	8004b70 <HAL_DMA_IRQHandler+0x6e4>
 8004b1a:	bf00      	nop
 8004b1c:	40020010 	.word	0x40020010
 8004b20:	40020028 	.word	0x40020028
 8004b24:	40020040 	.word	0x40020040
 8004b28:	40020058 	.word	0x40020058
 8004b2c:	40020070 	.word	0x40020070
 8004b30:	40020088 	.word	0x40020088
 8004b34:	400200a0 	.word	0x400200a0
 8004b38:	400200b8 	.word	0x400200b8
 8004b3c:	40020410 	.word	0x40020410
 8004b40:	40020428 	.word	0x40020428
 8004b44:	40020440 	.word	0x40020440
 8004b48:	40020458 	.word	0x40020458
 8004b4c:	40020470 	.word	0x40020470
 8004b50:	40020488 	.word	0x40020488
 8004b54:	400204a0 	.word	0x400204a0
 8004b58:	400204b8 	.word	0x400204b8
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8087 	beq.w	8004c84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2220      	movs	r2, #32
 8004b80:	409a      	lsls	r2, r3
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d139      	bne.n	8004c06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0216 	bic.w	r2, r2, #22
 8004ba0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <HAL_DMA_IRQHandler+0x736>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0208 	bic.w	r2, r2, #8
 8004bd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	223f      	movs	r2, #63	; 0x3f
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 834a 	beq.w	8005290 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
          }
          return;
 8004c04:	e344      	b.n	8005290 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d018      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02c      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
 8004c32:	e027      	b.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d023      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
 8004c44:	e01e      	b.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10f      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0210 	bic.w	r2, r2, #16
 8004c62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8306 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8088 	beq.w	8004dac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a7a      	ldr	r2, [pc, #488]	; (8004e94 <HAL_DMA_IRQHandler+0xa08>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d04a      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a79      	ldr	r2, [pc, #484]	; (8004e98 <HAL_DMA_IRQHandler+0xa0c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d045      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a77      	ldr	r2, [pc, #476]	; (8004e9c <HAL_DMA_IRQHandler+0xa10>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d040      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a76      	ldr	r2, [pc, #472]	; (8004ea0 <HAL_DMA_IRQHandler+0xa14>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d03b      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a74      	ldr	r2, [pc, #464]	; (8004ea4 <HAL_DMA_IRQHandler+0xa18>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d036      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a73      	ldr	r2, [pc, #460]	; (8004ea8 <HAL_DMA_IRQHandler+0xa1c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d031      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a71      	ldr	r2, [pc, #452]	; (8004eac <HAL_DMA_IRQHandler+0xa20>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02c      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a70      	ldr	r2, [pc, #448]	; (8004eb0 <HAL_DMA_IRQHandler+0xa24>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d027      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a6e      	ldr	r2, [pc, #440]	; (8004eb4 <HAL_DMA_IRQHandler+0xa28>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d022      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6d      	ldr	r2, [pc, #436]	; (8004eb8 <HAL_DMA_IRQHandler+0xa2c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d01d      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6b      	ldr	r2, [pc, #428]	; (8004ebc <HAL_DMA_IRQHandler+0xa30>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d018      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6a      	ldr	r2, [pc, #424]	; (8004ec0 <HAL_DMA_IRQHandler+0xa34>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d013      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a68      	ldr	r2, [pc, #416]	; (8004ec4 <HAL_DMA_IRQHandler+0xa38>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00e      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a67      	ldr	r2, [pc, #412]	; (8004ec8 <HAL_DMA_IRQHandler+0xa3c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d009      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	; (8004ecc <HAL_DMA_IRQHandler+0xa40>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x8b8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a64      	ldr	r2, [pc, #400]	; (8004ed0 <HAL_DMA_IRQHandler+0xa44>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d108      	bne.n	8004d56 <HAL_DMA_IRQHandler+0x8ca>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e007      	b.n	8004d66 <HAL_DMA_IRQHandler+0x8da>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d307      	bcc.n	8004d82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f2      	bne.n	8004d66 <HAL_DMA_IRQHandler+0x8da>
 8004d80:	e000      	b.n	8004d84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004d82:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d004      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2203      	movs	r2, #3
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004d9a:	e003      	b.n	8004da4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8272 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4798      	blx	r3
 8004dbe:	e26c      	b.n	800529a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a43      	ldr	r2, [pc, #268]	; (8004ed4 <HAL_DMA_IRQHandler+0xa48>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d022      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a42      	ldr	r2, [pc, #264]	; (8004ed8 <HAL_DMA_IRQHandler+0xa4c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d01d      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a40      	ldr	r2, [pc, #256]	; (8004edc <HAL_DMA_IRQHandler+0xa50>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d018      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3f      	ldr	r2, [pc, #252]	; (8004ee0 <HAL_DMA_IRQHandler+0xa54>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3d      	ldr	r2, [pc, #244]	; (8004ee4 <HAL_DMA_IRQHandler+0xa58>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a3c      	ldr	r2, [pc, #240]	; (8004ee8 <HAL_DMA_IRQHandler+0xa5c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a3a      	ldr	r2, [pc, #232]	; (8004eec <HAL_DMA_IRQHandler+0xa60>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x984>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a39      	ldr	r2, [pc, #228]	; (8004ef0 <HAL_DMA_IRQHandler+0xa64>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_DMA_IRQHandler+0x988>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_DMA_IRQHandler+0x98a>
 8004e14:	2300      	movs	r3, #0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 823f 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80cd 	beq.w	8004fd4 <HAL_DMA_IRQHandler+0xb48>
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80c7 	beq.w	8004fd4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	2204      	movs	r2, #4
 8004e50:	409a      	lsls	r2, r3
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d049      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8210 	beq.w	8005294 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e7c:	e20a      	b.n	8005294 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 8206 	beq.w	8005294 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e90:	e200      	b.n	8005294 <HAL_DMA_IRQHandler+0xe08>
 8004e92:	bf00      	nop
 8004e94:	40020010 	.word	0x40020010
 8004e98:	40020028 	.word	0x40020028
 8004e9c:	40020040 	.word	0x40020040
 8004ea0:	40020058 	.word	0x40020058
 8004ea4:	40020070 	.word	0x40020070
 8004ea8:	40020088 	.word	0x40020088
 8004eac:	400200a0 	.word	0x400200a0
 8004eb0:	400200b8 	.word	0x400200b8
 8004eb4:	40020410 	.word	0x40020410
 8004eb8:	40020428 	.word	0x40020428
 8004ebc:	40020440 	.word	0x40020440
 8004ec0:	40020458 	.word	0x40020458
 8004ec4:	40020470 	.word	0x40020470
 8004ec8:	40020488 	.word	0x40020488
 8004ecc:	400204a0 	.word	0x400204a0
 8004ed0:	400204b8 	.word	0x400204b8
 8004ed4:	58025408 	.word	0x58025408
 8004ed8:	5802541c 	.word	0x5802541c
 8004edc:	58025430 	.word	0x58025430
 8004ee0:	58025444 	.word	0x58025444
 8004ee4:	58025458 	.word	0x58025458
 8004ee8:	5802546c 	.word	0x5802546c
 8004eec:	58025480 	.word	0x58025480
 8004ef0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d160      	bne.n	8004fc0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7f      	ldr	r2, [pc, #508]	; (8005100 <HAL_DMA_IRQHandler+0xc74>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d04a      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a7d      	ldr	r2, [pc, #500]	; (8005104 <HAL_DMA_IRQHandler+0xc78>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d045      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a7c      	ldr	r2, [pc, #496]	; (8005108 <HAL_DMA_IRQHandler+0xc7c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d040      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a7a      	ldr	r2, [pc, #488]	; (800510c <HAL_DMA_IRQHandler+0xc80>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d03b      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a79      	ldr	r2, [pc, #484]	; (8005110 <HAL_DMA_IRQHandler+0xc84>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d036      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a77      	ldr	r2, [pc, #476]	; (8005114 <HAL_DMA_IRQHandler+0xc88>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d031      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a76      	ldr	r2, [pc, #472]	; (8005118 <HAL_DMA_IRQHandler+0xc8c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d02c      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a74      	ldr	r2, [pc, #464]	; (800511c <HAL_DMA_IRQHandler+0xc90>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d027      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a73      	ldr	r2, [pc, #460]	; (8005120 <HAL_DMA_IRQHandler+0xc94>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d022      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a71      	ldr	r2, [pc, #452]	; (8005124 <HAL_DMA_IRQHandler+0xc98>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01d      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a70      	ldr	r2, [pc, #448]	; (8005128 <HAL_DMA_IRQHandler+0xc9c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d018      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a6e      	ldr	r2, [pc, #440]	; (800512c <HAL_DMA_IRQHandler+0xca0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a6d      	ldr	r2, [pc, #436]	; (8005130 <HAL_DMA_IRQHandler+0xca4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a6b      	ldr	r2, [pc, #428]	; (8005134 <HAL_DMA_IRQHandler+0xca8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a6a      	ldr	r2, [pc, #424]	; (8005138 <HAL_DMA_IRQHandler+0xcac>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_DMA_IRQHandler+0xb12>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a68      	ldr	r2, [pc, #416]	; (800513c <HAL_DMA_IRQHandler+0xcb0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d108      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0xb24>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0208 	bic.w	r2, r2, #8
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e007      	b.n	8004fc0 <HAL_DMA_IRQHandler+0xb34>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0204 	bic.w	r2, r2, #4
 8004fbe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8165 	beq.w	8005294 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fd2:	e15f      	b.n	8005294 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2202      	movs	r2, #2
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80c5 	beq.w	8005174 <HAL_DMA_IRQHandler+0xce8>
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80bf 	beq.w	8005174 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2202      	movs	r2, #2
 8005000:	409a      	lsls	r2, r3
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d018      	beq.n	8005042 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 813a 	beq.w	8005298 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800502c:	e134      	b.n	8005298 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8130 	beq.w	8005298 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005040:	e12a      	b.n	8005298 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	f040 8089 	bne.w	8005160 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <HAL_DMA_IRQHandler+0xc74>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d04a      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a29      	ldr	r2, [pc, #164]	; (8005104 <HAL_DMA_IRQHandler+0xc78>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d045      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a28      	ldr	r2, [pc, #160]	; (8005108 <HAL_DMA_IRQHandler+0xc7c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d040      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a26      	ldr	r2, [pc, #152]	; (800510c <HAL_DMA_IRQHandler+0xc80>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d03b      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a25      	ldr	r2, [pc, #148]	; (8005110 <HAL_DMA_IRQHandler+0xc84>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d036      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a23      	ldr	r2, [pc, #140]	; (8005114 <HAL_DMA_IRQHandler+0xc88>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d031      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a22      	ldr	r2, [pc, #136]	; (8005118 <HAL_DMA_IRQHandler+0xc8c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d02c      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a20      	ldr	r2, [pc, #128]	; (800511c <HAL_DMA_IRQHandler+0xc90>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d027      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <HAL_DMA_IRQHandler+0xc94>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <HAL_DMA_IRQHandler+0xc98>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01d      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <HAL_DMA_IRQHandler+0xc9c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1a      	ldr	r2, [pc, #104]	; (800512c <HAL_DMA_IRQHandler+0xca0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a19      	ldr	r2, [pc, #100]	; (8005130 <HAL_DMA_IRQHandler+0xca4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a17      	ldr	r2, [pc, #92]	; (8005134 <HAL_DMA_IRQHandler+0xca8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a16      	ldr	r2, [pc, #88]	; (8005138 <HAL_DMA_IRQHandler+0xcac>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_DMA_IRQHandler+0xc62>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a14      	ldr	r2, [pc, #80]	; (800513c <HAL_DMA_IRQHandler+0xcb0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d128      	bne.n	8005140 <HAL_DMA_IRQHandler+0xcb4>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0214 	bic.w	r2, r2, #20
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e027      	b.n	8005150 <HAL_DMA_IRQHandler+0xcc4>
 8005100:	40020010 	.word	0x40020010
 8005104:	40020028 	.word	0x40020028
 8005108:	40020040 	.word	0x40020040
 800510c:	40020058 	.word	0x40020058
 8005110:	40020070 	.word	0x40020070
 8005114:	40020088 	.word	0x40020088
 8005118:	400200a0 	.word	0x400200a0
 800511c:	400200b8 	.word	0x400200b8
 8005120:	40020410 	.word	0x40020410
 8005124:	40020428 	.word	0x40020428
 8005128:	40020440 	.word	0x40020440
 800512c:	40020458 	.word	0x40020458
 8005130:	40020470 	.word	0x40020470
 8005134:	40020488 	.word	0x40020488
 8005138:	400204a0 	.word	0x400204a0
 800513c:	400204b8 	.word	0x400204b8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 020a 	bic.w	r2, r2, #10
 800514e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8097 	beq.w	8005298 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005172:	e091      	b.n	8005298 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2208      	movs	r2, #8
 800517e:	409a      	lsls	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8088 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8082 	beq.w	800529a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a41      	ldr	r2, [pc, #260]	; (80052a0 <HAL_DMA_IRQHandler+0xe14>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d04a      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a3f      	ldr	r2, [pc, #252]	; (80052a4 <HAL_DMA_IRQHandler+0xe18>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d045      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3e      	ldr	r2, [pc, #248]	; (80052a8 <HAL_DMA_IRQHandler+0xe1c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d040      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3c      	ldr	r2, [pc, #240]	; (80052ac <HAL_DMA_IRQHandler+0xe20>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d03b      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3b      	ldr	r2, [pc, #236]	; (80052b0 <HAL_DMA_IRQHandler+0xe24>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d036      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a39      	ldr	r2, [pc, #228]	; (80052b4 <HAL_DMA_IRQHandler+0xe28>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d031      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a38      	ldr	r2, [pc, #224]	; (80052b8 <HAL_DMA_IRQHandler+0xe2c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d02c      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a36      	ldr	r2, [pc, #216]	; (80052bc <HAL_DMA_IRQHandler+0xe30>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d027      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a35      	ldr	r2, [pc, #212]	; (80052c0 <HAL_DMA_IRQHandler+0xe34>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d022      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a33      	ldr	r2, [pc, #204]	; (80052c4 <HAL_DMA_IRQHandler+0xe38>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01d      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a32      	ldr	r2, [pc, #200]	; (80052c8 <HAL_DMA_IRQHandler+0xe3c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d018      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a30      	ldr	r2, [pc, #192]	; (80052cc <HAL_DMA_IRQHandler+0xe40>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2f      	ldr	r2, [pc, #188]	; (80052d0 <HAL_DMA_IRQHandler+0xe44>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00e      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <HAL_DMA_IRQHandler+0xe48>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d009      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2c      	ldr	r2, [pc, #176]	; (80052d8 <HAL_DMA_IRQHandler+0xe4c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d004      	beq.n	8005236 <HAL_DMA_IRQHandler+0xdaa>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <HAL_DMA_IRQHandler+0xe50>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d108      	bne.n	8005248 <HAL_DMA_IRQHandler+0xdbc>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 021c 	bic.w	r2, r2, #28
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e007      	b.n	8005258 <HAL_DMA_IRQHandler+0xdcc>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 020e 	bic.w	r2, r2, #14
 8005256:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2201      	movs	r2, #1
 8005262:	409a      	lsls	r2, r3
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
 800528e:	e004      	b.n	800529a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005298:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40020010 	.word	0x40020010
 80052a4:	40020028 	.word	0x40020028
 80052a8:	40020040 	.word	0x40020040
 80052ac:	40020058 	.word	0x40020058
 80052b0:	40020070 	.word	0x40020070
 80052b4:	40020088 	.word	0x40020088
 80052b8:	400200a0 	.word	0x400200a0
 80052bc:	400200b8 	.word	0x400200b8
 80052c0:	40020410 	.word	0x40020410
 80052c4:	40020428 	.word	0x40020428
 80052c8:	40020440 	.word	0x40020440
 80052cc:	40020458 	.word	0x40020458
 80052d0:	40020470 	.word	0x40020470
 80052d4:	40020488 	.word	0x40020488
 80052d8:	400204a0 	.word	0x400204a0
 80052dc:	400204b8 	.word	0x400204b8

080052e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e04f      	b.n	8005392 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f84e 	bl	80053a8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b20      	ldr	r3, [pc, #128]	; (800539c <HAL_DMA2D_Init+0xbc>)
 800531c:	4013      	ands	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6851      	ldr	r1, [r2, #4]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	69d2      	ldr	r2, [r2, #28]
 8005326:	4311      	orrs	r1, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	430b      	orrs	r3, r1
 800532e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005336:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <HAL_DMA2D_Init+0xc0>)
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6891      	ldr	r1, [r2, #8]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6992      	ldr	r2, [r2, #24]
 8005342:	4311      	orrs	r1, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	430b      	orrs	r3, r1
 800534a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005352:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <HAL_DMA2D_Init+0xc4>)
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68d1      	ldr	r1, [r2, #12]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	430b      	orrs	r3, r1
 8005360:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005368:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	051a      	lsls	r2, r3, #20
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	055b      	lsls	r3, r3, #21
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	fff8ffbf 	.word	0xfff8ffbf
 80053a0:	fffffef8 	.word	0xfffffef8
 80053a4:	ffff0000 	.word	0xffff0000

080053a8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_DMA2D_Start+0x1c>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e018      	b.n	800540a <HAL_DMA2D_Start+0x4e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f9a4 	bl	8005740 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d056      	beq.n	80054dc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800542e:	f7fe f96d 	bl	800370c <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005434:	e04b      	b.n	80054ce <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005444:	2b00      	cmp	r3, #0
 8005446:	d023      	beq.n	8005490 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005456:	f043 0202 	orr.w	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800546c:	f043 0201 	orr.w	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2221      	movs	r2, #33	; 0x21
 800547a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2204      	movs	r2, #4
 8005480:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0a5      	b.n	80055dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d01a      	beq.n	80054ce <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005498:	f7fe f938 	bl	800370c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <HAL_DMA2D_PollForTransfer+0x9c>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10f      	bne.n	80054ce <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2203      	movs	r2, #3
 80054be:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e086      	b.n	80055dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0ac      	beq.n	8005436 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d061      	beq.n	80055c2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80054fe:	f7fe f905 	bl	800370c <HAL_GetTick>
 8005502:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005504:	e056      	b.n	80055b4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02e      	beq.n	8005576 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005526:	f043 0204 	orr.w	r2, r3, #4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553c:	f043 0202 	orr.w	r2, r3, #2
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005552:	f043 0201 	orr.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2229      	movs	r2, #41	; 0x29
 8005560:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2204      	movs	r2, #4
 8005566:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e032      	b.n	80055dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d01a      	beq.n	80055b4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800557e:	f7fe f8c5 	bl	800370c <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d302      	bcc.n	8005594 <HAL_DMA2D_PollForTransfer+0x182>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10f      	bne.n	80055b4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005598:	f043 0220 	orr.w	r2, r3, #32
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2203      	movs	r2, #3
 80055a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e013      	b.n	80055dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0a1      	beq.n	8005506 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2212      	movs	r2, #18
 80055c8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_DMA2D_ConfigLayer+0x24>
 8005604:	2302      	movs	r3, #2
 8005606:	e092      	b.n	800572e <HAL_DMA2D_ConfigLayer+0x14a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	4613      	mov	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	3328      	adds	r3, #40	; 0x28
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	4413      	add	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800563c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005648:	4b3c      	ldr	r3, [pc, #240]	; (800573c <HAL_DMA2D_ConfigLayer+0x158>)
 800564a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b0a      	cmp	r3, #10
 8005652:	d003      	beq.n	800565c <HAL_DMA2D_ConfigLayer+0x78>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b09      	cmp	r3, #9
 800565a:	d107      	bne.n	800566c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	e005      	b.n	8005678 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	061b      	lsls	r3, r3, #24
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d120      	bne.n	80056c0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	43db      	mvns	r3, r3
 8005688:	ea02 0103 	and.w	r1, r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	430a      	orrs	r2, r1
 8005694:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b0a      	cmp	r3, #10
 80056a6:	d003      	beq.n	80056b0 <HAL_DMA2D_ConfigLayer+0xcc>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b09      	cmp	r3, #9
 80056ae:	d135      	bne.n	800571c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28
 80056be:	e02d      	b.n	800571c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b0b      	cmp	r3, #11
 80056c6:	d109      	bne.n	80056dc <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	049b      	lsls	r3, r3, #18
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80056da:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	ea02 0103 	and.w	r1, r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b0a      	cmp	r3, #10
 8005704:	d003      	beq.n	800570e <HAL_DMA2D_ConfigLayer+0x12a>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b09      	cmp	r3, #9
 800570c:	d106      	bne.n	800571c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800571a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	ff33000f 	.word	0xff33000f

08005740 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005740:	b480      	push	{r7}
 8005742:	b08b      	sub	sp, #44	; 0x2c
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005754:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	041a      	lsls	r2, r3, #16
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	431a      	orrs	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005778:	d174      	bne.n	8005864 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005780:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005788:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005790:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d108      	bne.n	80057b2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	431a      	orrs	r2, r3
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
 80057b0:	e053      	b.n	800585a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d106      	bne.n	80057c8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4313      	orrs	r3, r2
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
 80057c6:	e048      	b.n	800585a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d111      	bne.n	80057f4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	0cdb      	lsrs	r3, r3, #19
 80057d4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	0a9b      	lsrs	r3, r3, #10
 80057da:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	08db      	lsrs	r3, r3, #3
 80057e0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	02db      	lsls	r3, r3, #11
 80057ea:	4313      	orrs	r3, r2
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
 80057f2:	e032      	b.n	800585a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d117      	bne.n	800582c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	0fdb      	lsrs	r3, r3, #31
 8005800:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	0cdb      	lsrs	r3, r3, #19
 8005806:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	0adb      	lsrs	r3, r3, #11
 800580c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	08db      	lsrs	r3, r3, #3
 8005812:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	029b      	lsls	r3, r3, #10
 800581c:	431a      	orrs	r2, r3
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	03db      	lsls	r3, r3, #15
 8005822:	4313      	orrs	r3, r2
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
 800582a:	e016      	b.n	800585a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	0f1b      	lsrs	r3, r3, #28
 8005830:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	0d1b      	lsrs	r3, r3, #20
 8005836:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	0b1b      	lsrs	r3, r3, #12
 800583c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	011a      	lsls	r2, r3, #4
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	431a      	orrs	r2, r3
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	031b      	lsls	r3, r3, #12
 8005852:	4313      	orrs	r3, r2
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005862:	e00d      	b.n	8005880 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800586c:	d104      	bne.n	8005878 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	615a      	str	r2, [r3, #20]
}
 8005876:	e003      	b.n	8005880 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	60da      	str	r2, [r3, #12]
}
 8005880:	bf00      	nop
 8005882:	372c      	adds	r7, #44	; 0x2c
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	460b      	mov	r3, r1
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e00a      	b.n	80058be <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80058a8:	7afb      	ldrb	r3, [r7, #11]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	605a      	str	r2, [r3, #4]
      break;
 80058b4:	e002      	b.n	80058bc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	75fb      	strb	r3, [r7, #23]
      break;
 80058ba:	bf00      	nop
  }

  return status;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e003      	b.n	80058e6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80058e4:	2300      	movs	r3, #0
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	0c1b      	lsrs	r3, r3, #16
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	2201      	movs	r2, #1
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	011a      	lsls	r2, r3, #4
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <HAL_EXTI_IRQHandler+0x5c>)
 800591e:	4413      	add	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4013      	ands	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4798      	blx	r3
    }
  }
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	58000088 	.word	0x58000088

08005954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005962:	4b89      	ldr	r3, [pc, #548]	; (8005b88 <HAL_GPIO_Init+0x234>)
 8005964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005966:	e194      	b.n	8005c92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	2101      	movs	r1, #1
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	fa01 f303 	lsl.w	r3, r1, r3
 8005974:	4013      	ands	r3, r2
 8005976:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8186 	beq.w	8005c8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 0303 	and.w	r3, r3, #3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d005      	beq.n	8005998 <HAL_GPIO_Init+0x44>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d130      	bne.n	80059fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	2203      	movs	r2, #3
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4013      	ands	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4313      	orrs	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059ce:	2201      	movs	r2, #1
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4013      	ands	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	f003 0201 	and.w	r2, r3, #1
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d017      	beq.n	8005a36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	2203      	movs	r2, #3
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d123      	bne.n	8005a8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	08da      	lsrs	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3208      	adds	r2, #8
 8005a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	220f      	movs	r2, #15
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	4013      	ands	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	08da      	lsrs	r2, r3, #3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3208      	adds	r2, #8
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	2203      	movs	r2, #3
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 0203 	and.w	r2, r3, #3
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80e0 	beq.w	8005c8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005acc:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <HAL_GPIO_Init+0x238>)
 8005ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ad2:	4a2e      	ldr	r2, [pc, #184]	; (8005b8c <HAL_GPIO_Init+0x238>)
 8005ad4:	f043 0302 	orr.w	r3, r3, #2
 8005ad8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005adc:	4b2b      	ldr	r3, [pc, #172]	; (8005b8c <HAL_GPIO_Init+0x238>)
 8005ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aea:	4a29      	ldr	r2, [pc, #164]	; (8005b90 <HAL_GPIO_Init+0x23c>)
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	089b      	lsrs	r3, r3, #2
 8005af0:	3302      	adds	r3, #2
 8005af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	220f      	movs	r2, #15
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <HAL_GPIO_Init+0x240>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d052      	beq.n	8005bbc <HAL_GPIO_Init+0x268>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <HAL_GPIO_Init+0x244>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d031      	beq.n	8005b82 <HAL_GPIO_Init+0x22e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1e      	ldr	r2, [pc, #120]	; (8005b9c <HAL_GPIO_Init+0x248>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d02b      	beq.n	8005b7e <HAL_GPIO_Init+0x22a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1d      	ldr	r2, [pc, #116]	; (8005ba0 <HAL_GPIO_Init+0x24c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d025      	beq.n	8005b7a <HAL_GPIO_Init+0x226>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <HAL_GPIO_Init+0x250>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01f      	beq.n	8005b76 <HAL_GPIO_Init+0x222>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1b      	ldr	r2, [pc, #108]	; (8005ba8 <HAL_GPIO_Init+0x254>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d019      	beq.n	8005b72 <HAL_GPIO_Init+0x21e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <HAL_GPIO_Init+0x258>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_GPIO_Init+0x21a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <HAL_GPIO_Init+0x25c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00d      	beq.n	8005b6a <HAL_GPIO_Init+0x216>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_GPIO_Init+0x260>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d007      	beq.n	8005b66 <HAL_GPIO_Init+0x212>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <HAL_GPIO_Init+0x264>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_GPIO_Init+0x20e>
 8005b5e:	2309      	movs	r3, #9
 8005b60:	e02d      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b62:	230a      	movs	r3, #10
 8005b64:	e02b      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b66:	2308      	movs	r3, #8
 8005b68:	e029      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b6a:	2307      	movs	r3, #7
 8005b6c:	e027      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b6e:	2306      	movs	r3, #6
 8005b70:	e025      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b72:	2305      	movs	r3, #5
 8005b74:	e023      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b76:	2304      	movs	r3, #4
 8005b78:	e021      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e01f      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e01d      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e01b      	b.n	8005bbe <HAL_GPIO_Init+0x26a>
 8005b86:	bf00      	nop
 8005b88:	58000080 	.word	0x58000080
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	58000400 	.word	0x58000400
 8005b94:	58020000 	.word	0x58020000
 8005b98:	58020400 	.word	0x58020400
 8005b9c:	58020800 	.word	0x58020800
 8005ba0:	58020c00 	.word	0x58020c00
 8005ba4:	58021000 	.word	0x58021000
 8005ba8:	58021400 	.word	0x58021400
 8005bac:	58021800 	.word	0x58021800
 8005bb0:	58021c00 	.word	0x58021c00
 8005bb4:	58022000 	.word	0x58022000
 8005bb8:	58022400 	.word	0x58022400
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	f002 0203 	and.w	r2, r2, #3
 8005bc4:	0092      	lsls	r2, r2, #2
 8005bc6:	4093      	lsls	r3, r2
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bce:	4938      	ldr	r1, [pc, #224]	; (8005cb0 <HAL_GPIO_Init+0x35c>)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	089b      	lsrs	r3, r3, #2
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	43db      	mvns	r3, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	43db      	mvns	r3, r3
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f47f ae63 	bne.w	8005968 <HAL_GPIO_Init+0x14>
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	3724      	adds	r7, #36	; 0x24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	58000400 	.word	0x58000400

08005cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	887b      	ldrh	r3, [r7, #2]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	73fb      	strb	r3, [r7, #15]
 8005cd0:	e001      	b.n	8005cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	807b      	strh	r3, [r7, #2]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cf4:	787b      	ldrb	r3, [r7, #1]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cfa:	887a      	ldrh	r2, [r7, #2]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d00:	e003      	b.n	8005d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d02:	887b      	ldrh	r3, [r7, #2]
 8005d04:	041a      	lsls	r2, r3, #16
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	619a      	str	r2, [r3, #24]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e07f      	b.n	8005e2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f87a 	bl	8005e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2224      	movs	r2, #36	; 0x24
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	e006      	b.n	8005da0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005d9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d104      	bne.n	8005db2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6859      	ldr	r1, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <HAL_I2C_Init+0x11c>)
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69d9      	ldr	r1, [r3, #28]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	02008000 	.word	0x02008000

08005e38 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	4608      	mov	r0, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	817b      	strh	r3, [r7, #10]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	813b      	strh	r3, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	f040 80fd 	bne.w	800606e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_I2C_Mem_Read+0x34>
 8005e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0f1      	b.n	8006070 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_I2C_Mem_Read+0x4e>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e0ea      	b.n	8006070 <HAL_I2C_Mem_Read+0x224>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ea2:	f7fd fc33 	bl	800370c <HAL_GetTick>
 8005ea6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	2319      	movs	r3, #25
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f975 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0d5      	b.n	8006070 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2222      	movs	r2, #34	; 0x22
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2240      	movs	r2, #64	; 0x40
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a3a      	ldr	r2, [r7, #32]
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eec:	88f8      	ldrh	r0, [r7, #6]
 8005eee:	893a      	ldrh	r2, [r7, #8]
 8005ef0:	8979      	ldrh	r1, [r7, #10]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	9301      	str	r3, [sp, #4]
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	4603      	mov	r3, r0
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f8d9 	bl	80060b4 <I2C_RequestMemoryRead>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0ad      	b.n	8006070 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2bff      	cmp	r3, #255	; 0xff
 8005f1c:	d90e      	bls.n	8005f3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	22ff      	movs	r2, #255	; 0xff
 8005f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	8979      	ldrh	r1, [r7, #10]
 8005f2c:	4b52      	ldr	r3, [pc, #328]	; (8006078 <HAL_I2C_Mem_Read+0x22c>)
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 faef 	bl	8006518 <I2C_TransferConfig>
 8005f3a:	e00f      	b.n	8005f5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	8979      	ldrh	r1, [r7, #10]
 8005f4e:	4b4a      	ldr	r3, [pc, #296]	; (8006078 <HAL_I2C_Mem_Read+0x22c>)
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fade 	bl	8006518 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	2200      	movs	r2, #0
 8005f64:	2104      	movs	r1, #4
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f91c 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e07c      	b.n	8006070 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d034      	beq.n	800601c <HAL_I2C_Mem_Read+0x1d0>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d130      	bne.n	800601c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2180      	movs	r1, #128	; 0x80
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f8ed 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e04d      	b.n	8006070 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2bff      	cmp	r3, #255	; 0xff
 8005fdc:	d90e      	bls.n	8005ffc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	22ff      	movs	r2, #255	; 0xff
 8005fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	8979      	ldrh	r1, [r7, #10]
 8005fec:	2300      	movs	r3, #0
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fa8f 	bl	8006518 <I2C_TransferConfig>
 8005ffa:	e00f      	b.n	800601c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600a:	b2da      	uxtb	r2, r3
 800600c:	8979      	ldrh	r1, [r7, #10]
 800600e:	2300      	movs	r3, #0
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 fa7e 	bl	8006518 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d19a      	bne.n	8005f5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f950 	bl	80062d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e01a      	b.n	8006070 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2220      	movs	r2, #32
 8006040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6859      	ldr	r1, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4b0b      	ldr	r3, [pc, #44]	; (800607c <HAL_I2C_Mem_Read+0x230>)
 800604e:	400b      	ands	r3, r1
 8006050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	80002400 	.word	0x80002400
 800607c:	fe00e800 	.word	0xfe00e800

08006080 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608e:	b2db      	uxtb	r3, r3
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	460b      	mov	r3, r1
 80060c8:	813b      	strh	r3, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	8979      	ldrh	r1, [r7, #10]
 80060d4:	4b20      	ldr	r3, [pc, #128]	; (8006158 <I2C_RequestMemoryRead+0xa4>)
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 fa1c 	bl	8006518 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	69b9      	ldr	r1, [r7, #24]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f8ac 	bl	8006242 <I2C_WaitOnTXISFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e02c      	b.n	800614e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d105      	bne.n	8006106 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060fa:	893b      	ldrh	r3, [r7, #8]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	629a      	str	r2, [r3, #40]	; 0x28
 8006104:	e015      	b.n	8006132 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006106:	893b      	ldrh	r3, [r7, #8]
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	b29b      	uxth	r3, r3
 800610c:	b2da      	uxtb	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	69b9      	ldr	r1, [r7, #24]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f892 	bl	8006242 <I2C_WaitOnTXISFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e012      	b.n	800614e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006128:	893b      	ldrh	r3, [r7, #8]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2200      	movs	r2, #0
 800613a:	2140      	movs	r1, #64	; 0x40
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f831 	bl	80061a4 <I2C_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	80002000 	.word	0x80002000

0800615c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d103      	bne.n	800617a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2200      	movs	r2, #0
 8006178:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b01      	cmp	r3, #1
 8006186:	d007      	beq.n	8006198 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	619a      	str	r2, [r3, #24]
  }
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061b4:	e031      	b.n	800621a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d02d      	beq.n	800621a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061be:	f7fd faa5 	bl	800370c <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d122      	bne.n	800621a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4013      	ands	r3, r2
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	bf0c      	ite	eq
 80061e4:	2301      	moveq	r3, #1
 80061e6:	2300      	movne	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d113      	bne.n	800621a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f6:	f043 0220 	orr.w	r2, r3, #32
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e00f      	b.n	800623a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699a      	ldr	r2, [r3, #24]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4013      	ands	r3, r2
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	429a      	cmp	r2, r3
 8006236:	d0be      	beq.n	80061b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800624e:	e033      	b.n	80062b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f87f 	bl	8006358 <I2C_IsErrorOccurred>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e031      	b.n	80062c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d025      	beq.n	80062b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626c:	f7fd fa4e 	bl	800370c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	d302      	bcc.n	8006282 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d11a      	bne.n	80062b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b02      	cmp	r3, #2
 800628e:	d013      	beq.n	80062b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006294:	f043 0220 	orr.w	r2, r3, #32
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e007      	b.n	80062c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d1c4      	bne.n	8006250 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062dc:	e02f      	b.n	800633e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f838 	bl	8006358 <I2C_IsErrorOccurred>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e02d      	b.n	800634e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f2:	f7fd fa0b 	bl	800370c <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d302      	bcc.n	8006308 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11a      	bne.n	800633e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b20      	cmp	r3, #32
 8006314:	d013      	beq.n	800633e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e007      	b.n	800634e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b20      	cmp	r3, #32
 800634a:	d1c8      	bne.n	80062de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b00      	cmp	r3, #0
 8006382:	d068      	beq.n	8006456 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2210      	movs	r2, #16
 800638a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800638c:	e049      	b.n	8006422 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d045      	beq.n	8006422 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006396:	f7fd f9b9 	bl	800370c <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d302      	bcc.n	80063ac <I2C_IsErrorOccurred+0x54>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d13a      	bne.n	8006422 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ce:	d121      	bne.n	8006414 <I2C_IsErrorOccurred+0xbc>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d6:	d01d      	beq.n	8006414 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80063d8:	7cfb      	ldrb	r3, [r7, #19]
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d01a      	beq.n	8006414 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80063ee:	f7fd f98d 	bl	800370c <HAL_GetTick>
 80063f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063f4:	e00e      	b.n	8006414 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063f6:	f7fd f989 	bl	800370c <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b19      	cmp	r3, #25
 8006402:	d907      	bls.n	8006414 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	f043 0320 	orr.w	r3, r3, #32
 800640a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006412:	e006      	b.n	8006422 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b20      	cmp	r3, #32
 8006420:	d1e9      	bne.n	80063f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b20      	cmp	r3, #32
 800642e:	d003      	beq.n	8006438 <I2C_IsErrorOccurred+0xe0>
 8006430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0aa      	beq.n	800638e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2220      	movs	r2, #32
 8006446:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	f043 0304 	orr.w	r3, r3, #4
 800644e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	f043 0308 	orr.w	r3, r3, #8
 8006490:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800649a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	f043 0302 	orr.w	r3, r3, #2
 80064b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80064c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01c      	beq.n	8006506 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff fe45 	bl	800615c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6859      	ldr	r1, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <I2C_IsErrorOccurred+0x1bc>)
 80064de:	400b      	ands	r3, r1
 80064e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	431a      	orrs	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800650a:	4618      	mov	r0, r3
 800650c:	3728      	adds	r7, #40	; 0x28
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	fe00e800 	.word	0xfe00e800

08006518 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	817b      	strh	r3, [r7, #10]
 8006526:	4613      	mov	r3, r2
 8006528:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800652a:	897b      	ldrh	r3, [r7, #10]
 800652c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006530:	7a7b      	ldrb	r3, [r7, #9]
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006538:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	4313      	orrs	r3, r2
 8006542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006546:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	0d5b      	lsrs	r3, r3, #21
 8006552:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <I2C_TransferConfig+0x60>)
 8006558:	430b      	orrs	r3, r1
 800655a:	43db      	mvns	r3, r3
 800655c:	ea02 0103 	and.w	r1, r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	03ff63ff 	.word	0x03ff63ff

0800657c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b20      	cmp	r3, #32
 8006590:	d138      	bne.n	8006604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800659c:	2302      	movs	r3, #2
 800659e:	e032      	b.n	8006606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2224      	movs	r2, #36	; 0x24
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b20      	cmp	r3, #32
 8006626:	d139      	bne.n	800669c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006632:	2302      	movs	r3, #2
 8006634:	e033      	b.n	800669e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2224      	movs	r2, #36	; 0x24
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006664:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	e000      	b.n	800669e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800669c:	2302      	movs	r3, #2
  }
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e0bf      	b.n	800683e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f8ba 	bl	800684c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80066ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6999      	ldr	r1, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006704:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6899      	ldr	r1, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b4a      	ldr	r3, [pc, #296]	; (8006848 <HAL_LTDC_Init+0x19c>)
 8006720:	400b      	ands	r3, r1
 8006722:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6899      	ldr	r1, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68d9      	ldr	r1, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	4b3e      	ldr	r3, [pc, #248]	; (8006848 <HAL_LTDC_Init+0x19c>)
 800674e:	400b      	ands	r3, r1
 8006750:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68d9      	ldr	r1, [r3, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6919      	ldr	r1, [r3, #16]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b33      	ldr	r3, [pc, #204]	; (8006848 <HAL_LTDC_Init+0x19c>)
 800677c:	400b      	ands	r3, r1
 800677e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	041b      	lsls	r3, r3, #16
 8006786:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6919      	ldr	r1, [r3, #16]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6959      	ldr	r1, [r3, #20]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	4b27      	ldr	r3, [pc, #156]	; (8006848 <HAL_LTDC_Init+0x19c>)
 80067aa:	400b      	ands	r3, r1
 80067ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6959      	ldr	r1, [r3, #20]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80067ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0206 	orr.w	r2, r2, #6
 800681a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0201 	orr.w	r2, r2, #1
 800682a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	f000f800 	.word	0xf000f800

0800684c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006860:	b5b0      	push	{r4, r5, r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_LTDC_ConfigLayer+0x1a>
 8006876:	2302      	movs	r3, #2
 8006878:	e02c      	b.n	80068d4 <HAL_LTDC_ConfigLayer+0x74>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2134      	movs	r1, #52	; 0x34
 8006890:	fb01 f303 	mul.w	r3, r1, r3
 8006894:	4413      	add	r3, r2
 8006896:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	4614      	mov	r4, r2
 800689e:	461d      	mov	r5, r3
 80068a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68b9      	ldr	r1, [r7, #8]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f811 	bl	80068dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2201      	movs	r2, #1
 80068c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bdb0      	pop	{r4, r5, r7, pc}

080068dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b089      	sub	sp, #36	; 0x24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f8:	4413      	add	r3, r2
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	01db      	lsls	r3, r3, #7
 8006908:	4413      	add	r3, r2
 800690a:	3384      	adds	r3, #132	; 0x84
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	4611      	mov	r1, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	01d2      	lsls	r2, r2, #7
 8006918:	440a      	add	r2, r1
 800691a:	3284      	adds	r2, #132	; 0x84
 800691c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006920:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	0c1b      	lsrs	r3, r3, #16
 800692e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006932:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006934:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	01db      	lsls	r3, r3, #7
 8006940:	440b      	add	r3, r1
 8006942:	3384      	adds	r3, #132	; 0x84
 8006944:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800694a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800695a:	4413      	add	r3, r2
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	01db      	lsls	r3, r3, #7
 800696a:	4413      	add	r3, r2
 800696c:	3384      	adds	r3, #132	; 0x84
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	4611      	mov	r1, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	01d2      	lsls	r2, r2, #7
 800697a:	440a      	add	r2, r1
 800697c:	3284      	adds	r2, #132	; 0x84
 800697e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006982:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006992:	4413      	add	r3, r2
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4619      	mov	r1, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	01db      	lsls	r3, r3, #7
 80069a0:	440b      	add	r3, r1
 80069a2:	3384      	adds	r3, #132	; 0x84
 80069a4:	4619      	mov	r1, r3
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	01db      	lsls	r3, r3, #7
 80069b6:	4413      	add	r3, r2
 80069b8:	3384      	adds	r3, #132	; 0x84
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	4611      	mov	r1, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	01d2      	lsls	r2, r2, #7
 80069c6:	440a      	add	r2, r1
 80069c8:	3284      	adds	r2, #132	; 0x84
 80069ca:	f023 0307 	bic.w	r3, r3, #7
 80069ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	01db      	lsls	r3, r3, #7
 80069da:	4413      	add	r3, r2
 80069dc:	3384      	adds	r3, #132	; 0x84
 80069de:	461a      	mov	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80069f6:	041b      	lsls	r3, r3, #16
 80069f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	061b      	lsls	r3, r3, #24
 8006a00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	01db      	lsls	r3, r3, #7
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3384      	adds	r3, #132	; 0x84
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	01db      	lsls	r3, r3, #7
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3384      	adds	r3, #132	; 0x84
 8006a20:	461a      	mov	r2, r3
 8006a22:	2300      	movs	r3, #0
 8006a24:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	01db      	lsls	r3, r3, #7
 8006a40:	440b      	add	r3, r1
 8006a42:	3384      	adds	r3, #132	; 0x84
 8006a44:	4619      	mov	r1, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	01db      	lsls	r3, r3, #7
 8006a56:	4413      	add	r3, r2
 8006a58:	3384      	adds	r3, #132	; 0x84
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	4611      	mov	r1, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	01d2      	lsls	r2, r2, #7
 8006a66:	440a      	add	r2, r1
 8006a68:	3284      	adds	r2, #132	; 0x84
 8006a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	01db      	lsls	r3, r3, #7
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3384      	adds	r3, #132	; 0x84
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	01db      	lsls	r3, r3, #7
 8006a90:	4413      	add	r3, r2
 8006a92:	3384      	adds	r3, #132	; 0x84
 8006a94:	69da      	ldr	r2, [r3, #28]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	01db      	lsls	r3, r3, #7
 8006aa0:	440b      	add	r3, r1
 8006aa2:	3384      	adds	r3, #132	; 0x84
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <LTDC_SetConfig+0x32c>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	68f9      	ldr	r1, [r7, #12]
 8006ab6:	6809      	ldr	r1, [r1, #0]
 8006ab8:	4608      	mov	r0, r1
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	01c9      	lsls	r1, r1, #7
 8006abe:	4401      	add	r1, r0
 8006ac0:	3184      	adds	r1, #132	; 0x84
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	01db      	lsls	r3, r3, #7
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3384      	adds	r3, #132	; 0x84
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	01db      	lsls	r3, r3, #7
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3384      	adds	r3, #132	; 0x84
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	01db      	lsls	r3, r3, #7
 8006af4:	4413      	add	r3, r2
 8006af6:	3384      	adds	r3, #132	; 0x84
 8006af8:	461a      	mov	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006b08:	2304      	movs	r3, #4
 8006b0a:	61fb      	str	r3, [r7, #28]
 8006b0c:	e01b      	b.n	8006b46 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d102      	bne.n	8006b1c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006b16:	2303      	movs	r3, #3
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	e014      	b.n	8006b46 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d00b      	beq.n	8006b3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d007      	beq.n	8006b3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d003      	beq.n	8006b3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b38:	2b07      	cmp	r3, #7
 8006b3a:	d102      	bne.n	8006b42 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	e001      	b.n	8006b46 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006b42:	2301      	movs	r3, #1
 8006b44:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	01db      	lsls	r3, r3, #7
 8006b50:	4413      	add	r3, r2
 8006b52:	3384      	adds	r3, #132	; 0x84
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	6812      	ldr	r2, [r2, #0]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	01d2      	lsls	r2, r2, #7
 8006b60:	440a      	add	r2, r1
 8006b62:	3284      	adds	r2, #132	; 0x84
 8006b64:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006b68:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	fb02 f303 	mul.w	r3, r2, r3
 8006b74:	041a      	lsls	r2, r3, #16
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6859      	ldr	r1, [r3, #4]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	1acb      	subs	r3, r1, r3
 8006b80:	69f9      	ldr	r1, [r7, #28]
 8006b82:	fb01 f303 	mul.w	r3, r1, r3
 8006b86:	3307      	adds	r3, #7
 8006b88:	68f9      	ldr	r1, [r7, #12]
 8006b8a:	6809      	ldr	r1, [r1, #0]
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	01c9      	lsls	r1, r1, #7
 8006b92:	4401      	add	r1, r0
 8006b94:	3184      	adds	r1, #132	; 0x84
 8006b96:	4313      	orrs	r3, r2
 8006b98:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	01db      	lsls	r3, r3, #7
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3384      	adds	r3, #132	; 0x84
 8006ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	01db      	lsls	r3, r3, #7
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3384      	adds	r3, #132	; 0x84
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <LTDC_SetConfig+0x330>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	01db      	lsls	r3, r3, #7
 8006bca:	4413      	add	r3, r2
 8006bcc:	3384      	adds	r3, #132	; 0x84
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	01db      	lsls	r3, r3, #7
 8006be0:	4413      	add	r3, r2
 8006be2:	3384      	adds	r3, #132	; 0x84
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	4611      	mov	r1, r2
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	01d2      	lsls	r2, r2, #7
 8006bf0:	440a      	add	r2, r1
 8006bf2:	3284      	adds	r2, #132	; 0x84
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	6013      	str	r3, [r2, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	3724      	adds	r7, #36	; 0x24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	fffff8f8 	.word	0xfffff8f8
 8006c0c:	fffff800 	.word	0xfffff800

08006c10 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c18:	f7fc fd78 	bl	800370c <HAL_GetTick>
 8006c1c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e03b      	b.n	8006ca0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0201 	bic.w	r2, r2, #1
 8006c46:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006c48:	e00f      	b.n	8006c6a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006c4a:	f7fc fd5f 	bl	800370c <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b05      	cmp	r3, #5
 8006c56:	d908      	bls.n	8006c6a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2240      	movs	r2, #64	; 0x40
 8006c5c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2203      	movs	r2, #3
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e01a      	b.n	8006ca0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e8      	bne.n	8006c4a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f9c1 	bl	8007000 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e048      	b.n	8006d4c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0201 	bic.w	r2, r2, #1
 8006cc8:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2200      	movs	r2, #0
 8006d08:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2200      	movs	r2, #0
 8006d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	221f      	movs	r2, #31
 8006d20:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d64:	4b91      	ldr	r3, [pc, #580]	; (8006fac <HAL_MDMA_IRQHandler+0x254>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a91      	ldr	r2, [pc, #580]	; (8006fb0 <HAL_MDMA_IRQHandler+0x258>)
 8006d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6e:	0a9b      	lsrs	r3, r3, #10
 8006d70:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	4b8e      	ldr	r3, [pc, #568]	; (8006fb4 <HAL_MDMA_IRQHandler+0x25c>)
 8006d7a:	4413      	add	r3, r2
 8006d7c:	099b      	lsrs	r3, r3, #6
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	2201      	movs	r2, #1
 8006d84:	fa02 f303 	lsl.w	r3, r2, r3
 8006d88:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8006d8a:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4013      	ands	r3, r2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 812d 	beq.w	8006ff4 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d054      	beq.n	8006e52 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d04d      	beq.n	8006e52 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0202 	bic.w	r2, r2, #2
 8006dc4:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d106      	bne.n	8006de6 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ddc:	f043 0201 	orr.w	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	669a      	str	r2, [r3, #104]	; 0x68
 8006de4:	e005      	b.n	8006df2 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dea:	f043 0202 	orr.w	r2, r3, #2
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e00:	f043 0204 	orr.w	r2, r3, #4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e16:	f043 0208 	orr.w	r2, r3, #8
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e2c:	f043 0210 	orr.w	r2, r3, #16
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e42:	f043 0220 	orr.w	r2, r3, #32
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d012      	beq.n	8006e86 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2210      	movs	r2, #16
 8006e74:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d012      	beq.n	8006eba <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2208      	movs	r2, #8
 8006ea8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d012      	beq.n	8006eee <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2204      	movs	r2, #4
 8006edc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d039      	beq.n	8006f70 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d032      	beq.n	8006f70 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8006f18:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d110      	bne.n	8006f48 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d05c      	beq.n	8006ff8 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
        }
        return;
 8006f46:	e057      	b.n	8006ff8 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d040      	beq.n	8006ffa <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0201 	bic.w	r2, r2, #1
 8006f8e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d30d      	bcc.n	8006fb8 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f2      	bne.n	8006f90 <HAL_MDMA_IRQHandler+0x238>
 8006faa:	e006      	b.n	8006fba <HAL_MDMA_IRQHandler+0x262>
 8006fac:	24000014 	.word	0x24000014
 8006fb0:	1b4e81b5 	.word	0x1b4e81b5
 8006fb4:	adffffc0 	.word	0xadffffc0
        break;
 8006fb8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2203      	movs	r2, #3
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fd8:	e003      	b.n	8006fe2 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
 8006ff2:	e002      	b.n	8006ffa <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8006ff8:	bf00      	nop
    }
  }
}
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68d9      	ldr	r1, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007026:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007032:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800703e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	3b01      	subs	r3, #1
 8007046:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8007048:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007054:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007056:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007060:	d107      	bne.n	8007072 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8007070:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707e:	2b00      	cmp	r3, #0
 8007080:	da11      	bge.n	80070a6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007090:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007096:	425b      	negs	r3, r3
 8007098:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	b292      	uxth	r2, r2
 80070a2:	621a      	str	r2, [r3, #32]
 80070a4:	e006      	b.n	80070b4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070aa:	461a      	mov	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	b292      	uxth	r2, r2
 80070b2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	da15      	bge.n	80070e8 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80070ca:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d0:	425b      	negs	r3, r3
 80070d2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a19      	ldr	r1, [r3, #32]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	041a      	lsls	r2, r3, #16
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	621a      	str	r2, [r3, #32]
 80070e6:	e009      	b.n	80070fc <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6a19      	ldr	r1, [r3, #32]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	041a      	lsls	r2, r3, #16
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007104:	d006      	beq.n	8007114 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
 8007112:	e003      	b.n	800711c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2200      	movs	r2, #0
 800711a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2200      	movs	r2, #0
 8007122:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007124:	bf00      	nop
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007138:	4b19      	ldr	r3, [pc, #100]	; (80071a0 <HAL_PWREx_ConfigSupply+0x70>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b04      	cmp	r3, #4
 8007142:	d00a      	beq.n	800715a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007144:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <HAL_PWREx_ConfigSupply+0x70>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	429a      	cmp	r2, r3
 8007150:	d001      	beq.n	8007156 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e01f      	b.n	8007196 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	e01d      	b.n	8007196 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800715a:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <HAL_PWREx_ConfigSupply+0x70>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f023 0207 	bic.w	r2, r3, #7
 8007162:	490f      	ldr	r1, [pc, #60]	; (80071a0 <HAL_PWREx_ConfigSupply+0x70>)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4313      	orrs	r3, r2
 8007168:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800716a:	f7fc facf 	bl	800370c <HAL_GetTick>
 800716e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007170:	e009      	b.n	8007186 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007172:	f7fc facb 	bl	800370c <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007180:	d901      	bls.n	8007186 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e007      	b.n	8007196 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <HAL_PWREx_ConfigSupply+0x70>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800718e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007192:	d1ee      	bne.n	8007172 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	58024800 	.word	0x58024800

080071a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08c      	sub	sp, #48	; 0x30
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f000 bc48 	b.w	8007a48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8088 	beq.w	80072d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071c6:	4b99      	ldr	r3, [pc, #612]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071d0:	4b96      	ldr	r3, [pc, #600]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	2b10      	cmp	r3, #16
 80071da:	d007      	beq.n	80071ec <HAL_RCC_OscConfig+0x48>
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	2b18      	cmp	r3, #24
 80071e0:	d111      	bne.n	8007206 <HAL_RCC_OscConfig+0x62>
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d10c      	bne.n	8007206 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ec:	4b8f      	ldr	r3, [pc, #572]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d06d      	beq.n	80072d4 <HAL_RCC_OscConfig+0x130>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d169      	bne.n	80072d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	f000 bc21 	b.w	8007a48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800720e:	d106      	bne.n	800721e <HAL_RCC_OscConfig+0x7a>
 8007210:	4b86      	ldr	r3, [pc, #536]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a85      	ldr	r2, [pc, #532]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	e02e      	b.n	800727c <HAL_RCC_OscConfig+0xd8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10c      	bne.n	8007240 <HAL_RCC_OscConfig+0x9c>
 8007226:	4b81      	ldr	r3, [pc, #516]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a80      	ldr	r2, [pc, #512]	; (800742c <HAL_RCC_OscConfig+0x288>)
 800722c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	4b7e      	ldr	r3, [pc, #504]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a7d      	ldr	r2, [pc, #500]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	e01d      	b.n	800727c <HAL_RCC_OscConfig+0xd8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007248:	d10c      	bne.n	8007264 <HAL_RCC_OscConfig+0xc0>
 800724a:	4b78      	ldr	r3, [pc, #480]	; (800742c <HAL_RCC_OscConfig+0x288>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a77      	ldr	r2, [pc, #476]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	4b75      	ldr	r3, [pc, #468]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a74      	ldr	r2, [pc, #464]	; (800742c <HAL_RCC_OscConfig+0x288>)
 800725c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	e00b      	b.n	800727c <HAL_RCC_OscConfig+0xd8>
 8007264:	4b71      	ldr	r3, [pc, #452]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a70      	ldr	r2, [pc, #448]	; (800742c <HAL_RCC_OscConfig+0x288>)
 800726a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	4b6e      	ldr	r3, [pc, #440]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a6d      	ldr	r2, [pc, #436]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800727a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d013      	beq.n	80072ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007284:	f7fc fa42 	bl	800370c <HAL_GetTick>
 8007288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800728c:	f7fc fa3e 	bl	800370c <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b64      	cmp	r3, #100	; 0x64
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e3d4      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800729e:	4b63      	ldr	r3, [pc, #396]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0f0      	beq.n	800728c <HAL_RCC_OscConfig+0xe8>
 80072aa:	e014      	b.n	80072d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ac:	f7fc fa2e 	bl	800370c <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072b4:	f7fc fa2a 	bl	800370c <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b64      	cmp	r3, #100	; 0x64
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e3c0      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072c6:	4b59      	ldr	r3, [pc, #356]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f0      	bne.n	80072b4 <HAL_RCC_OscConfig+0x110>
 80072d2:	e000      	b.n	80072d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0302 	and.w	r3, r3, #2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 80ca 	beq.w	8007478 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072e4:	4b51      	ldr	r3, [pc, #324]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072ee:	4b4f      	ldr	r3, [pc, #316]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <HAL_RCC_OscConfig+0x166>
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	2b18      	cmp	r3, #24
 80072fe:	d156      	bne.n	80073ae <HAL_RCC_OscConfig+0x20a>
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d151      	bne.n	80073ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800730a:	4b48      	ldr	r3, [pc, #288]	; (800742c <HAL_RCC_OscConfig+0x288>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_RCC_OscConfig+0x17e>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e392      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007322:	4b42      	ldr	r3, [pc, #264]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f023 0219 	bic.w	r2, r3, #25
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	493f      	ldr	r1, [pc, #252]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007330:	4313      	orrs	r3, r2
 8007332:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007334:	f7fc f9ea 	bl	800370c <HAL_GetTick>
 8007338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800733c:	f7fc f9e6 	bl	800370c <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e37c      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800734e:	4b37      	ldr	r3, [pc, #220]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0f0      	beq.n	800733c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735a:	f7fc fa07 	bl	800376c <HAL_GetREVID>
 800735e:	4603      	mov	r3, r0
 8007360:	f241 0203 	movw	r2, #4099	; 0x1003
 8007364:	4293      	cmp	r3, r2
 8007366:	d817      	bhi.n	8007398 <HAL_RCC_OscConfig+0x1f4>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	2b40      	cmp	r3, #64	; 0x40
 800736e:	d108      	bne.n	8007382 <HAL_RCC_OscConfig+0x1de>
 8007370:	4b2e      	ldr	r3, [pc, #184]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007378:	4a2c      	ldr	r2, [pc, #176]	; (800742c <HAL_RCC_OscConfig+0x288>)
 800737a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007380:	e07a      	b.n	8007478 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007382:	4b2a      	ldr	r3, [pc, #168]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	031b      	lsls	r3, r3, #12
 8007390:	4926      	ldr	r1, [pc, #152]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007392:	4313      	orrs	r3, r2
 8007394:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007396:	e06f      	b.n	8007478 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007398:	4b24      	ldr	r3, [pc, #144]	; (800742c <HAL_RCC_OscConfig+0x288>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	061b      	lsls	r3, r3, #24
 80073a6:	4921      	ldr	r1, [pc, #132]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073ac:	e064      	b.n	8007478 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d047      	beq.n	8007446 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073b6:	4b1d      	ldr	r3, [pc, #116]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f023 0219 	bic.w	r2, r3, #25
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	491a      	ldr	r1, [pc, #104]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c8:	f7fc f9a0 	bl	800370c <HAL_GetTick>
 80073cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073d0:	f7fc f99c 	bl	800370c <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e332      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <HAL_RCC_OscConfig+0x288>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0304 	and.w	r3, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ee:	f7fc f9bd 	bl	800376c <HAL_GetREVID>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d819      	bhi.n	8007430 <HAL_RCC_OscConfig+0x28c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	d108      	bne.n	8007416 <HAL_RCC_OscConfig+0x272>
 8007404:	4b09      	ldr	r3, [pc, #36]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800740c:	4a07      	ldr	r2, [pc, #28]	; (800742c <HAL_RCC_OscConfig+0x288>)
 800740e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007412:	6053      	str	r3, [r2, #4]
 8007414:	e030      	b.n	8007478 <HAL_RCC_OscConfig+0x2d4>
 8007416:	4b05      	ldr	r3, [pc, #20]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	031b      	lsls	r3, r3, #12
 8007424:	4901      	ldr	r1, [pc, #4]	; (800742c <HAL_RCC_OscConfig+0x288>)
 8007426:	4313      	orrs	r3, r2
 8007428:	604b      	str	r3, [r1, #4]
 800742a:	e025      	b.n	8007478 <HAL_RCC_OscConfig+0x2d4>
 800742c:	58024400 	.word	0x58024400
 8007430:	4b9a      	ldr	r3, [pc, #616]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	061b      	lsls	r3, r3, #24
 800743e:	4997      	ldr	r1, [pc, #604]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007440:	4313      	orrs	r3, r2
 8007442:	604b      	str	r3, [r1, #4]
 8007444:	e018      	b.n	8007478 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007446:	4b95      	ldr	r3, [pc, #596]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a94      	ldr	r2, [pc, #592]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007452:	f7fc f95b 	bl	800370c <HAL_GetTick>
 8007456:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007458:	e008      	b.n	800746c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800745a:	f7fc f957 	bl	800370c <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d901      	bls.n	800746c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e2ed      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800746c:	4b8b      	ldr	r3, [pc, #556]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1f0      	bne.n	800745a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0310 	and.w	r3, r3, #16
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 80a9 	beq.w	80075d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007486:	4b85      	ldr	r3, [pc, #532]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800748e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007490:	4b82      	ldr	r3, [pc, #520]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b08      	cmp	r3, #8
 800749a:	d007      	beq.n	80074ac <HAL_RCC_OscConfig+0x308>
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b18      	cmp	r3, #24
 80074a0:	d13a      	bne.n	8007518 <HAL_RCC_OscConfig+0x374>
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f003 0303 	and.w	r3, r3, #3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d135      	bne.n	8007518 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074ac:	4b7b      	ldr	r3, [pc, #492]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_RCC_OscConfig+0x320>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d001      	beq.n	80074c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e2c1      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074c4:	f7fc f952 	bl	800376c <HAL_GetREVID>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d817      	bhi.n	8007502 <HAL_RCC_OscConfig+0x35e>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d108      	bne.n	80074ec <HAL_RCC_OscConfig+0x348>
 80074da:	4b70      	ldr	r3, [pc, #448]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80074e2:	4a6e      	ldr	r2, [pc, #440]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80074e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074ea:	e075      	b.n	80075d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074ec:	4b6b      	ldr	r3, [pc, #428]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	069b      	lsls	r3, r3, #26
 80074fa:	4968      	ldr	r1, [pc, #416]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007500:	e06a      	b.n	80075d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007502:	4b66      	ldr	r3, [pc, #408]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	061b      	lsls	r3, r3, #24
 8007510:	4962      	ldr	r1, [pc, #392]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007512:	4313      	orrs	r3, r2
 8007514:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007516:	e05f      	b.n	80075d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d042      	beq.n	80075a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007520:	4b5e      	ldr	r3, [pc, #376]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a5d      	ldr	r2, [pc, #372]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800752a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800752c:	f7fc f8ee 	bl	800370c <HAL_GetTick>
 8007530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007532:	e008      	b.n	8007546 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007534:	f7fc f8ea 	bl	800370c <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d901      	bls.n	8007546 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e280      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007546:	4b55      	ldr	r3, [pc, #340]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f0      	beq.n	8007534 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007552:	f7fc f90b 	bl	800376c <HAL_GetREVID>
 8007556:	4603      	mov	r3, r0
 8007558:	f241 0203 	movw	r2, #4099	; 0x1003
 800755c:	4293      	cmp	r3, r2
 800755e:	d817      	bhi.n	8007590 <HAL_RCC_OscConfig+0x3ec>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	2b20      	cmp	r3, #32
 8007566:	d108      	bne.n	800757a <HAL_RCC_OscConfig+0x3d6>
 8007568:	4b4c      	ldr	r3, [pc, #304]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007570:	4a4a      	ldr	r2, [pc, #296]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007576:	6053      	str	r3, [r2, #4]
 8007578:	e02e      	b.n	80075d8 <HAL_RCC_OscConfig+0x434>
 800757a:	4b48      	ldr	r3, [pc, #288]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	069b      	lsls	r3, r3, #26
 8007588:	4944      	ldr	r1, [pc, #272]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 800758a:	4313      	orrs	r3, r2
 800758c:	604b      	str	r3, [r1, #4]
 800758e:	e023      	b.n	80075d8 <HAL_RCC_OscConfig+0x434>
 8007590:	4b42      	ldr	r3, [pc, #264]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	061b      	lsls	r3, r3, #24
 800759e:	493f      	ldr	r1, [pc, #252]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60cb      	str	r3, [r1, #12]
 80075a4:	e018      	b.n	80075d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80075a6:	4b3d      	ldr	r3, [pc, #244]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a3c      	ldr	r2, [pc, #240]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80075ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b2:	f7fc f8ab 	bl	800370c <HAL_GetTick>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80075ba:	f7fc f8a7 	bl	800370c <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e23d      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075cc:	4b33      	ldr	r3, [pc, #204]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f0      	bne.n	80075ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d036      	beq.n	8007652 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d019      	beq.n	8007620 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075ec:	4b2b      	ldr	r3, [pc, #172]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80075ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f0:	4a2a      	ldr	r2, [pc, #168]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 80075f2:	f043 0301 	orr.w	r3, r3, #1
 80075f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f8:	f7fc f888 	bl	800370c <HAL_GetTick>
 80075fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007600:	f7fc f884 	bl	800370c <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b02      	cmp	r3, #2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e21a      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007612:	4b22      	ldr	r3, [pc, #136]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f0      	beq.n	8007600 <HAL_RCC_OscConfig+0x45c>
 800761e:	e018      	b.n	8007652 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007620:	4b1e      	ldr	r3, [pc, #120]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007624:	4a1d      	ldr	r2, [pc, #116]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007626:	f023 0301 	bic.w	r3, r3, #1
 800762a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800762c:	f7fc f86e 	bl	800370c <HAL_GetTick>
 8007630:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007634:	f7fc f86a 	bl	800370c <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b02      	cmp	r3, #2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e200      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007646:	4b15      	ldr	r3, [pc, #84]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1f0      	bne.n	8007634 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d039      	beq.n	80076d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01c      	beq.n	80076a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007666:	4b0d      	ldr	r3, [pc, #52]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a0c      	ldr	r2, [pc, #48]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 800766c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007670:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007672:	f7fc f84b 	bl	800370c <HAL_GetTick>
 8007676:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007678:	e008      	b.n	800768c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800767a:	f7fc f847 	bl	800370c <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e1dd      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800768c:	4b03      	ldr	r3, [pc, #12]	; (800769c <HAL_RCC_OscConfig+0x4f8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d0f0      	beq.n	800767a <HAL_RCC_OscConfig+0x4d6>
 8007698:	e01b      	b.n	80076d2 <HAL_RCC_OscConfig+0x52e>
 800769a:	bf00      	nop
 800769c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076a0:	4b9b      	ldr	r3, [pc, #620]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a9a      	ldr	r2, [pc, #616]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80076a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80076ac:	f7fc f82e 	bl	800370c <HAL_GetTick>
 80076b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076b4:	f7fc f82a 	bl	800370c <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e1c0      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076c6:	4b92      	ldr	r3, [pc, #584]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1f0      	bne.n	80076b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 8081 	beq.w	80077e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076e0:	4b8c      	ldr	r3, [pc, #560]	; (8007914 <HAL_RCC_OscConfig+0x770>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a8b      	ldr	r2, [pc, #556]	; (8007914 <HAL_RCC_OscConfig+0x770>)
 80076e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076ec:	f7fc f80e 	bl	800370c <HAL_GetTick>
 80076f0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076f4:	f7fc f80a 	bl	800370c <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b64      	cmp	r3, #100	; 0x64
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e1a0      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007706:	4b83      	ldr	r3, [pc, #524]	; (8007914 <HAL_RCC_OscConfig+0x770>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f0      	beq.n	80076f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d106      	bne.n	8007728 <HAL_RCC_OscConfig+0x584>
 800771a:	4b7d      	ldr	r3, [pc, #500]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 800771c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771e:	4a7c      	ldr	r2, [pc, #496]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007720:	f043 0301 	orr.w	r3, r3, #1
 8007724:	6713      	str	r3, [r2, #112]	; 0x70
 8007726:	e02d      	b.n	8007784 <HAL_RCC_OscConfig+0x5e0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10c      	bne.n	800774a <HAL_RCC_OscConfig+0x5a6>
 8007730:	4b77      	ldr	r3, [pc, #476]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007734:	4a76      	ldr	r2, [pc, #472]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007736:	f023 0301 	bic.w	r3, r3, #1
 800773a:	6713      	str	r3, [r2, #112]	; 0x70
 800773c:	4b74      	ldr	r3, [pc, #464]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 800773e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007740:	4a73      	ldr	r2, [pc, #460]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007742:	f023 0304 	bic.w	r3, r3, #4
 8007746:	6713      	str	r3, [r2, #112]	; 0x70
 8007748:	e01c      	b.n	8007784 <HAL_RCC_OscConfig+0x5e0>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	2b05      	cmp	r3, #5
 8007750:	d10c      	bne.n	800776c <HAL_RCC_OscConfig+0x5c8>
 8007752:	4b6f      	ldr	r3, [pc, #444]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007756:	4a6e      	ldr	r2, [pc, #440]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007758:	f043 0304 	orr.w	r3, r3, #4
 800775c:	6713      	str	r3, [r2, #112]	; 0x70
 800775e:	4b6c      	ldr	r3, [pc, #432]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007762:	4a6b      	ldr	r2, [pc, #428]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	6713      	str	r3, [r2, #112]	; 0x70
 800776a:	e00b      	b.n	8007784 <HAL_RCC_OscConfig+0x5e0>
 800776c:	4b68      	ldr	r3, [pc, #416]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 800776e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007770:	4a67      	ldr	r2, [pc, #412]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	6713      	str	r3, [r2, #112]	; 0x70
 8007778:	4b65      	ldr	r3, [pc, #404]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 800777a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777c:	4a64      	ldr	r2, [pc, #400]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 800777e:	f023 0304 	bic.w	r3, r3, #4
 8007782:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d015      	beq.n	80077b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778c:	f7fb ffbe 	bl	800370c <HAL_GetTick>
 8007790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007792:	e00a      	b.n	80077aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007794:	f7fb ffba 	bl	800370c <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e14e      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077aa:	4b59      	ldr	r3, [pc, #356]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80077ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0ee      	beq.n	8007794 <HAL_RCC_OscConfig+0x5f0>
 80077b6:	e014      	b.n	80077e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077b8:	f7fb ffa8 	bl	800370c <HAL_GetTick>
 80077bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077be:	e00a      	b.n	80077d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077c0:	f7fb ffa4 	bl	800370c <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d901      	bls.n	80077d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e138      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077d6:	4b4e      	ldr	r3, [pc, #312]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80077d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1ee      	bne.n	80077c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 812d 	beq.w	8007a46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077ec:	4b48      	ldr	r3, [pc, #288]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077f4:	2b18      	cmp	r3, #24
 80077f6:	f000 80bd 	beq.w	8007974 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	2b02      	cmp	r3, #2
 8007800:	f040 809e 	bne.w	8007940 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007804:	4b42      	ldr	r3, [pc, #264]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a41      	ldr	r2, [pc, #260]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 800780a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800780e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007810:	f7fb ff7c 	bl	800370c <HAL_GetTick>
 8007814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007818:	f7fb ff78 	bl	800370c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e10e      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800782a:	4b39      	ldr	r3, [pc, #228]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007836:	4b36      	ldr	r3, [pc, #216]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800783a:	4b37      	ldr	r3, [pc, #220]	; (8007918 <HAL_RCC_OscConfig+0x774>)
 800783c:	4013      	ands	r3, r2
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007846:	0112      	lsls	r2, r2, #4
 8007848:	430a      	orrs	r2, r1
 800784a:	4931      	ldr	r1, [pc, #196]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 800784c:	4313      	orrs	r3, r2
 800784e:	628b      	str	r3, [r1, #40]	; 0x28
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	3b01      	subs	r3, #1
 8007856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785e:	3b01      	subs	r3, #1
 8007860:	025b      	lsls	r3, r3, #9
 8007862:	b29b      	uxth	r3, r3
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	3b01      	subs	r3, #1
 800786c:	041b      	lsls	r3, r3, #16
 800786e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007872:	431a      	orrs	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	3b01      	subs	r3, #1
 800787a:	061b      	lsls	r3, r3, #24
 800787c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007880:	4923      	ldr	r1, [pc, #140]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007886:	4b22      	ldr	r3, [pc, #136]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	4a21      	ldr	r2, [pc, #132]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 800788c:	f023 0301 	bic.w	r3, r3, #1
 8007890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007892:	4b1f      	ldr	r3, [pc, #124]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007896:	4b21      	ldr	r3, [pc, #132]	; (800791c <HAL_RCC_OscConfig+0x778>)
 8007898:	4013      	ands	r3, r2
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800789e:	00d2      	lsls	r2, r2, #3
 80078a0:	491b      	ldr	r1, [pc, #108]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80078a6:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	f023 020c 	bic.w	r2, r3, #12
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	4917      	ldr	r1, [pc, #92]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80078b8:	4b15      	ldr	r3, [pc, #84]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	f023 0202 	bic.w	r2, r3, #2
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c4:	4912      	ldr	r1, [pc, #72]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078ca:	4b11      	ldr	r3, [pc, #68]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	4a10      	ldr	r2, [pc, #64]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d6:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	4a0d      	ldr	r2, [pc, #52]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078e2:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	4a0a      	ldr	r2, [pc, #40]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80078ee:	4b08      	ldr	r3, [pc, #32]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	4a07      	ldr	r2, [pc, #28]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078f4:	f043 0301 	orr.w	r3, r3, #1
 80078f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a04      	ldr	r2, [pc, #16]	; (8007910 <HAL_RCC_OscConfig+0x76c>)
 8007900:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007906:	f7fb ff01 	bl	800370c <HAL_GetTick>
 800790a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800790c:	e011      	b.n	8007932 <HAL_RCC_OscConfig+0x78e>
 800790e:	bf00      	nop
 8007910:	58024400 	.word	0x58024400
 8007914:	58024800 	.word	0x58024800
 8007918:	fffffc0c 	.word	0xfffffc0c
 800791c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007920:	f7fb fef4 	bl	800370c <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e08a      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007932:	4b47      	ldr	r3, [pc, #284]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f0      	beq.n	8007920 <HAL_RCC_OscConfig+0x77c>
 800793e:	e082      	b.n	8007a46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007940:	4b43      	ldr	r3, [pc, #268]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a42      	ldr	r2, [pc, #264]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800794a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794c:	f7fb fede 	bl	800370c <HAL_GetTick>
 8007950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007954:	f7fb feda 	bl	800370c <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e070      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007966:	4b3a      	ldr	r3, [pc, #232]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1f0      	bne.n	8007954 <HAL_RCC_OscConfig+0x7b0>
 8007972:	e068      	b.n	8007a46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007974:	4b36      	ldr	r3, [pc, #216]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800797a:	4b35      	ldr	r3, [pc, #212]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 800797c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b01      	cmp	r3, #1
 8007986:	d031      	beq.n	80079ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f003 0203 	and.w	r2, r3, #3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d12a      	bne.n	80079ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	091b      	lsrs	r3, r3, #4
 800799a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d122      	bne.n	80079ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d11a      	bne.n	80079ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	0a5b      	lsrs	r3, r3, #9
 80079ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d111      	bne.n	80079ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d108      	bne.n	80079ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	0e1b      	lsrs	r3, r3, #24
 80079de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d001      	beq.n	80079f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e02b      	b.n	8007a48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80079f0:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 80079f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f4:	08db      	lsrs	r3, r3, #3
 80079f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d01f      	beq.n	8007a46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007a06:	4b12      	ldr	r3, [pc, #72]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	4a11      	ldr	r2, [pc, #68]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a12:	f7fb fe7b 	bl	800370c <HAL_GetTick>
 8007a16:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007a18:	bf00      	nop
 8007a1a:	f7fb fe77 	bl	800370c <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d0f9      	beq.n	8007a1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a26:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a2a:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <HAL_RCC_OscConfig+0x8b0>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007a32:	00d2      	lsls	r2, r2, #3
 8007a34:	4906      	ldr	r1, [pc, #24]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007a3a:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	4a04      	ldr	r2, [pc, #16]	; (8007a50 <HAL_RCC_OscConfig+0x8ac>)
 8007a40:	f043 0301 	orr.w	r3, r3, #1
 8007a44:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3730      	adds	r7, #48	; 0x30
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	58024400 	.word	0x58024400
 8007a54:	ffff0007 	.word	0xffff0007

08007a58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e19c      	b.n	8007da6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a6c:	4b8a      	ldr	r3, [pc, #552]	; (8007c98 <HAL_RCC_ClockConfig+0x240>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d910      	bls.n	8007a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7a:	4b87      	ldr	r3, [pc, #540]	; (8007c98 <HAL_RCC_ClockConfig+0x240>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f023 020f 	bic.w	r2, r3, #15
 8007a82:	4985      	ldr	r1, [pc, #532]	; (8007c98 <HAL_RCC_ClockConfig+0x240>)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8a:	4b83      	ldr	r3, [pc, #524]	; (8007c98 <HAL_RCC_ClockConfig+0x240>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d001      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e184      	b.n	8007da6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d010      	beq.n	8007aca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	4b7b      	ldr	r3, [pc, #492]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d908      	bls.n	8007aca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ab8:	4b78      	ldr	r3, [pc, #480]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	4975      	ldr	r1, [pc, #468]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d010      	beq.n	8007af8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695a      	ldr	r2, [r3, #20]
 8007ada:	4b70      	ldr	r3, [pc, #448]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d908      	bls.n	8007af8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ae6:	4b6d      	ldr	r3, [pc, #436]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	496a      	ldr	r1, [pc, #424]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d010      	beq.n	8007b26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	4b64      	ldr	r3, [pc, #400]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d908      	bls.n	8007b26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b14:	4b61      	ldr	r3, [pc, #388]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	495e      	ldr	r1, [pc, #376]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d010      	beq.n	8007b54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	69da      	ldr	r2, [r3, #28]
 8007b36:	4b59      	ldr	r3, [pc, #356]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d908      	bls.n	8007b54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b42:	4b56      	ldr	r3, [pc, #344]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	4953      	ldr	r1, [pc, #332]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d010      	beq.n	8007b82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	4b4d      	ldr	r3, [pc, #308]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f003 030f 	and.w	r3, r3, #15
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d908      	bls.n	8007b82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b70:	4b4a      	ldr	r3, [pc, #296]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	f023 020f 	bic.w	r2, r3, #15
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	4947      	ldr	r1, [pc, #284]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d055      	beq.n	8007c3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b8e:	4b43      	ldr	r3, [pc, #268]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	4940      	ldr	r1, [pc, #256]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d107      	bne.n	8007bb8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ba8:	4b3c      	ldr	r3, [pc, #240]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d121      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e0f6      	b.n	8007da6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d107      	bne.n	8007bd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bc0:	4b36      	ldr	r3, [pc, #216]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d115      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e0ea      	b.n	8007da6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d107      	bne.n	8007be8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bd8:	4b30      	ldr	r3, [pc, #192]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d109      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e0de      	b.n	8007da6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007be8:	4b2c      	ldr	r3, [pc, #176]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e0d6      	b.n	8007da6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007bf8:	4b28      	ldr	r3, [pc, #160]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f023 0207 	bic.w	r2, r3, #7
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	4925      	ldr	r1, [pc, #148]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c0a:	f7fb fd7f 	bl	800370c <HAL_GetTick>
 8007c0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c10:	e00a      	b.n	8007c28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c12:	f7fb fd7b 	bl	800370c <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e0be      	b.n	8007da6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c28:	4b1c      	ldr	r3, [pc, #112]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d1eb      	bne.n	8007c12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d010      	beq.n	8007c68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	4b14      	ldr	r3, [pc, #80]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d208      	bcs.n	8007c68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c56:	4b11      	ldr	r3, [pc, #68]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	f023 020f 	bic.w	r2, r3, #15
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	490e      	ldr	r1, [pc, #56]	; (8007c9c <HAL_RCC_ClockConfig+0x244>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c68:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <HAL_RCC_ClockConfig+0x240>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d214      	bcs.n	8007ca0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c76:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <HAL_RCC_ClockConfig+0x240>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f023 020f 	bic.w	r2, r3, #15
 8007c7e:	4906      	ldr	r1, [pc, #24]	; (8007c98 <HAL_RCC_ClockConfig+0x240>)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c86:	4b04      	ldr	r3, [pc, #16]	; (8007c98 <HAL_RCC_ClockConfig+0x240>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 030f 	and.w	r3, r3, #15
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d005      	beq.n	8007ca0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e086      	b.n	8007da6 <HAL_RCC_ClockConfig+0x34e>
 8007c98:	52002000 	.word	0x52002000
 8007c9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d010      	beq.n	8007cce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	4b3f      	ldr	r3, [pc, #252]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d208      	bcs.n	8007cce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cbc:	4b3c      	ldr	r3, [pc, #240]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	4939      	ldr	r1, [pc, #228]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d010      	beq.n	8007cfc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	695a      	ldr	r2, [r3, #20]
 8007cde:	4b34      	ldr	r3, [pc, #208]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d208      	bcs.n	8007cfc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	492e      	ldr	r1, [pc, #184]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d010      	beq.n	8007d2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	4b28      	ldr	r3, [pc, #160]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d208      	bcs.n	8007d2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d18:	4b25      	ldr	r3, [pc, #148]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	4922      	ldr	r1, [pc, #136]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d010      	beq.n	8007d58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69da      	ldr	r2, [r3, #28]
 8007d3a:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d208      	bcs.n	8007d58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d46:	4b1a      	ldr	r3, [pc, #104]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	4917      	ldr	r1, [pc, #92]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d58:	f000 f834 	bl	8007dc4 <HAL_RCC_GetSysClockFreq>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	4b14      	ldr	r3, [pc, #80]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	0a1b      	lsrs	r3, r3, #8
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	4912      	ldr	r1, [pc, #72]	; (8007db4 <HAL_RCC_ClockConfig+0x35c>)
 8007d6a:	5ccb      	ldrb	r3, [r1, r3]
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	fa22 f303 	lsr.w	r3, r2, r3
 8007d74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d76:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <HAL_RCC_ClockConfig+0x358>)
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	4a0d      	ldr	r2, [pc, #52]	; (8007db4 <HAL_RCC_ClockConfig+0x35c>)
 8007d80:	5cd3      	ldrb	r3, [r2, r3]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8c:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <HAL_RCC_ClockConfig+0x360>)
 8007d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d90:	4a0a      	ldr	r2, [pc, #40]	; (8007dbc <HAL_RCC_ClockConfig+0x364>)
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007d96:	4b0a      	ldr	r3, [pc, #40]	; (8007dc0 <HAL_RCC_ClockConfig+0x368>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fb fc6c 	bl	8003678 <HAL_InitTick>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	58024400 	.word	0x58024400
 8007db4:	0800d1d0 	.word	0x0800d1d0
 8007db8:	24000018 	.word	0x24000018
 8007dbc:	24000014 	.word	0x24000014
 8007dc0:	24000030 	.word	0x24000030

08007dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b089      	sub	sp, #36	; 0x24
 8007dc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dca:	4bb3      	ldr	r3, [pc, #716]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dd2:	2b18      	cmp	r3, #24
 8007dd4:	f200 8155 	bhi.w	8008082 <HAL_RCC_GetSysClockFreq+0x2be>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007e45 	.word	0x08007e45
 8007de4:	08008083 	.word	0x08008083
 8007de8:	08008083 	.word	0x08008083
 8007dec:	08008083 	.word	0x08008083
 8007df0:	08008083 	.word	0x08008083
 8007df4:	08008083 	.word	0x08008083
 8007df8:	08008083 	.word	0x08008083
 8007dfc:	08008083 	.word	0x08008083
 8007e00:	08007e6b 	.word	0x08007e6b
 8007e04:	08008083 	.word	0x08008083
 8007e08:	08008083 	.word	0x08008083
 8007e0c:	08008083 	.word	0x08008083
 8007e10:	08008083 	.word	0x08008083
 8007e14:	08008083 	.word	0x08008083
 8007e18:	08008083 	.word	0x08008083
 8007e1c:	08008083 	.word	0x08008083
 8007e20:	08007e71 	.word	0x08007e71
 8007e24:	08008083 	.word	0x08008083
 8007e28:	08008083 	.word	0x08008083
 8007e2c:	08008083 	.word	0x08008083
 8007e30:	08008083 	.word	0x08008083
 8007e34:	08008083 	.word	0x08008083
 8007e38:	08008083 	.word	0x08008083
 8007e3c:	08008083 	.word	0x08008083
 8007e40:	08007e77 	.word	0x08007e77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e44:	4b94      	ldr	r3, [pc, #592]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e50:	4b91      	ldr	r3, [pc, #580]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	08db      	lsrs	r3, r3, #3
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	4a90      	ldr	r2, [pc, #576]	; (800809c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007e62:	e111      	b.n	8008088 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e64:	4b8d      	ldr	r3, [pc, #564]	; (800809c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e66:	61bb      	str	r3, [r7, #24]
      break;
 8007e68:	e10e      	b.n	8008088 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007e6a:	4b8d      	ldr	r3, [pc, #564]	; (80080a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e6c:	61bb      	str	r3, [r7, #24]
      break;
 8007e6e:	e10b      	b.n	8008088 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007e70:	4b8c      	ldr	r3, [pc, #560]	; (80080a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e72:	61bb      	str	r3, [r7, #24]
      break;
 8007e74:	e108      	b.n	8008088 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e76:	4b88      	ldr	r3, [pc, #544]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007e80:	4b85      	ldr	r3, [pc, #532]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e84:	091b      	lsrs	r3, r3, #4
 8007e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e8a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e8c:	4b82      	ldr	r3, [pc, #520]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e96:	4b80      	ldr	r3, [pc, #512]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	08db      	lsrs	r3, r3, #3
 8007e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80e1 	beq.w	800807c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	f000 8083 	beq.w	8007fc8 <HAL_RCC_GetSysClockFreq+0x204>
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	f200 80a1 	bhi.w	800800c <HAL_RCC_GetSysClockFreq+0x248>
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <HAL_RCC_GetSysClockFreq+0x114>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d056      	beq.n	8007f84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ed6:	e099      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed8:	4b6f      	ldr	r3, [pc, #444]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d02d      	beq.n	8007f40 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ee4:	4b6c      	ldr	r3, [pc, #432]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	f003 0303 	and.w	r3, r3, #3
 8007eee:	4a6b      	ldr	r2, [pc, #428]	; (800809c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	ee07 3a90 	vmov	s15, r3
 8007efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0e:	4b62      	ldr	r3, [pc, #392]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f22:	eddf 5a61 	vldr	s11, [pc, #388]	; 80080a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007f3e:	e087      	b.n	8008050 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80080ac <HAL_RCC_GetSysClockFreq+0x2e8>
 8007f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f52:	4b51      	ldr	r3, [pc, #324]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f66:	eddf 5a50 	vldr	s11, [pc, #320]	; 80080a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f82:	e065      	b.n	8008050 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80080b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f96:	4b40      	ldr	r3, [pc, #256]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007faa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80080a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007fc6:	e043      	b.n	8008050 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80080b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fda:	4b2f      	ldr	r3, [pc, #188]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80080a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800800a:	e021      	b.n	8008050 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	ee07 3a90 	vmov	s15, r3
 8008012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008016:	eddf 6a26 	vldr	s13, [pc, #152]	; 80080b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800801a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801e:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800802e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008032:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80080a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800803e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800804e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008050:	4b11      	ldr	r3, [pc, #68]	; (8008098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008054:	0a5b      	lsrs	r3, r3, #9
 8008056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800805a:	3301      	adds	r3, #1
 800805c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	ee07 3a90 	vmov	s15, r3
 8008064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008068:	edd7 6a07 	vldr	s13, [r7, #28]
 800806c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008074:	ee17 3a90 	vmov	r3, s15
 8008078:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800807a:	e005      	b.n	8008088 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	61bb      	str	r3, [r7, #24]
      break;
 8008080:	e002      	b.n	8008088 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008084:	61bb      	str	r3, [r7, #24]
      break;
 8008086:	bf00      	nop
  }

  return sysclockfreq;
 8008088:	69bb      	ldr	r3, [r7, #24]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3724      	adds	r7, #36	; 0x24
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	58024400 	.word	0x58024400
 800809c:	03d09000 	.word	0x03d09000
 80080a0:	003d0900 	.word	0x003d0900
 80080a4:	017d7840 	.word	0x017d7840
 80080a8:	46000000 	.word	0x46000000
 80080ac:	4c742400 	.word	0x4c742400
 80080b0:	4a742400 	.word	0x4a742400
 80080b4:	4bbebc20 	.word	0x4bbebc20

080080b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80080be:	f7ff fe81 	bl	8007dc4 <HAL_RCC_GetSysClockFreq>
 80080c2:	4602      	mov	r2, r0
 80080c4:	4b10      	ldr	r3, [pc, #64]	; (8008108 <HAL_RCC_GetHCLKFreq+0x50>)
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	0a1b      	lsrs	r3, r3, #8
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	490f      	ldr	r1, [pc, #60]	; (800810c <HAL_RCC_GetHCLKFreq+0x54>)
 80080d0:	5ccb      	ldrb	r3, [r1, r3]
 80080d2:	f003 031f 	and.w	r3, r3, #31
 80080d6:	fa22 f303 	lsr.w	r3, r2, r3
 80080da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <HAL_RCC_GetHCLKFreq+0x50>)
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f003 030f 	and.w	r3, r3, #15
 80080e4:	4a09      	ldr	r2, [pc, #36]	; (800810c <HAL_RCC_GetHCLKFreq+0x54>)
 80080e6:	5cd3      	ldrb	r3, [r2, r3]
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	fa22 f303 	lsr.w	r3, r2, r3
 80080f2:	4a07      	ldr	r2, [pc, #28]	; (8008110 <HAL_RCC_GetHCLKFreq+0x58>)
 80080f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080f6:	4a07      	ldr	r2, [pc, #28]	; (8008114 <HAL_RCC_GetHCLKFreq+0x5c>)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80080fc:	4b04      	ldr	r3, [pc, #16]	; (8008110 <HAL_RCC_GetHCLKFreq+0x58>)
 80080fe:	681b      	ldr	r3, [r3, #0]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	58024400 	.word	0x58024400
 800810c:	0800d1d0 	.word	0x0800d1d0
 8008110:	24000018 	.word	0x24000018
 8008114:	24000014 	.word	0x24000014

08008118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800811c:	f7ff ffcc 	bl	80080b8 <HAL_RCC_GetHCLKFreq>
 8008120:	4602      	mov	r2, r0
 8008122:	4b06      	ldr	r3, [pc, #24]	; (800813c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	0a1b      	lsrs	r3, r3, #8
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	4904      	ldr	r1, [pc, #16]	; (8008140 <HAL_RCC_GetPCLK2Freq+0x28>)
 800812e:	5ccb      	ldrb	r3, [r1, r3]
 8008130:	f003 031f 	and.w	r3, r3, #31
 8008134:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008138:	4618      	mov	r0, r3
 800813a:	bd80      	pop	{r7, pc}
 800813c:	58024400 	.word	0x58024400
 8008140:	0800d1d0 	.word	0x0800d1d0

08008144 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008148:	b0ca      	sub	sp, #296	; 0x128
 800814a:	af00      	add	r7, sp, #0
 800814c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008150:	2300      	movs	r3, #0
 8008152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008156:	2300      	movs	r3, #0
 8008158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800815c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008168:	2500      	movs	r5, #0
 800816a:	ea54 0305 	orrs.w	r3, r4, r5
 800816e:	d049      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800817a:	d02f      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800817c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008180:	d828      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008186:	d01a      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800818c:	d822      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008196:	d007      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008198:	e01c      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800819a:	4bb8      	ldr	r3, [pc, #736]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	4ab7      	ldr	r2, [pc, #732]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081a6:	e01a      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ac:	3308      	adds	r3, #8
 80081ae:	2102      	movs	r1, #2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 f9d1 	bl	8009558 <RCCEx_PLL2_Config>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081bc:	e00f      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c2:	3328      	adds	r3, #40	; 0x28
 80081c4:	2102      	movs	r1, #2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 fa78 	bl	80096bc <RCCEx_PLL3_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081d2:	e004      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081da:	e000      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80081dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80081e6:	4ba5      	ldr	r3, [pc, #660]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80081ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081f4:	4aa1      	ldr	r2, [pc, #644]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081f6:	430b      	orrs	r3, r1
 80081f8:	6513      	str	r3, [r2, #80]	; 0x50
 80081fa:	e003      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008200:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008210:	f04f 0900 	mov.w	r9, #0
 8008214:	ea58 0309 	orrs.w	r3, r8, r9
 8008218:	d047      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800821e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008220:	2b04      	cmp	r3, #4
 8008222:	d82a      	bhi.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	08008241 	.word	0x08008241
 8008230:	0800824f 	.word	0x0800824f
 8008234:	08008265 	.word	0x08008265
 8008238:	08008283 	.word	0x08008283
 800823c:	08008283 	.word	0x08008283
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008240:	4b8e      	ldr	r3, [pc, #568]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	4a8d      	ldr	r2, [pc, #564]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800824a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800824c:	e01a      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008252:	3308      	adds	r3, #8
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f001 f97e 	bl	8009558 <RCCEx_PLL2_Config>
 800825c:	4603      	mov	r3, r0
 800825e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008262:	e00f      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008268:	3328      	adds	r3, #40	; 0x28
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f001 fa25 	bl	80096bc <RCCEx_PLL3_Config>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008278:	e004      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008280:	e000      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800828c:	4b7b      	ldr	r3, [pc, #492]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800828e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008290:	f023 0107 	bic.w	r1, r3, #7
 8008294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829a:	4a78      	ldr	r2, [pc, #480]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800829c:	430b      	orrs	r3, r1
 800829e:	6513      	str	r3, [r2, #80]	; 0x50
 80082a0:	e003      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80082b6:	f04f 0b00 	mov.w	fp, #0
 80082ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80082be:	d04c      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ca:	d030      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80082cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d0:	d829      	bhi.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082d2:	2bc0      	cmp	r3, #192	; 0xc0
 80082d4:	d02d      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80082d6:	2bc0      	cmp	r3, #192	; 0xc0
 80082d8:	d825      	bhi.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082da:	2b80      	cmp	r3, #128	; 0x80
 80082dc:	d018      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80082de:	2b80      	cmp	r3, #128	; 0x80
 80082e0:	d821      	bhi.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80082e6:	2b40      	cmp	r3, #64	; 0x40
 80082e8:	d007      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80082ea:	e01c      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ec:	4b63      	ldr	r3, [pc, #396]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	4a62      	ldr	r2, [pc, #392]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80082f8:	e01c      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082fe:	3308      	adds	r3, #8
 8008300:	2100      	movs	r1, #0
 8008302:	4618      	mov	r0, r3
 8008304:	f001 f928 	bl	8009558 <RCCEx_PLL2_Config>
 8008308:	4603      	mov	r3, r0
 800830a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800830e:	e011      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008314:	3328      	adds	r3, #40	; 0x28
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f001 f9cf 	bl	80096bc <RCCEx_PLL3_Config>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008324:	e006      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800832c:	e002      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800832e:	bf00      	nop
 8008330:	e000      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10a      	bne.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800833c:	4b4f      	ldr	r3, [pc, #316]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800833e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008340:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800834a:	4a4c      	ldr	r2, [pc, #304]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800834c:	430b      	orrs	r3, r1
 800834e:	6513      	str	r3, [r2, #80]	; 0x50
 8008350:	e003      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008366:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800836a:	2300      	movs	r3, #0
 800836c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008370:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008374:	460b      	mov	r3, r1
 8008376:	4313      	orrs	r3, r2
 8008378:	d053      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800837a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800837e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008382:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008386:	d035      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008388:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800838c:	d82e      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800838e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008392:	d031      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008394:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008398:	d828      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800839a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800839e:	d01a      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80083a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083a4:	d822      	bhi.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80083aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083ae:	d007      	beq.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80083b0:	e01c      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b2:	4b32      	ldr	r3, [pc, #200]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	4a31      	ldr	r2, [pc, #196]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083be:	e01c      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c4:	3308      	adds	r3, #8
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 f8c5 	bl	8009558 <RCCEx_PLL2_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083d4:	e011      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083da:	3328      	adds	r3, #40	; 0x28
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 f96c 	bl	80096bc <RCCEx_PLL3_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083ea:	e006      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083f2:	e002      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083f4:	bf00      	nop
 80083f6:	e000      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80083f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10b      	bne.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008402:	4b1e      	ldr	r3, [pc, #120]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008406:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800840a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008412:	4a1a      	ldr	r2, [pc, #104]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008414:	430b      	orrs	r3, r1
 8008416:	6593      	str	r3, [r2, #88]	; 0x58
 8008418:	e003      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800841e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800842e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008432:	2300      	movs	r3, #0
 8008434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008438:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800843c:	460b      	mov	r3, r1
 800843e:	4313      	orrs	r3, r2
 8008440:	d056      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008446:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800844a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800844e:	d038      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008454:	d831      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008456:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800845a:	d034      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800845c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008460:	d82b      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008466:	d01d      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800846c:	d825      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d006      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008476:	d00a      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008478:	e01f      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800847a:	bf00      	nop
 800847c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008480:	4ba2      	ldr	r3, [pc, #648]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	4aa1      	ldr	r2, [pc, #644]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800848a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800848c:	e01c      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800848e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008492:	3308      	adds	r3, #8
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f001 f85e 	bl	8009558 <RCCEx_PLL2_Config>
 800849c:	4603      	mov	r3, r0
 800849e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80084a2:	e011      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a8:	3328      	adds	r3, #40	; 0x28
 80084aa:	2100      	movs	r1, #0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 f905 	bl	80096bc <RCCEx_PLL3_Config>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084b8:	e006      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084c0:	e002      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084c2:	bf00      	nop
 80084c4:	e000      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10b      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084d0:	4b8e      	ldr	r3, [pc, #568]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80084e0:	4a8a      	ldr	r2, [pc, #552]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	6593      	str	r3, [r2, #88]	; 0x58
 80084e6:	e003      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80084fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008500:	2300      	movs	r3, #0
 8008502:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008506:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800850a:	460b      	mov	r3, r1
 800850c:	4313      	orrs	r3, r2
 800850e:	d03a      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008516:	2b30      	cmp	r3, #48	; 0x30
 8008518:	d01f      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800851a:	2b30      	cmp	r3, #48	; 0x30
 800851c:	d819      	bhi.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800851e:	2b20      	cmp	r3, #32
 8008520:	d00c      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008522:	2b20      	cmp	r3, #32
 8008524:	d815      	bhi.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008526:	2b00      	cmp	r3, #0
 8008528:	d019      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800852a:	2b10      	cmp	r3, #16
 800852c:	d111      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800852e:	4b77      	ldr	r3, [pc, #476]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008532:	4a76      	ldr	r2, [pc, #472]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008538:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800853a:	e011      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008540:	3308      	adds	r3, #8
 8008542:	2102      	movs	r1, #2
 8008544:	4618      	mov	r0, r3
 8008546:	f001 f807 	bl	8009558 <RCCEx_PLL2_Config>
 800854a:	4603      	mov	r3, r0
 800854c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008550:	e006      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008558:	e002      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800855a:	bf00      	nop
 800855c:	e000      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800855e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008568:	4b68      	ldr	r3, [pc, #416]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800856a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008576:	4a65      	ldr	r2, [pc, #404]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008578:	430b      	orrs	r3, r1
 800857a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800857c:	e003      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008592:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008596:	2300      	movs	r3, #0
 8008598:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800859c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4313      	orrs	r3, r2
 80085a4:	d051      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085b0:	d035      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80085b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085b6:	d82e      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085bc:	d031      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80085be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085c2:	d828      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c8:	d01a      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80085ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ce:	d822      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80085d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d8:	d007      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80085da:	e01c      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085dc:	4b4b      	ldr	r3, [pc, #300]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	4a4a      	ldr	r2, [pc, #296]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085e8:	e01c      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	3308      	adds	r3, #8
 80085f0:	2100      	movs	r1, #0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 ffb0 	bl	8009558 <RCCEx_PLL2_Config>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80085fe:	e011      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008604:	3328      	adds	r3, #40	; 0x28
 8008606:	2100      	movs	r1, #0
 8008608:	4618      	mov	r0, r3
 800860a:	f001 f857 	bl	80096bc <RCCEx_PLL3_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008614:	e006      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800861c:	e002      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800861e:	bf00      	nop
 8008620:	e000      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800862c:	4b37      	ldr	r3, [pc, #220]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800862e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008630:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800863a:	4a34      	ldr	r2, [pc, #208]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800863c:	430b      	orrs	r3, r1
 800863e:	6513      	str	r3, [r2, #80]	; 0x50
 8008640:	e003      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800865a:	2300      	movs	r3, #0
 800865c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008660:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008664:	460b      	mov	r3, r1
 8008666:	4313      	orrs	r3, r2
 8008668:	d056      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008674:	d033      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800867a:	d82c      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800867c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008680:	d02f      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008682:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008686:	d826      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008688:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800868c:	d02b      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800868e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008692:	d820      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008698:	d012      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800869a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800869e:	d81a      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d022      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80086a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a8:	d115      	bne.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ae:	3308      	adds	r3, #8
 80086b0:	2101      	movs	r1, #1
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 ff50 	bl	8009558 <RCCEx_PLL2_Config>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086be:	e015      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c4:	3328      	adds	r3, #40	; 0x28
 80086c6:	2101      	movs	r1, #1
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 fff7 	bl	80096bc <RCCEx_PLL3_Config>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086d4:	e00a      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086dc:	e006      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086de:	bf00      	nop
 80086e0:	e004      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086e2:	bf00      	nop
 80086e4:	e002      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086e6:	bf00      	nop
 80086e8:	e000      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10d      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80086f4:	4b05      	ldr	r3, [pc, #20]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80086fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008702:	4a02      	ldr	r2, [pc, #8]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008704:	430b      	orrs	r3, r1
 8008706:	6513      	str	r3, [r2, #80]	; 0x50
 8008708:	e006      	b.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800870a:	bf00      	nop
 800870c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008728:	2300      	movs	r3, #0
 800872a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800872e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008732:	460b      	mov	r3, r1
 8008734:	4313      	orrs	r3, r2
 8008736:	d055      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800873c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008744:	d033      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800874a:	d82c      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800874c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008750:	d02f      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008756:	d826      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800875c:	d02b      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800875e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008762:	d820      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008768:	d012      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800876a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800876e:	d81a      	bhi.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008770:	2b00      	cmp	r3, #0
 8008772:	d022      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008774:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008778:	d115      	bne.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877e:	3308      	adds	r3, #8
 8008780:	2101      	movs	r1, #1
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fee8 	bl	8009558 <RCCEx_PLL2_Config>
 8008788:	4603      	mov	r3, r0
 800878a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800878e:	e015      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008794:	3328      	adds	r3, #40	; 0x28
 8008796:	2101      	movs	r1, #1
 8008798:	4618      	mov	r0, r3
 800879a:	f000 ff8f 	bl	80096bc <RCCEx_PLL3_Config>
 800879e:	4603      	mov	r3, r0
 80087a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087a4:	e00a      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087ac:	e006      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087ae:	bf00      	nop
 80087b0:	e004      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087b2:	bf00      	nop
 80087b4:	e002      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087b6:	bf00      	nop
 80087b8:	e000      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10b      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087c4:	4ba3      	ldr	r3, [pc, #652]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087d4:	4a9f      	ldr	r2, [pc, #636]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087d6:	430b      	orrs	r3, r1
 80087d8:	6593      	str	r3, [r2, #88]	; 0x58
 80087da:	e003      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80087e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80087f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087f4:	2300      	movs	r3, #0
 80087f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80087fe:	460b      	mov	r3, r1
 8008800:	4313      	orrs	r3, r2
 8008802:	d037      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880e:	d00e      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008814:	d816      	bhi.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d018      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800881a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800881e:	d111      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008820:	4b8c      	ldr	r3, [pc, #560]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	4a8b      	ldr	r2, [pc, #556]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800882a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800882c:	e00f      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800882e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008832:	3308      	adds	r3, #8
 8008834:	2101      	movs	r1, #1
 8008836:	4618      	mov	r0, r3
 8008838:	f000 fe8e 	bl	8009558 <RCCEx_PLL2_Config>
 800883c:	4603      	mov	r3, r0
 800883e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008842:	e004      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800884a:	e000      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800884c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800884e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10a      	bne.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008856:	4b7f      	ldr	r3, [pc, #508]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008864:	4a7b      	ldr	r2, [pc, #492]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008866:	430b      	orrs	r3, r1
 8008868:	6513      	str	r3, [r2, #80]	; 0x50
 800886a:	e003      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008870:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008884:	2300      	movs	r3, #0
 8008886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800888a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800888e:	460b      	mov	r3, r1
 8008890:	4313      	orrs	r3, r2
 8008892:	d039      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889a:	2b03      	cmp	r3, #3
 800889c:	d81c      	bhi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800889e:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	080088e1 	.word	0x080088e1
 80088a8:	080088b5 	.word	0x080088b5
 80088ac:	080088c3 	.word	0x080088c3
 80088b0:	080088e1 	.word	0x080088e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b4:	4b67      	ldr	r3, [pc, #412]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	4a66      	ldr	r2, [pc, #408]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088c0:	e00f      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c6:	3308      	adds	r3, #8
 80088c8:	2102      	movs	r1, #2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fe44 	bl	8009558 <RCCEx_PLL2_Config>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088d6:	e004      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088de:	e000      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80088e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088ea:	4b5a      	ldr	r3, [pc, #360]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ee:	f023 0103 	bic.w	r1, r3, #3
 80088f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f8:	4a56      	ldr	r2, [pc, #344]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088fa:	430b      	orrs	r3, r1
 80088fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088fe:	e003      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008914:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008918:	2300      	movs	r3, #0
 800891a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800891e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008922:	460b      	mov	r3, r1
 8008924:	4313      	orrs	r3, r2
 8008926:	f000 809f 	beq.w	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800892a:	4b4b      	ldr	r3, [pc, #300]	; (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a4a      	ldr	r2, [pc, #296]	; (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008936:	f7fa fee9 	bl	800370c <HAL_GetTick>
 800893a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800893e:	e00b      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008940:	f7fa fee4 	bl	800370c <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	2b64      	cmp	r3, #100	; 0x64
 800894e:	d903      	bls.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008956:	e005      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008958:	4b3f      	ldr	r3, [pc, #252]	; (8008a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0ed      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008968:	2b00      	cmp	r3, #0
 800896a:	d179      	bne.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800896c:	4b39      	ldr	r3, [pc, #228]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800896e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008978:	4053      	eors	r3, r2
 800897a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800897e:	2b00      	cmp	r3, #0
 8008980:	d015      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008982:	4b34      	ldr	r3, [pc, #208]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800898a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800898e:	4b31      	ldr	r3, [pc, #196]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008992:	4a30      	ldr	r2, [pc, #192]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008998:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800899a:	4b2e      	ldr	r3, [pc, #184]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800899c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899e:	4a2d      	ldr	r2, [pc, #180]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089a6:	4a2b      	ldr	r2, [pc, #172]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80089ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ba:	d118      	bne.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089bc:	f7fa fea6 	bl	800370c <HAL_GetTick>
 80089c0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c4:	e00d      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089c6:	f7fa fea1 	bl	800370c <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80089d0:	1ad2      	subs	r2, r2, r3
 80089d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d903      	bls.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80089e0:	e005      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e2:	4b1c      	ldr	r3, [pc, #112]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0eb      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80089ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d129      	bne.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80089fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a06:	d10e      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008a08:	4b12      	ldr	r3, [pc, #72]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a18:	091a      	lsrs	r2, r3, #4
 8008a1a:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	4a0d      	ldr	r2, [pc, #52]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a20:	430b      	orrs	r3, r1
 8008a22:	6113      	str	r3, [r2, #16]
 8008a24:	e005      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008a26:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	4a0a      	ldr	r2, [pc, #40]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a30:	6113      	str	r3, [r2, #16]
 8008a32:	4b08      	ldr	r3, [pc, #32]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a34:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a42:	4a04      	ldr	r2, [pc, #16]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a44:	430b      	orrs	r3, r1
 8008a46:	6713      	str	r3, [r2, #112]	; 0x70
 8008a48:	e00e      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008a52:	e009      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008a54:	58024400 	.word	0x58024400
 8008a58:	58024800 	.word	0x58024800
 8008a5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f002 0301 	and.w	r3, r2, #1
 8008a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4313      	orrs	r3, r2
 8008a86:	f000 8089 	beq.w	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a90:	2b28      	cmp	r3, #40	; 0x28
 8008a92:	d86b      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008b75 	.word	0x08008b75
 8008aa0:	08008b6d 	.word	0x08008b6d
 8008aa4:	08008b6d 	.word	0x08008b6d
 8008aa8:	08008b6d 	.word	0x08008b6d
 8008aac:	08008b6d 	.word	0x08008b6d
 8008ab0:	08008b6d 	.word	0x08008b6d
 8008ab4:	08008b6d 	.word	0x08008b6d
 8008ab8:	08008b6d 	.word	0x08008b6d
 8008abc:	08008b41 	.word	0x08008b41
 8008ac0:	08008b6d 	.word	0x08008b6d
 8008ac4:	08008b6d 	.word	0x08008b6d
 8008ac8:	08008b6d 	.word	0x08008b6d
 8008acc:	08008b6d 	.word	0x08008b6d
 8008ad0:	08008b6d 	.word	0x08008b6d
 8008ad4:	08008b6d 	.word	0x08008b6d
 8008ad8:	08008b6d 	.word	0x08008b6d
 8008adc:	08008b57 	.word	0x08008b57
 8008ae0:	08008b6d 	.word	0x08008b6d
 8008ae4:	08008b6d 	.word	0x08008b6d
 8008ae8:	08008b6d 	.word	0x08008b6d
 8008aec:	08008b6d 	.word	0x08008b6d
 8008af0:	08008b6d 	.word	0x08008b6d
 8008af4:	08008b6d 	.word	0x08008b6d
 8008af8:	08008b6d 	.word	0x08008b6d
 8008afc:	08008b75 	.word	0x08008b75
 8008b00:	08008b6d 	.word	0x08008b6d
 8008b04:	08008b6d 	.word	0x08008b6d
 8008b08:	08008b6d 	.word	0x08008b6d
 8008b0c:	08008b6d 	.word	0x08008b6d
 8008b10:	08008b6d 	.word	0x08008b6d
 8008b14:	08008b6d 	.word	0x08008b6d
 8008b18:	08008b6d 	.word	0x08008b6d
 8008b1c:	08008b75 	.word	0x08008b75
 8008b20:	08008b6d 	.word	0x08008b6d
 8008b24:	08008b6d 	.word	0x08008b6d
 8008b28:	08008b6d 	.word	0x08008b6d
 8008b2c:	08008b6d 	.word	0x08008b6d
 8008b30:	08008b6d 	.word	0x08008b6d
 8008b34:	08008b6d 	.word	0x08008b6d
 8008b38:	08008b6d 	.word	0x08008b6d
 8008b3c:	08008b75 	.word	0x08008b75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b44:	3308      	adds	r3, #8
 8008b46:	2101      	movs	r1, #1
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 fd05 	bl	8009558 <RCCEx_PLL2_Config>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b54:	e00f      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5a:	3328      	adds	r3, #40	; 0x28
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fdac 	bl	80096bc <RCCEx_PLL3_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b6a:	e004      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b72:	e000      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b7e:	4bbf      	ldr	r3, [pc, #764]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b82:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b8c:	4abb      	ldr	r2, [pc, #748]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	6553      	str	r3, [r2, #84]	; 0x54
 8008b92:	e003      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f002 0302 	and.w	r3, r2, #2
 8008ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bac:	2300      	movs	r3, #0
 8008bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008bb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	d041      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bc2:	2b05      	cmp	r3, #5
 8008bc4:	d824      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008c19 	.word	0x08008c19
 8008bd0:	08008be5 	.word	0x08008be5
 8008bd4:	08008bfb 	.word	0x08008bfb
 8008bd8:	08008c19 	.word	0x08008c19
 8008bdc:	08008c19 	.word	0x08008c19
 8008be0:	08008c19 	.word	0x08008c19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be8:	3308      	adds	r3, #8
 8008bea:	2101      	movs	r1, #1
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 fcb3 	bl	8009558 <RCCEx_PLL2_Config>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008bf8:	e00f      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfe:	3328      	adds	r3, #40	; 0x28
 8008c00:	2101      	movs	r1, #1
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fd5a 	bl	80096bc <RCCEx_PLL3_Config>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c0e:	e004      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c16:	e000      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c22:	4b96      	ldr	r3, [pc, #600]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c26:	f023 0107 	bic.w	r1, r3, #7
 8008c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c30:	4a92      	ldr	r2, [pc, #584]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c32:	430b      	orrs	r3, r1
 8008c34:	6553      	str	r3, [r2, #84]	; 0x54
 8008c36:	e003      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f002 0304 	and.w	r3, r2, #4
 8008c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c50:	2300      	movs	r3, #0
 8008c52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	d044      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c68:	2b05      	cmp	r3, #5
 8008c6a:	d825      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008c6c:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c72:	bf00      	nop
 8008c74:	08008cc1 	.word	0x08008cc1
 8008c78:	08008c8d 	.word	0x08008c8d
 8008c7c:	08008ca3 	.word	0x08008ca3
 8008c80:	08008cc1 	.word	0x08008cc1
 8008c84:	08008cc1 	.word	0x08008cc1
 8008c88:	08008cc1 	.word	0x08008cc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c90:	3308      	adds	r3, #8
 8008c92:	2101      	movs	r1, #1
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fc5f 	bl	8009558 <RCCEx_PLL2_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ca0:	e00f      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca6:	3328      	adds	r3, #40	; 0x28
 8008ca8:	2101      	movs	r1, #1
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 fd06 	bl	80096bc <RCCEx_PLL3_Config>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cb6:	e004      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cbe:	e000      	b.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cca:	4b6c      	ldr	r3, [pc, #432]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cce:	f023 0107 	bic.w	r1, r3, #7
 8008cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cda:	4a68      	ldr	r2, [pc, #416]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cdc:	430b      	orrs	r3, r1
 8008cde:	6593      	str	r3, [r2, #88]	; 0x58
 8008ce0:	e003      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf2:	f002 0320 	and.w	r3, r2, #32
 8008cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d04:	460b      	mov	r3, r1
 8008d06:	4313      	orrs	r3, r2
 8008d08:	d055      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d16:	d033      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d1c:	d82c      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d22:	d02f      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d28:	d826      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d2e:	d02b      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008d30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d34:	d820      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d3a:	d012      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d40:	d81a      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d022      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d4a:	d115      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d50:	3308      	adds	r3, #8
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fbff 	bl	8009558 <RCCEx_PLL2_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d60:	e015      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d66:	3328      	adds	r3, #40	; 0x28
 8008d68:	2102      	movs	r1, #2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fca6 	bl	80096bc <RCCEx_PLL3_Config>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d76:	e00a      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d7e:	e006      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d80:	bf00      	nop
 8008d82:	e004      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d84:	bf00      	nop
 8008d86:	e002      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10b      	bne.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d96:	4b39      	ldr	r3, [pc, #228]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da6:	4a35      	ldr	r2, [pc, #212]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008da8:	430b      	orrs	r3, r1
 8008daa:	6553      	str	r3, [r2, #84]	; 0x54
 8008dac:	e003      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008dcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	d058      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008dde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008de2:	d033      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008de4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008de8:	d82c      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dee:	d02f      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df4:	d826      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008df6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008dfa:	d02b      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e00:	d820      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e06:	d012      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e0c:	d81a      	bhi.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d022      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e16:	d115      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fb99 	bl	8009558 <RCCEx_PLL2_Config>
 8008e26:	4603      	mov	r3, r0
 8008e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e2c:	e015      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e32:	3328      	adds	r3, #40	; 0x28
 8008e34:	2102      	movs	r1, #2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 fc40 	bl	80096bc <RCCEx_PLL3_Config>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e42:	e00a      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e4a:	e006      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e4c:	bf00      	nop
 8008e4e:	e004      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e50:	bf00      	nop
 8008e52:	e002      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e54:	bf00      	nop
 8008e56:	e000      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10e      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e62:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e66:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e72:	4a02      	ldr	r2, [pc, #8]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e74:	430b      	orrs	r3, r1
 8008e76:	6593      	str	r3, [r2, #88]	; 0x58
 8008e78:	e006      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008e7a:	bf00      	nop
 8008e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	d055      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008eb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008eb4:	d033      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008eb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008eba:	d82c      	bhi.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ec0:	d02f      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ec6:	d826      	bhi.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ec8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ecc:	d02b      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008ece:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ed2:	d820      	bhi.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ed8:	d012      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ede:	d81a      	bhi.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d022      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ee8:	d115      	bne.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eee:	3308      	adds	r3, #8
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fb30 	bl	8009558 <RCCEx_PLL2_Config>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008efe:	e015      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f04:	3328      	adds	r3, #40	; 0x28
 8008f06:	2102      	movs	r1, #2
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 fbd7 	bl	80096bc <RCCEx_PLL3_Config>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f14:	e00a      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f1c:	e006      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f1e:	bf00      	nop
 8008f20:	e004      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f22:	bf00      	nop
 8008f24:	e002      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f26:	bf00      	nop
 8008f28:	e000      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10b      	bne.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f34:	4ba1      	ldr	r3, [pc, #644]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f38:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f44:	4a9d      	ldr	r2, [pc, #628]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f46:	430b      	orrs	r3, r1
 8008f48:	6593      	str	r3, [r2, #88]	; 0x58
 8008f4a:	e003      	b.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	f002 0308 	and.w	r3, r2, #8
 8008f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f64:	2300      	movs	r3, #0
 8008f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008f6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4313      	orrs	r3, r2
 8008f72:	d01e      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f80:	d10c      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f86:	3328      	adds	r3, #40	; 0x28
 8008f88:	2102      	movs	r1, #2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fb96 	bl	80096bc <RCCEx_PLL3_Config>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d002      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008f9c:	4b87      	ldr	r3, [pc, #540]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fac:	4a83      	ldr	r2, [pc, #524]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f002 0310 	and.w	r3, r2, #16
 8008fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	d01e      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fde:	d10c      	bne.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe4:	3328      	adds	r3, #40	; 0x28
 8008fe6:	2102      	movs	r1, #2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fb67 	bl	80096bc <RCCEx_PLL3_Config>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ffa:	4b70      	ldr	r3, [pc, #448]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800900a:	4a6c      	ldr	r2, [pc, #432]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800900c:	430b      	orrs	r3, r1
 800900e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800901c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009020:	2300      	movs	r3, #0
 8009022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009026:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800902a:	460b      	mov	r3, r1
 800902c:	4313      	orrs	r3, r2
 800902e:	d03e      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009034:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800903c:	d022      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800903e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009042:	d81b      	bhi.n	800907c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800904c:	d00b      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800904e:	e015      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009054:	3308      	adds	r3, #8
 8009056:	2100      	movs	r1, #0
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fa7d 	bl	8009558 <RCCEx_PLL2_Config>
 800905e:	4603      	mov	r3, r0
 8009060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009064:	e00f      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800906a:	3328      	adds	r3, #40	; 0x28
 800906c:	2102      	movs	r1, #2
 800906e:	4618      	mov	r0, r3
 8009070:	f000 fb24 	bl	80096bc <RCCEx_PLL3_Config>
 8009074:	4603      	mov	r3, r0
 8009076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800907a:	e004      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009082:	e000      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10b      	bne.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800908e:	4b4b      	ldr	r3, [pc, #300]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009092:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800909a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800909e:	4a47      	ldr	r2, [pc, #284]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090a0:	430b      	orrs	r3, r1
 80090a2:	6593      	str	r3, [r2, #88]	; 0x58
 80090a4:	e003      	b.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80090ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80090bc:	2300      	movs	r3, #0
 80090be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80090c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80090c4:	460b      	mov	r3, r1
 80090c6:	4313      	orrs	r3, r2
 80090c8:	d03b      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090d6:	d01f      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80090d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090dc:	d818      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80090de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090e2:	d003      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80090e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090e8:	d007      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80090ea:	e011      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ec:	4b33      	ldr	r3, [pc, #204]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	4a32      	ldr	r2, [pc, #200]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80090f8:	e00f      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090fe:	3328      	adds	r3, #40	; 0x28
 8009100:	2101      	movs	r1, #1
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fada 	bl	80096bc <RCCEx_PLL3_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800910e:	e004      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009116:	e000      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10b      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009122:	4b26      	ldr	r3, [pc, #152]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009126:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800912a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800912e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009132:	4a22      	ldr	r2, [pc, #136]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009134:	430b      	orrs	r3, r1
 8009136:	6553      	str	r3, [r2, #84]	; 0x54
 8009138:	e003      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800913e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800914e:	673b      	str	r3, [r7, #112]	; 0x70
 8009150:	2300      	movs	r3, #0
 8009152:	677b      	str	r3, [r7, #116]	; 0x74
 8009154:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009158:	460b      	mov	r3, r1
 800915a:	4313      	orrs	r3, r2
 800915c:	d034      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800916c:	d007      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800916e:	e011      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009170:	4b12      	ldr	r3, [pc, #72]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	4a11      	ldr	r2, [pc, #68]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800917a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800917c:	e00e      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009182:	3308      	adds	r3, #8
 8009184:	2102      	movs	r1, #2
 8009186:	4618      	mov	r0, r3
 8009188:	f000 f9e6 	bl	8009558 <RCCEx_PLL2_Config>
 800918c:	4603      	mov	r3, r0
 800918e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009192:	e003      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800919a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10d      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091a4:	4b05      	ldr	r3, [pc, #20]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b2:	4a02      	ldr	r2, [pc, #8]	; (80091bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091b4:	430b      	orrs	r3, r1
 80091b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091b8:	e006      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80091ba:	bf00      	nop
 80091bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80091d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80091d6:	2300      	movs	r3, #0
 80091d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80091de:	460b      	mov	r3, r1
 80091e0:	4313      	orrs	r3, r2
 80091e2:	d00c      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e8:	3328      	adds	r3, #40	; 0x28
 80091ea:	2102      	movs	r1, #2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fa65 	bl	80096bc <RCCEx_PLL3_Config>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800920a:	663b      	str	r3, [r7, #96]	; 0x60
 800920c:	2300      	movs	r3, #0
 800920e:	667b      	str	r3, [r7, #100]	; 0x64
 8009210:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009214:	460b      	mov	r3, r1
 8009216:	4313      	orrs	r3, r2
 8009218:	d038      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800921e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009226:	d018      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800922c:	d811      	bhi.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800922e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009232:	d014      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009238:	d80b      	bhi.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d011      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800923e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009242:	d106      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009244:	4bc3      	ldr	r3, [pc, #780]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	4ac2      	ldr	r2, [pc, #776]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800924a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800924e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009250:	e008      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009258:	e004      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800925a:	bf00      	nop
 800925c:	e002      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800925e:	bf00      	nop
 8009260:	e000      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10b      	bne.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800926c:	4bb9      	ldr	r3, [pc, #740]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800926e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009270:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927c:	4ab5      	ldr	r2, [pc, #724]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800927e:	430b      	orrs	r3, r1
 8009280:	6553      	str	r3, [r2, #84]	; 0x54
 8009282:	e003      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009288:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800928c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009298:	65bb      	str	r3, [r7, #88]	; 0x58
 800929a:	2300      	movs	r3, #0
 800929c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800929e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80092a2:	460b      	mov	r3, r1
 80092a4:	4313      	orrs	r3, r2
 80092a6:	d009      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092a8:	4baa      	ldr	r3, [pc, #680]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80092b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b6:	4aa7      	ldr	r2, [pc, #668]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092b8:	430b      	orrs	r3, r1
 80092ba:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80092bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80092c8:	653b      	str	r3, [r7, #80]	; 0x50
 80092ca:	2300      	movs	r3, #0
 80092cc:	657b      	str	r3, [r7, #84]	; 0x54
 80092ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80092d2:	460b      	mov	r3, r1
 80092d4:	4313      	orrs	r3, r2
 80092d6:	d00a      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092d8:	4b9e      	ldr	r3, [pc, #632]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80092e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80092e8:	4a9a      	ldr	r2, [pc, #616]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092ea:	430b      	orrs	r3, r1
 80092ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80092fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80092fc:	2300      	movs	r3, #0
 80092fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009300:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009304:	460b      	mov	r3, r1
 8009306:	4313      	orrs	r3, r2
 8009308:	d009      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800930a:	4b92      	ldr	r3, [pc, #584]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800930c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009318:	4a8e      	ldr	r2, [pc, #568]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800931a:	430b      	orrs	r3, r1
 800931c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800932a:	643b      	str	r3, [r7, #64]	; 0x40
 800932c:	2300      	movs	r3, #0
 800932e:	647b      	str	r3, [r7, #68]	; 0x44
 8009330:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009334:	460b      	mov	r3, r1
 8009336:	4313      	orrs	r3, r2
 8009338:	d00e      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800933a:	4b86      	ldr	r3, [pc, #536]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	4a85      	ldr	r2, [pc, #532]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009344:	6113      	str	r3, [r2, #16]
 8009346:	4b83      	ldr	r3, [pc, #524]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009348:	6919      	ldr	r1, [r3, #16]
 800934a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009352:	4a80      	ldr	r2, [pc, #512]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009354:	430b      	orrs	r3, r1
 8009356:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009364:	63bb      	str	r3, [r7, #56]	; 0x38
 8009366:	2300      	movs	r3, #0
 8009368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800936a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800936e:	460b      	mov	r3, r1
 8009370:	4313      	orrs	r3, r2
 8009372:	d009      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009374:	4b77      	ldr	r3, [pc, #476]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009378:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800937c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009382:	4a74      	ldr	r2, [pc, #464]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009384:	430b      	orrs	r3, r1
 8009386:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009394:	633b      	str	r3, [r7, #48]	; 0x30
 8009396:	2300      	movs	r3, #0
 8009398:	637b      	str	r3, [r7, #52]	; 0x34
 800939a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800939e:	460b      	mov	r3, r1
 80093a0:	4313      	orrs	r3, r2
 80093a2:	d00a      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093a4:	4b6b      	ldr	r3, [pc, #428]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80093ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b4:	4a67      	ldr	r2, [pc, #412]	; (8009554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093b6:	430b      	orrs	r3, r1
 80093b8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	2100      	movs	r1, #0
 80093c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80093d0:	460b      	mov	r3, r1
 80093d2:	4313      	orrs	r3, r2
 80093d4:	d011      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093da:	3308      	adds	r3, #8
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 f8ba 	bl	8009558 <RCCEx_PLL2_Config>
 80093e4:	4603      	mov	r3, r0
 80093e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80093ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	2100      	movs	r1, #0
 8009404:	6239      	str	r1, [r7, #32]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	627b      	str	r3, [r7, #36]	; 0x24
 800940c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009410:	460b      	mov	r3, r1
 8009412:	4313      	orrs	r3, r2
 8009414:	d011      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800941a:	3308      	adds	r3, #8
 800941c:	2101      	movs	r1, #1
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f89a 	bl	8009558 <RCCEx_PLL2_Config>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800942a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800943a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	2100      	movs	r1, #0
 8009444:	61b9      	str	r1, [r7, #24]
 8009446:	f003 0304 	and.w	r3, r3, #4
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009450:	460b      	mov	r3, r1
 8009452:	4313      	orrs	r3, r2
 8009454:	d011      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800945a:	3308      	adds	r3, #8
 800945c:	2102      	movs	r1, #2
 800945e:	4618      	mov	r0, r3
 8009460:	f000 f87a 	bl	8009558 <RCCEx_PLL2_Config>
 8009464:	4603      	mov	r3, r0
 8009466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800946a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800947a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	2100      	movs	r1, #0
 8009484:	6139      	str	r1, [r7, #16]
 8009486:	f003 0308 	and.w	r3, r3, #8
 800948a:	617b      	str	r3, [r7, #20]
 800948c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009490:	460b      	mov	r3, r1
 8009492:	4313      	orrs	r3, r2
 8009494:	d011      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800949a:	3328      	adds	r3, #40	; 0x28
 800949c:	2100      	movs	r1, #0
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 f90c 	bl	80096bc <RCCEx_PLL3_Config>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80094aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80094ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	2100      	movs	r1, #0
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094d0:	460b      	mov	r3, r1
 80094d2:	4313      	orrs	r3, r2
 80094d4:	d011      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094da:	3328      	adds	r3, #40	; 0x28
 80094dc:	2101      	movs	r1, #1
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 f8ec 	bl	80096bc <RCCEx_PLL3_Config>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80094ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80094fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	2100      	movs	r1, #0
 8009504:	6039      	str	r1, [r7, #0]
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	607b      	str	r3, [r7, #4]
 800950c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009510:	460b      	mov	r3, r1
 8009512:	4313      	orrs	r3, r2
 8009514:	d011      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951a:	3328      	adds	r3, #40	; 0x28
 800951c:	2102      	movs	r1, #2
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f8cc 	bl	80096bc <RCCEx_PLL3_Config>
 8009524:	4603      	mov	r3, r0
 8009526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800952a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800953a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	e000      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
}
 8009548:	4618      	mov	r0, r3
 800954a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800954e:	46bd      	mov	sp, r7
 8009550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009554:	58024400 	.word	0x58024400

08009558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009566:	4b53      	ldr	r3, [pc, #332]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956a:	f003 0303 	and.w	r3, r3, #3
 800956e:	2b03      	cmp	r3, #3
 8009570:	d101      	bne.n	8009576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e099      	b.n	80096aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009576:	4b4f      	ldr	r3, [pc, #316]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a4e      	ldr	r2, [pc, #312]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800957c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009582:	f7fa f8c3 	bl	800370c <HAL_GetTick>
 8009586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009588:	e008      	b.n	800959c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800958a:	f7fa f8bf 	bl	800370c <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	2b02      	cmp	r3, #2
 8009596:	d901      	bls.n	800959c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e086      	b.n	80096aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800959c:	4b45      	ldr	r3, [pc, #276]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1f0      	bne.n	800958a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80095a8:	4b42      	ldr	r3, [pc, #264]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	031b      	lsls	r3, r3, #12
 80095b6:	493f      	ldr	r1, [pc, #252]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	628b      	str	r3, [r1, #40]	; 0x28
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	3b01      	subs	r3, #1
 80095c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	025b      	lsls	r3, r3, #9
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	431a      	orrs	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	041b      	lsls	r3, r3, #16
 80095da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	061b      	lsls	r3, r3, #24
 80095e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095ec:	4931      	ldr	r1, [pc, #196]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095f2:	4b30      	ldr	r3, [pc, #192]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	492d      	ldr	r1, [pc, #180]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009600:	4313      	orrs	r3, r2
 8009602:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009604:	4b2b      	ldr	r3, [pc, #172]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	f023 0220 	bic.w	r2, r3, #32
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	4928      	ldr	r1, [pc, #160]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009612:	4313      	orrs	r3, r2
 8009614:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009616:	4b27      	ldr	r3, [pc, #156]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	4a26      	ldr	r2, [pc, #152]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800961c:	f023 0310 	bic.w	r3, r3, #16
 8009620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009622:	4b24      	ldr	r3, [pc, #144]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009626:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <RCCEx_PLL2_Config+0x160>)
 8009628:	4013      	ands	r3, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	69d2      	ldr	r2, [r2, #28]
 800962e:	00d2      	lsls	r2, r2, #3
 8009630:	4920      	ldr	r1, [pc, #128]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009632:	4313      	orrs	r3, r2
 8009634:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009636:	4b1f      	ldr	r3, [pc, #124]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800963c:	f043 0310 	orr.w	r3, r3, #16
 8009640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d106      	bne.n	8009656 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009648:	4b1a      	ldr	r3, [pc, #104]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	4a19      	ldr	r2, [pc, #100]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800964e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009652:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009654:	e00f      	b.n	8009676 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d106      	bne.n	800966a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800965c:	4b15      	ldr	r3, [pc, #84]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	4a14      	ldr	r2, [pc, #80]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009668:	e005      	b.n	8009676 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800966a:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800966c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966e:	4a11      	ldr	r2, [pc, #68]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009674:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009676:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a0e      	ldr	r2, [pc, #56]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800967c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009682:	f7fa f843 	bl	800370c <HAL_GetTick>
 8009686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009688:	e008      	b.n	800969c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800968a:	f7fa f83f 	bl	800370c <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	2b02      	cmp	r3, #2
 8009696:	d901      	bls.n	800969c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e006      	b.n	80096aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <RCCEx_PLL2_Config+0x15c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0f0      	beq.n	800968a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	58024400 	.word	0x58024400
 80096b8:	ffff0007 	.word	0xffff0007

080096bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096ca:	4b53      	ldr	r3, [pc, #332]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80096cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ce:	f003 0303 	and.w	r3, r3, #3
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d101      	bne.n	80096da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e099      	b.n	800980e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80096da:	4b4f      	ldr	r3, [pc, #316]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a4e      	ldr	r2, [pc, #312]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80096e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e6:	f7fa f811 	bl	800370c <HAL_GetTick>
 80096ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096ec:	e008      	b.n	8009700 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80096ee:	f7fa f80d 	bl	800370c <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d901      	bls.n	8009700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e086      	b.n	800980e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009700:	4b45      	ldr	r3, [pc, #276]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1f0      	bne.n	80096ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800970c:	4b42      	ldr	r3, [pc, #264]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800970e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009710:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	051b      	lsls	r3, r3, #20
 800971a:	493f      	ldr	r1, [pc, #252]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800971c:	4313      	orrs	r3, r2
 800971e:	628b      	str	r3, [r1, #40]	; 0x28
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	3b01      	subs	r3, #1
 8009726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	3b01      	subs	r3, #1
 8009730:	025b      	lsls	r3, r3, #9
 8009732:	b29b      	uxth	r3, r3
 8009734:	431a      	orrs	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	3b01      	subs	r3, #1
 800973c:	041b      	lsls	r3, r3, #16
 800973e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009742:	431a      	orrs	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	3b01      	subs	r3, #1
 800974a:	061b      	lsls	r3, r3, #24
 800974c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009750:	4931      	ldr	r1, [pc, #196]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009752:	4313      	orrs	r3, r2
 8009754:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009756:	4b30      	ldr	r3, [pc, #192]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	492d      	ldr	r1, [pc, #180]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009764:	4313      	orrs	r3, r2
 8009766:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009768:	4b2b      	ldr	r3, [pc, #172]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	4928      	ldr	r1, [pc, #160]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009776:	4313      	orrs	r3, r2
 8009778:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800977a:	4b27      	ldr	r3, [pc, #156]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800977c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977e:	4a26      	ldr	r2, [pc, #152]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009784:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009786:	4b24      	ldr	r3, [pc, #144]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800978a:	4b24      	ldr	r3, [pc, #144]	; (800981c <RCCEx_PLL3_Config+0x160>)
 800978c:	4013      	ands	r3, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	69d2      	ldr	r2, [r2, #28]
 8009792:	00d2      	lsls	r2, r2, #3
 8009794:	4920      	ldr	r1, [pc, #128]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009796:	4313      	orrs	r3, r2
 8009798:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800979a:	4b1f      	ldr	r3, [pc, #124]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	4a1e      	ldr	r2, [pc, #120]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d106      	bne.n	80097ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80097ac:	4b1a      	ldr	r3, [pc, #104]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b0:	4a19      	ldr	r2, [pc, #100]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80097b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097b8:	e00f      	b.n	80097da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d106      	bne.n	80097ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80097c0:	4b15      	ldr	r3, [pc, #84]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	4a14      	ldr	r2, [pc, #80]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80097ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097cc:	e005      	b.n	80097da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80097ce:	4b12      	ldr	r3, [pc, #72]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	4a11      	ldr	r2, [pc, #68]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80097da:	4b0f      	ldr	r3, [pc, #60]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a0e      	ldr	r2, [pc, #56]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 80097e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097e6:	f7f9 ff91 	bl	800370c <HAL_GetTick>
 80097ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097ec:	e008      	b.n	8009800 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80097ee:	f7f9 ff8d 	bl	800370c <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d901      	bls.n	8009800 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e006      	b.n	800980e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009800:	4b05      	ldr	r3, [pc, #20]	; (8009818 <RCCEx_PLL3_Config+0x15c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d0f0      	beq.n	80097ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800980c:	7bfb      	ldrb	r3, [r7, #15]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	58024400 	.word	0x58024400
 800981c:	ffff0007 	.word	0xffff0007

08009820 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e02b      	b.n	800988c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b00      	cmp	r3, #0
 800983e:	d106      	bne.n	800984e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f825 	bl	8009898 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2202      	movs	r2, #2
 8009852:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3304      	adds	r3, #4
 800985e:	4619      	mov	r1, r3
 8009860:	4610      	mov	r0, r2
 8009862:	f001 f9af 	bl	800abc4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6818      	ldr	r0, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	461a      	mov	r2, r3
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	f001 fa03 	bl	800ac7c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009876:	4b07      	ldr	r3, [pc, #28]	; (8009894 <HAL_SDRAM_Init+0x74>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a06      	ldr	r2, [pc, #24]	; (8009894 <HAL_SDRAM_Init+0x74>)
 800987c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009880:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	52004000 	.word	0x52004000

08009898 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098be:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d101      	bne.n	80098ca <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80098c6:	2302      	movs	r3, #2
 80098c8:	e021      	b.n	800990e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d002      	beq.n	80098d6 <HAL_SDRAM_SendCommand+0x2a>
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	d118      	bne.n	8009908 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2202      	movs	r2, #2
 80098da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	68b9      	ldr	r1, [r7, #8]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f001 fa32 	bl	800ad50 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d104      	bne.n	80098fe <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2205      	movs	r2, #5
 80098f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80098fc:	e006      	b.n	800990c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009906:	e001      	b.n	800990c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e000      	b.n	800990e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b02      	cmp	r3, #2
 800992a:	d101      	bne.n	8009930 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800992c:	2302      	movs	r3, #2
 800992e:	e016      	b.n	800995e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b01      	cmp	r3, #1
 800993a:	d10f      	bne.n	800995c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2202      	movs	r2, #2
 8009940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	4618      	mov	r0, r3
 800994c:	f001 fa24 	bl	800ad98 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	e000      	b.n	800995e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e049      	b.n	8009a0c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b00      	cmp	r3, #0
 8009982:	d106      	bne.n	8009992 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f89d 	bl	8009acc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2202      	movs	r2, #2
 8009996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3304      	adds	r3, #4
 80099a2:	4619      	mov	r1, r3
 80099a4:	4610      	mov	r0, r2
 80099a6:	f000 f9f7 	bl	8009d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6a1a      	ldr	r2, [r3, #32]
 8009a2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a2e:	4013      	ands	r3, r2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10f      	bne.n	8009a54 <HAL_TIM_PWM_DeInit+0x40>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6a1a      	ldr	r2, [r3, #32]
 8009a3a:	f240 4344 	movw	r3, #1092	; 0x444
 8009a3e:	4013      	ands	r3, r2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d107      	bne.n	8009a54 <HAL_TIM_PWM_DeInit+0x40>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0201 	bic.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f843 	bl	8009ae0 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d122      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d11b      	bne.n	8009b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f06f 0202 	mvn.w	r2, #2
 8009b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f90f 	bl	8009d5a <HAL_TIM_IC_CaptureCallback>
 8009b3c:	e005      	b.n	8009b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f901 	bl	8009d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f912 	bl	8009d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	d122      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b04      	cmp	r3, #4
 8009b6a:	d11b      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f06f 0204 	mvn.w	r2, #4
 8009b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f8e5 	bl	8009d5a <HAL_TIM_IC_CaptureCallback>
 8009b90:	e005      	b.n	8009b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f8d7 	bl	8009d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f8e8 	bl	8009d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f003 0308 	and.w	r3, r3, #8
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d122      	bne.n	8009bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f003 0308 	and.w	r3, r3, #8
 8009bbc:	2b08      	cmp	r3, #8
 8009bbe:	d11b      	bne.n	8009bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f06f 0208 	mvn.w	r2, #8
 8009bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2204      	movs	r2, #4
 8009bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	f003 0303 	and.w	r3, r3, #3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f8bb 	bl	8009d5a <HAL_TIM_IC_CaptureCallback>
 8009be4:	e005      	b.n	8009bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f8ad 	bl	8009d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f8be 	bl	8009d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	f003 0310 	and.w	r3, r3, #16
 8009c02:	2b10      	cmp	r3, #16
 8009c04:	d122      	bne.n	8009c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	f003 0310 	and.w	r3, r3, #16
 8009c10:	2b10      	cmp	r3, #16
 8009c12:	d11b      	bne.n	8009c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f06f 0210 	mvn.w	r2, #16
 8009c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2208      	movs	r2, #8
 8009c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f891 	bl	8009d5a <HAL_TIM_IC_CaptureCallback>
 8009c38:	e005      	b.n	8009c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f883 	bl	8009d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f894 	bl	8009d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d10e      	bne.n	8009c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d107      	bne.n	8009c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f06f 0201 	mvn.w	r2, #1
 8009c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f85d 	bl	8009d32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c82:	2b80      	cmp	r3, #128	; 0x80
 8009c84:	d10e      	bne.n	8009ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c90:	2b80      	cmp	r3, #128	; 0x80
 8009c92:	d107      	bne.n	8009ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f91e 	bl	8009ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb2:	d10e      	bne.n	8009cd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cbe:	2b80      	cmp	r3, #128	; 0x80
 8009cc0:	d107      	bne.n	8009cd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f911 	bl	8009ef4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cdc:	2b40      	cmp	r3, #64	; 0x40
 8009cde:	d10e      	bne.n	8009cfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cea:	2b40      	cmp	r3, #64	; 0x40
 8009cec:	d107      	bne.n	8009cfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f842 	bl	8009d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	f003 0320 	and.w	r3, r3, #32
 8009d08:	2b20      	cmp	r3, #32
 8009d0a:	d10e      	bne.n	8009d2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	f003 0320 	and.w	r3, r3, #32
 8009d16:	2b20      	cmp	r3, #32
 8009d18:	d107      	bne.n	8009d2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f06f 0220 	mvn.w	r2, #32
 8009d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f8d1 	bl	8009ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d2a:	bf00      	nop
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d3a:	bf00      	nop
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a40      	ldr	r2, [pc, #256]	; (8009eac <TIM_Base_SetConfig+0x114>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d013      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009db6:	d00f      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a3d      	ldr	r2, [pc, #244]	; (8009eb0 <TIM_Base_SetConfig+0x118>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d00b      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a3c      	ldr	r2, [pc, #240]	; (8009eb4 <TIM_Base_SetConfig+0x11c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d007      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a3b      	ldr	r2, [pc, #236]	; (8009eb8 <TIM_Base_SetConfig+0x120>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d003      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a3a      	ldr	r2, [pc, #232]	; (8009ebc <TIM_Base_SetConfig+0x124>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d108      	bne.n	8009dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a2f      	ldr	r2, [pc, #188]	; (8009eac <TIM_Base_SetConfig+0x114>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d01f      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df8:	d01b      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a2c      	ldr	r2, [pc, #176]	; (8009eb0 <TIM_Base_SetConfig+0x118>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d017      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a2b      	ldr	r2, [pc, #172]	; (8009eb4 <TIM_Base_SetConfig+0x11c>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d013      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a2a      	ldr	r2, [pc, #168]	; (8009eb8 <TIM_Base_SetConfig+0x120>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d00f      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a29      	ldr	r2, [pc, #164]	; (8009ebc <TIM_Base_SetConfig+0x124>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d00b      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a28      	ldr	r2, [pc, #160]	; (8009ec0 <TIM_Base_SetConfig+0x128>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d007      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a27      	ldr	r2, [pc, #156]	; (8009ec4 <TIM_Base_SetConfig+0x12c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d003      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a26      	ldr	r2, [pc, #152]	; (8009ec8 <TIM_Base_SetConfig+0x130>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d108      	bne.n	8009e44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a10      	ldr	r2, [pc, #64]	; (8009eac <TIM_Base_SetConfig+0x114>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d00f      	beq.n	8009e90 <TIM_Base_SetConfig+0xf8>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a12      	ldr	r2, [pc, #72]	; (8009ebc <TIM_Base_SetConfig+0x124>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00b      	beq.n	8009e90 <TIM_Base_SetConfig+0xf8>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a11      	ldr	r2, [pc, #68]	; (8009ec0 <TIM_Base_SetConfig+0x128>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d007      	beq.n	8009e90 <TIM_Base_SetConfig+0xf8>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a10      	ldr	r2, [pc, #64]	; (8009ec4 <TIM_Base_SetConfig+0x12c>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d003      	beq.n	8009e90 <TIM_Base_SetConfig+0xf8>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a0f      	ldr	r2, [pc, #60]	; (8009ec8 <TIM_Base_SetConfig+0x130>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d103      	bne.n	8009e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	691a      	ldr	r2, [r3, #16]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	615a      	str	r2, [r3, #20]
}
 8009e9e:	bf00      	nop
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	40010000 	.word	0x40010000
 8009eb0:	40000400 	.word	0x40000400
 8009eb4:	40000800 	.word	0x40000800
 8009eb8:	40000c00 	.word	0x40000c00
 8009ebc:	40010400 	.word	0x40010400
 8009ec0:	40014000 	.word	0x40014000
 8009ec4:	40014400 	.word	0x40014400
 8009ec8:	40014800 	.word	0x40014800

08009ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08a      	sub	sp, #40	; 0x28
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	603b      	str	r3, [r7, #0]
 8009f14:	4613      	mov	r3, r2
 8009f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d17b      	bne.n	800a01a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <HAL_UART_Transmit+0x26>
 8009f28:	88fb      	ldrh	r3, [r7, #6]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e074      	b.n	800a01c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2221      	movs	r2, #33	; 0x21
 8009f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f42:	f7f9 fbe3 	bl	800370c <HAL_GetTick>
 8009f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	88fa      	ldrh	r2, [r7, #6]
 8009f4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	88fa      	ldrh	r2, [r7, #6]
 8009f54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f60:	d108      	bne.n	8009f74 <HAL_UART_Transmit+0x6c>
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d104      	bne.n	8009f74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	61bb      	str	r3, [r7, #24]
 8009f72:	e003      	b.n	8009f7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f7c:	e030      	b.n	8009fe0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2200      	movs	r2, #0
 8009f86:	2180      	movs	r1, #128	; 0x80
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 fced 	bl	800a968 <UART_WaitOnFlagUntilTimeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2220      	movs	r2, #32
 8009f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e03d      	b.n	800a01c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d10b      	bne.n	8009fbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fb4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	3302      	adds	r3, #2
 8009fba:	61bb      	str	r3, [r7, #24]
 8009fbc:	e007      	b.n	8009fce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	781a      	ldrb	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1c8      	bne.n	8009f7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2140      	movs	r1, #64	; 0x40
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 fcb6 	bl	800a968 <UART_WaitOnFlagUntilTimeout>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2220      	movs	r2, #32
 800a006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e006      	b.n	800a01c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	e000      	b.n	800a01c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a01a:	2302      	movs	r3, #2
  }
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3720      	adds	r7, #32
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08a      	sub	sp, #40	; 0x28
 800a028:	af02      	add	r7, sp, #8
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	4613      	mov	r3, r2
 800a032:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03a:	2b20      	cmp	r3, #32
 800a03c:	f040 80b5 	bne.w	800a1aa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <HAL_UART_Receive+0x28>
 800a046:	88fb      	ldrh	r3, [r7, #6]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e0ad      	b.n	800a1ac <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2222      	movs	r2, #34	; 0x22
 800a05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a066:	f7f9 fb51 	bl	800370c <HAL_GetTick>
 800a06a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	88fa      	ldrh	r2, [r7, #6]
 800a070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	88fa      	ldrh	r2, [r7, #6]
 800a078:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a084:	d10e      	bne.n	800a0a4 <HAL_UART_Receive+0x80>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d105      	bne.n	800a09a <HAL_UART_Receive+0x76>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a094:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a098:	e02d      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	22ff      	movs	r2, #255	; 0xff
 800a09e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0a2:	e028      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10d      	bne.n	800a0c8 <HAL_UART_Receive+0xa4>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d104      	bne.n	800a0be <HAL_UART_Receive+0x9a>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	22ff      	movs	r2, #255	; 0xff
 800a0b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0bc:	e01b      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	227f      	movs	r2, #127	; 0x7f
 800a0c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0c6:	e016      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0d0:	d10d      	bne.n	800a0ee <HAL_UART_Receive+0xca>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d104      	bne.n	800a0e4 <HAL_UART_Receive+0xc0>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	227f      	movs	r2, #127	; 0x7f
 800a0de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0e2:	e008      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	223f      	movs	r2, #63	; 0x3f
 800a0e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0ec:	e003      	b.n	800a0f6 <HAL_UART_Receive+0xd2>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a106:	d108      	bne.n	800a11a <HAL_UART_Receive+0xf6>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d104      	bne.n	800a11a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a110:	2300      	movs	r3, #0
 800a112:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	61bb      	str	r3, [r7, #24]
 800a118:	e003      	b.n	800a122 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a122:	e036      	b.n	800a192 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2200      	movs	r2, #0
 800a12c:	2120      	movs	r1, #32
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 fc1a 	bl	800a968 <UART_WaitOnFlagUntilTimeout>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d005      	beq.n	800a146 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2220      	movs	r2, #32
 800a13e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e032      	b.n	800a1ac <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10c      	bne.n	800a166 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a152:	b29a      	uxth	r2, r3
 800a154:	8a7b      	ldrh	r3, [r7, #18]
 800a156:	4013      	ands	r3, r2
 800a158:	b29a      	uxth	r2, r3
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	3302      	adds	r3, #2
 800a162:	61bb      	str	r3, [r7, #24]
 800a164:	e00c      	b.n	800a180 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	8a7b      	ldrh	r3, [r7, #18]
 800a170:	b2db      	uxtb	r3, r3
 800a172:	4013      	ands	r3, r2
 800a174:	b2da      	uxtb	r2, r3
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	3301      	adds	r3, #1
 800a17e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a186:	b29b      	uxth	r3, r3
 800a188:	3b01      	subs	r3, #1
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1c2      	bne.n	800a124 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2220      	movs	r2, #32
 800a1a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e000      	b.n	800a1ac <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800a1aa:	2302      	movs	r3, #2
  }
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b0ba      	sub	sp, #232	; 0xe8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a1da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a1de:	f640 030f 	movw	r3, #2063	; 0x80f
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a1e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d11b      	bne.n	800a228 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1f4:	f003 0320 	and.w	r3, r3, #32
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d015      	beq.n	800a228 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b00      	cmp	r3, #0
 800a206:	d105      	bne.n	800a214 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a20c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d009      	beq.n	800a228 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 8377 	beq.w	800a90c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	4798      	blx	r3
      }
      return;
 800a226:	e371      	b.n	800a90c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 8123 	beq.w	800a478 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a232:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a236:	4b8d      	ldr	r3, [pc, #564]	; (800a46c <HAL_UART_IRQHandler+0x2b8>)
 800a238:	4013      	ands	r3, r2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d106      	bne.n	800a24c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a23e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a242:	4b8b      	ldr	r3, [pc, #556]	; (800a470 <HAL_UART_IRQHandler+0x2bc>)
 800a244:	4013      	ands	r3, r2
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 8116 	beq.w	800a478 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a250:	f003 0301 	and.w	r3, r3, #1
 800a254:	2b00      	cmp	r3, #0
 800a256:	d011      	beq.n	800a27c <HAL_UART_IRQHandler+0xc8>
 800a258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a25c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00b      	beq.n	800a27c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2201      	movs	r2, #1
 800a26a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a272:	f043 0201 	orr.w	r2, r3, #1
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b00      	cmp	r3, #0
 800a286:	d011      	beq.n	800a2ac <HAL_UART_IRQHandler+0xf8>
 800a288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	2b00      	cmp	r3, #0
 800a292:	d00b      	beq.n	800a2ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2202      	movs	r2, #2
 800a29a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a2:	f043 0204 	orr.w	r2, r3, #4
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d011      	beq.n	800a2dc <HAL_UART_IRQHandler+0x128>
 800a2b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2bc:	f003 0301 	and.w	r3, r3, #1
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2204      	movs	r2, #4
 800a2ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d2:	f043 0202 	orr.w	r2, r3, #2
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e0:	f003 0308 	and.w	r3, r3, #8
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d017      	beq.n	800a318 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ec:	f003 0320 	and.w	r3, r3, #32
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d105      	bne.n	800a300 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a2f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a2f8:	4b5c      	ldr	r3, [pc, #368]	; (800a46c <HAL_UART_IRQHandler+0x2b8>)
 800a2fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00b      	beq.n	800a318 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2208      	movs	r2, #8
 800a306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a30e:	f043 0208 	orr.w	r2, r3, #8
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a320:	2b00      	cmp	r3, #0
 800a322:	d012      	beq.n	800a34a <HAL_UART_IRQHandler+0x196>
 800a324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00c      	beq.n	800a34a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a340:	f043 0220 	orr.w	r2, r3, #32
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 82dd 	beq.w	800a910 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a35a:	f003 0320 	and.w	r3, r3, #32
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d013      	beq.n	800a38a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a366:	f003 0320 	and.w	r3, r3, #32
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d105      	bne.n	800a37a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a36e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d007      	beq.n	800a38a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a390:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39e:	2b40      	cmp	r3, #64	; 0x40
 800a3a0:	d005      	beq.n	800a3ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a3a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d054      	beq.n	800a458 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fb42 	bl	800aa38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3be:	2b40      	cmp	r3, #64	; 0x40
 800a3c0:	d146      	bne.n	800a450 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3d0:	e853 3f00 	ldrex	r3, [r3]
 800a3d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a3d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3308      	adds	r3, #8
 800a3ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a3ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a3f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a3fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1d9      	bne.n	800a3c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a414:	2b00      	cmp	r3, #0
 800a416:	d017      	beq.n	800a448 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a41e:	4a15      	ldr	r2, [pc, #84]	; (800a474 <HAL_UART_IRQHandler+0x2c0>)
 800a420:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a428:	4618      	mov	r0, r3
 800a42a:	f7f9 fde9 	bl	8004000 <HAL_DMA_Abort_IT>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d019      	beq.n	800a468 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a442:	4610      	mov	r0, r2
 800a444:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a446:	e00f      	b.n	800a468 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fa77 	bl	800a93c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a44e:	e00b      	b.n	800a468 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fa73 	bl	800a93c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a456:	e007      	b.n	800a468 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fa6f 	bl	800a93c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a466:	e253      	b.n	800a910 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a468:	bf00      	nop
    return;
 800a46a:	e251      	b.n	800a910 <HAL_UART_IRQHandler+0x75c>
 800a46c:	10000001 	.word	0x10000001
 800a470:	04000120 	.word	0x04000120
 800a474:	0800ab05 	.word	0x0800ab05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	f040 81e7 	bne.w	800a850 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a486:	f003 0310 	and.w	r3, r3, #16
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 81e0 	beq.w	800a850 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a494:	f003 0310 	and.w	r3, r3, #16
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 81d9 	beq.w	800a850 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2210      	movs	r2, #16
 800a4a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b0:	2b40      	cmp	r3, #64	; 0x40
 800a4b2:	f040 8151 	bne.w	800a758 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a96      	ldr	r2, [pc, #600]	; (800a718 <HAL_UART_IRQHandler+0x564>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d068      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a93      	ldr	r2, [pc, #588]	; (800a71c <HAL_UART_IRQHandler+0x568>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d061      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a91      	ldr	r2, [pc, #580]	; (800a720 <HAL_UART_IRQHandler+0x56c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d05a      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a8e      	ldr	r2, [pc, #568]	; (800a724 <HAL_UART_IRQHandler+0x570>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d053      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a8c      	ldr	r2, [pc, #560]	; (800a728 <HAL_UART_IRQHandler+0x574>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d04c      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a89      	ldr	r2, [pc, #548]	; (800a72c <HAL_UART_IRQHandler+0x578>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d045      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a87      	ldr	r2, [pc, #540]	; (800a730 <HAL_UART_IRQHandler+0x57c>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d03e      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a84      	ldr	r2, [pc, #528]	; (800a734 <HAL_UART_IRQHandler+0x580>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d037      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a82      	ldr	r2, [pc, #520]	; (800a738 <HAL_UART_IRQHandler+0x584>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d030      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a7f      	ldr	r2, [pc, #508]	; (800a73c <HAL_UART_IRQHandler+0x588>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d029      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a7d      	ldr	r2, [pc, #500]	; (800a740 <HAL_UART_IRQHandler+0x58c>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d022      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a7a      	ldr	r2, [pc, #488]	; (800a744 <HAL_UART_IRQHandler+0x590>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d01b      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a78      	ldr	r2, [pc, #480]	; (800a748 <HAL_UART_IRQHandler+0x594>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d014      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a75      	ldr	r2, [pc, #468]	; (800a74c <HAL_UART_IRQHandler+0x598>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d00d      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a73      	ldr	r2, [pc, #460]	; (800a750 <HAL_UART_IRQHandler+0x59c>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d006      	beq.n	800a596 <HAL_UART_IRQHandler+0x3e2>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a70      	ldr	r2, [pc, #448]	; (800a754 <HAL_UART_IRQHandler+0x5a0>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d106      	bne.n	800a5a4 <HAL_UART_IRQHandler+0x3f0>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	e005      	b.n	800a5b0 <HAL_UART_IRQHandler+0x3fc>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a5b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f000 81ab 	beq.w	800a914 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	f080 81a3 	bcs.w	800a914 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a5d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e4:	f000 8087 	beq.w	800a6f6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5f4:	e853 3f00 	ldrex	r3, [r3]
 800a5f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a5fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	461a      	mov	r2, r3
 800a60e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a616:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a61e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a62a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1da      	bne.n	800a5e8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3308      	adds	r3, #8
 800a638:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a644:	f023 0301 	bic.w	r3, r3, #1
 800a648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3308      	adds	r3, #8
 800a652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a656:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a65a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a65e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a662:	e841 2300 	strex	r3, r2, [r1]
 800a666:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1e1      	bne.n	800a632 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	3308      	adds	r3, #8
 800a674:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a67e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3308      	adds	r3, #8
 800a68e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a692:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a694:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a698:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a6a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e3      	bne.n	800a66e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6bc:	e853 3f00 	ldrex	r3, [r3]
 800a6c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6c4:	f023 0310 	bic.w	r3, r3, #16
 800a6c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6de:	e841 2300 	strex	r3, r2, [r1]
 800a6e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e4      	bne.n	800a6b4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7f9 f967 	bl	80039c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a708:	b29b      	uxth	r3, r3
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f91d 	bl	800a950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a716:	e0fd      	b.n	800a914 <HAL_UART_IRQHandler+0x760>
 800a718:	40020010 	.word	0x40020010
 800a71c:	40020028 	.word	0x40020028
 800a720:	40020040 	.word	0x40020040
 800a724:	40020058 	.word	0x40020058
 800a728:	40020070 	.word	0x40020070
 800a72c:	40020088 	.word	0x40020088
 800a730:	400200a0 	.word	0x400200a0
 800a734:	400200b8 	.word	0x400200b8
 800a738:	40020410 	.word	0x40020410
 800a73c:	40020428 	.word	0x40020428
 800a740:	40020440 	.word	0x40020440
 800a744:	40020458 	.word	0x40020458
 800a748:	40020470 	.word	0x40020470
 800a74c:	40020488 	.word	0x40020488
 800a750:	400204a0 	.word	0x400204a0
 800a754:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a764:	b29b      	uxth	r3, r3
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a772:	b29b      	uxth	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 80cf 	beq.w	800a918 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a77a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 80ca 	beq.w	800a918 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78c:	e853 3f00 	ldrex	r3, [r3]
 800a790:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7a6:	647b      	str	r3, [r7, #68]	; 0x44
 800a7a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7ae:	e841 2300 	strex	r3, r2, [r1]
 800a7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1e4      	bne.n	800a784 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3308      	adds	r3, #8
 800a7c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ca:	6a3a      	ldr	r2, [r7, #32]
 800a7cc:	4b55      	ldr	r3, [pc, #340]	; (800a924 <HAL_UART_IRQHandler+0x770>)
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3308      	adds	r3, #8
 800a7da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a7de:	633a      	str	r2, [r7, #48]	; 0x30
 800a7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e3      	bne.n	800a7ba <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	e853 3f00 	ldrex	r3, [r3]
 800a812:	60fb      	str	r3, [r7, #12]
   return(result);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f023 0310 	bic.w	r3, r3, #16
 800a81a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a828:	61fb      	str	r3, [r7, #28]
 800a82a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82c:	69b9      	ldr	r1, [r7, #24]
 800a82e:	69fa      	ldr	r2, [r7, #28]
 800a830:	e841 2300 	strex	r3, r2, [r1]
 800a834:	617b      	str	r3, [r7, #20]
   return(result);
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1e4      	bne.n	800a806 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2202      	movs	r2, #2
 800a840:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f881 	bl	800a950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a84e:	e063      	b.n	800a918 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00e      	beq.n	800a87a <HAL_UART_IRQHandler+0x6c6>
 800a85c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d008      	beq.n	800a87a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f987 	bl	800ab86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a878:	e051      	b.n	800a91e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a87a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a882:	2b00      	cmp	r3, #0
 800a884:	d014      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d105      	bne.n	800a89e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a896:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d008      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d03a      	beq.n	800a91c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	4798      	blx	r3
    }
    return;
 800a8ae:	e035      	b.n	800a91c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d009      	beq.n	800a8d0 <HAL_UART_IRQHandler+0x71c>
 800a8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f931 	bl	800ab30 <UART_EndTransmit_IT>
    return;
 800a8ce:	e026      	b.n	800a91e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a8d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d009      	beq.n	800a8f0 <HAL_UART_IRQHandler+0x73c>
 800a8dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f960 	bl	800abae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a8ee:	e016      	b.n	800a91e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d010      	beq.n	800a91e <HAL_UART_IRQHandler+0x76a>
 800a8fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a900:	2b00      	cmp	r3, #0
 800a902:	da0c      	bge.n	800a91e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f948 	bl	800ab9a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a90a:	e008      	b.n	800a91e <HAL_UART_IRQHandler+0x76a>
      return;
 800a90c:	bf00      	nop
 800a90e:	e006      	b.n	800a91e <HAL_UART_IRQHandler+0x76a>
    return;
 800a910:	bf00      	nop
 800a912:	e004      	b.n	800a91e <HAL_UART_IRQHandler+0x76a>
      return;
 800a914:	bf00      	nop
 800a916:	e002      	b.n	800a91e <HAL_UART_IRQHandler+0x76a>
      return;
 800a918:	bf00      	nop
 800a91a:	e000      	b.n	800a91e <HAL_UART_IRQHandler+0x76a>
    return;
 800a91c:	bf00      	nop
  }
}
 800a91e:	37e8      	adds	r7, #232	; 0xe8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	effffffe 	.word	0xeffffffe

0800a928 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	4613      	mov	r3, r2
 800a976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a978:	e049      	b.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d045      	beq.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a982:	f7f8 fec3 	bl	800370c <HAL_GetTick>
 800a986:	4602      	mov	r2, r0
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	1ad3      	subs	r3, r2, r3
 800a98c:	69ba      	ldr	r2, [r7, #24]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d302      	bcc.n	800a998 <UART_WaitOnFlagUntilTimeout+0x30>
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e048      	b.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0304 	and.w	r3, r3, #4
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d031      	beq.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	69db      	ldr	r3, [r3, #28]
 800a9b0:	f003 0308 	and.w	r3, r3, #8
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d110      	bne.n	800a9da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2208      	movs	r2, #8
 800a9be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f839 	bl	800aa38 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2208      	movs	r2, #8
 800a9ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e029      	b.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9e8:	d111      	bne.n	800aa0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 f81f 	bl	800aa38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e00f      	b.n	800aa2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	69da      	ldr	r2, [r3, #28]
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	4013      	ands	r3, r2
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	bf0c      	ite	eq
 800aa1e:	2301      	moveq	r3, #1
 800aa20:	2300      	movne	r3, #0
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	461a      	mov	r2, r3
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d0a6      	beq.n	800a97a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b095      	sub	sp, #84	; 0x54
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa54:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa5e:	643b      	str	r3, [r7, #64]	; 0x40
 800aa60:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e6      	bne.n	800aa40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3308      	adds	r3, #8
 800aa78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	e853 3f00 	ldrex	r3, [r3]
 800aa80:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa82:	69fa      	ldr	r2, [r7, #28]
 800aa84:	4b1e      	ldr	r3, [pc, #120]	; (800ab00 <UART_EndRxTransfer+0xc8>)
 800aa86:	4013      	ands	r3, r2
 800aa88:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3308      	adds	r3, #8
 800aa90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa92:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e5      	bne.n	800aa72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d118      	bne.n	800aae0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	e853 3f00 	ldrex	r3, [r3]
 800aaba:	60bb      	str	r3, [r7, #8]
   return(result);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	f023 0310 	bic.w	r3, r3, #16
 800aac2:	647b      	str	r3, [r7, #68]	; 0x44
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	461a      	mov	r2, r3
 800aaca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aacc:	61bb      	str	r3, [r7, #24]
 800aace:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad0:	6979      	ldr	r1, [r7, #20]
 800aad2:	69ba      	ldr	r2, [r7, #24]
 800aad4:	e841 2300 	strex	r3, r2, [r1]
 800aad8:	613b      	str	r3, [r7, #16]
   return(result);
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1e6      	bne.n	800aaae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2220      	movs	r2, #32
 800aae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aaf4:	bf00      	nop
 800aaf6:	3754      	adds	r7, #84	; 0x54
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	effffffe 	.word	0xeffffffe

0800ab04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7ff ff0a 	bl	800a93c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab28:	bf00      	nop
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	e853 3f00 	ldrex	r3, [r3]
 800ab44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab4c:	61fb      	str	r3, [r7, #28]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	61bb      	str	r3, [r7, #24]
 800ab58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5a:	6979      	ldr	r1, [r7, #20]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	e841 2300 	strex	r3, r2, [r1]
 800ab62:	613b      	str	r3, [r7, #16]
   return(result);
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1e6      	bne.n	800ab38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff fed5 	bl	800a928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab7e:	bf00      	nop
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
	...

0800abc4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d121      	bne.n	800ac1a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	4b27      	ldr	r3, [pc, #156]	; (800ac78 <FMC_SDRAM_Init+0xb4>)
 800abdc:	4013      	ands	r3, r2
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	6851      	ldr	r1, [r2, #4]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	6892      	ldr	r2, [r2, #8]
 800abe6:	4311      	orrs	r1, r2
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	68d2      	ldr	r2, [r2, #12]
 800abec:	4311      	orrs	r1, r2
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	6912      	ldr	r2, [r2, #16]
 800abf2:	4311      	orrs	r1, r2
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	6952      	ldr	r2, [r2, #20]
 800abf8:	4311      	orrs	r1, r2
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	6992      	ldr	r2, [r2, #24]
 800abfe:	4311      	orrs	r1, r2
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	69d2      	ldr	r2, [r2, #28]
 800ac04:	4311      	orrs	r1, r2
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	6a12      	ldr	r2, [r2, #32]
 800ac0a:	4311      	orrs	r1, r2
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac10:	430a      	orrs	r2, r1
 800ac12:	431a      	orrs	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	e026      	b.n	800ac68 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	69d9      	ldr	r1, [r3, #28]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	4319      	orrs	r1, r3
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	430b      	orrs	r3, r1
 800ac32:	431a      	orrs	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	4b0e      	ldr	r3, [pc, #56]	; (800ac78 <FMC_SDRAM_Init+0xb4>)
 800ac3e:	4013      	ands	r3, r2
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	6851      	ldr	r1, [r2, #4]
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	6892      	ldr	r2, [r2, #8]
 800ac48:	4311      	orrs	r1, r2
 800ac4a:	683a      	ldr	r2, [r7, #0]
 800ac4c:	68d2      	ldr	r2, [r2, #12]
 800ac4e:	4311      	orrs	r1, r2
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	6912      	ldr	r2, [r2, #16]
 800ac54:	4311      	orrs	r1, r2
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	6952      	ldr	r2, [r2, #20]
 800ac5a:	4311      	orrs	r1, r2
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	6992      	ldr	r2, [r2, #24]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	431a      	orrs	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	370c      	adds	r7, #12
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	ffff8000 	.word	0xffff8000

0800ac7c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d128      	bne.n	800ace0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	1e59      	subs	r1, r3, #1
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	4319      	orrs	r1, r3
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	3b01      	subs	r3, #1
 800acac:	021b      	lsls	r3, r3, #8
 800acae:	4319      	orrs	r1, r3
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	031b      	lsls	r3, r3, #12
 800acb8:	4319      	orrs	r1, r3
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	3b01      	subs	r3, #1
 800acc0:	041b      	lsls	r3, r3, #16
 800acc2:	4319      	orrs	r1, r3
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	3b01      	subs	r3, #1
 800acca:	051b      	lsls	r3, r3, #20
 800accc:	4319      	orrs	r1, r3
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	3b01      	subs	r3, #1
 800acd4:	061b      	lsls	r3, r3, #24
 800acd6:	430b      	orrs	r3, r1
 800acd8:	431a      	orrs	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	609a      	str	r2, [r3, #8]
 800acde:	e02d      	b.n	800ad3c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	4b19      	ldr	r3, [pc, #100]	; (800ad4c <FMC_SDRAM_Timing_Init+0xd0>)
 800ace6:	4013      	ands	r3, r2
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	68d2      	ldr	r2, [r2, #12]
 800acec:	3a01      	subs	r2, #1
 800acee:	0311      	lsls	r1, r2, #12
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	6952      	ldr	r2, [r2, #20]
 800acf4:	3a01      	subs	r2, #1
 800acf6:	0512      	lsls	r2, r2, #20
 800acf8:	430a      	orrs	r2, r1
 800acfa:	431a      	orrs	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	1e59      	subs	r1, r3, #1
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	3b01      	subs	r3, #1
 800ad14:	011b      	lsls	r3, r3, #4
 800ad16:	4319      	orrs	r1, r3
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	021b      	lsls	r3, r3, #8
 800ad20:	4319      	orrs	r1, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	041b      	lsls	r3, r3, #16
 800ad2a:	4319      	orrs	r1, r3
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	061b      	lsls	r3, r3, #24
 800ad34:	430b      	orrs	r3, r1
 800ad36:	431a      	orrs	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	ff0f0fff 	.word	0xff0f0fff

0800ad50 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	691a      	ldr	r2, [r3, #16]
 800ad60:	4b0c      	ldr	r3, [pc, #48]	; (800ad94 <FMC_SDRAM_SendCommand+0x44>)
 800ad62:	4013      	ands	r3, r2
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	6811      	ldr	r1, [r2, #0]
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	6852      	ldr	r2, [r2, #4]
 800ad6c:	4311      	orrs	r1, r2
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	6892      	ldr	r2, [r2, #8]
 800ad72:	3a01      	subs	r2, #1
 800ad74:	0152      	lsls	r2, r2, #5
 800ad76:	4311      	orrs	r1, r2
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	68d2      	ldr	r2, [r2, #12]
 800ad7c:	0252      	lsls	r2, r2, #9
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	431a      	orrs	r2, r3
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr
 800ad94:	ffc00000 	.word	0xffc00000

0800ad98 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	695a      	ldr	r2, [r3, #20]
 800ada6:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	0052      	lsls	r2, r2, #1
 800adae:	431a      	orrs	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	ffffc001 	.word	0xffffc001

0800adc8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	689a      	ldr	r2, [r3, #8]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	601a      	str	r2, [r3, #0]
}
 800ae04:	bf00      	nop
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	6892      	ldr	r2, [r2, #8]
 800ae26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	6852      	ldr	r2, [r2, #4]
 800ae30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d103      	bne.n	800ae44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	689a      	ldr	r2, [r3, #8]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	1e5a      	subs	r2, r3, #1
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae6e:	4b4f      	ldr	r3, [pc, #316]	; (800afac <xTaskIncrementTick+0x148>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f040 808f 	bne.w	800af96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae78:	4b4d      	ldr	r3, [pc, #308]	; (800afb0 <xTaskIncrementTick+0x14c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae80:	4a4b      	ldr	r2, [pc, #300]	; (800afb0 <xTaskIncrementTick+0x14c>)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d120      	bne.n	800aece <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae8c:	4b49      	ldr	r3, [pc, #292]	; (800afb4 <xTaskIncrementTick+0x150>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00a      	beq.n	800aeac <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aea8:	bf00      	nop
 800aeaa:	e7fe      	b.n	800aeaa <xTaskIncrementTick+0x46>
 800aeac:	4b41      	ldr	r3, [pc, #260]	; (800afb4 <xTaskIncrementTick+0x150>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	60fb      	str	r3, [r7, #12]
 800aeb2:	4b41      	ldr	r3, [pc, #260]	; (800afb8 <xTaskIncrementTick+0x154>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a3f      	ldr	r2, [pc, #252]	; (800afb4 <xTaskIncrementTick+0x150>)
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	4a3f      	ldr	r2, [pc, #252]	; (800afb8 <xTaskIncrementTick+0x154>)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	4b3e      	ldr	r3, [pc, #248]	; (800afbc <xTaskIncrementTick+0x158>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3301      	adds	r3, #1
 800aec6:	4a3d      	ldr	r2, [pc, #244]	; (800afbc <xTaskIncrementTick+0x158>)
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	f000 f8e3 	bl	800b094 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aece:	4b3c      	ldr	r3, [pc, #240]	; (800afc0 <xTaskIncrementTick+0x15c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d349      	bcc.n	800af6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aed8:	4b36      	ldr	r3, [pc, #216]	; (800afb4 <xTaskIncrementTick+0x150>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d104      	bne.n	800aeec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aee2:	4b37      	ldr	r3, [pc, #220]	; (800afc0 <xTaskIncrementTick+0x15c>)
 800aee4:	f04f 32ff 	mov.w	r2, #4294967295
 800aee8:	601a      	str	r2, [r3, #0]
					break;
 800aeea:	e03f      	b.n	800af6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeec:	4b31      	ldr	r3, [pc, #196]	; (800afb4 <xTaskIncrementTick+0x150>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aefc:	693a      	ldr	r2, [r7, #16]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	429a      	cmp	r2, r3
 800af02:	d203      	bcs.n	800af0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af04:	4a2e      	ldr	r2, [pc, #184]	; (800afc0 <xTaskIncrementTick+0x15c>)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af0a:	e02f      	b.n	800af6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	3304      	adds	r3, #4
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff ff7d 	bl	800ae10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d004      	beq.n	800af28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	3318      	adds	r3, #24
 800af22:	4618      	mov	r0, r3
 800af24:	f7ff ff74 	bl	800ae10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2c:	4b25      	ldr	r3, [pc, #148]	; (800afc4 <xTaskIncrementTick+0x160>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	429a      	cmp	r2, r3
 800af32:	d903      	bls.n	800af3c <xTaskIncrementTick+0xd8>
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	4a22      	ldr	r2, [pc, #136]	; (800afc4 <xTaskIncrementTick+0x160>)
 800af3a:	6013      	str	r3, [r2, #0]
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4a1f      	ldr	r2, [pc, #124]	; (800afc8 <xTaskIncrementTick+0x164>)
 800af4a:	441a      	add	r2, r3
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	3304      	adds	r3, #4
 800af50:	4619      	mov	r1, r3
 800af52:	4610      	mov	r0, r2
 800af54:	f7ff ff38 	bl	800adc8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5c:	4b1b      	ldr	r3, [pc, #108]	; (800afcc <xTaskIncrementTick+0x168>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af62:	429a      	cmp	r2, r3
 800af64:	d3b8      	bcc.n	800aed8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af66:	2301      	movs	r3, #1
 800af68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af6a:	e7b5      	b.n	800aed8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af6c:	4b17      	ldr	r3, [pc, #92]	; (800afcc <xTaskIncrementTick+0x168>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af72:	4915      	ldr	r1, [pc, #84]	; (800afc8 <xTaskIncrementTick+0x164>)
 800af74:	4613      	mov	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	440b      	add	r3, r1
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d901      	bls.n	800af88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af84:	2301      	movs	r3, #1
 800af86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af88:	4b11      	ldr	r3, [pc, #68]	; (800afd0 <xTaskIncrementTick+0x16c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d007      	beq.n	800afa0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af90:	2301      	movs	r3, #1
 800af92:	617b      	str	r3, [r7, #20]
 800af94:	e004      	b.n	800afa0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af96:	4b0f      	ldr	r3, [pc, #60]	; (800afd4 <xTaskIncrementTick+0x170>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3301      	adds	r3, #1
 800af9c:	4a0d      	ldr	r2, [pc, #52]	; (800afd4 <xTaskIncrementTick+0x170>)
 800af9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800afa0:	697b      	ldr	r3, [r7, #20]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	24001498 	.word	0x24001498
 800afb0:	2400147c 	.word	0x2400147c
 800afb4:	24001474 	.word	0x24001474
 800afb8:	24001478 	.word	0x24001478
 800afbc:	24001490 	.word	0x24001490
 800afc0:	24001494 	.word	0x24001494
 800afc4:	24001480 	.word	0x24001480
 800afc8:	24001014 	.word	0x24001014
 800afcc:	24001010 	.word	0x24001010
 800afd0:	2400148c 	.word	0x2400148c
 800afd4:	24001488 	.word	0x24001488

0800afd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afde:	4b28      	ldr	r3, [pc, #160]	; (800b080 <vTaskSwitchContext+0xa8>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d003      	beq.n	800afee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800afe6:	4b27      	ldr	r3, [pc, #156]	; (800b084 <vTaskSwitchContext+0xac>)
 800afe8:	2201      	movs	r2, #1
 800afea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800afec:	e041      	b.n	800b072 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800afee:	4b25      	ldr	r3, [pc, #148]	; (800b084 <vTaskSwitchContext+0xac>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aff4:	4b24      	ldr	r3, [pc, #144]	; (800b088 <vTaskSwitchContext+0xb0>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	e010      	b.n	800b01e <vTaskSwitchContext+0x46>
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10a      	bne.n	800b018 <vTaskSwitchContext+0x40>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	607b      	str	r3, [r7, #4]
}
 800b014:	bf00      	nop
 800b016:	e7fe      	b.n	800b016 <vTaskSwitchContext+0x3e>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	60fb      	str	r3, [r7, #12]
 800b01e:	491b      	ldr	r1, [pc, #108]	; (800b08c <vTaskSwitchContext+0xb4>)
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	4613      	mov	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	440b      	add	r3, r1
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0e4      	beq.n	800affc <vTaskSwitchContext+0x24>
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	4613      	mov	r3, r2
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	4413      	add	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4a13      	ldr	r2, [pc, #76]	; (800b08c <vTaskSwitchContext+0xb4>)
 800b03e:	4413      	add	r3, r2
 800b040:	60bb      	str	r3, [r7, #8]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	605a      	str	r2, [r3, #4]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	3308      	adds	r3, #8
 800b054:	429a      	cmp	r2, r3
 800b056:	d104      	bne.n	800b062 <vTaskSwitchContext+0x8a>
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	605a      	str	r2, [r3, #4]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	4a09      	ldr	r2, [pc, #36]	; (800b090 <vTaskSwitchContext+0xb8>)
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	4a06      	ldr	r2, [pc, #24]	; (800b088 <vTaskSwitchContext+0xb0>)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6013      	str	r3, [r2, #0]
}
 800b072:	bf00      	nop
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	24001498 	.word	0x24001498
 800b084:	2400148c 	.word	0x2400148c
 800b088:	24001480 	.word	0x24001480
 800b08c:	24001014 	.word	0x24001014
 800b090:	24001010 	.word	0x24001010

0800b094 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b09a:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <prvResetNextTaskUnblockTime+0x38>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d104      	bne.n	800b0ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0a4:	4b0a      	ldr	r3, [pc, #40]	; (800b0d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0ac:	e008      	b.n	800b0c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ae:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <prvResetNextTaskUnblockTime+0x38>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	4a04      	ldr	r2, [pc, #16]	; (800b0d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b0be:	6013      	str	r3, [r2, #0]
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	24001474 	.word	0x24001474
 800b0d0:	24001494 	.word	0x24001494

0800b0d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0da:	4b0b      	ldr	r3, [pc, #44]	; (800b108 <xTaskGetSchedulerState+0x34>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d102      	bne.n	800b0e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	607b      	str	r3, [r7, #4]
 800b0e6:	e008      	b.n	800b0fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0e8:	4b08      	ldr	r3, [pc, #32]	; (800b10c <xTaskGetSchedulerState+0x38>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d102      	bne.n	800b0f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	607b      	str	r3, [r7, #4]
 800b0f4:	e001      	b.n	800b0fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0fa:	687b      	ldr	r3, [r7, #4]
	}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	24001484 	.word	0x24001484
 800b10c:	24001498 	.word	0x24001498

0800b110 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b110:	4b07      	ldr	r3, [pc, #28]	; (800b130 <pxCurrentTCBConst2>)
 800b112:	6819      	ldr	r1, [r3, #0]
 800b114:	6808      	ldr	r0, [r1, #0]
 800b116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11a:	f380 8809 	msr	PSP, r0
 800b11e:	f3bf 8f6f 	isb	sy
 800b122:	f04f 0000 	mov.w	r0, #0
 800b126:	f380 8811 	msr	BASEPRI, r0
 800b12a:	4770      	bx	lr
 800b12c:	f3af 8000 	nop.w

0800b130 <pxCurrentTCBConst2>:
 800b130:	24001010 	.word	0x24001010
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b134:	bf00      	nop
 800b136:	bf00      	nop
	...

0800b140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b140:	f3ef 8009 	mrs	r0, PSP
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	4b15      	ldr	r3, [pc, #84]	; (800b1a0 <pxCurrentTCBConst>)
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	f01e 0f10 	tst.w	lr, #16
 800b150:	bf08      	it	eq
 800b152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15a:	6010      	str	r0, [r2, #0]
 800b15c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b160:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b164:	f380 8811 	msr	BASEPRI, r0
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f7ff ff32 	bl	800afd8 <vTaskSwitchContext>
 800b174:	f04f 0000 	mov.w	r0, #0
 800b178:	f380 8811 	msr	BASEPRI, r0
 800b17c:	bc09      	pop	{r0, r3}
 800b17e:	6819      	ldr	r1, [r3, #0]
 800b180:	6808      	ldr	r0, [r1, #0]
 800b182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b186:	f01e 0f10 	tst.w	lr, #16
 800b18a:	bf08      	it	eq
 800b18c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b190:	f380 8809 	msr	PSP, r0
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	f3af 8000 	nop.w

0800b1a0 <pxCurrentTCBConst>:
 800b1a0:	24001010 	.word	0x24001010
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop

0800b1a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	607b      	str	r3, [r7, #4]
}
 800b1c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1c2:	f7ff fe4f 	bl	800ae64 <xTaskIncrementTick>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d003      	beq.n	800b1d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1cc:	4b06      	ldr	r3, [pc, #24]	; (800b1e8 <xPortSysTickHandler+0x40>)
 800b1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b1de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b1e0:	bf00      	nop
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	e000ed04 	.word	0xe000ed04

0800b1ec <malloc>:
 800b1ec:	4b02      	ldr	r3, [pc, #8]	; (800b1f8 <malloc+0xc>)
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	f000 b82b 	b.w	800b24c <_malloc_r>
 800b1f6:	bf00      	nop
 800b1f8:	24000090 	.word	0x24000090

0800b1fc <free>:
 800b1fc:	4b02      	ldr	r3, [pc, #8]	; (800b208 <free+0xc>)
 800b1fe:	4601      	mov	r1, r0
 800b200:	6818      	ldr	r0, [r3, #0]
 800b202:	f000 bae7 	b.w	800b7d4 <_free_r>
 800b206:	bf00      	nop
 800b208:	24000090 	.word	0x24000090

0800b20c <sbrk_aligned>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4e0e      	ldr	r6, [pc, #56]	; (800b248 <sbrk_aligned+0x3c>)
 800b210:	460c      	mov	r4, r1
 800b212:	6831      	ldr	r1, [r6, #0]
 800b214:	4605      	mov	r5, r0
 800b216:	b911      	cbnz	r1, 800b21e <sbrk_aligned+0x12>
 800b218:	f000 fa60 	bl	800b6dc <_sbrk_r>
 800b21c:	6030      	str	r0, [r6, #0]
 800b21e:	4621      	mov	r1, r4
 800b220:	4628      	mov	r0, r5
 800b222:	f000 fa5b 	bl	800b6dc <_sbrk_r>
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	d00a      	beq.n	800b240 <sbrk_aligned+0x34>
 800b22a:	1cc4      	adds	r4, r0, #3
 800b22c:	f024 0403 	bic.w	r4, r4, #3
 800b230:	42a0      	cmp	r0, r4
 800b232:	d007      	beq.n	800b244 <sbrk_aligned+0x38>
 800b234:	1a21      	subs	r1, r4, r0
 800b236:	4628      	mov	r0, r5
 800b238:	f000 fa50 	bl	800b6dc <_sbrk_r>
 800b23c:	3001      	adds	r0, #1
 800b23e:	d101      	bne.n	800b244 <sbrk_aligned+0x38>
 800b240:	f04f 34ff 	mov.w	r4, #4294967295
 800b244:	4620      	mov	r0, r4
 800b246:	bd70      	pop	{r4, r5, r6, pc}
 800b248:	240014a0 	.word	0x240014a0

0800b24c <_malloc_r>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	1ccd      	adds	r5, r1, #3
 800b252:	f025 0503 	bic.w	r5, r5, #3
 800b256:	3508      	adds	r5, #8
 800b258:	2d0c      	cmp	r5, #12
 800b25a:	bf38      	it	cc
 800b25c:	250c      	movcc	r5, #12
 800b25e:	2d00      	cmp	r5, #0
 800b260:	4607      	mov	r7, r0
 800b262:	db01      	blt.n	800b268 <_malloc_r+0x1c>
 800b264:	42a9      	cmp	r1, r5
 800b266:	d905      	bls.n	800b274 <_malloc_r+0x28>
 800b268:	230c      	movs	r3, #12
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	2600      	movs	r6, #0
 800b26e:	4630      	mov	r0, r6
 800b270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b274:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b348 <_malloc_r+0xfc>
 800b278:	f000 f868 	bl	800b34c <__malloc_lock>
 800b27c:	f8d8 3000 	ldr.w	r3, [r8]
 800b280:	461c      	mov	r4, r3
 800b282:	bb5c      	cbnz	r4, 800b2dc <_malloc_r+0x90>
 800b284:	4629      	mov	r1, r5
 800b286:	4638      	mov	r0, r7
 800b288:	f7ff ffc0 	bl	800b20c <sbrk_aligned>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	4604      	mov	r4, r0
 800b290:	d155      	bne.n	800b33e <_malloc_r+0xf2>
 800b292:	f8d8 4000 	ldr.w	r4, [r8]
 800b296:	4626      	mov	r6, r4
 800b298:	2e00      	cmp	r6, #0
 800b29a:	d145      	bne.n	800b328 <_malloc_r+0xdc>
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	d048      	beq.n	800b332 <_malloc_r+0xe6>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	eb04 0903 	add.w	r9, r4, r3
 800b2aa:	f000 fa17 	bl	800b6dc <_sbrk_r>
 800b2ae:	4581      	cmp	r9, r0
 800b2b0:	d13f      	bne.n	800b332 <_malloc_r+0xe6>
 800b2b2:	6821      	ldr	r1, [r4, #0]
 800b2b4:	1a6d      	subs	r5, r5, r1
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7ff ffa7 	bl	800b20c <sbrk_aligned>
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d037      	beq.n	800b332 <_malloc_r+0xe6>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	442b      	add	r3, r5
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d038      	beq.n	800b342 <_malloc_r+0xf6>
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	42a2      	cmp	r2, r4
 800b2d4:	d12b      	bne.n	800b32e <_malloc_r+0xe2>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	e00f      	b.n	800b2fc <_malloc_r+0xb0>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	1b52      	subs	r2, r2, r5
 800b2e0:	d41f      	bmi.n	800b322 <_malloc_r+0xd6>
 800b2e2:	2a0b      	cmp	r2, #11
 800b2e4:	d917      	bls.n	800b316 <_malloc_r+0xca>
 800b2e6:	1961      	adds	r1, r4, r5
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	6025      	str	r5, [r4, #0]
 800b2ec:	bf18      	it	ne
 800b2ee:	6059      	strne	r1, [r3, #4]
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	bf08      	it	eq
 800b2f4:	f8c8 1000 	streq.w	r1, [r8]
 800b2f8:	5162      	str	r2, [r4, r5]
 800b2fa:	604b      	str	r3, [r1, #4]
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f104 060b 	add.w	r6, r4, #11
 800b302:	f000 f829 	bl	800b358 <__malloc_unlock>
 800b306:	f026 0607 	bic.w	r6, r6, #7
 800b30a:	1d23      	adds	r3, r4, #4
 800b30c:	1af2      	subs	r2, r6, r3
 800b30e:	d0ae      	beq.n	800b26e <_malloc_r+0x22>
 800b310:	1b9b      	subs	r3, r3, r6
 800b312:	50a3      	str	r3, [r4, r2]
 800b314:	e7ab      	b.n	800b26e <_malloc_r+0x22>
 800b316:	42a3      	cmp	r3, r4
 800b318:	6862      	ldr	r2, [r4, #4]
 800b31a:	d1dd      	bne.n	800b2d8 <_malloc_r+0x8c>
 800b31c:	f8c8 2000 	str.w	r2, [r8]
 800b320:	e7ec      	b.n	800b2fc <_malloc_r+0xb0>
 800b322:	4623      	mov	r3, r4
 800b324:	6864      	ldr	r4, [r4, #4]
 800b326:	e7ac      	b.n	800b282 <_malloc_r+0x36>
 800b328:	4634      	mov	r4, r6
 800b32a:	6876      	ldr	r6, [r6, #4]
 800b32c:	e7b4      	b.n	800b298 <_malloc_r+0x4c>
 800b32e:	4613      	mov	r3, r2
 800b330:	e7cc      	b.n	800b2cc <_malloc_r+0x80>
 800b332:	230c      	movs	r3, #12
 800b334:	603b      	str	r3, [r7, #0]
 800b336:	4638      	mov	r0, r7
 800b338:	f000 f80e 	bl	800b358 <__malloc_unlock>
 800b33c:	e797      	b.n	800b26e <_malloc_r+0x22>
 800b33e:	6025      	str	r5, [r4, #0]
 800b340:	e7dc      	b.n	800b2fc <_malloc_r+0xb0>
 800b342:	605b      	str	r3, [r3, #4]
 800b344:	deff      	udf	#255	; 0xff
 800b346:	bf00      	nop
 800b348:	2400149c 	.word	0x2400149c

0800b34c <__malloc_lock>:
 800b34c:	4801      	ldr	r0, [pc, #4]	; (800b354 <__malloc_lock+0x8>)
 800b34e:	f000 ba12 	b.w	800b776 <__retarget_lock_acquire_recursive>
 800b352:	bf00      	nop
 800b354:	240015e4 	.word	0x240015e4

0800b358 <__malloc_unlock>:
 800b358:	4801      	ldr	r0, [pc, #4]	; (800b360 <__malloc_unlock+0x8>)
 800b35a:	f000 ba0d 	b.w	800b778 <__retarget_lock_release_recursive>
 800b35e:	bf00      	nop
 800b360:	240015e4 	.word	0x240015e4

0800b364 <srand>:
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	4b10      	ldr	r3, [pc, #64]	; (800b3a8 <srand+0x44>)
 800b368:	681d      	ldr	r5, [r3, #0]
 800b36a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b36c:	4604      	mov	r4, r0
 800b36e:	b9b3      	cbnz	r3, 800b39e <srand+0x3a>
 800b370:	2018      	movs	r0, #24
 800b372:	f7ff ff3b 	bl	800b1ec <malloc>
 800b376:	4602      	mov	r2, r0
 800b378:	6328      	str	r0, [r5, #48]	; 0x30
 800b37a:	b920      	cbnz	r0, 800b386 <srand+0x22>
 800b37c:	4b0b      	ldr	r3, [pc, #44]	; (800b3ac <srand+0x48>)
 800b37e:	480c      	ldr	r0, [pc, #48]	; (800b3b0 <srand+0x4c>)
 800b380:	2146      	movs	r1, #70	; 0x46
 800b382:	f000 fa09 	bl	800b798 <__assert_func>
 800b386:	490b      	ldr	r1, [pc, #44]	; (800b3b4 <srand+0x50>)
 800b388:	4b0b      	ldr	r3, [pc, #44]	; (800b3b8 <srand+0x54>)
 800b38a:	e9c0 1300 	strd	r1, r3, [r0]
 800b38e:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <srand+0x58>)
 800b390:	6083      	str	r3, [r0, #8]
 800b392:	230b      	movs	r3, #11
 800b394:	8183      	strh	r3, [r0, #12]
 800b396:	2100      	movs	r1, #0
 800b398:	2001      	movs	r0, #1
 800b39a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b39e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	611c      	str	r4, [r3, #16]
 800b3a4:	615a      	str	r2, [r3, #20]
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	24000090 	.word	0x24000090
 800b3ac:	0800d29c 	.word	0x0800d29c
 800b3b0:	0800d2b3 	.word	0x0800d2b3
 800b3b4:	abcd330e 	.word	0xabcd330e
 800b3b8:	e66d1234 	.word	0xe66d1234
 800b3bc:	0005deec 	.word	0x0005deec

0800b3c0 <std>:
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	b510      	push	{r4, lr}
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3ce:	6083      	str	r3, [r0, #8]
 800b3d0:	8181      	strh	r1, [r0, #12]
 800b3d2:	6643      	str	r3, [r0, #100]	; 0x64
 800b3d4:	81c2      	strh	r2, [r0, #14]
 800b3d6:	6183      	str	r3, [r0, #24]
 800b3d8:	4619      	mov	r1, r3
 800b3da:	2208      	movs	r2, #8
 800b3dc:	305c      	adds	r0, #92	; 0x5c
 800b3de:	f000 f914 	bl	800b60a <memset>
 800b3e2:	4b0d      	ldr	r3, [pc, #52]	; (800b418 <std+0x58>)
 800b3e4:	6263      	str	r3, [r4, #36]	; 0x24
 800b3e6:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <std+0x5c>)
 800b3e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3ea:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <std+0x60>)
 800b3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3ee:	4b0d      	ldr	r3, [pc, #52]	; (800b424 <std+0x64>)
 800b3f0:	6323      	str	r3, [r4, #48]	; 0x30
 800b3f2:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <std+0x68>)
 800b3f4:	6224      	str	r4, [r4, #32]
 800b3f6:	429c      	cmp	r4, r3
 800b3f8:	d006      	beq.n	800b408 <std+0x48>
 800b3fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b3fe:	4294      	cmp	r4, r2
 800b400:	d002      	beq.n	800b408 <std+0x48>
 800b402:	33d0      	adds	r3, #208	; 0xd0
 800b404:	429c      	cmp	r4, r3
 800b406:	d105      	bne.n	800b414 <std+0x54>
 800b408:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b410:	f000 b9b0 	b.w	800b774 <__retarget_lock_init_recursive>
 800b414:	bd10      	pop	{r4, pc}
 800b416:	bf00      	nop
 800b418:	0800b585 	.word	0x0800b585
 800b41c:	0800b5a7 	.word	0x0800b5a7
 800b420:	0800b5df 	.word	0x0800b5df
 800b424:	0800b603 	.word	0x0800b603
 800b428:	240014a4 	.word	0x240014a4

0800b42c <stdio_exit_handler>:
 800b42c:	4a02      	ldr	r2, [pc, #8]	; (800b438 <stdio_exit_handler+0xc>)
 800b42e:	4903      	ldr	r1, [pc, #12]	; (800b43c <stdio_exit_handler+0x10>)
 800b430:	4803      	ldr	r0, [pc, #12]	; (800b440 <stdio_exit_handler+0x14>)
 800b432:	f000 b869 	b.w	800b508 <_fwalk_sglue>
 800b436:	bf00      	nop
 800b438:	24000038 	.word	0x24000038
 800b43c:	0800bf49 	.word	0x0800bf49
 800b440:	24000044 	.word	0x24000044

0800b444 <cleanup_stdio>:
 800b444:	6841      	ldr	r1, [r0, #4]
 800b446:	4b0c      	ldr	r3, [pc, #48]	; (800b478 <cleanup_stdio+0x34>)
 800b448:	4299      	cmp	r1, r3
 800b44a:	b510      	push	{r4, lr}
 800b44c:	4604      	mov	r4, r0
 800b44e:	d001      	beq.n	800b454 <cleanup_stdio+0x10>
 800b450:	f000 fd7a 	bl	800bf48 <_fflush_r>
 800b454:	68a1      	ldr	r1, [r4, #8]
 800b456:	4b09      	ldr	r3, [pc, #36]	; (800b47c <cleanup_stdio+0x38>)
 800b458:	4299      	cmp	r1, r3
 800b45a:	d002      	beq.n	800b462 <cleanup_stdio+0x1e>
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 fd73 	bl	800bf48 <_fflush_r>
 800b462:	68e1      	ldr	r1, [r4, #12]
 800b464:	4b06      	ldr	r3, [pc, #24]	; (800b480 <cleanup_stdio+0x3c>)
 800b466:	4299      	cmp	r1, r3
 800b468:	d004      	beq.n	800b474 <cleanup_stdio+0x30>
 800b46a:	4620      	mov	r0, r4
 800b46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b470:	f000 bd6a 	b.w	800bf48 <_fflush_r>
 800b474:	bd10      	pop	{r4, pc}
 800b476:	bf00      	nop
 800b478:	240014a4 	.word	0x240014a4
 800b47c:	2400150c 	.word	0x2400150c
 800b480:	24001574 	.word	0x24001574

0800b484 <global_stdio_init.part.0>:
 800b484:	b510      	push	{r4, lr}
 800b486:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <global_stdio_init.part.0+0x30>)
 800b488:	4c0b      	ldr	r4, [pc, #44]	; (800b4b8 <global_stdio_init.part.0+0x34>)
 800b48a:	4a0c      	ldr	r2, [pc, #48]	; (800b4bc <global_stdio_init.part.0+0x38>)
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	4620      	mov	r0, r4
 800b490:	2200      	movs	r2, #0
 800b492:	2104      	movs	r1, #4
 800b494:	f7ff ff94 	bl	800b3c0 <std>
 800b498:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b49c:	2201      	movs	r2, #1
 800b49e:	2109      	movs	r1, #9
 800b4a0:	f7ff ff8e 	bl	800b3c0 <std>
 800b4a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b4a8:	2202      	movs	r2, #2
 800b4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ae:	2112      	movs	r1, #18
 800b4b0:	f7ff bf86 	b.w	800b3c0 <std>
 800b4b4:	240015dc 	.word	0x240015dc
 800b4b8:	240014a4 	.word	0x240014a4
 800b4bc:	0800b42d 	.word	0x0800b42d

0800b4c0 <__sfp_lock_acquire>:
 800b4c0:	4801      	ldr	r0, [pc, #4]	; (800b4c8 <__sfp_lock_acquire+0x8>)
 800b4c2:	f000 b958 	b.w	800b776 <__retarget_lock_acquire_recursive>
 800b4c6:	bf00      	nop
 800b4c8:	240015e5 	.word	0x240015e5

0800b4cc <__sfp_lock_release>:
 800b4cc:	4801      	ldr	r0, [pc, #4]	; (800b4d4 <__sfp_lock_release+0x8>)
 800b4ce:	f000 b953 	b.w	800b778 <__retarget_lock_release_recursive>
 800b4d2:	bf00      	nop
 800b4d4:	240015e5 	.word	0x240015e5

0800b4d8 <__sinit>:
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	4604      	mov	r4, r0
 800b4dc:	f7ff fff0 	bl	800b4c0 <__sfp_lock_acquire>
 800b4e0:	6a23      	ldr	r3, [r4, #32]
 800b4e2:	b11b      	cbz	r3, 800b4ec <__sinit+0x14>
 800b4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e8:	f7ff bff0 	b.w	800b4cc <__sfp_lock_release>
 800b4ec:	4b04      	ldr	r3, [pc, #16]	; (800b500 <__sinit+0x28>)
 800b4ee:	6223      	str	r3, [r4, #32]
 800b4f0:	4b04      	ldr	r3, [pc, #16]	; (800b504 <__sinit+0x2c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1f5      	bne.n	800b4e4 <__sinit+0xc>
 800b4f8:	f7ff ffc4 	bl	800b484 <global_stdio_init.part.0>
 800b4fc:	e7f2      	b.n	800b4e4 <__sinit+0xc>
 800b4fe:	bf00      	nop
 800b500:	0800b445 	.word	0x0800b445
 800b504:	240015dc 	.word	0x240015dc

0800b508 <_fwalk_sglue>:
 800b508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b50c:	4607      	mov	r7, r0
 800b50e:	4688      	mov	r8, r1
 800b510:	4614      	mov	r4, r2
 800b512:	2600      	movs	r6, #0
 800b514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b518:	f1b9 0901 	subs.w	r9, r9, #1
 800b51c:	d505      	bpl.n	800b52a <_fwalk_sglue+0x22>
 800b51e:	6824      	ldr	r4, [r4, #0]
 800b520:	2c00      	cmp	r4, #0
 800b522:	d1f7      	bne.n	800b514 <_fwalk_sglue+0xc>
 800b524:	4630      	mov	r0, r6
 800b526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52a:	89ab      	ldrh	r3, [r5, #12]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d907      	bls.n	800b540 <_fwalk_sglue+0x38>
 800b530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b534:	3301      	adds	r3, #1
 800b536:	d003      	beq.n	800b540 <_fwalk_sglue+0x38>
 800b538:	4629      	mov	r1, r5
 800b53a:	4638      	mov	r0, r7
 800b53c:	47c0      	blx	r8
 800b53e:	4306      	orrs	r6, r0
 800b540:	3568      	adds	r5, #104	; 0x68
 800b542:	e7e9      	b.n	800b518 <_fwalk_sglue+0x10>

0800b544 <siprintf>:
 800b544:	b40e      	push	{r1, r2, r3}
 800b546:	b500      	push	{lr}
 800b548:	b09c      	sub	sp, #112	; 0x70
 800b54a:	ab1d      	add	r3, sp, #116	; 0x74
 800b54c:	9002      	str	r0, [sp, #8]
 800b54e:	9006      	str	r0, [sp, #24]
 800b550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b554:	4809      	ldr	r0, [pc, #36]	; (800b57c <siprintf+0x38>)
 800b556:	9107      	str	r1, [sp, #28]
 800b558:	9104      	str	r1, [sp, #16]
 800b55a:	4909      	ldr	r1, [pc, #36]	; (800b580 <siprintf+0x3c>)
 800b55c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b560:	9105      	str	r1, [sp, #20]
 800b562:	6800      	ldr	r0, [r0, #0]
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	a902      	add	r1, sp, #8
 800b568:	f000 f9da 	bl	800b920 <_svfiprintf_r>
 800b56c:	9b02      	ldr	r3, [sp, #8]
 800b56e:	2200      	movs	r2, #0
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	b01c      	add	sp, #112	; 0x70
 800b574:	f85d eb04 	ldr.w	lr, [sp], #4
 800b578:	b003      	add	sp, #12
 800b57a:	4770      	bx	lr
 800b57c:	24000090 	.word	0x24000090
 800b580:	ffff0208 	.word	0xffff0208

0800b584 <__sread>:
 800b584:	b510      	push	{r4, lr}
 800b586:	460c      	mov	r4, r1
 800b588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b58c:	f000 f894 	bl	800b6b8 <_read_r>
 800b590:	2800      	cmp	r0, #0
 800b592:	bfab      	itete	ge
 800b594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b596:	89a3      	ldrhlt	r3, [r4, #12]
 800b598:	181b      	addge	r3, r3, r0
 800b59a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b59e:	bfac      	ite	ge
 800b5a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5a2:	81a3      	strhlt	r3, [r4, #12]
 800b5a4:	bd10      	pop	{r4, pc}

0800b5a6 <__swrite>:
 800b5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5aa:	461f      	mov	r7, r3
 800b5ac:	898b      	ldrh	r3, [r1, #12]
 800b5ae:	05db      	lsls	r3, r3, #23
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	4616      	mov	r6, r2
 800b5b6:	d505      	bpl.n	800b5c4 <__swrite+0x1e>
 800b5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5bc:	2302      	movs	r3, #2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f000 f868 	bl	800b694 <_lseek_r>
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5ce:	81a3      	strh	r3, [r4, #12]
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	463b      	mov	r3, r7
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5da:	f000 b88f 	b.w	800b6fc <_write_r>

0800b5de <__sseek>:
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e6:	f000 f855 	bl	800b694 <_lseek_r>
 800b5ea:	1c43      	adds	r3, r0, #1
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	bf15      	itete	ne
 800b5f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5fa:	81a3      	strheq	r3, [r4, #12]
 800b5fc:	bf18      	it	ne
 800b5fe:	81a3      	strhne	r3, [r4, #12]
 800b600:	bd10      	pop	{r4, pc}

0800b602 <__sclose>:
 800b602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b606:	f000 b823 	b.w	800b650 <_close_r>

0800b60a <memset>:
 800b60a:	4402      	add	r2, r0
 800b60c:	4603      	mov	r3, r0
 800b60e:	4293      	cmp	r3, r2
 800b610:	d100      	bne.n	800b614 <memset+0xa>
 800b612:	4770      	bx	lr
 800b614:	f803 1b01 	strb.w	r1, [r3], #1
 800b618:	e7f9      	b.n	800b60e <memset+0x4>
	...

0800b61c <time>:
 800b61c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b61e:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <time+0x30>)
 800b620:	2200      	movs	r2, #0
 800b622:	4669      	mov	r1, sp
 800b624:	4604      	mov	r4, r0
 800b626:	6818      	ldr	r0, [r3, #0]
 800b628:	f000 f822 	bl	800b670 <_gettimeofday_r>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	bfbe      	ittt	lt
 800b630:	f04f 32ff 	movlt.w	r2, #4294967295
 800b634:	f04f 33ff 	movlt.w	r3, #4294967295
 800b638:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b63c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b640:	b10c      	cbz	r4, 800b646 <time+0x2a>
 800b642:	e9c4 0100 	strd	r0, r1, [r4]
 800b646:	b004      	add	sp, #16
 800b648:	bd10      	pop	{r4, pc}
 800b64a:	bf00      	nop
 800b64c:	24000090 	.word	0x24000090

0800b650 <_close_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d06      	ldr	r5, [pc, #24]	; (800b66c <_close_r+0x1c>)
 800b654:	2300      	movs	r3, #0
 800b656:	4604      	mov	r4, r0
 800b658:	4608      	mov	r0, r1
 800b65a:	602b      	str	r3, [r5, #0]
 800b65c:	f7f5 fa3c 	bl	8000ad8 <_close>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_close_r+0x1a>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_close_r+0x1a>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	240015e0 	.word	0x240015e0

0800b670 <_gettimeofday_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d07      	ldr	r5, [pc, #28]	; (800b690 <_gettimeofday_r+0x20>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	4611      	mov	r1, r2
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	f000 ff97 	bl	800c5b0 <_gettimeofday>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d102      	bne.n	800b68c <_gettimeofday_r+0x1c>
 800b686:	682b      	ldr	r3, [r5, #0]
 800b688:	b103      	cbz	r3, 800b68c <_gettimeofday_r+0x1c>
 800b68a:	6023      	str	r3, [r4, #0]
 800b68c:	bd38      	pop	{r3, r4, r5, pc}
 800b68e:	bf00      	nop
 800b690:	240015e0 	.word	0x240015e0

0800b694 <_lseek_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4d07      	ldr	r5, [pc, #28]	; (800b6b4 <_lseek_r+0x20>)
 800b698:	4604      	mov	r4, r0
 800b69a:	4608      	mov	r0, r1
 800b69c:	4611      	mov	r1, r2
 800b69e:	2200      	movs	r2, #0
 800b6a0:	602a      	str	r2, [r5, #0]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	f7f5 fa2f 	bl	8000b06 <_lseek>
 800b6a8:	1c43      	adds	r3, r0, #1
 800b6aa:	d102      	bne.n	800b6b2 <_lseek_r+0x1e>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	b103      	cbz	r3, 800b6b2 <_lseek_r+0x1e>
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}
 800b6b4:	240015e0 	.word	0x240015e0

0800b6b8 <_read_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d07      	ldr	r5, [pc, #28]	; (800b6d8 <_read_r+0x20>)
 800b6bc:	4604      	mov	r4, r0
 800b6be:	4608      	mov	r0, r1
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	602a      	str	r2, [r5, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f7f5 fa4a 	bl	8000b60 <_read>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d102      	bne.n	800b6d6 <_read_r+0x1e>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	b103      	cbz	r3, 800b6d6 <_read_r+0x1e>
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	240015e0 	.word	0x240015e0

0800b6dc <_sbrk_r>:
 800b6dc:	b538      	push	{r3, r4, r5, lr}
 800b6de:	4d06      	ldr	r5, [pc, #24]	; (800b6f8 <_sbrk_r+0x1c>)
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	4608      	mov	r0, r1
 800b6e6:	602b      	str	r3, [r5, #0]
 800b6e8:	f7f5 ff2c 	bl	8001544 <_sbrk>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_sbrk_r+0x1a>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_sbrk_r+0x1a>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	240015e0 	.word	0x240015e0

0800b6fc <_write_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4d07      	ldr	r5, [pc, #28]	; (800b71c <_write_r+0x20>)
 800b700:	4604      	mov	r4, r0
 800b702:	4608      	mov	r0, r1
 800b704:	4611      	mov	r1, r2
 800b706:	2200      	movs	r2, #0
 800b708:	602a      	str	r2, [r5, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	f7f5 fa50 	bl	8000bb0 <_write>
 800b710:	1c43      	adds	r3, r0, #1
 800b712:	d102      	bne.n	800b71a <_write_r+0x1e>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	b103      	cbz	r3, 800b71a <_write_r+0x1e>
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	bd38      	pop	{r3, r4, r5, pc}
 800b71c:	240015e0 	.word	0x240015e0

0800b720 <__errno>:
 800b720:	4b01      	ldr	r3, [pc, #4]	; (800b728 <__errno+0x8>)
 800b722:	6818      	ldr	r0, [r3, #0]
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	24000090 	.word	0x24000090

0800b72c <__libc_init_array>:
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	4d0d      	ldr	r5, [pc, #52]	; (800b764 <__libc_init_array+0x38>)
 800b730:	4c0d      	ldr	r4, [pc, #52]	; (800b768 <__libc_init_array+0x3c>)
 800b732:	1b64      	subs	r4, r4, r5
 800b734:	10a4      	asrs	r4, r4, #2
 800b736:	2600      	movs	r6, #0
 800b738:	42a6      	cmp	r6, r4
 800b73a:	d109      	bne.n	800b750 <__libc_init_array+0x24>
 800b73c:	4d0b      	ldr	r5, [pc, #44]	; (800b76c <__libc_init_array+0x40>)
 800b73e:	4c0c      	ldr	r4, [pc, #48]	; (800b770 <__libc_init_array+0x44>)
 800b740:	f000 ff3e 	bl	800c5c0 <_init>
 800b744:	1b64      	subs	r4, r4, r5
 800b746:	10a4      	asrs	r4, r4, #2
 800b748:	2600      	movs	r6, #0
 800b74a:	42a6      	cmp	r6, r4
 800b74c:	d105      	bne.n	800b75a <__libc_init_array+0x2e>
 800b74e:	bd70      	pop	{r4, r5, r6, pc}
 800b750:	f855 3b04 	ldr.w	r3, [r5], #4
 800b754:	4798      	blx	r3
 800b756:	3601      	adds	r6, #1
 800b758:	e7ee      	b.n	800b738 <__libc_init_array+0xc>
 800b75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b75e:	4798      	blx	r3
 800b760:	3601      	adds	r6, #1
 800b762:	e7f2      	b.n	800b74a <__libc_init_array+0x1e>
 800b764:	0800d37c 	.word	0x0800d37c
 800b768:	0800d37c 	.word	0x0800d37c
 800b76c:	0800d37c 	.word	0x0800d37c
 800b770:	0800d380 	.word	0x0800d380

0800b774 <__retarget_lock_init_recursive>:
 800b774:	4770      	bx	lr

0800b776 <__retarget_lock_acquire_recursive>:
 800b776:	4770      	bx	lr

0800b778 <__retarget_lock_release_recursive>:
 800b778:	4770      	bx	lr

0800b77a <memcpy>:
 800b77a:	440a      	add	r2, r1
 800b77c:	4291      	cmp	r1, r2
 800b77e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b782:	d100      	bne.n	800b786 <memcpy+0xc>
 800b784:	4770      	bx	lr
 800b786:	b510      	push	{r4, lr}
 800b788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b78c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b790:	4291      	cmp	r1, r2
 800b792:	d1f9      	bne.n	800b788 <memcpy+0xe>
 800b794:	bd10      	pop	{r4, pc}
	...

0800b798 <__assert_func>:
 800b798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b79a:	4614      	mov	r4, r2
 800b79c:	461a      	mov	r2, r3
 800b79e:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <__assert_func+0x2c>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	68d8      	ldr	r0, [r3, #12]
 800b7a6:	b14c      	cbz	r4, 800b7bc <__assert_func+0x24>
 800b7a8:	4b07      	ldr	r3, [pc, #28]	; (800b7c8 <__assert_func+0x30>)
 800b7aa:	9100      	str	r1, [sp, #0]
 800b7ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7b0:	4906      	ldr	r1, [pc, #24]	; (800b7cc <__assert_func+0x34>)
 800b7b2:	462b      	mov	r3, r5
 800b7b4:	f000 fbf0 	bl	800bf98 <fiprintf>
 800b7b8:	f000 fc9e 	bl	800c0f8 <abort>
 800b7bc:	4b04      	ldr	r3, [pc, #16]	; (800b7d0 <__assert_func+0x38>)
 800b7be:	461c      	mov	r4, r3
 800b7c0:	e7f3      	b.n	800b7aa <__assert_func+0x12>
 800b7c2:	bf00      	nop
 800b7c4:	24000090 	.word	0x24000090
 800b7c8:	0800d30b 	.word	0x0800d30b
 800b7cc:	0800d318 	.word	0x0800d318
 800b7d0:	0800d346 	.word	0x0800d346

0800b7d4 <_free_r>:
 800b7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7d6:	2900      	cmp	r1, #0
 800b7d8:	d044      	beq.n	800b864 <_free_r+0x90>
 800b7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7de:	9001      	str	r0, [sp, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b7e6:	bfb8      	it	lt
 800b7e8:	18e4      	addlt	r4, r4, r3
 800b7ea:	f7ff fdaf 	bl	800b34c <__malloc_lock>
 800b7ee:	4a1e      	ldr	r2, [pc, #120]	; (800b868 <_free_r+0x94>)
 800b7f0:	9801      	ldr	r0, [sp, #4]
 800b7f2:	6813      	ldr	r3, [r2, #0]
 800b7f4:	b933      	cbnz	r3, 800b804 <_free_r+0x30>
 800b7f6:	6063      	str	r3, [r4, #4]
 800b7f8:	6014      	str	r4, [r2, #0]
 800b7fa:	b003      	add	sp, #12
 800b7fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b800:	f7ff bdaa 	b.w	800b358 <__malloc_unlock>
 800b804:	42a3      	cmp	r3, r4
 800b806:	d908      	bls.n	800b81a <_free_r+0x46>
 800b808:	6825      	ldr	r5, [r4, #0]
 800b80a:	1961      	adds	r1, r4, r5
 800b80c:	428b      	cmp	r3, r1
 800b80e:	bf01      	itttt	eq
 800b810:	6819      	ldreq	r1, [r3, #0]
 800b812:	685b      	ldreq	r3, [r3, #4]
 800b814:	1949      	addeq	r1, r1, r5
 800b816:	6021      	streq	r1, [r4, #0]
 800b818:	e7ed      	b.n	800b7f6 <_free_r+0x22>
 800b81a:	461a      	mov	r2, r3
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	b10b      	cbz	r3, 800b824 <_free_r+0x50>
 800b820:	42a3      	cmp	r3, r4
 800b822:	d9fa      	bls.n	800b81a <_free_r+0x46>
 800b824:	6811      	ldr	r1, [r2, #0]
 800b826:	1855      	adds	r5, r2, r1
 800b828:	42a5      	cmp	r5, r4
 800b82a:	d10b      	bne.n	800b844 <_free_r+0x70>
 800b82c:	6824      	ldr	r4, [r4, #0]
 800b82e:	4421      	add	r1, r4
 800b830:	1854      	adds	r4, r2, r1
 800b832:	42a3      	cmp	r3, r4
 800b834:	6011      	str	r1, [r2, #0]
 800b836:	d1e0      	bne.n	800b7fa <_free_r+0x26>
 800b838:	681c      	ldr	r4, [r3, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	6053      	str	r3, [r2, #4]
 800b83e:	440c      	add	r4, r1
 800b840:	6014      	str	r4, [r2, #0]
 800b842:	e7da      	b.n	800b7fa <_free_r+0x26>
 800b844:	d902      	bls.n	800b84c <_free_r+0x78>
 800b846:	230c      	movs	r3, #12
 800b848:	6003      	str	r3, [r0, #0]
 800b84a:	e7d6      	b.n	800b7fa <_free_r+0x26>
 800b84c:	6825      	ldr	r5, [r4, #0]
 800b84e:	1961      	adds	r1, r4, r5
 800b850:	428b      	cmp	r3, r1
 800b852:	bf04      	itt	eq
 800b854:	6819      	ldreq	r1, [r3, #0]
 800b856:	685b      	ldreq	r3, [r3, #4]
 800b858:	6063      	str	r3, [r4, #4]
 800b85a:	bf04      	itt	eq
 800b85c:	1949      	addeq	r1, r1, r5
 800b85e:	6021      	streq	r1, [r4, #0]
 800b860:	6054      	str	r4, [r2, #4]
 800b862:	e7ca      	b.n	800b7fa <_free_r+0x26>
 800b864:	b003      	add	sp, #12
 800b866:	bd30      	pop	{r4, r5, pc}
 800b868:	2400149c 	.word	0x2400149c

0800b86c <__ssputs_r>:
 800b86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	688e      	ldr	r6, [r1, #8]
 800b872:	461f      	mov	r7, r3
 800b874:	42be      	cmp	r6, r7
 800b876:	680b      	ldr	r3, [r1, #0]
 800b878:	4682      	mov	sl, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	4690      	mov	r8, r2
 800b87e:	d82c      	bhi.n	800b8da <__ssputs_r+0x6e>
 800b880:	898a      	ldrh	r2, [r1, #12]
 800b882:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b886:	d026      	beq.n	800b8d6 <__ssputs_r+0x6a>
 800b888:	6965      	ldr	r5, [r4, #20]
 800b88a:	6909      	ldr	r1, [r1, #16]
 800b88c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b890:	eba3 0901 	sub.w	r9, r3, r1
 800b894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b898:	1c7b      	adds	r3, r7, #1
 800b89a:	444b      	add	r3, r9
 800b89c:	106d      	asrs	r5, r5, #1
 800b89e:	429d      	cmp	r5, r3
 800b8a0:	bf38      	it	cc
 800b8a2:	461d      	movcc	r5, r3
 800b8a4:	0553      	lsls	r3, r2, #21
 800b8a6:	d527      	bpl.n	800b8f8 <__ssputs_r+0x8c>
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	f7ff fccf 	bl	800b24c <_malloc_r>
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	b360      	cbz	r0, 800b90c <__ssputs_r+0xa0>
 800b8b2:	6921      	ldr	r1, [r4, #16]
 800b8b4:	464a      	mov	r2, r9
 800b8b6:	f7ff ff60 	bl	800b77a <memcpy>
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c4:	81a3      	strh	r3, [r4, #12]
 800b8c6:	6126      	str	r6, [r4, #16]
 800b8c8:	6165      	str	r5, [r4, #20]
 800b8ca:	444e      	add	r6, r9
 800b8cc:	eba5 0509 	sub.w	r5, r5, r9
 800b8d0:	6026      	str	r6, [r4, #0]
 800b8d2:	60a5      	str	r5, [r4, #8]
 800b8d4:	463e      	mov	r6, r7
 800b8d6:	42be      	cmp	r6, r7
 800b8d8:	d900      	bls.n	800b8dc <__ssputs_r+0x70>
 800b8da:	463e      	mov	r6, r7
 800b8dc:	6820      	ldr	r0, [r4, #0]
 800b8de:	4632      	mov	r2, r6
 800b8e0:	4641      	mov	r1, r8
 800b8e2:	f000 fbcd 	bl	800c080 <memmove>
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	1b9b      	subs	r3, r3, r6
 800b8ea:	60a3      	str	r3, [r4, #8]
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	4433      	add	r3, r6
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	f000 fc04 	bl	800c106 <_realloc_r>
 800b8fe:	4606      	mov	r6, r0
 800b900:	2800      	cmp	r0, #0
 800b902:	d1e0      	bne.n	800b8c6 <__ssputs_r+0x5a>
 800b904:	6921      	ldr	r1, [r4, #16]
 800b906:	4650      	mov	r0, sl
 800b908:	f7ff ff64 	bl	800b7d4 <_free_r>
 800b90c:	230c      	movs	r3, #12
 800b90e:	f8ca 3000 	str.w	r3, [sl]
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	f04f 30ff 	mov.w	r0, #4294967295
 800b91e:	e7e9      	b.n	800b8f4 <__ssputs_r+0x88>

0800b920 <_svfiprintf_r>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	4698      	mov	r8, r3
 800b926:	898b      	ldrh	r3, [r1, #12]
 800b928:	061b      	lsls	r3, r3, #24
 800b92a:	b09d      	sub	sp, #116	; 0x74
 800b92c:	4607      	mov	r7, r0
 800b92e:	460d      	mov	r5, r1
 800b930:	4614      	mov	r4, r2
 800b932:	d50e      	bpl.n	800b952 <_svfiprintf_r+0x32>
 800b934:	690b      	ldr	r3, [r1, #16]
 800b936:	b963      	cbnz	r3, 800b952 <_svfiprintf_r+0x32>
 800b938:	2140      	movs	r1, #64	; 0x40
 800b93a:	f7ff fc87 	bl	800b24c <_malloc_r>
 800b93e:	6028      	str	r0, [r5, #0]
 800b940:	6128      	str	r0, [r5, #16]
 800b942:	b920      	cbnz	r0, 800b94e <_svfiprintf_r+0x2e>
 800b944:	230c      	movs	r3, #12
 800b946:	603b      	str	r3, [r7, #0]
 800b948:	f04f 30ff 	mov.w	r0, #4294967295
 800b94c:	e0d0      	b.n	800baf0 <_svfiprintf_r+0x1d0>
 800b94e:	2340      	movs	r3, #64	; 0x40
 800b950:	616b      	str	r3, [r5, #20]
 800b952:	2300      	movs	r3, #0
 800b954:	9309      	str	r3, [sp, #36]	; 0x24
 800b956:	2320      	movs	r3, #32
 800b958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b95c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b960:	2330      	movs	r3, #48	; 0x30
 800b962:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb08 <_svfiprintf_r+0x1e8>
 800b966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b96a:	f04f 0901 	mov.w	r9, #1
 800b96e:	4623      	mov	r3, r4
 800b970:	469a      	mov	sl, r3
 800b972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b976:	b10a      	cbz	r2, 800b97c <_svfiprintf_r+0x5c>
 800b978:	2a25      	cmp	r2, #37	; 0x25
 800b97a:	d1f9      	bne.n	800b970 <_svfiprintf_r+0x50>
 800b97c:	ebba 0b04 	subs.w	fp, sl, r4
 800b980:	d00b      	beq.n	800b99a <_svfiprintf_r+0x7a>
 800b982:	465b      	mov	r3, fp
 800b984:	4622      	mov	r2, r4
 800b986:	4629      	mov	r1, r5
 800b988:	4638      	mov	r0, r7
 800b98a:	f7ff ff6f 	bl	800b86c <__ssputs_r>
 800b98e:	3001      	adds	r0, #1
 800b990:	f000 80a9 	beq.w	800bae6 <_svfiprintf_r+0x1c6>
 800b994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b996:	445a      	add	r2, fp
 800b998:	9209      	str	r2, [sp, #36]	; 0x24
 800b99a:	f89a 3000 	ldrb.w	r3, [sl]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 80a1 	beq.w	800bae6 <_svfiprintf_r+0x1c6>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ae:	f10a 0a01 	add.w	sl, sl, #1
 800b9b2:	9304      	str	r3, [sp, #16]
 800b9b4:	9307      	str	r3, [sp, #28]
 800b9b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b9bc:	4654      	mov	r4, sl
 800b9be:	2205      	movs	r2, #5
 800b9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c4:	4850      	ldr	r0, [pc, #320]	; (800bb08 <_svfiprintf_r+0x1e8>)
 800b9c6:	f7f4 fc8b 	bl	80002e0 <memchr>
 800b9ca:	9a04      	ldr	r2, [sp, #16]
 800b9cc:	b9d8      	cbnz	r0, 800ba06 <_svfiprintf_r+0xe6>
 800b9ce:	06d0      	lsls	r0, r2, #27
 800b9d0:	bf44      	itt	mi
 800b9d2:	2320      	movmi	r3, #32
 800b9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d8:	0711      	lsls	r1, r2, #28
 800b9da:	bf44      	itt	mi
 800b9dc:	232b      	movmi	r3, #43	; 0x2b
 800b9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9e8:	d015      	beq.n	800ba16 <_svfiprintf_r+0xf6>
 800b9ea:	9a07      	ldr	r2, [sp, #28]
 800b9ec:	4654      	mov	r4, sl
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	f04f 0c0a 	mov.w	ip, #10
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9fa:	3b30      	subs	r3, #48	; 0x30
 800b9fc:	2b09      	cmp	r3, #9
 800b9fe:	d94d      	bls.n	800ba9c <_svfiprintf_r+0x17c>
 800ba00:	b1b0      	cbz	r0, 800ba30 <_svfiprintf_r+0x110>
 800ba02:	9207      	str	r2, [sp, #28]
 800ba04:	e014      	b.n	800ba30 <_svfiprintf_r+0x110>
 800ba06:	eba0 0308 	sub.w	r3, r0, r8
 800ba0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	9304      	str	r3, [sp, #16]
 800ba12:	46a2      	mov	sl, r4
 800ba14:	e7d2      	b.n	800b9bc <_svfiprintf_r+0x9c>
 800ba16:	9b03      	ldr	r3, [sp, #12]
 800ba18:	1d19      	adds	r1, r3, #4
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	9103      	str	r1, [sp, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	bfbb      	ittet	lt
 800ba22:	425b      	neglt	r3, r3
 800ba24:	f042 0202 	orrlt.w	r2, r2, #2
 800ba28:	9307      	strge	r3, [sp, #28]
 800ba2a:	9307      	strlt	r3, [sp, #28]
 800ba2c:	bfb8      	it	lt
 800ba2e:	9204      	strlt	r2, [sp, #16]
 800ba30:	7823      	ldrb	r3, [r4, #0]
 800ba32:	2b2e      	cmp	r3, #46	; 0x2e
 800ba34:	d10c      	bne.n	800ba50 <_svfiprintf_r+0x130>
 800ba36:	7863      	ldrb	r3, [r4, #1]
 800ba38:	2b2a      	cmp	r3, #42	; 0x2a
 800ba3a:	d134      	bne.n	800baa6 <_svfiprintf_r+0x186>
 800ba3c:	9b03      	ldr	r3, [sp, #12]
 800ba3e:	1d1a      	adds	r2, r3, #4
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	9203      	str	r2, [sp, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bfb8      	it	lt
 800ba48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba4c:	3402      	adds	r4, #2
 800ba4e:	9305      	str	r3, [sp, #20]
 800ba50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bb18 <_svfiprintf_r+0x1f8>
 800ba54:	7821      	ldrb	r1, [r4, #0]
 800ba56:	2203      	movs	r2, #3
 800ba58:	4650      	mov	r0, sl
 800ba5a:	f7f4 fc41 	bl	80002e0 <memchr>
 800ba5e:	b138      	cbz	r0, 800ba70 <_svfiprintf_r+0x150>
 800ba60:	9b04      	ldr	r3, [sp, #16]
 800ba62:	eba0 000a 	sub.w	r0, r0, sl
 800ba66:	2240      	movs	r2, #64	; 0x40
 800ba68:	4082      	lsls	r2, r0
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	3401      	adds	r4, #1
 800ba6e:	9304      	str	r3, [sp, #16]
 800ba70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba74:	4825      	ldr	r0, [pc, #148]	; (800bb0c <_svfiprintf_r+0x1ec>)
 800ba76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba7a:	2206      	movs	r2, #6
 800ba7c:	f7f4 fc30 	bl	80002e0 <memchr>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d038      	beq.n	800baf6 <_svfiprintf_r+0x1d6>
 800ba84:	4b22      	ldr	r3, [pc, #136]	; (800bb10 <_svfiprintf_r+0x1f0>)
 800ba86:	bb1b      	cbnz	r3, 800bad0 <_svfiprintf_r+0x1b0>
 800ba88:	9b03      	ldr	r3, [sp, #12]
 800ba8a:	3307      	adds	r3, #7
 800ba8c:	f023 0307 	bic.w	r3, r3, #7
 800ba90:	3308      	adds	r3, #8
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba96:	4433      	add	r3, r6
 800ba98:	9309      	str	r3, [sp, #36]	; 0x24
 800ba9a:	e768      	b.n	800b96e <_svfiprintf_r+0x4e>
 800ba9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800baa0:	460c      	mov	r4, r1
 800baa2:	2001      	movs	r0, #1
 800baa4:	e7a6      	b.n	800b9f4 <_svfiprintf_r+0xd4>
 800baa6:	2300      	movs	r3, #0
 800baa8:	3401      	adds	r4, #1
 800baaa:	9305      	str	r3, [sp, #20]
 800baac:	4619      	mov	r1, r3
 800baae:	f04f 0c0a 	mov.w	ip, #10
 800bab2:	4620      	mov	r0, r4
 800bab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bab8:	3a30      	subs	r2, #48	; 0x30
 800baba:	2a09      	cmp	r2, #9
 800babc:	d903      	bls.n	800bac6 <_svfiprintf_r+0x1a6>
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0c6      	beq.n	800ba50 <_svfiprintf_r+0x130>
 800bac2:	9105      	str	r1, [sp, #20]
 800bac4:	e7c4      	b.n	800ba50 <_svfiprintf_r+0x130>
 800bac6:	fb0c 2101 	mla	r1, ip, r1, r2
 800baca:	4604      	mov	r4, r0
 800bacc:	2301      	movs	r3, #1
 800bace:	e7f0      	b.n	800bab2 <_svfiprintf_r+0x192>
 800bad0:	ab03      	add	r3, sp, #12
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	462a      	mov	r2, r5
 800bad6:	4b0f      	ldr	r3, [pc, #60]	; (800bb14 <_svfiprintf_r+0x1f4>)
 800bad8:	a904      	add	r1, sp, #16
 800bada:	4638      	mov	r0, r7
 800badc:	f3af 8000 	nop.w
 800bae0:	1c42      	adds	r2, r0, #1
 800bae2:	4606      	mov	r6, r0
 800bae4:	d1d6      	bne.n	800ba94 <_svfiprintf_r+0x174>
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	065b      	lsls	r3, r3, #25
 800baea:	f53f af2d 	bmi.w	800b948 <_svfiprintf_r+0x28>
 800baee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baf0:	b01d      	add	sp, #116	; 0x74
 800baf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	ab03      	add	r3, sp, #12
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	462a      	mov	r2, r5
 800bafc:	4b05      	ldr	r3, [pc, #20]	; (800bb14 <_svfiprintf_r+0x1f4>)
 800bafe:	a904      	add	r1, sp, #16
 800bb00:	4638      	mov	r0, r7
 800bb02:	f000 f879 	bl	800bbf8 <_printf_i>
 800bb06:	e7eb      	b.n	800bae0 <_svfiprintf_r+0x1c0>
 800bb08:	0800d347 	.word	0x0800d347
 800bb0c:	0800d351 	.word	0x0800d351
 800bb10:	00000000 	.word	0x00000000
 800bb14:	0800b86d 	.word	0x0800b86d
 800bb18:	0800d34d 	.word	0x0800d34d

0800bb1c <_printf_common>:
 800bb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb20:	4616      	mov	r6, r2
 800bb22:	4699      	mov	r9, r3
 800bb24:	688a      	ldr	r2, [r1, #8]
 800bb26:	690b      	ldr	r3, [r1, #16]
 800bb28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	bfb8      	it	lt
 800bb30:	4613      	movlt	r3, r2
 800bb32:	6033      	str	r3, [r6, #0]
 800bb34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb38:	4607      	mov	r7, r0
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	b10a      	cbz	r2, 800bb42 <_printf_common+0x26>
 800bb3e:	3301      	adds	r3, #1
 800bb40:	6033      	str	r3, [r6, #0]
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	0699      	lsls	r1, r3, #26
 800bb46:	bf42      	ittt	mi
 800bb48:	6833      	ldrmi	r3, [r6, #0]
 800bb4a:	3302      	addmi	r3, #2
 800bb4c:	6033      	strmi	r3, [r6, #0]
 800bb4e:	6825      	ldr	r5, [r4, #0]
 800bb50:	f015 0506 	ands.w	r5, r5, #6
 800bb54:	d106      	bne.n	800bb64 <_printf_common+0x48>
 800bb56:	f104 0a19 	add.w	sl, r4, #25
 800bb5a:	68e3      	ldr	r3, [r4, #12]
 800bb5c:	6832      	ldr	r2, [r6, #0]
 800bb5e:	1a9b      	subs	r3, r3, r2
 800bb60:	42ab      	cmp	r3, r5
 800bb62:	dc26      	bgt.n	800bbb2 <_printf_common+0x96>
 800bb64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb68:	1e13      	subs	r3, r2, #0
 800bb6a:	6822      	ldr	r2, [r4, #0]
 800bb6c:	bf18      	it	ne
 800bb6e:	2301      	movne	r3, #1
 800bb70:	0692      	lsls	r2, r2, #26
 800bb72:	d42b      	bmi.n	800bbcc <_printf_common+0xb0>
 800bb74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb78:	4649      	mov	r1, r9
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	47c0      	blx	r8
 800bb7e:	3001      	adds	r0, #1
 800bb80:	d01e      	beq.n	800bbc0 <_printf_common+0xa4>
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	6922      	ldr	r2, [r4, #16]
 800bb86:	f003 0306 	and.w	r3, r3, #6
 800bb8a:	2b04      	cmp	r3, #4
 800bb8c:	bf02      	ittt	eq
 800bb8e:	68e5      	ldreq	r5, [r4, #12]
 800bb90:	6833      	ldreq	r3, [r6, #0]
 800bb92:	1aed      	subeq	r5, r5, r3
 800bb94:	68a3      	ldr	r3, [r4, #8]
 800bb96:	bf0c      	ite	eq
 800bb98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb9c:	2500      	movne	r5, #0
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	bfc4      	itt	gt
 800bba2:	1a9b      	subgt	r3, r3, r2
 800bba4:	18ed      	addgt	r5, r5, r3
 800bba6:	2600      	movs	r6, #0
 800bba8:	341a      	adds	r4, #26
 800bbaa:	42b5      	cmp	r5, r6
 800bbac:	d11a      	bne.n	800bbe4 <_printf_common+0xc8>
 800bbae:	2000      	movs	r0, #0
 800bbb0:	e008      	b.n	800bbc4 <_printf_common+0xa8>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	4652      	mov	r2, sl
 800bbb6:	4649      	mov	r1, r9
 800bbb8:	4638      	mov	r0, r7
 800bbba:	47c0      	blx	r8
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d103      	bne.n	800bbc8 <_printf_common+0xac>
 800bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc8:	3501      	adds	r5, #1
 800bbca:	e7c6      	b.n	800bb5a <_printf_common+0x3e>
 800bbcc:	18e1      	adds	r1, r4, r3
 800bbce:	1c5a      	adds	r2, r3, #1
 800bbd0:	2030      	movs	r0, #48	; 0x30
 800bbd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbd6:	4422      	add	r2, r4
 800bbd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbe0:	3302      	adds	r3, #2
 800bbe2:	e7c7      	b.n	800bb74 <_printf_common+0x58>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	4622      	mov	r2, r4
 800bbe8:	4649      	mov	r1, r9
 800bbea:	4638      	mov	r0, r7
 800bbec:	47c0      	blx	r8
 800bbee:	3001      	adds	r0, #1
 800bbf0:	d0e6      	beq.n	800bbc0 <_printf_common+0xa4>
 800bbf2:	3601      	adds	r6, #1
 800bbf4:	e7d9      	b.n	800bbaa <_printf_common+0x8e>
	...

0800bbf8 <_printf_i>:
 800bbf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbfc:	7e0f      	ldrb	r7, [r1, #24]
 800bbfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc00:	2f78      	cmp	r7, #120	; 0x78
 800bc02:	4691      	mov	r9, r2
 800bc04:	4680      	mov	r8, r0
 800bc06:	460c      	mov	r4, r1
 800bc08:	469a      	mov	sl, r3
 800bc0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc0e:	d807      	bhi.n	800bc20 <_printf_i+0x28>
 800bc10:	2f62      	cmp	r7, #98	; 0x62
 800bc12:	d80a      	bhi.n	800bc2a <_printf_i+0x32>
 800bc14:	2f00      	cmp	r7, #0
 800bc16:	f000 80d4 	beq.w	800bdc2 <_printf_i+0x1ca>
 800bc1a:	2f58      	cmp	r7, #88	; 0x58
 800bc1c:	f000 80c0 	beq.w	800bda0 <_printf_i+0x1a8>
 800bc20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc28:	e03a      	b.n	800bca0 <_printf_i+0xa8>
 800bc2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc2e:	2b15      	cmp	r3, #21
 800bc30:	d8f6      	bhi.n	800bc20 <_printf_i+0x28>
 800bc32:	a101      	add	r1, pc, #4	; (adr r1, 800bc38 <_printf_i+0x40>)
 800bc34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc38:	0800bc91 	.word	0x0800bc91
 800bc3c:	0800bca5 	.word	0x0800bca5
 800bc40:	0800bc21 	.word	0x0800bc21
 800bc44:	0800bc21 	.word	0x0800bc21
 800bc48:	0800bc21 	.word	0x0800bc21
 800bc4c:	0800bc21 	.word	0x0800bc21
 800bc50:	0800bca5 	.word	0x0800bca5
 800bc54:	0800bc21 	.word	0x0800bc21
 800bc58:	0800bc21 	.word	0x0800bc21
 800bc5c:	0800bc21 	.word	0x0800bc21
 800bc60:	0800bc21 	.word	0x0800bc21
 800bc64:	0800bda9 	.word	0x0800bda9
 800bc68:	0800bcd1 	.word	0x0800bcd1
 800bc6c:	0800bd63 	.word	0x0800bd63
 800bc70:	0800bc21 	.word	0x0800bc21
 800bc74:	0800bc21 	.word	0x0800bc21
 800bc78:	0800bdcb 	.word	0x0800bdcb
 800bc7c:	0800bc21 	.word	0x0800bc21
 800bc80:	0800bcd1 	.word	0x0800bcd1
 800bc84:	0800bc21 	.word	0x0800bc21
 800bc88:	0800bc21 	.word	0x0800bc21
 800bc8c:	0800bd6b 	.word	0x0800bd6b
 800bc90:	682b      	ldr	r3, [r5, #0]
 800bc92:	1d1a      	adds	r2, r3, #4
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	602a      	str	r2, [r5, #0]
 800bc98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bca0:	2301      	movs	r3, #1
 800bca2:	e09f      	b.n	800bde4 <_printf_i+0x1ec>
 800bca4:	6820      	ldr	r0, [r4, #0]
 800bca6:	682b      	ldr	r3, [r5, #0]
 800bca8:	0607      	lsls	r7, r0, #24
 800bcaa:	f103 0104 	add.w	r1, r3, #4
 800bcae:	6029      	str	r1, [r5, #0]
 800bcb0:	d501      	bpl.n	800bcb6 <_printf_i+0xbe>
 800bcb2:	681e      	ldr	r6, [r3, #0]
 800bcb4:	e003      	b.n	800bcbe <_printf_i+0xc6>
 800bcb6:	0646      	lsls	r6, r0, #25
 800bcb8:	d5fb      	bpl.n	800bcb2 <_printf_i+0xba>
 800bcba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	da03      	bge.n	800bcca <_printf_i+0xd2>
 800bcc2:	232d      	movs	r3, #45	; 0x2d
 800bcc4:	4276      	negs	r6, r6
 800bcc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcca:	485a      	ldr	r0, [pc, #360]	; (800be34 <_printf_i+0x23c>)
 800bccc:	230a      	movs	r3, #10
 800bcce:	e012      	b.n	800bcf6 <_printf_i+0xfe>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	6820      	ldr	r0, [r4, #0]
 800bcd4:	1d19      	adds	r1, r3, #4
 800bcd6:	6029      	str	r1, [r5, #0]
 800bcd8:	0605      	lsls	r5, r0, #24
 800bcda:	d501      	bpl.n	800bce0 <_printf_i+0xe8>
 800bcdc:	681e      	ldr	r6, [r3, #0]
 800bcde:	e002      	b.n	800bce6 <_printf_i+0xee>
 800bce0:	0641      	lsls	r1, r0, #25
 800bce2:	d5fb      	bpl.n	800bcdc <_printf_i+0xe4>
 800bce4:	881e      	ldrh	r6, [r3, #0]
 800bce6:	4853      	ldr	r0, [pc, #332]	; (800be34 <_printf_i+0x23c>)
 800bce8:	2f6f      	cmp	r7, #111	; 0x6f
 800bcea:	bf0c      	ite	eq
 800bcec:	2308      	moveq	r3, #8
 800bcee:	230a      	movne	r3, #10
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcf6:	6865      	ldr	r5, [r4, #4]
 800bcf8:	60a5      	str	r5, [r4, #8]
 800bcfa:	2d00      	cmp	r5, #0
 800bcfc:	bfa2      	ittt	ge
 800bcfe:	6821      	ldrge	r1, [r4, #0]
 800bd00:	f021 0104 	bicge.w	r1, r1, #4
 800bd04:	6021      	strge	r1, [r4, #0]
 800bd06:	b90e      	cbnz	r6, 800bd0c <_printf_i+0x114>
 800bd08:	2d00      	cmp	r5, #0
 800bd0a:	d04b      	beq.n	800bda4 <_printf_i+0x1ac>
 800bd0c:	4615      	mov	r5, r2
 800bd0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd12:	fb03 6711 	mls	r7, r3, r1, r6
 800bd16:	5dc7      	ldrb	r7, [r0, r7]
 800bd18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd1c:	4637      	mov	r7, r6
 800bd1e:	42bb      	cmp	r3, r7
 800bd20:	460e      	mov	r6, r1
 800bd22:	d9f4      	bls.n	800bd0e <_printf_i+0x116>
 800bd24:	2b08      	cmp	r3, #8
 800bd26:	d10b      	bne.n	800bd40 <_printf_i+0x148>
 800bd28:	6823      	ldr	r3, [r4, #0]
 800bd2a:	07de      	lsls	r6, r3, #31
 800bd2c:	d508      	bpl.n	800bd40 <_printf_i+0x148>
 800bd2e:	6923      	ldr	r3, [r4, #16]
 800bd30:	6861      	ldr	r1, [r4, #4]
 800bd32:	4299      	cmp	r1, r3
 800bd34:	bfde      	ittt	le
 800bd36:	2330      	movle	r3, #48	; 0x30
 800bd38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd40:	1b52      	subs	r2, r2, r5
 800bd42:	6122      	str	r2, [r4, #16]
 800bd44:	f8cd a000 	str.w	sl, [sp]
 800bd48:	464b      	mov	r3, r9
 800bd4a:	aa03      	add	r2, sp, #12
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f7ff fee4 	bl	800bb1c <_printf_common>
 800bd54:	3001      	adds	r0, #1
 800bd56:	d14a      	bne.n	800bdee <_printf_i+0x1f6>
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	b004      	add	sp, #16
 800bd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	f043 0320 	orr.w	r3, r3, #32
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	4833      	ldr	r0, [pc, #204]	; (800be38 <_printf_i+0x240>)
 800bd6c:	2778      	movs	r7, #120	; 0x78
 800bd6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	6829      	ldr	r1, [r5, #0]
 800bd76:	061f      	lsls	r7, r3, #24
 800bd78:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd7c:	d402      	bmi.n	800bd84 <_printf_i+0x18c>
 800bd7e:	065f      	lsls	r7, r3, #25
 800bd80:	bf48      	it	mi
 800bd82:	b2b6      	uxthmi	r6, r6
 800bd84:	07df      	lsls	r7, r3, #31
 800bd86:	bf48      	it	mi
 800bd88:	f043 0320 	orrmi.w	r3, r3, #32
 800bd8c:	6029      	str	r1, [r5, #0]
 800bd8e:	bf48      	it	mi
 800bd90:	6023      	strmi	r3, [r4, #0]
 800bd92:	b91e      	cbnz	r6, 800bd9c <_printf_i+0x1a4>
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	f023 0320 	bic.w	r3, r3, #32
 800bd9a:	6023      	str	r3, [r4, #0]
 800bd9c:	2310      	movs	r3, #16
 800bd9e:	e7a7      	b.n	800bcf0 <_printf_i+0xf8>
 800bda0:	4824      	ldr	r0, [pc, #144]	; (800be34 <_printf_i+0x23c>)
 800bda2:	e7e4      	b.n	800bd6e <_printf_i+0x176>
 800bda4:	4615      	mov	r5, r2
 800bda6:	e7bd      	b.n	800bd24 <_printf_i+0x12c>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	6826      	ldr	r6, [r4, #0]
 800bdac:	6961      	ldr	r1, [r4, #20]
 800bdae:	1d18      	adds	r0, r3, #4
 800bdb0:	6028      	str	r0, [r5, #0]
 800bdb2:	0635      	lsls	r5, r6, #24
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	d501      	bpl.n	800bdbc <_printf_i+0x1c4>
 800bdb8:	6019      	str	r1, [r3, #0]
 800bdba:	e002      	b.n	800bdc2 <_printf_i+0x1ca>
 800bdbc:	0670      	lsls	r0, r6, #25
 800bdbe:	d5fb      	bpl.n	800bdb8 <_printf_i+0x1c0>
 800bdc0:	8019      	strh	r1, [r3, #0]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	6123      	str	r3, [r4, #16]
 800bdc6:	4615      	mov	r5, r2
 800bdc8:	e7bc      	b.n	800bd44 <_printf_i+0x14c>
 800bdca:	682b      	ldr	r3, [r5, #0]
 800bdcc:	1d1a      	adds	r2, r3, #4
 800bdce:	602a      	str	r2, [r5, #0]
 800bdd0:	681d      	ldr	r5, [r3, #0]
 800bdd2:	6862      	ldr	r2, [r4, #4]
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f7f4 fa82 	bl	80002e0 <memchr>
 800bddc:	b108      	cbz	r0, 800bde2 <_printf_i+0x1ea>
 800bdde:	1b40      	subs	r0, r0, r5
 800bde0:	6060      	str	r0, [r4, #4]
 800bde2:	6863      	ldr	r3, [r4, #4]
 800bde4:	6123      	str	r3, [r4, #16]
 800bde6:	2300      	movs	r3, #0
 800bde8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdec:	e7aa      	b.n	800bd44 <_printf_i+0x14c>
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	462a      	mov	r2, r5
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	47d0      	blx	sl
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	d0ad      	beq.n	800bd58 <_printf_i+0x160>
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	079b      	lsls	r3, r3, #30
 800be00:	d413      	bmi.n	800be2a <_printf_i+0x232>
 800be02:	68e0      	ldr	r0, [r4, #12]
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	4298      	cmp	r0, r3
 800be08:	bfb8      	it	lt
 800be0a:	4618      	movlt	r0, r3
 800be0c:	e7a6      	b.n	800bd5c <_printf_i+0x164>
 800be0e:	2301      	movs	r3, #1
 800be10:	4632      	mov	r2, r6
 800be12:	4649      	mov	r1, r9
 800be14:	4640      	mov	r0, r8
 800be16:	47d0      	blx	sl
 800be18:	3001      	adds	r0, #1
 800be1a:	d09d      	beq.n	800bd58 <_printf_i+0x160>
 800be1c:	3501      	adds	r5, #1
 800be1e:	68e3      	ldr	r3, [r4, #12]
 800be20:	9903      	ldr	r1, [sp, #12]
 800be22:	1a5b      	subs	r3, r3, r1
 800be24:	42ab      	cmp	r3, r5
 800be26:	dcf2      	bgt.n	800be0e <_printf_i+0x216>
 800be28:	e7eb      	b.n	800be02 <_printf_i+0x20a>
 800be2a:	2500      	movs	r5, #0
 800be2c:	f104 0619 	add.w	r6, r4, #25
 800be30:	e7f5      	b.n	800be1e <_printf_i+0x226>
 800be32:	bf00      	nop
 800be34:	0800d358 	.word	0x0800d358
 800be38:	0800d369 	.word	0x0800d369

0800be3c <__sflush_r>:
 800be3c:	898a      	ldrh	r2, [r1, #12]
 800be3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be42:	4605      	mov	r5, r0
 800be44:	0710      	lsls	r0, r2, #28
 800be46:	460c      	mov	r4, r1
 800be48:	d458      	bmi.n	800befc <__sflush_r+0xc0>
 800be4a:	684b      	ldr	r3, [r1, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dc05      	bgt.n	800be5c <__sflush_r+0x20>
 800be50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be52:	2b00      	cmp	r3, #0
 800be54:	dc02      	bgt.n	800be5c <__sflush_r+0x20>
 800be56:	2000      	movs	r0, #0
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be5e:	2e00      	cmp	r6, #0
 800be60:	d0f9      	beq.n	800be56 <__sflush_r+0x1a>
 800be62:	2300      	movs	r3, #0
 800be64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be68:	682f      	ldr	r7, [r5, #0]
 800be6a:	6a21      	ldr	r1, [r4, #32]
 800be6c:	602b      	str	r3, [r5, #0]
 800be6e:	d032      	beq.n	800bed6 <__sflush_r+0x9a>
 800be70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be72:	89a3      	ldrh	r3, [r4, #12]
 800be74:	075a      	lsls	r2, r3, #29
 800be76:	d505      	bpl.n	800be84 <__sflush_r+0x48>
 800be78:	6863      	ldr	r3, [r4, #4]
 800be7a:	1ac0      	subs	r0, r0, r3
 800be7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be7e:	b10b      	cbz	r3, 800be84 <__sflush_r+0x48>
 800be80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be82:	1ac0      	subs	r0, r0, r3
 800be84:	2300      	movs	r3, #0
 800be86:	4602      	mov	r2, r0
 800be88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be8a:	6a21      	ldr	r1, [r4, #32]
 800be8c:	4628      	mov	r0, r5
 800be8e:	47b0      	blx	r6
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	d106      	bne.n	800bea4 <__sflush_r+0x68>
 800be96:	6829      	ldr	r1, [r5, #0]
 800be98:	291d      	cmp	r1, #29
 800be9a:	d82b      	bhi.n	800bef4 <__sflush_r+0xb8>
 800be9c:	4a29      	ldr	r2, [pc, #164]	; (800bf44 <__sflush_r+0x108>)
 800be9e:	410a      	asrs	r2, r1
 800bea0:	07d6      	lsls	r6, r2, #31
 800bea2:	d427      	bmi.n	800bef4 <__sflush_r+0xb8>
 800bea4:	2200      	movs	r2, #0
 800bea6:	6062      	str	r2, [r4, #4]
 800bea8:	04d9      	lsls	r1, r3, #19
 800beaa:	6922      	ldr	r2, [r4, #16]
 800beac:	6022      	str	r2, [r4, #0]
 800beae:	d504      	bpl.n	800beba <__sflush_r+0x7e>
 800beb0:	1c42      	adds	r2, r0, #1
 800beb2:	d101      	bne.n	800beb8 <__sflush_r+0x7c>
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	b903      	cbnz	r3, 800beba <__sflush_r+0x7e>
 800beb8:	6560      	str	r0, [r4, #84]	; 0x54
 800beba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bebc:	602f      	str	r7, [r5, #0]
 800bebe:	2900      	cmp	r1, #0
 800bec0:	d0c9      	beq.n	800be56 <__sflush_r+0x1a>
 800bec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bec6:	4299      	cmp	r1, r3
 800bec8:	d002      	beq.n	800bed0 <__sflush_r+0x94>
 800beca:	4628      	mov	r0, r5
 800becc:	f7ff fc82 	bl	800b7d4 <_free_r>
 800bed0:	2000      	movs	r0, #0
 800bed2:	6360      	str	r0, [r4, #52]	; 0x34
 800bed4:	e7c0      	b.n	800be58 <__sflush_r+0x1c>
 800bed6:	2301      	movs	r3, #1
 800bed8:	4628      	mov	r0, r5
 800beda:	47b0      	blx	r6
 800bedc:	1c41      	adds	r1, r0, #1
 800bede:	d1c8      	bne.n	800be72 <__sflush_r+0x36>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d0c5      	beq.n	800be72 <__sflush_r+0x36>
 800bee6:	2b1d      	cmp	r3, #29
 800bee8:	d001      	beq.n	800beee <__sflush_r+0xb2>
 800beea:	2b16      	cmp	r3, #22
 800beec:	d101      	bne.n	800bef2 <__sflush_r+0xb6>
 800beee:	602f      	str	r7, [r5, #0]
 800bef0:	e7b1      	b.n	800be56 <__sflush_r+0x1a>
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bef8:	81a3      	strh	r3, [r4, #12]
 800befa:	e7ad      	b.n	800be58 <__sflush_r+0x1c>
 800befc:	690f      	ldr	r7, [r1, #16]
 800befe:	2f00      	cmp	r7, #0
 800bf00:	d0a9      	beq.n	800be56 <__sflush_r+0x1a>
 800bf02:	0793      	lsls	r3, r2, #30
 800bf04:	680e      	ldr	r6, [r1, #0]
 800bf06:	bf08      	it	eq
 800bf08:	694b      	ldreq	r3, [r1, #20]
 800bf0a:	600f      	str	r7, [r1, #0]
 800bf0c:	bf18      	it	ne
 800bf0e:	2300      	movne	r3, #0
 800bf10:	eba6 0807 	sub.w	r8, r6, r7
 800bf14:	608b      	str	r3, [r1, #8]
 800bf16:	f1b8 0f00 	cmp.w	r8, #0
 800bf1a:	dd9c      	ble.n	800be56 <__sflush_r+0x1a>
 800bf1c:	6a21      	ldr	r1, [r4, #32]
 800bf1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf20:	4643      	mov	r3, r8
 800bf22:	463a      	mov	r2, r7
 800bf24:	4628      	mov	r0, r5
 800bf26:	47b0      	blx	r6
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	dc06      	bgt.n	800bf3a <__sflush_r+0xfe>
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf32:	81a3      	strh	r3, [r4, #12]
 800bf34:	f04f 30ff 	mov.w	r0, #4294967295
 800bf38:	e78e      	b.n	800be58 <__sflush_r+0x1c>
 800bf3a:	4407      	add	r7, r0
 800bf3c:	eba8 0800 	sub.w	r8, r8, r0
 800bf40:	e7e9      	b.n	800bf16 <__sflush_r+0xda>
 800bf42:	bf00      	nop
 800bf44:	dfbffffe 	.word	0xdfbffffe

0800bf48 <_fflush_r>:
 800bf48:	b538      	push	{r3, r4, r5, lr}
 800bf4a:	690b      	ldr	r3, [r1, #16]
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	b913      	cbnz	r3, 800bf58 <_fflush_r+0x10>
 800bf52:	2500      	movs	r5, #0
 800bf54:	4628      	mov	r0, r5
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	b118      	cbz	r0, 800bf62 <_fflush_r+0x1a>
 800bf5a:	6a03      	ldr	r3, [r0, #32]
 800bf5c:	b90b      	cbnz	r3, 800bf62 <_fflush_r+0x1a>
 800bf5e:	f7ff fabb 	bl	800b4d8 <__sinit>
 800bf62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d0f3      	beq.n	800bf52 <_fflush_r+0xa>
 800bf6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf6c:	07d0      	lsls	r0, r2, #31
 800bf6e:	d404      	bmi.n	800bf7a <_fflush_r+0x32>
 800bf70:	0599      	lsls	r1, r3, #22
 800bf72:	d402      	bmi.n	800bf7a <_fflush_r+0x32>
 800bf74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf76:	f7ff fbfe 	bl	800b776 <__retarget_lock_acquire_recursive>
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	f7ff ff5d 	bl	800be3c <__sflush_r>
 800bf82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf84:	07da      	lsls	r2, r3, #31
 800bf86:	4605      	mov	r5, r0
 800bf88:	d4e4      	bmi.n	800bf54 <_fflush_r+0xc>
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	059b      	lsls	r3, r3, #22
 800bf8e:	d4e1      	bmi.n	800bf54 <_fflush_r+0xc>
 800bf90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf92:	f7ff fbf1 	bl	800b778 <__retarget_lock_release_recursive>
 800bf96:	e7dd      	b.n	800bf54 <_fflush_r+0xc>

0800bf98 <fiprintf>:
 800bf98:	b40e      	push	{r1, r2, r3}
 800bf9a:	b503      	push	{r0, r1, lr}
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	ab03      	add	r3, sp, #12
 800bfa0:	4805      	ldr	r0, [pc, #20]	; (800bfb8 <fiprintf+0x20>)
 800bfa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfa6:	6800      	ldr	r0, [r0, #0]
 800bfa8:	9301      	str	r3, [sp, #4]
 800bfaa:	f000 f905 	bl	800c1b8 <_vfiprintf_r>
 800bfae:	b002      	add	sp, #8
 800bfb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfb4:	b003      	add	sp, #12
 800bfb6:	4770      	bx	lr
 800bfb8:	24000090 	.word	0x24000090

0800bfbc <__swhatbuf_r>:
 800bfbc:	b570      	push	{r4, r5, r6, lr}
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc4:	2900      	cmp	r1, #0
 800bfc6:	b096      	sub	sp, #88	; 0x58
 800bfc8:	4615      	mov	r5, r2
 800bfca:	461e      	mov	r6, r3
 800bfcc:	da0d      	bge.n	800bfea <__swhatbuf_r+0x2e>
 800bfce:	89a3      	ldrh	r3, [r4, #12]
 800bfd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bfd4:	f04f 0100 	mov.w	r1, #0
 800bfd8:	bf0c      	ite	eq
 800bfda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bfde:	2340      	movne	r3, #64	; 0x40
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	6031      	str	r1, [r6, #0]
 800bfe4:	602b      	str	r3, [r5, #0]
 800bfe6:	b016      	add	sp, #88	; 0x58
 800bfe8:	bd70      	pop	{r4, r5, r6, pc}
 800bfea:	466a      	mov	r2, sp
 800bfec:	f000 f862 	bl	800c0b4 <_fstat_r>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	dbec      	blt.n	800bfce <__swhatbuf_r+0x12>
 800bff4:	9901      	ldr	r1, [sp, #4]
 800bff6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bffa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bffe:	4259      	negs	r1, r3
 800c000:	4159      	adcs	r1, r3
 800c002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c006:	e7eb      	b.n	800bfe0 <__swhatbuf_r+0x24>

0800c008 <__smakebuf_r>:
 800c008:	898b      	ldrh	r3, [r1, #12]
 800c00a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c00c:	079d      	lsls	r5, r3, #30
 800c00e:	4606      	mov	r6, r0
 800c010:	460c      	mov	r4, r1
 800c012:	d507      	bpl.n	800c024 <__smakebuf_r+0x1c>
 800c014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	6123      	str	r3, [r4, #16]
 800c01c:	2301      	movs	r3, #1
 800c01e:	6163      	str	r3, [r4, #20]
 800c020:	b002      	add	sp, #8
 800c022:	bd70      	pop	{r4, r5, r6, pc}
 800c024:	ab01      	add	r3, sp, #4
 800c026:	466a      	mov	r2, sp
 800c028:	f7ff ffc8 	bl	800bfbc <__swhatbuf_r>
 800c02c:	9900      	ldr	r1, [sp, #0]
 800c02e:	4605      	mov	r5, r0
 800c030:	4630      	mov	r0, r6
 800c032:	f7ff f90b 	bl	800b24c <_malloc_r>
 800c036:	b948      	cbnz	r0, 800c04c <__smakebuf_r+0x44>
 800c038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c03c:	059a      	lsls	r2, r3, #22
 800c03e:	d4ef      	bmi.n	800c020 <__smakebuf_r+0x18>
 800c040:	f023 0303 	bic.w	r3, r3, #3
 800c044:	f043 0302 	orr.w	r3, r3, #2
 800c048:	81a3      	strh	r3, [r4, #12]
 800c04a:	e7e3      	b.n	800c014 <__smakebuf_r+0xc>
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	6020      	str	r0, [r4, #0]
 800c050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c054:	81a3      	strh	r3, [r4, #12]
 800c056:	9b00      	ldr	r3, [sp, #0]
 800c058:	6163      	str	r3, [r4, #20]
 800c05a:	9b01      	ldr	r3, [sp, #4]
 800c05c:	6120      	str	r0, [r4, #16]
 800c05e:	b15b      	cbz	r3, 800c078 <__smakebuf_r+0x70>
 800c060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c064:	4630      	mov	r0, r6
 800c066:	f000 f837 	bl	800c0d8 <_isatty_r>
 800c06a:	b128      	cbz	r0, 800c078 <__smakebuf_r+0x70>
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	f023 0303 	bic.w	r3, r3, #3
 800c072:	f043 0301 	orr.w	r3, r3, #1
 800c076:	81a3      	strh	r3, [r4, #12]
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	431d      	orrs	r5, r3
 800c07c:	81a5      	strh	r5, [r4, #12]
 800c07e:	e7cf      	b.n	800c020 <__smakebuf_r+0x18>

0800c080 <memmove>:
 800c080:	4288      	cmp	r0, r1
 800c082:	b510      	push	{r4, lr}
 800c084:	eb01 0402 	add.w	r4, r1, r2
 800c088:	d902      	bls.n	800c090 <memmove+0x10>
 800c08a:	4284      	cmp	r4, r0
 800c08c:	4623      	mov	r3, r4
 800c08e:	d807      	bhi.n	800c0a0 <memmove+0x20>
 800c090:	1e43      	subs	r3, r0, #1
 800c092:	42a1      	cmp	r1, r4
 800c094:	d008      	beq.n	800c0a8 <memmove+0x28>
 800c096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c09a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c09e:	e7f8      	b.n	800c092 <memmove+0x12>
 800c0a0:	4402      	add	r2, r0
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	428a      	cmp	r2, r1
 800c0a6:	d100      	bne.n	800c0aa <memmove+0x2a>
 800c0a8:	bd10      	pop	{r4, pc}
 800c0aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0b2:	e7f7      	b.n	800c0a4 <memmove+0x24>

0800c0b4 <_fstat_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4d07      	ldr	r5, [pc, #28]	; (800c0d4 <_fstat_r+0x20>)
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	4608      	mov	r0, r1
 800c0be:	4611      	mov	r1, r2
 800c0c0:	602b      	str	r3, [r5, #0]
 800c0c2:	f7f4 fd31 	bl	8000b28 <_fstat>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	d102      	bne.n	800c0d0 <_fstat_r+0x1c>
 800c0ca:	682b      	ldr	r3, [r5, #0]
 800c0cc:	b103      	cbz	r3, 800c0d0 <_fstat_r+0x1c>
 800c0ce:	6023      	str	r3, [r4, #0]
 800c0d0:	bd38      	pop	{r3, r4, r5, pc}
 800c0d2:	bf00      	nop
 800c0d4:	240015e0 	.word	0x240015e0

0800c0d8 <_isatty_r>:
 800c0d8:	b538      	push	{r3, r4, r5, lr}
 800c0da:	4d06      	ldr	r5, [pc, #24]	; (800c0f4 <_isatty_r+0x1c>)
 800c0dc:	2300      	movs	r3, #0
 800c0de:	4604      	mov	r4, r0
 800c0e0:	4608      	mov	r0, r1
 800c0e2:	602b      	str	r3, [r5, #0]
 800c0e4:	f7f4 fce2 	bl	8000aac <_isatty>
 800c0e8:	1c43      	adds	r3, r0, #1
 800c0ea:	d102      	bne.n	800c0f2 <_isatty_r+0x1a>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	b103      	cbz	r3, 800c0f2 <_isatty_r+0x1a>
 800c0f0:	6023      	str	r3, [r4, #0]
 800c0f2:	bd38      	pop	{r3, r4, r5, pc}
 800c0f4:	240015e0 	.word	0x240015e0

0800c0f8 <abort>:
 800c0f8:	b508      	push	{r3, lr}
 800c0fa:	2006      	movs	r0, #6
 800c0fc:	f000 fa34 	bl	800c568 <raise>
 800c100:	2001      	movs	r0, #1
 800c102:	f7f5 fa14 	bl	800152e <_exit>

0800c106 <_realloc_r>:
 800c106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10a:	4680      	mov	r8, r0
 800c10c:	4614      	mov	r4, r2
 800c10e:	460e      	mov	r6, r1
 800c110:	b921      	cbnz	r1, 800c11c <_realloc_r+0x16>
 800c112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c116:	4611      	mov	r1, r2
 800c118:	f7ff b898 	b.w	800b24c <_malloc_r>
 800c11c:	b92a      	cbnz	r2, 800c12a <_realloc_r+0x24>
 800c11e:	f7ff fb59 	bl	800b7d4 <_free_r>
 800c122:	4625      	mov	r5, r4
 800c124:	4628      	mov	r0, r5
 800c126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c12a:	f000 fa39 	bl	800c5a0 <_malloc_usable_size_r>
 800c12e:	4284      	cmp	r4, r0
 800c130:	4607      	mov	r7, r0
 800c132:	d802      	bhi.n	800c13a <_realloc_r+0x34>
 800c134:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c138:	d812      	bhi.n	800c160 <_realloc_r+0x5a>
 800c13a:	4621      	mov	r1, r4
 800c13c:	4640      	mov	r0, r8
 800c13e:	f7ff f885 	bl	800b24c <_malloc_r>
 800c142:	4605      	mov	r5, r0
 800c144:	2800      	cmp	r0, #0
 800c146:	d0ed      	beq.n	800c124 <_realloc_r+0x1e>
 800c148:	42bc      	cmp	r4, r7
 800c14a:	4622      	mov	r2, r4
 800c14c:	4631      	mov	r1, r6
 800c14e:	bf28      	it	cs
 800c150:	463a      	movcs	r2, r7
 800c152:	f7ff fb12 	bl	800b77a <memcpy>
 800c156:	4631      	mov	r1, r6
 800c158:	4640      	mov	r0, r8
 800c15a:	f7ff fb3b 	bl	800b7d4 <_free_r>
 800c15e:	e7e1      	b.n	800c124 <_realloc_r+0x1e>
 800c160:	4635      	mov	r5, r6
 800c162:	e7df      	b.n	800c124 <_realloc_r+0x1e>

0800c164 <__sfputc_r>:
 800c164:	6893      	ldr	r3, [r2, #8]
 800c166:	3b01      	subs	r3, #1
 800c168:	2b00      	cmp	r3, #0
 800c16a:	b410      	push	{r4}
 800c16c:	6093      	str	r3, [r2, #8]
 800c16e:	da08      	bge.n	800c182 <__sfputc_r+0x1e>
 800c170:	6994      	ldr	r4, [r2, #24]
 800c172:	42a3      	cmp	r3, r4
 800c174:	db01      	blt.n	800c17a <__sfputc_r+0x16>
 800c176:	290a      	cmp	r1, #10
 800c178:	d103      	bne.n	800c182 <__sfputc_r+0x1e>
 800c17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c17e:	f000 b935 	b.w	800c3ec <__swbuf_r>
 800c182:	6813      	ldr	r3, [r2, #0]
 800c184:	1c58      	adds	r0, r3, #1
 800c186:	6010      	str	r0, [r2, #0]
 800c188:	7019      	strb	r1, [r3, #0]
 800c18a:	4608      	mov	r0, r1
 800c18c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <__sfputs_r>:
 800c192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c194:	4606      	mov	r6, r0
 800c196:	460f      	mov	r7, r1
 800c198:	4614      	mov	r4, r2
 800c19a:	18d5      	adds	r5, r2, r3
 800c19c:	42ac      	cmp	r4, r5
 800c19e:	d101      	bne.n	800c1a4 <__sfputs_r+0x12>
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	e007      	b.n	800c1b4 <__sfputs_r+0x22>
 800c1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1a8:	463a      	mov	r2, r7
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7ff ffda 	bl	800c164 <__sfputc_r>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d1f3      	bne.n	800c19c <__sfputs_r+0xa>
 800c1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1b8 <_vfiprintf_r>:
 800c1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1bc:	460d      	mov	r5, r1
 800c1be:	b09d      	sub	sp, #116	; 0x74
 800c1c0:	4614      	mov	r4, r2
 800c1c2:	4698      	mov	r8, r3
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	b118      	cbz	r0, 800c1d0 <_vfiprintf_r+0x18>
 800c1c8:	6a03      	ldr	r3, [r0, #32]
 800c1ca:	b90b      	cbnz	r3, 800c1d0 <_vfiprintf_r+0x18>
 800c1cc:	f7ff f984 	bl	800b4d8 <__sinit>
 800c1d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1d2:	07d9      	lsls	r1, r3, #31
 800c1d4:	d405      	bmi.n	800c1e2 <_vfiprintf_r+0x2a>
 800c1d6:	89ab      	ldrh	r3, [r5, #12]
 800c1d8:	059a      	lsls	r2, r3, #22
 800c1da:	d402      	bmi.n	800c1e2 <_vfiprintf_r+0x2a>
 800c1dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1de:	f7ff faca 	bl	800b776 <__retarget_lock_acquire_recursive>
 800c1e2:	89ab      	ldrh	r3, [r5, #12]
 800c1e4:	071b      	lsls	r3, r3, #28
 800c1e6:	d501      	bpl.n	800c1ec <_vfiprintf_r+0x34>
 800c1e8:	692b      	ldr	r3, [r5, #16]
 800c1ea:	b99b      	cbnz	r3, 800c214 <_vfiprintf_r+0x5c>
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f000 f93a 	bl	800c468 <__swsetup_r>
 800c1f4:	b170      	cbz	r0, 800c214 <_vfiprintf_r+0x5c>
 800c1f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1f8:	07dc      	lsls	r4, r3, #31
 800c1fa:	d504      	bpl.n	800c206 <_vfiprintf_r+0x4e>
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	b01d      	add	sp, #116	; 0x74
 800c202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c206:	89ab      	ldrh	r3, [r5, #12]
 800c208:	0598      	lsls	r0, r3, #22
 800c20a:	d4f7      	bmi.n	800c1fc <_vfiprintf_r+0x44>
 800c20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c20e:	f7ff fab3 	bl	800b778 <__retarget_lock_release_recursive>
 800c212:	e7f3      	b.n	800c1fc <_vfiprintf_r+0x44>
 800c214:	2300      	movs	r3, #0
 800c216:	9309      	str	r3, [sp, #36]	; 0x24
 800c218:	2320      	movs	r3, #32
 800c21a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c21e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c222:	2330      	movs	r3, #48	; 0x30
 800c224:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c3d8 <_vfiprintf_r+0x220>
 800c228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c22c:	f04f 0901 	mov.w	r9, #1
 800c230:	4623      	mov	r3, r4
 800c232:	469a      	mov	sl, r3
 800c234:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c238:	b10a      	cbz	r2, 800c23e <_vfiprintf_r+0x86>
 800c23a:	2a25      	cmp	r2, #37	; 0x25
 800c23c:	d1f9      	bne.n	800c232 <_vfiprintf_r+0x7a>
 800c23e:	ebba 0b04 	subs.w	fp, sl, r4
 800c242:	d00b      	beq.n	800c25c <_vfiprintf_r+0xa4>
 800c244:	465b      	mov	r3, fp
 800c246:	4622      	mov	r2, r4
 800c248:	4629      	mov	r1, r5
 800c24a:	4630      	mov	r0, r6
 800c24c:	f7ff ffa1 	bl	800c192 <__sfputs_r>
 800c250:	3001      	adds	r0, #1
 800c252:	f000 80a9 	beq.w	800c3a8 <_vfiprintf_r+0x1f0>
 800c256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c258:	445a      	add	r2, fp
 800c25a:	9209      	str	r2, [sp, #36]	; 0x24
 800c25c:	f89a 3000 	ldrb.w	r3, [sl]
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 80a1 	beq.w	800c3a8 <_vfiprintf_r+0x1f0>
 800c266:	2300      	movs	r3, #0
 800c268:	f04f 32ff 	mov.w	r2, #4294967295
 800c26c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c270:	f10a 0a01 	add.w	sl, sl, #1
 800c274:	9304      	str	r3, [sp, #16]
 800c276:	9307      	str	r3, [sp, #28]
 800c278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c27c:	931a      	str	r3, [sp, #104]	; 0x68
 800c27e:	4654      	mov	r4, sl
 800c280:	2205      	movs	r2, #5
 800c282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c286:	4854      	ldr	r0, [pc, #336]	; (800c3d8 <_vfiprintf_r+0x220>)
 800c288:	f7f4 f82a 	bl	80002e0 <memchr>
 800c28c:	9a04      	ldr	r2, [sp, #16]
 800c28e:	b9d8      	cbnz	r0, 800c2c8 <_vfiprintf_r+0x110>
 800c290:	06d1      	lsls	r1, r2, #27
 800c292:	bf44      	itt	mi
 800c294:	2320      	movmi	r3, #32
 800c296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c29a:	0713      	lsls	r3, r2, #28
 800c29c:	bf44      	itt	mi
 800c29e:	232b      	movmi	r3, #43	; 0x2b
 800c2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2aa:	d015      	beq.n	800c2d8 <_vfiprintf_r+0x120>
 800c2ac:	9a07      	ldr	r2, [sp, #28]
 800c2ae:	4654      	mov	r4, sl
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	f04f 0c0a 	mov.w	ip, #10
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2bc:	3b30      	subs	r3, #48	; 0x30
 800c2be:	2b09      	cmp	r3, #9
 800c2c0:	d94d      	bls.n	800c35e <_vfiprintf_r+0x1a6>
 800c2c2:	b1b0      	cbz	r0, 800c2f2 <_vfiprintf_r+0x13a>
 800c2c4:	9207      	str	r2, [sp, #28]
 800c2c6:	e014      	b.n	800c2f2 <_vfiprintf_r+0x13a>
 800c2c8:	eba0 0308 	sub.w	r3, r0, r8
 800c2cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	9304      	str	r3, [sp, #16]
 800c2d4:	46a2      	mov	sl, r4
 800c2d6:	e7d2      	b.n	800c27e <_vfiprintf_r+0xc6>
 800c2d8:	9b03      	ldr	r3, [sp, #12]
 800c2da:	1d19      	adds	r1, r3, #4
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	9103      	str	r1, [sp, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	bfbb      	ittet	lt
 800c2e4:	425b      	neglt	r3, r3
 800c2e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c2ea:	9307      	strge	r3, [sp, #28]
 800c2ec:	9307      	strlt	r3, [sp, #28]
 800c2ee:	bfb8      	it	lt
 800c2f0:	9204      	strlt	r2, [sp, #16]
 800c2f2:	7823      	ldrb	r3, [r4, #0]
 800c2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c2f6:	d10c      	bne.n	800c312 <_vfiprintf_r+0x15a>
 800c2f8:	7863      	ldrb	r3, [r4, #1]
 800c2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c2fc:	d134      	bne.n	800c368 <_vfiprintf_r+0x1b0>
 800c2fe:	9b03      	ldr	r3, [sp, #12]
 800c300:	1d1a      	adds	r2, r3, #4
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	9203      	str	r2, [sp, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	bfb8      	it	lt
 800c30a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c30e:	3402      	adds	r4, #2
 800c310:	9305      	str	r3, [sp, #20]
 800c312:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c3e8 <_vfiprintf_r+0x230>
 800c316:	7821      	ldrb	r1, [r4, #0]
 800c318:	2203      	movs	r2, #3
 800c31a:	4650      	mov	r0, sl
 800c31c:	f7f3 ffe0 	bl	80002e0 <memchr>
 800c320:	b138      	cbz	r0, 800c332 <_vfiprintf_r+0x17a>
 800c322:	9b04      	ldr	r3, [sp, #16]
 800c324:	eba0 000a 	sub.w	r0, r0, sl
 800c328:	2240      	movs	r2, #64	; 0x40
 800c32a:	4082      	lsls	r2, r0
 800c32c:	4313      	orrs	r3, r2
 800c32e:	3401      	adds	r4, #1
 800c330:	9304      	str	r3, [sp, #16]
 800c332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c336:	4829      	ldr	r0, [pc, #164]	; (800c3dc <_vfiprintf_r+0x224>)
 800c338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c33c:	2206      	movs	r2, #6
 800c33e:	f7f3 ffcf 	bl	80002e0 <memchr>
 800c342:	2800      	cmp	r0, #0
 800c344:	d03f      	beq.n	800c3c6 <_vfiprintf_r+0x20e>
 800c346:	4b26      	ldr	r3, [pc, #152]	; (800c3e0 <_vfiprintf_r+0x228>)
 800c348:	bb1b      	cbnz	r3, 800c392 <_vfiprintf_r+0x1da>
 800c34a:	9b03      	ldr	r3, [sp, #12]
 800c34c:	3307      	adds	r3, #7
 800c34e:	f023 0307 	bic.w	r3, r3, #7
 800c352:	3308      	adds	r3, #8
 800c354:	9303      	str	r3, [sp, #12]
 800c356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c358:	443b      	add	r3, r7
 800c35a:	9309      	str	r3, [sp, #36]	; 0x24
 800c35c:	e768      	b.n	800c230 <_vfiprintf_r+0x78>
 800c35e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c362:	460c      	mov	r4, r1
 800c364:	2001      	movs	r0, #1
 800c366:	e7a6      	b.n	800c2b6 <_vfiprintf_r+0xfe>
 800c368:	2300      	movs	r3, #0
 800c36a:	3401      	adds	r4, #1
 800c36c:	9305      	str	r3, [sp, #20]
 800c36e:	4619      	mov	r1, r3
 800c370:	f04f 0c0a 	mov.w	ip, #10
 800c374:	4620      	mov	r0, r4
 800c376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c37a:	3a30      	subs	r2, #48	; 0x30
 800c37c:	2a09      	cmp	r2, #9
 800c37e:	d903      	bls.n	800c388 <_vfiprintf_r+0x1d0>
 800c380:	2b00      	cmp	r3, #0
 800c382:	d0c6      	beq.n	800c312 <_vfiprintf_r+0x15a>
 800c384:	9105      	str	r1, [sp, #20]
 800c386:	e7c4      	b.n	800c312 <_vfiprintf_r+0x15a>
 800c388:	fb0c 2101 	mla	r1, ip, r1, r2
 800c38c:	4604      	mov	r4, r0
 800c38e:	2301      	movs	r3, #1
 800c390:	e7f0      	b.n	800c374 <_vfiprintf_r+0x1bc>
 800c392:	ab03      	add	r3, sp, #12
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	462a      	mov	r2, r5
 800c398:	4b12      	ldr	r3, [pc, #72]	; (800c3e4 <_vfiprintf_r+0x22c>)
 800c39a:	a904      	add	r1, sp, #16
 800c39c:	4630      	mov	r0, r6
 800c39e:	f3af 8000 	nop.w
 800c3a2:	4607      	mov	r7, r0
 800c3a4:	1c78      	adds	r0, r7, #1
 800c3a6:	d1d6      	bne.n	800c356 <_vfiprintf_r+0x19e>
 800c3a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3aa:	07d9      	lsls	r1, r3, #31
 800c3ac:	d405      	bmi.n	800c3ba <_vfiprintf_r+0x202>
 800c3ae:	89ab      	ldrh	r3, [r5, #12]
 800c3b0:	059a      	lsls	r2, r3, #22
 800c3b2:	d402      	bmi.n	800c3ba <_vfiprintf_r+0x202>
 800c3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3b6:	f7ff f9df 	bl	800b778 <__retarget_lock_release_recursive>
 800c3ba:	89ab      	ldrh	r3, [r5, #12]
 800c3bc:	065b      	lsls	r3, r3, #25
 800c3be:	f53f af1d 	bmi.w	800c1fc <_vfiprintf_r+0x44>
 800c3c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3c4:	e71c      	b.n	800c200 <_vfiprintf_r+0x48>
 800c3c6:	ab03      	add	r3, sp, #12
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <_vfiprintf_r+0x22c>)
 800c3ce:	a904      	add	r1, sp, #16
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7ff fc11 	bl	800bbf8 <_printf_i>
 800c3d6:	e7e4      	b.n	800c3a2 <_vfiprintf_r+0x1ea>
 800c3d8:	0800d347 	.word	0x0800d347
 800c3dc:	0800d351 	.word	0x0800d351
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	0800c193 	.word	0x0800c193
 800c3e8:	0800d34d 	.word	0x0800d34d

0800c3ec <__swbuf_r>:
 800c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ee:	460e      	mov	r6, r1
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	b118      	cbz	r0, 800c3fe <__swbuf_r+0x12>
 800c3f6:	6a03      	ldr	r3, [r0, #32]
 800c3f8:	b90b      	cbnz	r3, 800c3fe <__swbuf_r+0x12>
 800c3fa:	f7ff f86d 	bl	800b4d8 <__sinit>
 800c3fe:	69a3      	ldr	r3, [r4, #24]
 800c400:	60a3      	str	r3, [r4, #8]
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	071a      	lsls	r2, r3, #28
 800c406:	d525      	bpl.n	800c454 <__swbuf_r+0x68>
 800c408:	6923      	ldr	r3, [r4, #16]
 800c40a:	b31b      	cbz	r3, 800c454 <__swbuf_r+0x68>
 800c40c:	6823      	ldr	r3, [r4, #0]
 800c40e:	6922      	ldr	r2, [r4, #16]
 800c410:	1a98      	subs	r0, r3, r2
 800c412:	6963      	ldr	r3, [r4, #20]
 800c414:	b2f6      	uxtb	r6, r6
 800c416:	4283      	cmp	r3, r0
 800c418:	4637      	mov	r7, r6
 800c41a:	dc04      	bgt.n	800c426 <__swbuf_r+0x3a>
 800c41c:	4621      	mov	r1, r4
 800c41e:	4628      	mov	r0, r5
 800c420:	f7ff fd92 	bl	800bf48 <_fflush_r>
 800c424:	b9e0      	cbnz	r0, 800c460 <__swbuf_r+0x74>
 800c426:	68a3      	ldr	r3, [r4, #8]
 800c428:	3b01      	subs	r3, #1
 800c42a:	60a3      	str	r3, [r4, #8]
 800c42c:	6823      	ldr	r3, [r4, #0]
 800c42e:	1c5a      	adds	r2, r3, #1
 800c430:	6022      	str	r2, [r4, #0]
 800c432:	701e      	strb	r6, [r3, #0]
 800c434:	6962      	ldr	r2, [r4, #20]
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	429a      	cmp	r2, r3
 800c43a:	d004      	beq.n	800c446 <__swbuf_r+0x5a>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	07db      	lsls	r3, r3, #31
 800c440:	d506      	bpl.n	800c450 <__swbuf_r+0x64>
 800c442:	2e0a      	cmp	r6, #10
 800c444:	d104      	bne.n	800c450 <__swbuf_r+0x64>
 800c446:	4621      	mov	r1, r4
 800c448:	4628      	mov	r0, r5
 800c44a:	f7ff fd7d 	bl	800bf48 <_fflush_r>
 800c44e:	b938      	cbnz	r0, 800c460 <__swbuf_r+0x74>
 800c450:	4638      	mov	r0, r7
 800c452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c454:	4621      	mov	r1, r4
 800c456:	4628      	mov	r0, r5
 800c458:	f000 f806 	bl	800c468 <__swsetup_r>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d0d5      	beq.n	800c40c <__swbuf_r+0x20>
 800c460:	f04f 37ff 	mov.w	r7, #4294967295
 800c464:	e7f4      	b.n	800c450 <__swbuf_r+0x64>
	...

0800c468 <__swsetup_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4b2a      	ldr	r3, [pc, #168]	; (800c514 <__swsetup_r+0xac>)
 800c46c:	4605      	mov	r5, r0
 800c46e:	6818      	ldr	r0, [r3, #0]
 800c470:	460c      	mov	r4, r1
 800c472:	b118      	cbz	r0, 800c47c <__swsetup_r+0x14>
 800c474:	6a03      	ldr	r3, [r0, #32]
 800c476:	b90b      	cbnz	r3, 800c47c <__swsetup_r+0x14>
 800c478:	f7ff f82e 	bl	800b4d8 <__sinit>
 800c47c:	89a3      	ldrh	r3, [r4, #12]
 800c47e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c482:	0718      	lsls	r0, r3, #28
 800c484:	d422      	bmi.n	800c4cc <__swsetup_r+0x64>
 800c486:	06d9      	lsls	r1, r3, #27
 800c488:	d407      	bmi.n	800c49a <__swsetup_r+0x32>
 800c48a:	2309      	movs	r3, #9
 800c48c:	602b      	str	r3, [r5, #0]
 800c48e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c492:	81a3      	strh	r3, [r4, #12]
 800c494:	f04f 30ff 	mov.w	r0, #4294967295
 800c498:	e034      	b.n	800c504 <__swsetup_r+0x9c>
 800c49a:	0758      	lsls	r0, r3, #29
 800c49c:	d512      	bpl.n	800c4c4 <__swsetup_r+0x5c>
 800c49e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4a0:	b141      	cbz	r1, 800c4b4 <__swsetup_r+0x4c>
 800c4a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4a6:	4299      	cmp	r1, r3
 800c4a8:	d002      	beq.n	800c4b0 <__swsetup_r+0x48>
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f7ff f992 	bl	800b7d4 <_free_r>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	6363      	str	r3, [r4, #52]	; 0x34
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4ba:	81a3      	strh	r3, [r4, #12]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	6063      	str	r3, [r4, #4]
 800c4c0:	6923      	ldr	r3, [r4, #16]
 800c4c2:	6023      	str	r3, [r4, #0]
 800c4c4:	89a3      	ldrh	r3, [r4, #12]
 800c4c6:	f043 0308 	orr.w	r3, r3, #8
 800c4ca:	81a3      	strh	r3, [r4, #12]
 800c4cc:	6923      	ldr	r3, [r4, #16]
 800c4ce:	b94b      	cbnz	r3, 800c4e4 <__swsetup_r+0x7c>
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c4d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4da:	d003      	beq.n	800c4e4 <__swsetup_r+0x7c>
 800c4dc:	4621      	mov	r1, r4
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f7ff fd92 	bl	800c008 <__smakebuf_r>
 800c4e4:	89a0      	ldrh	r0, [r4, #12]
 800c4e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4ea:	f010 0301 	ands.w	r3, r0, #1
 800c4ee:	d00a      	beq.n	800c506 <__swsetup_r+0x9e>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	60a3      	str	r3, [r4, #8]
 800c4f4:	6963      	ldr	r3, [r4, #20]
 800c4f6:	425b      	negs	r3, r3
 800c4f8:	61a3      	str	r3, [r4, #24]
 800c4fa:	6923      	ldr	r3, [r4, #16]
 800c4fc:	b943      	cbnz	r3, 800c510 <__swsetup_r+0xa8>
 800c4fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c502:	d1c4      	bne.n	800c48e <__swsetup_r+0x26>
 800c504:	bd38      	pop	{r3, r4, r5, pc}
 800c506:	0781      	lsls	r1, r0, #30
 800c508:	bf58      	it	pl
 800c50a:	6963      	ldrpl	r3, [r4, #20]
 800c50c:	60a3      	str	r3, [r4, #8]
 800c50e:	e7f4      	b.n	800c4fa <__swsetup_r+0x92>
 800c510:	2000      	movs	r0, #0
 800c512:	e7f7      	b.n	800c504 <__swsetup_r+0x9c>
 800c514:	24000090 	.word	0x24000090

0800c518 <_raise_r>:
 800c518:	291f      	cmp	r1, #31
 800c51a:	b538      	push	{r3, r4, r5, lr}
 800c51c:	4604      	mov	r4, r0
 800c51e:	460d      	mov	r5, r1
 800c520:	d904      	bls.n	800c52c <_raise_r+0x14>
 800c522:	2316      	movs	r3, #22
 800c524:	6003      	str	r3, [r0, #0]
 800c526:	f04f 30ff 	mov.w	r0, #4294967295
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c52e:	b112      	cbz	r2, 800c536 <_raise_r+0x1e>
 800c530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c534:	b94b      	cbnz	r3, 800c54a <_raise_r+0x32>
 800c536:	4620      	mov	r0, r4
 800c538:	f000 f830 	bl	800c59c <_getpid_r>
 800c53c:	462a      	mov	r2, r5
 800c53e:	4601      	mov	r1, r0
 800c540:	4620      	mov	r0, r4
 800c542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c546:	f000 b817 	b.w	800c578 <_kill_r>
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d00a      	beq.n	800c564 <_raise_r+0x4c>
 800c54e:	1c59      	adds	r1, r3, #1
 800c550:	d103      	bne.n	800c55a <_raise_r+0x42>
 800c552:	2316      	movs	r3, #22
 800c554:	6003      	str	r3, [r0, #0]
 800c556:	2001      	movs	r0, #1
 800c558:	e7e7      	b.n	800c52a <_raise_r+0x12>
 800c55a:	2400      	movs	r4, #0
 800c55c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c560:	4628      	mov	r0, r5
 800c562:	4798      	blx	r3
 800c564:	2000      	movs	r0, #0
 800c566:	e7e0      	b.n	800c52a <_raise_r+0x12>

0800c568 <raise>:
 800c568:	4b02      	ldr	r3, [pc, #8]	; (800c574 <raise+0xc>)
 800c56a:	4601      	mov	r1, r0
 800c56c:	6818      	ldr	r0, [r3, #0]
 800c56e:	f7ff bfd3 	b.w	800c518 <_raise_r>
 800c572:	bf00      	nop
 800c574:	24000090 	.word	0x24000090

0800c578 <_kill_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	4d07      	ldr	r5, [pc, #28]	; (800c598 <_kill_r+0x20>)
 800c57c:	2300      	movs	r3, #0
 800c57e:	4604      	mov	r4, r0
 800c580:	4608      	mov	r0, r1
 800c582:	4611      	mov	r1, r2
 800c584:	602b      	str	r3, [r5, #0]
 800c586:	f7f4 ffc2 	bl	800150e <_kill>
 800c58a:	1c43      	adds	r3, r0, #1
 800c58c:	d102      	bne.n	800c594 <_kill_r+0x1c>
 800c58e:	682b      	ldr	r3, [r5, #0]
 800c590:	b103      	cbz	r3, 800c594 <_kill_r+0x1c>
 800c592:	6023      	str	r3, [r4, #0]
 800c594:	bd38      	pop	{r3, r4, r5, pc}
 800c596:	bf00      	nop
 800c598:	240015e0 	.word	0x240015e0

0800c59c <_getpid_r>:
 800c59c:	f7f4 bfaf 	b.w	80014fe <_getpid>

0800c5a0 <_malloc_usable_size_r>:
 800c5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5a4:	1f18      	subs	r0, r3, #4
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	bfbc      	itt	lt
 800c5aa:	580b      	ldrlt	r3, [r1, r0]
 800c5ac:	18c0      	addlt	r0, r0, r3
 800c5ae:	4770      	bx	lr

0800c5b0 <_gettimeofday>:
 800c5b0:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <_gettimeofday+0xc>)
 800c5b2:	2258      	movs	r2, #88	; 0x58
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ba:	4770      	bx	lr
 800c5bc:	240015e0 	.word	0x240015e0

0800c5c0 <_init>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	bf00      	nop
 800c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c6:	bc08      	pop	{r3}
 800c5c8:	469e      	mov	lr, r3
 800c5ca:	4770      	bx	lr

0800c5cc <_fini>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	bf00      	nop
 800c5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d2:	bc08      	pop	{r3}
 800c5d4:	469e      	mov	lr, r3
 800c5d6:	4770      	bx	lr
