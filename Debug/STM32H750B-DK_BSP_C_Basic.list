
STM32H750B-DK_BSP_C_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d980  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c7c  0800dc20  0800dc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f89c  0800f89c  0001f89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f8a4  0800f8a4  0001f8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f8a8  0800f8a8  0001f8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  0800f8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001580  24000090  0800f93c  00020090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001610  0800f93c  00021610  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY
 11 .debug_info   00031c5a  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005aa1  00000000  00000000  00051d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002518  00000000  00000000  00057800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001cf3  00000000  00000000  00059d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00041d7c  00000000  00000000  0005ba0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00033d0c  00000000  00000000  0009d787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a8f60  00000000  00000000  000d1493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a794  00000000  00000000  0027a3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00284b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dc08 	.word	0x0800dc08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0800dc08 	.word	0x0800dc08

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <Init_TIM3>:
/*
 * Init and start TIM3 in Interrupt mode
 *
 * */

HAL_StatusTypeDef Init_TIM3(TIM_HandleTypeDef* TIMHandle) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b092      	sub	sp, #72	; 0x48
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

	RCC_ClkInitTypeDef    clkconfig;
	volatile uint32_t uwTimclock = 0U;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t uwPrescalerValue = 0U;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
	volatile uint32_t uwAPB1Prescaler = 0U;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
	volatile uint32_t HCLKFreq;
	volatile uint32_t APB1Freq;
	volatile uint32_t APB2Freq;

	/*Configure the TIM3 IRQ priority */
	HAL_NVIC_SetPriority(TIM3_IRQn, TICK_INT_PRIORITY, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	210f      	movs	r1, #15
 8000694:	201d      	movs	r0, #29
 8000696:	f003 fa14 	bl	8003ac2 <HAL_NVIC_SetPriority>
	/* Enable the TIM3 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800069a:	201d      	movs	r0, #29
 800069c:	f003 fa2b 	bl	8003af6 <HAL_NVIC_EnableIRQ>
	/* Enable TIM6 clock */
	__HAL_RCC_TIM3_CLK_ENABLE();
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <Init_TIM3+0xc4>)
 80006a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006a6:	4a26      	ldr	r2, [pc, #152]	; (8000740 <Init_TIM3+0xc4>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <Init_TIM3+0xc4>)
 80006b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]

	// Find out the TIM3 CLK frequency:
    SysClockFreq = HAL_RCC_GetSysClockFreq();
 80006be:	f007 fc1d 	bl	8007efc <HAL_RCC_GetSysClockFreq>
 80006c2:	4603      	mov	r3, r0
 80006c4:	61bb      	str	r3, [r7, #24]
	HCLKFreq = HAL_RCC_GetHCLKFreq();
 80006c6:	f007 fd93 	bl	80081f0 <HAL_RCC_GetHCLKFreq>
 80006ca:	4603      	mov	r3, r0
 80006cc:	617b      	str	r3, [r7, #20]
	APB1Freq = HAL_RCC_GetPCLK1Freq();
 80006ce:	f007 fdbf 	bl	8008250 <HAL_RCC_GetPCLK1Freq>
 80006d2:	4603      	mov	r3, r0
 80006d4:	613b      	str	r3, [r7, #16]
	//APB2Freq = HAL_RCC_GetPCLK2Freq();
	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d8:	61fb      	str	r3, [r7, #28]
	/* Compute TIMERs clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <Init_TIM3+0x6a>
	{
		uwTimclock = APB1Freq; // if PPRE1 bits in RCC_CFGR are 0XX (APB1 Prescaler = 1), then TIMs run at APB1 clk)
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
 80006e4:	e002      	b.n	80006ec <Init_TIM3+0x70>
	}
	else
	{
	  uwTimclock = 2*APB1Freq; // if PPRE1 bits in RCC_CFGR are 1XX (APB1 Prescaler > 1), then TIMs run at 2*APB1 clk)
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Compute the prescaler value to have TIM3 counter clock equal to 1 MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <Init_TIM3+0xc8>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	0c9b      	lsrs	r3, r3, #18
 80006f6:	3b01      	subs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
	/* Initialize TIM3 */
	TIMHandle->Instance = TIM3;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <Init_TIM3+0xcc>)
 80006fe:	601a      	str	r2, [r3, #0]
	TIMHandle->Init.Period = 65535U;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000706:	60da      	str	r2, [r3, #12]
	TIMHandle->Init.Prescaler = uwPrescalerValue;
 8000708:	6a3a      	ldr	r2, [r7, #32]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	605a      	str	r2, [r3, #4]
	TIMHandle->Init.ClockDivision = 0;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
	TIMHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
	TIMHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]

	if(HAL_TIM_Base_Init(TIMHandle) == HAL_OK)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f009 fc90 	bl	800a046 <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <Init_TIM3+0xba>
	{
		/* Start the TIM time Base generation in interrupt mode */
		//return HAL_TIM_Base_Start_IT(TIMHandle);
		return HAL_TIM_Base_Start(TIMHandle);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f009 fceb 	bl	800a108 <HAL_TIM_Base_Start>
 8000732:	4603      	mov	r3, r0
 8000734:	e000      	b.n	8000738 <Init_TIM3+0xbc>
	}
	/* Return function status */
	return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3748      	adds	r7, #72	; 0x48
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	58024400 	.word	0x58024400
 8000744:	431bde83 	.word	0x431bde83
 8000748:	40000400 	.word	0x40000400

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af02      	add	r7, sp, #8
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
  */
  HAL_Init();
 8000752:	f003 f809 	bl	8003768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8000756:	f000 f9cd 	bl	8000af4 <SystemClock_Config>

  /* USER CODE BEGIN 2 */
  /* When system initialization is finished, Cortex-M7 could wakeup (when needed) the Cortex-M4  by means of
        HSEM notification or by any D2 wakeup source (SEV,EXTI..)   */

  BSP_LED_Init(LED_GREEN);
 800075a:	2000      	movs	r0, #0
 800075c:	f001 fa68 	bl	8001c30 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000760:	2001      	movs	r0, #1
 8000762:	f001 fa65 	bl	8001c30 <BSP_LED_Init>

  BSP_LED_Off(LED_GREEN);
 8000766:	2000      	movs	r0, #0
 8000768:	f001 fade 	bl	8001d28 <BSP_LED_Off>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2108      	movs	r1, #8
 8000770:	487a      	ldr	r0, [pc, #488]	; (800095c <main+0x210>)
 8000772:	f005 fb53 	bl	8005e1c <HAL_GPIO_WritePin>

  /* Configure the User push-button in EXTI Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000776:	2101      	movs	r1, #1
 8000778:	2000      	movs	r0, #0
 800077a:	f001 faf3 	bl	8001d64 <BSP_PB_Init>

  /* Configure TIM3 timebase */
  Init_TIM3(&TIM3Handle);
 800077e:	4878      	ldr	r0, [pc, #480]	; (8000960 <main+0x214>)
 8000780:	f7ff ff7c 	bl	800067c <Init_TIM3>

  /* Init UART3*/
  if (USART3_Init(&UART3Handle) != HAL_OK){
 8000784:	4877      	ldr	r0, [pc, #476]	; (8000964 <main+0x218>)
 8000786:	f001 f83b 	bl	8001800 <USART3_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <main+0x48>
	  Error_Handler();
 8000790:	f000 fa46 	bl	8000c20 <Error_Handler>
  }
  RetargetInit(&UART3Handle);
 8000794:	4873      	ldr	r0, [pc, #460]	; (8000964 <main+0x218>)
 8000796:	f000 fa4b 	bl	8000c30 <RetargetInit>


  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 800079a:	2101      	movs	r1, #1
 800079c:	2000      	movs	r0, #0
 800079e:	f001 ff4b 	bl	8002638 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80007a2:	4871      	ldr	r0, [pc, #452]	; (8000968 <main+0x21c>)
 80007a4:	f000 fb0a 	bl	8000dbc <UTIL_LCD_SetFuncDriver>
  Display_InitialContent();
 80007a8:	f000 f8f2 	bl	8000990 <Display_InitialContent>

  Display_InitialContent();
 80007ac:	f000 f8f0 	bl	8000990 <Display_InitialContent>

  while (1){

	  // Time first delay :

	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2108      	movs	r1, #8
 80007b4:	4869      	ldr	r0, [pc, #420]	; (800095c <main+0x210>)
 80007b6:	f005 fb31 	bl	8005e1c <HAL_GPIO_WritePin>
	  timer_val_start = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 80007ba:	4b69      	ldr	r3, [pc, #420]	; (8000960 <main+0x214>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b6a      	ldr	r3, [pc, #424]	; (800096c <main+0x220>)
 80007c4:	801a      	strh	r2, [r3, #0]
  	  HAL_Delay(50);
 80007c6:	2032      	movs	r0, #50	; 0x32
 80007c8:	f003 f860 	bl	800388c <HAL_Delay>
	  timer_val_end = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 80007cc:	4b64      	ldr	r3, [pc, #400]	; (8000960 <main+0x214>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b66      	ldr	r3, [pc, #408]	; (8000970 <main+0x224>)
 80007d6:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2108      	movs	r1, #8
 80007dc:	485f      	ldr	r0, [pc, #380]	; (800095c <main+0x210>)
 80007de:	f005 fb1d 	bl	8005e1c <HAL_GPIO_WritePin>

	  if (timer_val_end > timer_val_start)
 80007e2:	4b63      	ldr	r3, [pc, #396]	; (8000970 <main+0x224>)
 80007e4:	881a      	ldrh	r2, [r3, #0]
 80007e6:	4b61      	ldr	r3, [pc, #388]	; (800096c <main+0x220>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d908      	bls.n	8000800 <main+0xb4>
		  elapsed_1st = timer_val_end - timer_val_start;
 80007ee:	4b60      	ldr	r3, [pc, #384]	; (8000970 <main+0x224>)
 80007f0:	881a      	ldrh	r2, [r3, #0]
 80007f2:	4b5e      	ldr	r3, [pc, #376]	; (800096c <main+0x220>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <main+0x228>)
 80007fc:	801a      	strh	r2, [r3, #0]
 80007fe:	e007      	b.n	8000810 <main+0xc4>
	  else
		  elapsed_1st = timer_val_end + (65536-timer_val_start);
 8000800:	4b5b      	ldr	r3, [pc, #364]	; (8000970 <main+0x224>)
 8000802:	881a      	ldrh	r2, [r3, #0]
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <main+0x220>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b59      	ldr	r3, [pc, #356]	; (8000974 <main+0x228>)
 800080e:	801a      	strh	r2, [r3, #0]

	  BSP_LED_On(LED_GREEN);
 8000810:	2000      	movs	r0, #0
 8000812:	f001 fa6b 	bl	8001cec <BSP_LED_On>
	  HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f003 f838 	bl	800388c <HAL_Delay>
	  BSP_LED_Off(LED_GREEN);
 800081c:	2000      	movs	r0, #0
 800081e:	f001 fa83 	bl	8001d28 <BSP_LED_Off>

	  // Time second delay :

	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2108      	movs	r1, #8
 8000826:	484d      	ldr	r0, [pc, #308]	; (800095c <main+0x210>)
 8000828:	f005 faf8 	bl	8005e1c <HAL_GPIO_WritePin>
	  timer_val_start = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 800082c:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <main+0x214>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b4d      	ldr	r3, [pc, #308]	; (800096c <main+0x220>)
 8000836:	801a      	strh	r2, [r3, #0]
  	  HAL_Delay(25);
 8000838:	2019      	movs	r0, #25
 800083a:	f003 f827 	bl	800388c <HAL_Delay>
	  timer_val_end = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 800083e:	4b48      	ldr	r3, [pc, #288]	; (8000960 <main+0x214>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b4a      	ldr	r3, [pc, #296]	; (8000970 <main+0x224>)
 8000848:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4843      	ldr	r0, [pc, #268]	; (800095c <main+0x210>)
 8000850:	f005 fae4 	bl	8005e1c <HAL_GPIO_WritePin>

	  if (timer_val_end > timer_val_start)
 8000854:	4b46      	ldr	r3, [pc, #280]	; (8000970 <main+0x224>)
 8000856:	881a      	ldrh	r2, [r3, #0]
 8000858:	4b44      	ldr	r3, [pc, #272]	; (800096c <main+0x220>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d908      	bls.n	8000872 <main+0x126>
		  elapsed_2nd = timer_val_end - timer_val_start;
 8000860:	4b43      	ldr	r3, [pc, #268]	; (8000970 <main+0x224>)
 8000862:	881a      	ldrh	r2, [r3, #0]
 8000864:	4b41      	ldr	r3, [pc, #260]	; (800096c <main+0x220>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <main+0x22c>)
 800086e:	801a      	strh	r2, [r3, #0]
 8000870:	e007      	b.n	8000882 <main+0x136>
	  else
		  elapsed_2nd = timer_val_end + (65536-timer_val_start);
 8000872:	4b3f      	ldr	r3, [pc, #252]	; (8000970 <main+0x224>)
 8000874:	881a      	ldrh	r2, [r3, #0]
 8000876:	4b3d      	ldr	r3, [pc, #244]	; (800096c <main+0x220>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <main+0x22c>)
 8000880:	801a      	strh	r2, [r3, #0]

	  BSP_LED_On(LED_RED);
 8000882:	2001      	movs	r0, #1
 8000884:	f001 fa32 	bl	8001cec <BSP_LED_On>
	  HAL_Delay(10);
 8000888:	200a      	movs	r0, #10
 800088a:	f002 ffff 	bl	800388c <HAL_Delay>
	  BSP_LED_Off(LED_RED);
 800088e:	2001      	movs	r0, #1
 8000890:	f001 fa4a 	bl	8001d28 <BSP_LED_Off>

	  // Time third delay :

	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2108      	movs	r1, #8
 8000898:	4830      	ldr	r0, [pc, #192]	; (800095c <main+0x210>)
 800089a:	f005 fabf 	bl	8005e1c <HAL_GPIO_WritePin>
	  timer_val_start = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 800089e:	4b30      	ldr	r3, [pc, #192]	; (8000960 <main+0x214>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <main+0x220>)
 80008a8:	801a      	strh	r2, [r3, #0]
  	  HAL_Delay(10);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f002 ffee 	bl	800388c <HAL_Delay>
	  timer_val_end = __HAL_TIM_GET_COUNTER(&TIM3Handle);
 80008b0:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <main+0x214>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <main+0x224>)
 80008ba:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2108      	movs	r1, #8
 80008c0:	4826      	ldr	r0, [pc, #152]	; (800095c <main+0x210>)
 80008c2:	f005 faab 	bl	8005e1c <HAL_GPIO_WritePin>

	  if (timer_val_end > timer_val_start)
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <main+0x224>)
 80008c8:	881a      	ldrh	r2, [r3, #0]
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <main+0x220>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d908      	bls.n	80008e4 <main+0x198>
		  elapsed_3rd = timer_val_end - timer_val_start;
 80008d2:	4b27      	ldr	r3, [pc, #156]	; (8000970 <main+0x224>)
 80008d4:	881a      	ldrh	r2, [r3, #0]
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <main+0x220>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <main+0x230>)
 80008e0:	801a      	strh	r2, [r3, #0]
 80008e2:	e007      	b.n	80008f4 <main+0x1a8>
	  else
		  elapsed_3rd = timer_val_end + (65536-timer_val_start);
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <main+0x224>)
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <main+0x220>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <main+0x230>)
 80008f2:	801a      	strh	r2, [r3, #0]

	  BSP_LED_On(LED_RED);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f001 f9f9 	bl	8001cec <BSP_LED_On>
	  BSP_LED_On(LED_GREEN);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f001 f9f6 	bl	8001cec <BSP_LED_On>
	  HAL_Delay(10);
 8000900:	200a      	movs	r0, #10
 8000902:	f002 ffc3 	bl	800388c <HAL_Delay>



	  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 8000906:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800090a:	f000 faad 	bl	8000e68 <UTIL_LCD_SetTextColor>
	  sprintf((char*)time_str1, "1st:%5dus  2nd:%5dus 3rd:%4dus", elapsed_1st, elapsed_2nd, elapsed_3rd);
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <main+0x228>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <main+0x22c>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <main+0x230>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	460b      	mov	r3, r1
 8000922:	4917      	ldr	r1, [pc, #92]	; (8000980 <main+0x234>)
 8000924:	4817      	ldr	r0, [pc, #92]	; (8000984 <main+0x238>)
 8000926:	f00c f92b 	bl	800cb80 <siprintf>
	  UTIL_LCD_DisplayStringAt(0, (y_size/2 + 25), (uint8_t *)time_str1, CENTER_MODE);
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <main+0x23c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	085b      	lsrs	r3, r3, #1
 8000930:	f103 0119 	add.w	r1, r3, #25
 8000934:	2301      	movs	r3, #1
 8000936:	4a13      	ldr	r2, [pc, #76]	; (8000984 <main+0x238>)
 8000938:	2000      	movs	r0, #0
 800093a:	f000 fb39 	bl	8000fb0 <UTIL_LCD_DisplayStringAt>
	  printf("%s \n", time_str1);
 800093e:	4911      	ldr	r1, [pc, #68]	; (8000984 <main+0x238>)
 8000940:	4812      	ldr	r0, [pc, #72]	; (800098c <main+0x240>)
 8000942:	f00c f85d 	bl	800ca00 <iprintf>

	  BSP_LED_Off(LED_RED);
 8000946:	2001      	movs	r0, #1
 8000948:	f001 f9ee 	bl	8001d28 <BSP_LED_Off>
	  BSP_LED_Off(LED_GREEN);
 800094c:	2000      	movs	r0, #0
 800094e:	f001 f9eb 	bl	8001d28 <BSP_LED_Off>

	  HAL_Delay(100);
 8000952:	2064      	movs	r0, #100	; 0x64
 8000954:	f002 ff9a 	bl	800388c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000958:	e72a      	b.n	80007b0 <main+0x64>
 800095a:	bf00      	nop
 800095c:	58021000 	.word	0x58021000
 8000960:	24000158 	.word	0x24000158
 8000964:	240000c4 	.word	0x240000c4
 8000968:	0800f824 	.word	0x0800f824
 800096c:	240000b8 	.word	0x240000b8
 8000970:	240000ba 	.word	0x240000ba
 8000974:	240000bc 	.word	0x240000bc
 8000978:	240000be 	.word	0x240000be
 800097c:	240000c0 	.word	0x240000c0
 8000980:	0800dc2c 	.word	0x0800dc2c
 8000984:	240001a4 	.word	0x240001a4
 8000988:	240000b4 	.word	0x240000b4
 800098c:	0800dc4c 	.word	0x0800dc4c

08000990 <Display_InitialContent>:
  * @brief  Display main demo messages
  * @param  None
  * @retval None
  */
static void Display_InitialContent(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af02      	add	r7, sp, #8

  BSP_LCD_GetXSize(0, &x_size);
 8000996:	4940      	ldr	r1, [pc, #256]	; (8000a98 <Display_InitialContent+0x108>)
 8000998:	2000      	movs	r0, #0
 800099a:	f002 f829 	bl	80029f0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800099e:	493f      	ldr	r1, [pc, #252]	; (8000a9c <Display_InitialContent+0x10c>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f002 f843 	bl	8002a2c <BSP_LCD_GetYSize>

  UTIL_LCD_SetFont(&Font16);
 80009a6:	483e      	ldr	r0, [pc, #248]	; (8000aa0 <Display_InitialContent+0x110>)
 80009a8:	f000 fa86 	bl	8000eb8 <UTIL_LCD_SetFont>

  /* Clear the LCD */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80009ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009b0:	f000 fa6e 	bl	8000e90 <UTIL_LCD_SetBackColor>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80009b4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009b8:	f000 faae 	bl	8000f18 <UTIL_LCD_Clear>
  BSP_LCD_FillRect(0, 0, 0, x_size, y_size, UTIL_LCD_COLOR_BLACK);
 80009bc:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <Display_InitialContent+0x108>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <Display_InitialContent+0x10c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 80009c8:	9101      	str	r1, [sp, #4]
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4613      	mov	r3, r2
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2000      	movs	r0, #0
 80009d4:	f002 f9f8 	bl	8002dc8 <BSP_LCD_FillRect>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 fa44 	bl	8000e68 <UTIL_LCD_SetTextColor>

  /* Display LCD messages */
  UTIL_LCD_DisplayStringAt(0, 20, (uint8_t *)"STM32H750B BSP", CENTER_MODE);
 80009e0:	2301      	movs	r3, #1
 80009e2:	4a30      	ldr	r2, [pc, #192]	; (8000aa4 <Display_InitialContent+0x114>)
 80009e4:	2114      	movs	r1, #20
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fae2 	bl	8000fb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font20);
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <Display_InitialContent+0x118>)
 80009ee:	f000 fa63 	bl	8000eb8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"Organizacija racunalniskih", CENTER_MODE);
 80009f2:	2301      	movs	r3, #1
 80009f4:	4a2d      	ldr	r2, [pc, #180]	; (8000aac <Display_InitialContent+0x11c>)
 80009f6:	212d      	movs	r1, #45	; 0x2d
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fad9 	bl	8000fb0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 70, (uint8_t *)"sistemov", CENTER_MODE);
 80009fe:	2301      	movs	r3, #1
 8000a00:	4a2b      	ldr	r2, [pc, #172]	; (8000ab0 <Display_InitialContent+0x120>)
 8000a02:	2146      	movs	r1, #70	; 0x46
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fad3 	bl	8000fb0 <UTIL_LCD_DisplayStringAt>


  /* Draw Bitmap */
  //UTIL_LCD_DrawBitmap((x_size - 80)/2, 65, (uint8_t *)stlogo);

  UTIL_LCD_SetFont(&Font16);
 8000a0a:	4825      	ldr	r0, [pc, #148]	; (8000aa0 <Display_InitialContent+0x110>)
 8000a0c:	f000 fa54 	bl	8000eb8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) Pa3cio 2022", CENTER_MODE);
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <Display_InitialContent+0x10c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1a3 0114 	sub.w	r1, r3, #20
 8000a18:	2301      	movs	r3, #1
 8000a1a:	4a26      	ldr	r2, [pc, #152]	; (8000ab4 <Display_InitialContent+0x124>)
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 fac7 	bl	8000fb0 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_SetFont(&Font20);
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <Display_InitialContent+0x118>)
 8000a24:	f000 fa48 	bl	8000eb8 <UTIL_LCD_SetFont>
  BSP_LCD_FillRect(0, 0, y_size/2 - 35, x_size, 120, UTIL_LCD_COLOR_BLUE);
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <Display_InitialContent+0x10c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <Display_InitialContent+0x108>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4920      	ldr	r1, [pc, #128]	; (8000ab8 <Display_InitialContent+0x128>)
 8000a38:	9101      	str	r1, [sp, #4]
 8000a3a:	2178      	movs	r1, #120	; 0x78
 8000a3c:	9100      	str	r1, [sp, #0]
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2000      	movs	r0, #0
 8000a42:	f002 f9c1 	bl	8002dc8 <BSP_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8000a46:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4a:	f000 fa0d 	bl	8000e68 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8000a4e:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <Display_InitialContent+0x128>)
 8000a50:	f000 fa1e 	bl	8000e90 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, y_size/2 - 25 , (uint8_t *)"LCD test", CENTER_MODE);
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <Display_InitialContent+0x10c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	f1a3 0119 	sub.w	r1, r3, #25
 8000a5e:	2301      	movs	r3, #1
 8000a60:	4a16      	ldr	r2, [pc, #88]	; (8000abc <Display_InitialContent+0x12c>)
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 faa4 	bl	8000fb0 <UTIL_LCD_DisplayStringAt>

  //sprintf(desc,"%s example", BSP_examples[DemoIndex].DemoName);
  //UTIL_LCD_DisplayStringAt(0, y_size/2 + 15, (uint8_t *)desc, CENTER_MODE);

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8000a68:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <Display_InitialContent+0x130>)
 8000a6a:	f000 f9fd 	bl	8000e68 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font16);
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <Display_InitialContent+0x110>)
 8000a70:	f000 fa22 	bl	8000eb8 <UTIL_LCD_SetFont>
  sprintf((char* )time_str1, (const char*)"HAL_Delay Timing Test.");
 8000a74:	4913      	ldr	r1, [pc, #76]	; (8000ac4 <Display_InitialContent+0x134>)
 8000a76:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <Display_InitialContent+0x138>)
 8000a78:	f00c f882 	bl	800cb80 <siprintf>
  UTIL_LCD_DisplayStringAt(0, (y_size/2 + 65), (uint8_t *)time_str1, CENTER_MODE);
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <Display_InitialContent+0x10c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	085b      	lsrs	r3, r3, #1
 8000a82:	f103 0141 	add.w	r1, r3, #65	; 0x41
 8000a86:	2301      	movs	r3, #1
 8000a88:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <Display_InitialContent+0x138>)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 fa90 	bl	8000fb0 <UTIL_LCD_DisplayStringAt>

}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	240000b0 	.word	0x240000b0
 8000a9c:	240000b4 	.word	0x240000b4
 8000aa0:	24000008 	.word	0x24000008
 8000aa4:	0800dc54 	.word	0x0800dc54
 8000aa8:	24000000 	.word	0x24000000
 8000aac:	0800dc64 	.word	0x0800dc64
 8000ab0:	0800dc80 	.word	0x0800dc80
 8000ab4:	0800dc8c 	.word	0x0800dc8c
 8000ab8:	ff0000ff 	.word	0xff0000ff
 8000abc:	0800dca8 	.word	0x0800dca8
 8000ac0:	ffff0000 	.word	0xffff0000
 8000ac4:	0800dcb4 	.word	0x0800dcb4
 8000ac8:	240001a4 	.word	0x240001a4

08000acc <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <BSP_PB_Callback+0x24>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	240000ac 	.word	0x240000ac

08000af4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b09e      	sub	sp, #120	; 0x78
 8000af8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b00:	2002      	movs	r0, #2
 8000b02:	f006 fbb1 	bl	8007268 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <SystemClock_Config+0x120>)
 8000b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0e:	4a41      	ldr	r2, [pc, #260]	; (8000c14 <SystemClock_Config+0x120>)
 8000b10:	f023 0301 	bic.w	r3, r3, #1
 8000b14:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b16:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <SystemClock_Config+0x120>)
 8000b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <SystemClock_Config+0x124>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a3c      	ldr	r2, [pc, #240]	; (8000c18 <SystemClock_Config+0x124>)
 8000b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <SystemClock_Config+0x124>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b38:	bf00      	nop
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <SystemClock_Config+0x124>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b46:	d1f8      	bne.n	8000b3a <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b50:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b62:	2305      	movs	r3, #5
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b66:	23a0      	movs	r3, #160	; 0xa0
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b76:	2304      	movs	r3, #4
 8000b78:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 fba8 	bl	80072dc <HAL_RCC_OscConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000b92:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b9a:	f000 f841 	bl	8000c20 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000b9e:	233f      	movs	r3, #63	; 0x3f
 8000ba0:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000baa:	2308      	movs	r3, #8
 8000bac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bae:	2340      	movs	r3, #64	; 0x40
 8000bb0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bb2:	2340      	movs	r3, #64	; 0x40
 8000bb4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bbc:	2340      	movs	r3, #64	; 0x40
 8000bbe:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000bc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f006 ffe2 	bl	8007b90 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000bd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000bda:	f000 f821 	bl	8000c20 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <SystemClock_Config+0x128>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <SystemClock_Config+0x128>)
 8000be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be8:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <SystemClock_Config+0x128>)
 8000bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SystemClock_Config+0x128>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <SystemClock_Config+0x128>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 8000c08:	f002 fe70 	bl	80038ec <HAL_EnableCompensationCell>
}
 8000c0c:	bf00      	nop
 8000c0e:	3778      	adds	r7, #120	; 0x78
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	58000400 	.word	0x58000400
 8000c18:	58024800 	.word	0x58024800
 8000c1c:	58024400 	.word	0x58024400

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f001 f85f 	bl	8001cec <BSP_LED_On>
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <Error_Handler+0xe>

08000c30 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <RetargetInit+0x28>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <RetargetInit+0x2c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6898      	ldr	r0, [r3, #8]
 8000c44:	2300      	movs	r3, #0
 8000c46:	2202      	movs	r2, #2
 8000c48:	2100      	movs	r1, #0
 8000c4a:	f00b feeb 	bl	800ca24 <setvbuf>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	240001e0 	.word	0x240001e0
 8000c5c:	2400008c 	.word	0x2400008c

08000c60 <_isatty>:

int _isatty(int fd) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db04      	blt.n	8000c78 <_isatty+0x18>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	dc01      	bgt.n	8000c78 <_isatty+0x18>
    return 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e005      	b.n	8000c84 <_isatty+0x24>

  errno = EBADF;
 8000c78:	f00c f834 	bl	800cce4 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2209      	movs	r2, #9
 8000c80:	601a      	str	r2, [r3, #0]
  return 0;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_close>:

int _close(int fd) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db04      	blt.n	8000ca4 <_close+0x18>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	dc01      	bgt.n	8000ca4 <_close+0x18>
    return 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e006      	b.n	8000cb2 <_close+0x26>

  errno = EBADF;
 8000ca4:	f00c f81e 	bl	800cce4 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2209      	movs	r2, #9
 8000cac:	601a      	str	r2, [r3, #0]
  return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000cc6:	f00c f80d 	bl	800cce4 <__errno>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2209      	movs	r2, #9
 8000cce:	601a      	str	r2, [r3, #0]
  return -1;
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_fstat>:



int _fstat(int fd, struct stat* st) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db08      	blt.n	8000cfe <_fstat+0x22>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	dc05      	bgt.n	8000cfe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf8:	605a      	str	r2, [r3, #4]
    return 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e005      	b.n	8000d0a <_fstat+0x2e>
  }

  errno = EBADF;
 8000cfe:	f00b fff1 	bl	800cce4 <__errno>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2209      	movs	r2, #9
 8000d06:	601a      	str	r2, [r3, #0]
  return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <_read>:


int _read(int fd, char* ptr, int len) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d110      	bne.n	8000d48 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <_read+0x4c>)
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	2201      	movs	r2, #1
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	f009 fe07 	bl	800a944 <HAL_UART_Receive>
 8000d36:	4603      	mov	r3, r0
 8000d38:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <_read+0x30>
      return 1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e008      	b.n	8000d56 <_read+0x42>
    else
      return EIO;
 8000d44:	2305      	movs	r3, #5
 8000d46:	e006      	b.n	8000d56 <_read+0x42>
  }
  errno = EBADF;
 8000d48:	f00b ffcc 	bl	800cce4 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2209      	movs	r2, #9
 8000d50:	601a      	str	r2, [r3, #0]
  return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	240001e0 	.word	0x240001e0

08000d64 <_write>:

int _write(int fd, char* ptr, int len) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d002      	beq.n	8000d7c <_write+0x18>
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d111      	bne.n	8000da0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <_write+0x54>)
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	f009 fd4d 	bl	800a828 <HAL_UART_Transmit>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <_write+0x38>
      return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	e008      	b.n	8000dae <_write+0x4a>
    else
      return EIO;
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	e006      	b.n	8000dae <_write+0x4a>
  }
  errno = EBADF;
 8000da0:	f00b ffa0 	bl	800cce4 <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2209      	movs	r2, #9
 8000da8:	601a      	str	r2, [r3, #0]
  return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	240001e0 	.word	0x240001e0

08000dbc <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000dca:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000dd2:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000dda:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000de2:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691b      	ldr	r3, [r3, #16]
 8000de8:	4a1a      	ldr	r2, [pc, #104]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000dea:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000df2:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000dfa:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000e02:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000e0a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000e12:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000e1a:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <UTIL_LCD_SetFuncDriver+0xa0>)
 8000e2e:	4611      	mov	r1, r2
 8000e30:	2000      	movs	r0, #0
 8000e32:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <UTIL_LCD_SetFuncDriver+0xa4>)
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <UTIL_LCD_SetFuncDriver+0x98>)
 8000e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <UTIL_LCD_SetFuncDriver+0xa8>)
 8000e46:	4611      	mov	r1, r2
 8000e48:	2000      	movs	r0, #0
 8000e4a:	4798      	blx	r3
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24000224 	.word	0x24000224
 8000e58:	240001e4 	.word	0x240001e4
 8000e5c:	240001f8 	.word	0x240001f8
 8000e60:	240001fc 	.word	0x240001fc
 8000e64:	24000200 	.word	0x24000200

08000e68 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <UTIL_LCD_SetTextColor+0x24>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <UTIL_LCD_SetTextColor+0x24>)
 8000e76:	015b      	lsls	r3, r3, #5
 8000e78:	4413      	add	r3, r2
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	601a      	str	r2, [r3, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	240001e4 	.word	0x240001e4

08000e90 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <UTIL_LCD_SetBackColor+0x24>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <UTIL_LCD_SetBackColor+0x24>)
 8000e9e:	015b      	lsls	r3, r3, #5
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	240001e4 	.word	0x240001e4

08000eb8 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <UTIL_LCD_SetFont+0x24>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <UTIL_LCD_SetFont+0x24>)
 8000ec6:	015b      	lsls	r3, r3, #5
 8000ec8:	4413      	add	r3, r2
 8000eca:	3308      	adds	r3, #8
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	240001e4 	.word	0x240001e4

08000ee0 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <UTIL_LCD_FillRGBRect+0x30>)
 8000ef0:	685c      	ldr	r4, [r3, #4]
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <UTIL_LCD_FillRGBRect+0x34>)
 8000ef4:	6918      	ldr	r0, [r3, #16]
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	68f9      	ldr	r1, [r7, #12]
 8000f04:	47a0      	blx	r4
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000224 	.word	0x24000224
 8000f14:	240001e4 	.word	0x240001e4

08000f18 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <UTIL_LCD_Clear+0x28>)
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <UTIL_LCD_Clear+0x28>)
 8000f26:	6999      	ldr	r1, [r3, #24]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 f8eb 	bl	800110c <UTIL_LCD_FillRect>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	240001e4 	.word	0x240001e4

08000f44 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <UTIL_LCD_DisplayChar+0x68>)
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <UTIL_LCD_DisplayChar+0x68>)
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8000f66:	4911      	ldr	r1, [pc, #68]	; (8000fac <UTIL_LCD_DisplayChar+0x68>)
 8000f68:	68c9      	ldr	r1, [r1, #12]
 8000f6a:	4810      	ldr	r0, [pc, #64]	; (8000fac <UTIL_LCD_DisplayChar+0x68>)
 8000f6c:	0149      	lsls	r1, r1, #5
 8000f6e:	4401      	add	r1, r0
 8000f70:	3108      	adds	r1, #8
 8000f72:	6809      	ldr	r1, [r1, #0]
 8000f74:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8000f76:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <UTIL_LCD_DisplayChar+0x68>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	480b      	ldr	r0, [pc, #44]	; (8000fac <UTIL_LCD_DisplayChar+0x68>)
 8000f80:	015b      	lsls	r3, r3, #5
 8000f82:	4403      	add	r3, r0
 8000f84:	3308      	adds	r3, #8
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	889b      	ldrh	r3, [r3, #4]
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da00      	bge.n	8000f92 <UTIL_LCD_DisplayChar+0x4e>
 8000f90:	3307      	adds	r3, #7
 8000f92:	10db      	asrs	r3, r3, #3
 8000f94:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8000f98:	4413      	add	r3, r2
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f000 f8ee 	bl	8001180 <DrawChar>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	240001e4 	.word	0x240001e4

08000fb0 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000fd2:	e002      	b.n	8000fda <UTIL_LCD_DisplayStringAt+0x2a>
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	61ba      	str	r2, [r7, #24]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f6      	bne.n	8000fd4 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8000fe6:	4b48      	ldr	r3, [pc, #288]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a47      	ldr	r2, [pc, #284]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 8000fec:	68d2      	ldr	r2, [r2, #12]
 8000fee:	4946      	ldr	r1, [pc, #280]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 8000ff0:	0152      	lsls	r2, r2, #5
 8000ff2:	440a      	add	r2, r1
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	8892      	ldrh	r2, [r2, #4]
 8000ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ffe:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d018      	beq.n	8001038 <UTIL_LCD_DisplayStringAt+0x88>
 8001006:	2b03      	cmp	r3, #3
 8001008:	dc2a      	bgt.n	8001060 <UTIL_LCD_DisplayStringAt+0xb0>
 800100a:	2b01      	cmp	r3, #1
 800100c:	d002      	beq.n	8001014 <UTIL_LCD_DisplayStringAt+0x64>
 800100e:	2b02      	cmp	r3, #2
 8001010:	d015      	beq.n	800103e <UTIL_LCD_DisplayStringAt+0x8e>
 8001012:	e025      	b.n	8001060 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	4a3b      	ldr	r2, [pc, #236]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 800101c:	68d2      	ldr	r2, [r2, #12]
 800101e:	493a      	ldr	r1, [pc, #232]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 8001020:	0152      	lsls	r2, r2, #5
 8001022:	440a      	add	r2, r1
 8001024:	3208      	adds	r2, #8
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	8892      	ldrh	r2, [r2, #4]
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	085b      	lsrs	r3, r3, #1
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001036:	e016      	b.n	8001066 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800103c:	e013      	b.n	8001066 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	4a30      	ldr	r2, [pc, #192]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 8001046:	68d2      	ldr	r2, [r2, #12]
 8001048:	492f      	ldr	r1, [pc, #188]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 800104a:	0152      	lsls	r2, r2, #5
 800104c:	440a      	add	r2, r1
 800104e:	3208      	adds	r2, #8
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	8892      	ldrh	r2, [r2, #4]
 8001054:	fb03 f202 	mul.w	r2, r3, r2
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800105e:	e002      	b.n	8001066 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001064:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <UTIL_LCD_DisplayStringAt+0xc4>
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001072:	d31b      	bcc.n	80010ac <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001078:	e018      	b.n	80010ac <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001084:	f7ff ff5e 	bl	8000f44 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 800108e:	015b      	lsls	r3, r3, #5
 8001090:	4413      	add	r3, r2
 8001092:	3308      	adds	r3, #8
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	889b      	ldrh	r3, [r3, #4]
 8001098:	461a      	mov	r2, r3
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	4413      	add	r3, r2
 800109e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
    i++;
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	3301      	adds	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf14      	ite	ne
 80010b4:	2301      	movne	r3, #1
 80010b6:	2300      	moveq	r3, #0
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 80010bc:	6959      	ldr	r1, [r3, #20]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	4811      	ldr	r0, [pc, #68]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 80010c4:	015b      	lsls	r3, r3, #5
 80010c6:	4403      	add	r3, r0
 80010c8:	3308      	adds	r3, #8
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	889b      	ldrh	r3, [r3, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	fb00 f303 	mul.w	r3, r0, r3
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	b29b      	uxth	r3, r3
 80010da:	490b      	ldr	r1, [pc, #44]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 80010dc:	68c9      	ldr	r1, [r1, #12]
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <UTIL_LCD_DisplayStringAt+0x158>)
 80010e0:	0149      	lsls	r1, r1, #5
 80010e2:	4401      	add	r1, r0
 80010e4:	3108      	adds	r1, #8
 80010e6:	6809      	ldr	r1, [r1, #0]
 80010e8:	8889      	ldrh	r1, [r1, #4]
 80010ea:	428b      	cmp	r3, r1
 80010ec:	bf2c      	ite	cs
 80010ee:	2301      	movcs	r3, #1
 80010f0:	2300      	movcc	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4013      	ands	r3, r2
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1be      	bne.n	800107a <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	240001e4 	.word	0x240001e4

0800110c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b087      	sub	sp, #28
 8001110:	af02      	add	r7, sp, #8
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <UTIL_LCD_FillRect+0x6c>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d11a      	bne.n	8001158 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <UTIL_LCD_FillRect+0x70>)
 8001124:	691c      	ldr	r4, [r3, #16]
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <UTIL_LCD_FillRect+0x6c>)
 8001128:	6918      	ldr	r0, [r3, #16]
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	f003 021f 	and.w	r2, r3, #31
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	0a9b      	lsrs	r3, r3, #10
 8001136:	015b      	lsls	r3, r3, #5
 8001138:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800113c:	431a      	orrs	r2, r3
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	0cdb      	lsrs	r3, r3, #19
 8001142:	02db      	lsls	r3, r3, #11
 8001144:	b29b      	uxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	68f9      	ldr	r1, [r7, #12]
 8001154:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8001156:	e00b      	b.n	8001170 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <UTIL_LCD_FillRect+0x70>)
 800115a:	691c      	ldr	r4, [r3, #16]
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <UTIL_LCD_FillRect+0x6c>)
 800115e:	6918      	ldr	r0, [r3, #16]
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	68f9      	ldr	r1, [r7, #12]
 800116e:	47a0      	blx	r4
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	240001e4 	.word	0x240001e4
 800117c:	24000224 	.word	0x24000224

08001180 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0b2      	sub	sp, #200	; 0xc8
 8001184:	af02      	add	r7, sp, #8
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001198:	4ba5      	ldr	r3, [pc, #660]	; (8001430 <DrawChar+0x2b0>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4aa4      	ldr	r2, [pc, #656]	; (8001430 <DrawChar+0x2b0>)
 800119e:	015b      	lsls	r3, r3, #5
 80011a0:	4413      	add	r3, r2
 80011a2:	3308      	adds	r3, #8
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	88db      	ldrh	r3, [r3, #6]
 80011a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 80011ac:	4ba0      	ldr	r3, [pc, #640]	; (8001430 <DrawChar+0x2b0>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4a9f      	ldr	r2, [pc, #636]	; (8001430 <DrawChar+0x2b0>)
 80011b2:	015b      	lsls	r3, r3, #5
 80011b4:	4413      	add	r3, r2
 80011b6:	3308      	adds	r3, #8
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 80011c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011c4:	3307      	adds	r3, #7
 80011c6:	f023 0207 	bic.w	r2, r3, #7
 80011ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80011da:	e11c      	b.n	8001416 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80011dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011e0:	3307      	adds	r3, #7
 80011e2:	08db      	lsrs	r3, r3, #3
 80011e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 80011f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011f8:	3307      	adds	r3, #7
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d002      	beq.n	8001206 <DrawChar+0x86>
 8001200:	2b02      	cmp	r3, #2
 8001202:	d006      	beq.n	8001212 <DrawChar+0x92>
 8001204:	e011      	b.n	800122a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8001206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001210:	e01d      	b.n	800124e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800121e:	3201      	adds	r2, #1
 8001220:	7812      	ldrb	r2, [r2, #0]
 8001222:	4313      	orrs	r3, r2
 8001224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001228:	e011      	b.n	800124e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800122a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001236:	3301      	adds	r3, #1
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	4313      	orrs	r3, r2
 800123e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001242:	3202      	adds	r2, #2
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	4313      	orrs	r3, r2
 8001248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800124c:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800124e:	4b78      	ldr	r3, [pc, #480]	; (8001430 <DrawChar+0x2b0>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	4a77      	ldr	r2, [pc, #476]	; (8001430 <DrawChar+0x2b0>)
 8001254:	015b      	lsls	r3, r3, #5
 8001256:	4413      	add	r3, r2
 8001258:	331c      	adds	r3, #28
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b02      	cmp	r3, #2
 800125e:	f040 808c 	bne.w	800137a <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001268:	e074      	b.n	8001354 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 800126a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800126e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001272:	1ad2      	subs	r2, r2, r3
 8001274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001278:	4413      	add	r3, r2
 800127a:	3b01      	subs	r3, #1
 800127c:	2201      	movs	r2, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	461a      	mov	r2, r3
 8001284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001288:	4013      	ands	r3, r2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d02d      	beq.n	80012ea <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800128e:	4b68      	ldr	r3, [pc, #416]	; (8001430 <DrawChar+0x2b0>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4a67      	ldr	r2, [pc, #412]	; (8001430 <DrawChar+0x2b0>)
 8001294:	015b      	lsls	r3, r3, #5
 8001296:	4413      	add	r3, r2
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	08db      	lsrs	r3, r3, #3
 800129c:	b29b      	uxth	r3, r3
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b62      	ldr	r3, [pc, #392]	; (8001430 <DrawChar+0x2b0>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	4961      	ldr	r1, [pc, #388]	; (8001430 <DrawChar+0x2b0>)
 80012aa:	015b      	lsls	r3, r3, #5
 80012ac:	440b      	add	r3, r1
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	0a9b      	lsrs	r3, r3, #10
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	015b      	lsls	r3, r3, #5
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <DrawChar+0x2b0>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	495a      	ldr	r1, [pc, #360]	; (8001430 <DrawChar+0x2b0>)
 80012c8:	015b      	lsls	r3, r3, #5
 80012ca:	440b      	add	r3, r1
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0cdb      	lsrs	r3, r3, #19
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	02db      	lsls	r3, r3, #11
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	33c0      	adds	r3, #192	; 0xc0
 80012e2:	443b      	add	r3, r7
 80012e4:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80012e8:	e02f      	b.n	800134a <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80012ea:	4b51      	ldr	r3, [pc, #324]	; (8001430 <DrawChar+0x2b0>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	4a50      	ldr	r2, [pc, #320]	; (8001430 <DrawChar+0x2b0>)
 80012f0:	015b      	lsls	r3, r3, #5
 80012f2:	4413      	add	r3, r2
 80012f4:	3304      	adds	r3, #4
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	b29a      	uxth	r2, r3
 8001302:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <DrawChar+0x2b0>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	494a      	ldr	r1, [pc, #296]	; (8001430 <DrawChar+0x2b0>)
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	440b      	add	r3, r1
 800130c:	3304      	adds	r3, #4
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0a9b      	lsrs	r3, r3, #10
 8001312:	b29b      	uxth	r3, r3
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	b29b      	uxth	r3, r3
 8001318:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800131c:	b29b      	uxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b43      	ldr	r3, [pc, #268]	; (8001430 <DrawChar+0x2b0>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4942      	ldr	r1, [pc, #264]	; (8001430 <DrawChar+0x2b0>)
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	440b      	add	r3, r1
 800132c:	3304      	adds	r3, #4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0cdb      	lsrs	r3, r3, #19
 8001332:	b29b      	uxth	r3, r3
 8001334:	02db      	lsls	r3, r3, #11
 8001336:	b29b      	uxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b29a      	uxth	r2, r3
 800133c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	33c0      	adds	r3, #192	; 0xc0
 8001344:	443b      	add	r3, r7
 8001346:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 800134a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800134e:	3301      	adds	r3, #1
 8001350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001354:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800135c:	429a      	cmp	r2, r3
 800135e:	d384      	bcc.n	800126a <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	1c4b      	adds	r3, r1, #1
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800136a:	2301      	movs	r3, #1
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff fdb4 	bl	8000ee0 <UTIL_LCD_FillRGBRect>
 8001378:	e048      	b.n	800140c <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001380:	e032      	b.n	80013e8 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001382:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001390:	4413      	add	r3, r2
 8001392:	3b01      	subs	r3, #1
 8001394:	2201      	movs	r2, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	461a      	mov	r2, r3
 800139c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00d      	beq.n	80013c2 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <DrawChar+0x2b0>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	4a21      	ldr	r2, [pc, #132]	; (8001430 <DrawChar+0x2b0>)
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	4413      	add	r3, r2
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	33c0      	adds	r3, #192	; 0xc0
 80013ba:	443b      	add	r3, r7
 80013bc:	f843 2cac 	str.w	r2, [r3, #-172]
 80013c0:	e00d      	b.n	80013de <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <DrawChar+0x2b0>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <DrawChar+0x2b0>)
 80013c8:	015b      	lsls	r3, r3, #5
 80013ca:	4413      	add	r3, r2
 80013cc:	3304      	adds	r3, #4
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	33c0      	adds	r3, #192	; 0xc0
 80013d8:	443b      	add	r3, r7
 80013da:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80013de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80013e2:	3301      	adds	r3, #1
 80013e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80013e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80013ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3c6      	bcc.n	8001382 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	1c4b      	adds	r3, r1, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	f107 0214 	add.w	r2, r7, #20
 80013fe:	2301      	movs	r3, #1
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7ff fd6a 	bl	8000ee0 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 800140c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001410:	3301      	adds	r3, #1
 8001412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001416:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800141a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800141e:	429a      	cmp	r2, r3
 8001420:	f4ff aedc 	bcc.w	80011dc <DrawChar+0x5c>
    }
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	37c0      	adds	r7, #192	; 0xc0
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	240001e4 	.word	0x240001e4

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_MspInit+0x74>)
 800143c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001440:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_MspInit+0x74>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_MspInit+0x74>)
 800144c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	210f      	movs	r1, #15
 800145c:	f06f 0001 	mvn.w	r0, #1
 8001460:	f002 fb2f 	bl	8003ac2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_MspInit+0x74>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <HAL_MspInit+0x74>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_MspInit+0x74>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001482:	2308      	movs	r3, #8
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4619      	mov	r1, r3
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <HAL_MspInit+0x78>)
 800149a:	f004 fb0f 	bl	8005abc <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58021000 	.word	0x58021000

080014b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0ba      	sub	sp, #232	; 0xe8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	22c0      	movs	r2, #192	; 0xc0
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f00b fbb8 	bl	800cc46 <memset>
  if(huart->Instance==USART3)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a36      	ldr	r2, [pc, #216]	; (80015b4 <HAL_UART_MspInit+0x104>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d164      	bne.n	80015aa <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014e0:	f04f 0202 	mov.w	r2, #2
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4618      	mov	r0, r3
 80014f8:	f006 fed6 	bl	80082a8 <HAL_RCCEx_PeriphCLKConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001502:	f7ff fb8d 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_UART_MspInit+0x108>)
 8001508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800150c:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <HAL_UART_MspInit+0x108>)
 800150e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001512:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_UART_MspInit+0x108>)
 8001518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800151c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_UART_MspInit+0x108>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <HAL_UART_MspInit+0x108>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_UART_MspInit+0x108>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA11     ------> USART3_RX
    PA10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800155c:	2307      	movs	r3, #7
 800155e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001566:	4619      	mov	r1, r3
 8001568:	4814      	ldr	r0, [pc, #80]	; (80015bc <HAL_UART_MspInit+0x10c>)
 800156a:	f004 faa7 	bl	8005abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001588:	2307      	movs	r3, #7
 800158a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001592:	4619      	mov	r1, r3
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <HAL_UART_MspInit+0x10c>)
 8001596:	f004 fa91 	bl	8005abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2027      	movs	r0, #39	; 0x27
 80015a0:	f002 fa8f 	bl	8003ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015a4:	2027      	movs	r0, #39	; 0x27
 80015a6:	f002 faa6 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	37e8      	adds	r7, #232	; 0xe8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004800 	.word	0x40004800
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58020400 	.word	0x58020400

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f0:	f002 f92c 	bl	800384c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015f4:	f00b f8b2 	bl	800c75c <xTaskGetSchedulerState>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015fe:	f00b f91b 	bl	800c838 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}

08001606 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 800160a:	2000      	movs	r0, #0
 800160c:	f000 fc1c 	bl	8001e48 <BSP_PB_IRQHandler>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <TIM3_IRQHandler+0x10>)
 800161a:	f008 feac 	bl	800a376 <HAL_TIM_IRQHandler>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	24000158 	.word	0x24000158

08001628 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <USART3_IRQHandler+0x10>)
 800162e:	f009 fa51 	bl	800aad4 <HAL_UART_IRQHandler>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	240000c4 	.word	0x240000c4

0800163c <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8001640:	2000      	movs	r0, #0
 8001642:	f000 fc1b 	bl	8001e7c <BSP_AUDIO_OUT_IRQHandler>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <DMA2_Stream4_IRQHandler+0x14>)
 8001652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001656:	4618      	mov	r0, r3
 8001658:	f002 ffcc 	bl	80045f4 <HAL_DMA_IRQHandler>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	24000304 	.word	0x24000304

08001664 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8001668:	2130      	movs	r1, #48	; 0x30
 800166a:	2001      	movs	r0, #1
 800166c:	f000 fc1a 	bl	8001ea4 <BSP_AUDIO_IN_IRQHandler>

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8001678:	2000      	movs	r0, #0
 800167a:	f001 ff61 	bl	8003540 <BSP_SDRAM_IRQHandler>

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f00b fb16 	bl	800cce4 <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	24080000 	.word	0x24080000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	24000250 	.word	0x24000250
 80016ec:	24001610 	.word	0x24001610

080016f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <SystemInit+0xe4>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <SystemInit+0xe4>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001704:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <SystemInit+0xe8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	2b06      	cmp	r3, #6
 800170e:	d807      	bhi.n	8001720 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001710:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <SystemInit+0xe8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 030f 	bic.w	r3, r3, #15
 8001718:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <SystemInit+0xe8>)
 800171a:	f043 0307 	orr.w	r3, r3, #7
 800171e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001720:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <SystemInit+0xec>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2d      	ldr	r2, [pc, #180]	; (80017dc <SystemInit+0xec>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <SystemInit+0xec>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <SystemInit+0xec>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4929      	ldr	r1, [pc, #164]	; (80017dc <SystemInit+0xec>)
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <SystemInit+0xf0>)
 800173a:	4013      	ands	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <SystemInit+0xe8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <SystemInit+0xe8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 030f 	bic.w	r3, r3, #15
 8001752:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <SystemInit+0xe8>)
 8001754:	f043 0307 	orr.w	r3, r3, #7
 8001758:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <SystemInit+0xec>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <SystemInit+0xec>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <SystemInit+0xec>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <SystemInit+0xec>)
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <SystemInit+0xf4>)
 8001770:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <SystemInit+0xec>)
 8001774:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <SystemInit+0xf8>)
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <SystemInit+0xec>)
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <SystemInit+0xfc>)
 800177c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <SystemInit+0xec>)
 8001780:	2200      	movs	r2, #0
 8001782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <SystemInit+0xec>)
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <SystemInit+0xfc>)
 8001788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <SystemInit+0xec>)
 800178c:	2200      	movs	r2, #0
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <SystemInit+0xec>)
 8001792:	4a16      	ldr	r2, [pc, #88]	; (80017ec <SystemInit+0xfc>)
 8001794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <SystemInit+0xec>)
 8001798:	2200      	movs	r2, #0
 800179a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <SystemInit+0xec>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <SystemInit+0xec>)
 80017a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <SystemInit+0xec>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <SystemInit+0x100>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <SystemInit+0x104>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ba:	d202      	bcs.n	80017c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <SystemInit+0x108>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <SystemInit+0x10c>)
 80017c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00
 80017d8:	52002000 	.word	0x52002000
 80017dc:	58024400 	.word	0x58024400
 80017e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017e4:	02020200 	.word	0x02020200
 80017e8:	01ff0000 	.word	0x01ff0000
 80017ec:	01010280 	.word	0x01010280
 80017f0:	5c001000 	.word	0x5c001000
 80017f4:	ffff0000 	.word	0xffff0000
 80017f8:	51008108 	.word	0x51008108
 80017fc:	52004000 	.word	0x52004000

08001800 <USART3_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/

HAL_StatusTypeDef USART3_Init(UART_HandleTypeDef* huart3)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  huart3->Instance = USART3;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <USART3_Init+0x50>)
 800180c:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  //huart1->Init.OverSampling = UART_OVERSAMPLING_16;
  //huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  //huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(huart3) != HAL_OK)
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f008 ffa7 	bl	800a788 <HAL_UART_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <USART3_Init+0x44>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <USART3_Init+0x46>
  }

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40004800 	.word	0x40004800

08001854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800188c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001858:	f7ff ff4a 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	; (80018a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f00b fa35 	bl	800ccf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7fe ff61 	bl	800074c <main>
  bx  lr
 800188a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001890:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001894:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8001898:	0800f8ac 	.word	0x0800f8ac
  ldr r2, =_sbss
 800189c:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 80018a0:	24001610 	.word	0x24001610

080018a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC3_IRQHandler>
	...

080018a8 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d103      	bne.n	80018c0 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e02c      	b.n	800191a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	891a      	ldrh	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <FT5336_RegisterBusIO+0x7c>)
 80018f4:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <FT5336_RegisterBusIO+0x80>)
 80018fa:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4798      	blx	r3
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	e002      	b.n	800191a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
 8001918:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	0800194d 	.word	0x0800194d
 8001928:	08001981 	.word	0x08001981

0800192c <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3318      	adds	r3, #24
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f850 	bl	80019e2 <ft5336_chip_id>
 8001942:	4603      	mov	r3, r0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	460b      	mov	r3, r1
 800195a:	72fb      	strb	r3, [r7, #11]
 800195c:	4613      	mov	r3, r2
 800195e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	691c      	ldr	r4, [r3, #16]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	8918      	ldrh	r0, [r3, #8]
 800196c:	7afb      	ldrb	r3, [r7, #11]
 800196e:	b299      	uxth	r1, r3
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	47a0      	blx	r4
 8001976:	4603      	mov	r3, r0
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}

08001980 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	461a      	mov	r2, r3
 800198c:	460b      	mov	r3, r1
 800198e:	72fb      	strb	r3, [r7, #11]
 8001990:	4613      	mov	r3, r2
 8001992:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	68dc      	ldr	r4, [r3, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	8918      	ldrh	r0, [r3, #8]
 80019a0:	7afb      	ldrb	r3, [r7, #11]
 80019a2:	b299      	uxth	r1, r3
 80019a4:	893b      	ldrh	r3, [r7, #8]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	47a0      	blx	r4
 80019aa:	4603      	mov	r3, r0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	72fb      	strb	r3, [r7, #11]
 80019c4:	4613      	mov	r3, r2
 80019c6:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685c      	ldr	r4, [r3, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6898      	ldr	r0, [r3, #8]
 80019d0:	893b      	ldrh	r3, [r7, #8]
 80019d2:	7af9      	ldrb	r1, [r7, #11]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	47a0      	blx	r4
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}

080019e2 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80019ec:	2301      	movs	r3, #1
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	21a8      	movs	r1, #168	; 0xa8
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffde 	bl	80019b4 <ft5336_read_reg>
 80019f8:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
 8001a28:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f831 	bl	8001a98 <MT48LC4M32B2_ClockEnable>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d128      	bne.n	8001a8e <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f000 f8e1 	bl	8001c04 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f849 	bl	8001ae0 <MT48LC4M32B2_Precharge>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11c      	bne.n	8001a8e <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f896 	bl	8001b90 <MT48LC4M32B2_RefreshMode>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d111      	bne.n	8001a8e <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8001a6a:	6839      	ldr	r1, [r7, #0]
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f85b 	bl	8001b28 <MT48LC4M32B2_ModeRegConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f8ac 	bl	8001bdc <MT48LC4M32B2_RefreshRate>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MT48LC4M32B2_ClockEnable+0x44>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <MT48LC4M32B2_ClockEnable+0x44>)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MT48LC4M32B2_ClockEnable+0x44>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MT48LC4M32B2_ClockEnable+0x44>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abe:	4907      	ldr	r1, [pc, #28]	; (8001adc <MT48LC4M32B2_ClockEnable+0x44>)
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f008 fa63 	bl	8009f8c <HAL_SDRAM_SendCommand>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	e000      	b.n	8001ad4 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001ad2:	2300      	movs	r3, #0
  }
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	24000254 	.word	0x24000254

08001ae0 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MT48LC4M32B2_Precharge+0x44>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <MT48LC4M32B2_Precharge+0x44>)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MT48LC4M32B2_Precharge+0x44>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MT48LC4M32B2_Precharge+0x44>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b06:	4907      	ldr	r1, [pc, #28]	; (8001b24 <MT48LC4M32B2_Precharge+0x44>)
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f008 fa3f 	bl	8009f8c <HAL_SDRAM_SendCommand>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295
 8001b18:	e000      	b.n	8001b1c <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001b1a:	2300      	movs	r3, #0
  }
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	24000254 	.word	0x24000254

08001b28 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001b3a:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8001b40:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8001b46:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001b52:	2204      	movs	r2, #4
 8001b54:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001b5c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	4907      	ldr	r1, [pc, #28]	; (8001b8c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f008 fa0b 	bl	8009f8c <HAL_SDRAM_SendCommand>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	e000      	b.n	8001b84 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001b82:	2300      	movs	r3, #0
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	24000254 	.word	0x24000254

08001b90 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <MT48LC4M32B2_RefreshMode+0x48>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <MT48LC4M32B2_RefreshMode+0x48>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MT48LC4M32B2_RefreshMode+0x48>)
 8001baa:	2208      	movs	r2, #8
 8001bac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <MT48LC4M32B2_RefreshMode+0x48>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb8:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <MT48LC4M32B2_RefreshMode+0x48>)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f008 f9e6 	bl	8009f8c <HAL_SDRAM_SendCommand>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e000      	b.n	8001bce <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001bcc:	2300      	movs	r3, #0
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	24000254 	.word	0x24000254

08001bdc <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f008 fa04 	bl	8009ff6 <HAL_SDRAM_ProgramRefreshRate>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	e000      	b.n	8001bfc <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001bfa:	2300      	movs	r3, #0
  }
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8001c0c:	f001 fe32 	bl	8003874 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001c12:	bf00      	nop
 8001c14:	f001 fe2e 	bl	8003874 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8f7      	bhi.n	8001c14 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10f      	bne.n	8001c64 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <BSP_LED_Init+0xb0>)
 8001c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4a:	4a25      	ldr	r2, [pc, #148]	; (8001ce0 <BSP_LED_Init+0xb0>)
 8001c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <BSP_LED_Init+0xb0>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	e015      	b.n	8001c90 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d10f      	bne.n	8001c8a <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <BSP_LED_Init+0xb0>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c70:	4a1b      	ldr	r2, [pc, #108]	; (8001ce0 <BSP_LED_Init+0xb0>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <BSP_LED_Init+0xb0>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	e002      	b.n	8001c90 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c8a:	f06f 0301 	mvn.w	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <BSP_LED_Init+0xb4>)
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <BSP_LED_Init+0xb8>)
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	f107 0210 	add.w	r2, r7, #16
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 ff01 	bl	8005abc <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <BSP_LED_Init+0xb8>)
 8001cbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <BSP_LED_Init+0xb4>)
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f004 f8a4 	bl	8005e1c <HAL_GPIO_WritePin>
  return ret;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	0800f794 	.word	0x0800f794
 8001ce8:	24000018 	.word	0x24000018

08001cec <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <BSP_LED_On+0x34>)
 8001cfe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <BSP_LED_On+0x38>)
 8001d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f004 f884 	bl	8005e1c <HAL_GPIO_WritePin>
  return ret;
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	24000018 	.word	0x24000018
 8001d24:	0800f794 	.word	0x0800f794

08001d28 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <BSP_LED_Off+0x34>)
 8001d3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <BSP_LED_Off+0x38>)
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f004 f866 	bl	8005e1c <HAL_GPIO_WritePin>
  return ret;
 8001d50:	68fb      	ldr	r3, [r7, #12]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	24000018 	.word	0x24000018
 8001d60:	0800f794 	.word	0x0800f794

08001d64 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	4613      	mov	r3, r2
 8001d72:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <BSP_PB_Init+0xcc>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <BSP_PB_Init+0xcc>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <BSP_PB_Init+0xcc>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d96:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001da0:	79bb      	ldrb	r3, [r7, #6]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <BSP_PB_Init+0xd0>)
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	f107 020c 	add.w	r2, r7, #12
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fe7f 	bl	8005abc <HAL_GPIO_Init>
 8001dbe:	e031      	b.n	8001e24 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001dc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dc4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <BSP_PB_Init+0xd0>)
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	f107 020c 	add.w	r2, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fe71 	bl	8005abc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <BSP_PB_Init+0xd4>)
 8001de0:	441a      	add	r2, r3
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4915      	ldr	r1, [pc, #84]	; (8001e3c <BSP_PB_Init+0xd8>)
 8001de6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f003 fe20 	bl	8005a32 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <BSP_PB_Init+0xd4>)
 8001df8:	1898      	adds	r0, r3, r2
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4a10      	ldr	r2, [pc, #64]	; (8001e40 <BSP_PB_Init+0xdc>)
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	461a      	mov	r2, r3
 8001e04:	2100      	movs	r1, #0
 8001e06:	f003 fdf5 	bl	80059f4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e0a:	2028      	movs	r0, #40	; 0x28
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <BSP_PB_Init+0xe0>)
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	2200      	movs	r2, #0
 8001e16:	4619      	mov	r1, r3
 8001e18:	f001 fe53 	bl	8003ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e1c:	2328      	movs	r3, #40	; 0x28
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 fe69 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3720      	adds	r7, #32
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	58024400 	.word	0x58024400
 8001e34:	24000020 	.word	0x24000020
 8001e38:	24000264 	.word	0x24000264
 8001e3c:	0800f79c 	.word	0x0800f79c
 8001e40:	24000024 	.word	0x24000024
 8001e44:	24000028 	.word	0x24000028

08001e48 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <BSP_PB_IRQHandler+0x20>)
 8001e58:	4413      	add	r3, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 fdfe 	bl	8005a5c <HAL_EXTI_IRQHandler>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	24000264 	.word	0x24000264

08001e6c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7fe fe2b 	bl	8000acc <BSP_PB_Callback>
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8001e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 fbaf 	bl	80045f4 <HAL_DMA_IRQHandler>
  }
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2400026c 	.word	0x2400026c

08001ea4 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b30      	cmp	r3, #48	; 0x30
 8001eb2:	d002      	beq.n	8001eba <BSP_AUDIO_IN_IRQHandler+0x16>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8001ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fb97 	bl	80045f4 <HAL_DMA_IRQHandler>
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	24000304 	.word	0x24000304

08001ed4 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <BSP_I2C4_Init+0x64>)
 8001ee0:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <BSP_I2C4_Init+0x68>)
 8001ee2:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <BSP_I2C4_Init+0x6c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d11f      	bne.n	8001f2c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8001eec:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <BSP_I2C4_Init+0x6c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <BSP_I2C4_Init+0x6c>)
 8001ef4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8001ef6:	4810      	ldr	r0, [pc, #64]	; (8001f38 <BSP_I2C4_Init+0x64>)
 8001ef8:	f004 f95e 	bl	80061b8 <HAL_I2C_GetState>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d114      	bne.n	8001f2c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8001f02:	480d      	ldr	r0, [pc, #52]	; (8001f38 <BSP_I2C4_Init+0x64>)
 8001f04:	f000 fb06 	bl	8002514 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8001f08:	f006 f9b8 	bl	800827c <HAL_RCC_GetPCLK2Freq>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <BSP_I2C4_Init+0x70>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 f889 	bl	8002028 <I2C_GetTiming>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <BSP_I2C4_Init+0x64>)
 8001f1c:	f000 f814 	bl	8001f48 <MX_I2C4_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001f26:	f06f 0307 	mvn.w	r3, #7
 8001f2a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	24000da4 	.word	0x24000da4
 8001f3c:	58001c00 	.word	0x58001c00
 8001f40:	2400039c 	.word	0x2400039c
 8001f44:	000186a0 	.word	0x000186a0

08001f48 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f003 ff62 	bl	8005e50 <HAL_I2C_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	e014      	b.n	8001fc2 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f004 fb88 	bl	80066b4 <HAL_I2CEx_ConfigAnalogFilter>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	e008      	b.n	8001fc2 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f004 fbc9 	bl	800674a <HAL_I2CEx_ConfigDigitalFilter>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60ba      	str	r2, [r7, #8]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	81fb      	strh	r3, [r7, #14]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	81bb      	strh	r3, [r7, #12]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001fe2:	89b9      	ldrh	r1, [r7, #12]
 8001fe4:	89f8      	ldrh	r0, [r7, #14]
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f000 fafd 	bl	80025ec <I2C4_ReadReg>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e00c      	b.n	8002018 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001ffe:	4809      	ldr	r0, [pc, #36]	; (8002024 <BSP_I2C4_ReadReg+0x58>)
 8002000:	f004 f8e8 	bl	80061d4 <HAL_I2C_GetError>
 8002004:	4603      	mov	r3, r0
 8002006:	2b04      	cmp	r3, #4
 8002008:	d103      	bne.n	8002012 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800200a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e002      	b.n	8002018 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002012:	f06f 0303 	mvn.w	r3, #3
 8002016:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002018:	697b      	ldr	r3, [r7, #20]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	24000da4 	.word	0x24000da4

08002028 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d06b      	beq.n	8002114 <I2C_GetTiming+0xec>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d068      	beq.n	8002114 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e060      	b.n	800210a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002048:	4a35      	ldr	r2, [pc, #212]	; (8002120 <I2C_GetTiming+0xf8>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d352      	bcc.n	8002104 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800205e:	4a30      	ldr	r2, [pc, #192]	; (8002120 <I2C_GetTiming+0xf8>)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	3308      	adds	r3, #8
 800206c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d847      	bhi.n	8002104 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002074:	6939      	ldr	r1, [r7, #16]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f856 	bl	8002128 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800207c:	6939      	ldr	r1, [r7, #16]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f940 	bl	8002304 <I2C_Compute_SCLL_SCLH>
 8002084:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b7f      	cmp	r3, #127	; 0x7f
 800208a:	d842      	bhi.n	8002112 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800208c:	4925      	ldr	r1, [pc, #148]	; (8002124 <I2C_GetTiming+0xfc>)
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800209e:	4821      	ldr	r0, [pc, #132]	; (8002124 <I2C_GetTiming+0xfc>)
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4403      	add	r3, r0
 80020ac:	3304      	adds	r3, #4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	051b      	lsls	r3, r3, #20
 80020b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80020b6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80020b8:	481a      	ldr	r0, [pc, #104]	; (8002124 <I2C_GetTiming+0xfc>)
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4403      	add	r3, r0
 80020c6:	3308      	adds	r3, #8
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80020d0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80020d2:	4814      	ldr	r0, [pc, #80]	; (8002124 <I2C_GetTiming+0xfc>)
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4403      	add	r3, r0
 80020e0:	330c      	adds	r3, #12
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	021b      	lsls	r3, r3, #8
 80020e6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80020e8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80020ea:	480e      	ldr	r0, [pc, #56]	; (8002124 <I2C_GetTiming+0xfc>)
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4403      	add	r3, r0
 80020f8:	3310      	adds	r3, #16
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80020fe:	430b      	orrs	r3, r1
 8002100:	617b      	str	r3, [r7, #20]
        }
        break;
 8002102:	e006      	b.n	8002112 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	3301      	adds	r3, #1
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d99b      	bls.n	8002048 <I2C_GetTiming+0x20>
 8002110:	e000      	b.n	8002114 <I2C_GetTiming+0xec>
        break;
 8002112:	bf00      	nop
      }
    }
  }

  return ret;
 8002114:	697b      	ldr	r3, [r7, #20]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	0800f7a0 	.word	0x0800f7a0
 8002124:	240003a0 	.word	0x240003a0

08002128 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002128:	b480      	push	{r7}
 800212a:	b08f      	sub	sp, #60	; 0x3c
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002132:	2310      	movs	r3, #16
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	085a      	lsrs	r2, r3, #1
 800213a:	4b6e      	ldr	r3, [pc, #440]	; (80022f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800213c:	4413      	add	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	fbb3 f3f2 	udiv	r3, r3, r2
 8002144:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002146:	2332      	movs	r3, #50	; 0x32
 8002148:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800214a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800214e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002150:	4a69      	ldr	r2, [pc, #420]	; (80022f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3324      	adds	r3, #36	; 0x24
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	4a65      	ldr	r2, [pc, #404]	; (80022f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	330c      	adds	r3, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002174:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002176:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002178:	495f      	ldr	r1, [pc, #380]	; (80022f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	202c      	movs	r0, #44	; 0x2c
 800217e:	fb00 f303 	mul.w	r3, r0, r3
 8002182:	440b      	add	r3, r1
 8002184:	3328      	adds	r3, #40	; 0x28
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3303      	adds	r3, #3
 800218a:	69f9      	ldr	r1, [r7, #28]
 800218c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002194:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3310      	adds	r3, #16
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3320      	adds	r3, #32
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80021b8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80021ba:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80021bc:	494e      	ldr	r1, [pc, #312]	; (80022f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	202c      	movs	r0, #44	; 0x2c
 80021c2:	fb00 f303 	mul.w	r3, r0, r3
 80021c6:	440b      	add	r3, r1
 80021c8:	3328      	adds	r3, #40	; 0x28
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3304      	adds	r3, #4
 80021ce:	69f9      	ldr	r1, [r7, #28]
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80021d8:	4a47      	ldr	r2, [pc, #284]	; (80022f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3320      	adds	r3, #32
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	4a43      	ldr	r2, [pc, #268]	; (80022f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3314      	adds	r3, #20
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4403      	add	r3, r0
 80021fc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80021fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002200:	2b00      	cmp	r3, #0
 8002202:	dc01      	bgt.n	8002208 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220a:	2b00      	cmp	r3, #0
 800220c:	dc01      	bgt.n	8002212 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002212:	2300      	movs	r3, #0
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
 8002216:	e062      	b.n	80022de <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
 800221c:	e059      	b.n	80022d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	3301      	adds	r3, #1
 8002222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002224:	3201      	adds	r2, #1
 8002226:	fb03 f202 	mul.w	r2, r3, r2
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	429a      	cmp	r2, r3
 8002238:	d348      	bcc.n	80022cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
 800223e:	e042      	b.n	80022c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	3301      	adds	r3, #1
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	fb03 f202 	mul.w	r2, r3, r2
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d332      	bcc.n	80022c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	429a      	cmp	r2, r3
 8002260:	d82e      	bhi.n	80022c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002266:	429a      	cmp	r2, r3
 8002268:	d02a      	beq.n	80022c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4924      	ldr	r1, [pc, #144]	; (8002300 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	491f      	ldr	r1, [pc, #124]	; (8002300 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3304      	adds	r3, #4
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4919      	ldr	r1, [pc, #100]	; (8002300 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3308      	adds	r3, #8
 80022a6:	6a3a      	ldr	r2, [r7, #32]
 80022a8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80022b6:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b7f      	cmp	r3, #127	; 0x7f
 80022be:	d812      	bhi.n	80022e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	3301      	adds	r3, #1
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d9b9      	bls.n	8002240 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	3301      	adds	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d9a2      	bls.n	800221e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	3301      	adds	r3, #1
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d999      	bls.n	8002218 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80022e4:	e000      	b.n	80022e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80022e6:	bf00      	nop
          }
        }
      }
    }
  }
}
 80022e8:	373c      	adds	r7, #60	; 0x3c
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	3b9aca00 	.word	0x3b9aca00
 80022f8:	0800f7a0 	.word	0x0800f7a0
 80022fc:	24000da0 	.word	0x24000da0
 8002300:	240003a0 	.word	0x240003a0

08002304 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002304:	b480      	push	{r7}
 8002306:	b093      	sub	sp, #76	; 0x4c
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	085a      	lsrs	r2, r3, #1
 8002318:	4b7a      	ldr	r3, [pc, #488]	; (8002504 <I2C_Compute_SCLL_SCLH+0x200>)
 800231a:	4413      	add	r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002324:	4a78      	ldr	r2, [pc, #480]	; (8002508 <I2C_Compute_SCLL_SCLH+0x204>)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	085a      	lsrs	r2, r3, #1
 8002334:	4b73      	ldr	r3, [pc, #460]	; (8002504 <I2C_Compute_SCLL_SCLH+0x200>)
 8002336:	4413      	add	r3, r2
 8002338:	4973      	ldr	r1, [pc, #460]	; (8002508 <I2C_Compute_SCLL_SCLH+0x204>)
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	202c      	movs	r0, #44	; 0x2c
 800233e:	fb00 f202 	mul.w	r2, r0, r2
 8002342:	440a      	add	r2, r1
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	fbb3 f3f2 	udiv	r3, r3, r2
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800234c:	2332      	movs	r3, #50	; 0x32
 800234e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002350:	4a6d      	ldr	r2, [pc, #436]	; (8002508 <I2C_Compute_SCLL_SCLH+0x204>)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3328      	adds	r3, #40	; 0x28
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002368:	4a67      	ldr	r2, [pc, #412]	; (8002508 <I2C_Compute_SCLL_SCLH+0x204>)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3304      	adds	r3, #4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a62      	ldr	r2, [pc, #392]	; (8002504 <I2C_Compute_SCLL_SCLH+0x200>)
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002380:	4a61      	ldr	r2, [pc, #388]	; (8002508 <I2C_Compute_SCLL_SCLH+0x204>)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3308      	adds	r3, #8
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a5c      	ldr	r2, [pc, #368]	; (8002504 <I2C_Compute_SCLL_SCLH+0x200>)
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800239c:	2300      	movs	r3, #0
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
 80023a0:	e0a3      	b.n	80024ea <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80023a2:	495a      	ldr	r1, [pc, #360]	; (800250c <I2C_Compute_SCLL_SCLH+0x208>)
 80023a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80023bc:	2300      	movs	r3, #0
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c0:	e08c      	b.n	80024dc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	441a      	add	r2, r3
 80023c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ca:	3301      	adds	r3, #1
 80023cc:	6979      	ldr	r1, [r7, #20]
 80023ce:	fb03 f101 	mul.w	r1, r3, r1
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	440b      	add	r3, r1
 80023d8:	4413      	add	r3, r2
 80023da:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80023dc:	4a4a      	ldr	r2, [pc, #296]	; (8002508 <I2C_Compute_SCLL_SCLH+0x204>)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3318      	adds	r3, #24
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d971      	bls.n	80024d6 <I2C_Compute_SCLL_SCLH+0x1d2>
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002400:	429a      	cmp	r2, r3
 8002402:	d268      	bcs.n	80024d6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002404:	2300      	movs	r3, #0
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
 8002408:	e062      	b.n	80024d0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800240a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	441a      	add	r2, r3
 8002410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002412:	3301      	adds	r3, #1
 8002414:	6979      	ldr	r1, [r7, #20]
 8002416:	fb03 f101 	mul.w	r1, r3, r1
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	440b      	add	r3, r1
 8002420:	4413      	add	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	441a      	add	r2, r3
 800242a:	4937      	ldr	r1, [pc, #220]	; (8002508 <I2C_Compute_SCLL_SCLH+0x204>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	202c      	movs	r0, #44	; 0x2c
 8002430:	fb00 f303 	mul.w	r3, r0, r3
 8002434:	440b      	add	r3, r1
 8002436:	3320      	adds	r3, #32
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	441a      	add	r2, r3
 800243c:	4932      	ldr	r1, [pc, #200]	; (8002508 <I2C_Compute_SCLL_SCLH+0x204>)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	202c      	movs	r0, #44	; 0x2c
 8002442:	fb00 f303 	mul.w	r3, r0, r3
 8002446:	440b      	add	r3, r1
 8002448:	3324      	adds	r3, #36	; 0x24
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4413      	add	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	429a      	cmp	r2, r3
 8002456:	d338      	bcc.n	80024ca <I2C_Compute_SCLL_SCLH+0x1c6>
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	429a      	cmp	r2, r3
 800245e:	d834      	bhi.n	80024ca <I2C_Compute_SCLL_SCLH+0x1c6>
 8002460:	4a29      	ldr	r2, [pc, #164]	; (8002508 <I2C_Compute_SCLL_SCLH+0x204>)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	331c      	adds	r3, #28
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	429a      	cmp	r2, r3
 8002474:	d329      	bcc.n	80024ca <I2C_Compute_SCLL_SCLH+0x1c6>
 8002476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	429a      	cmp	r2, r3
 800247c:	d225      	bcs.n	80024ca <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	2b00      	cmp	r3, #0
 800248a:	da02      	bge.n	8002492 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248e:	425b      	negs	r3, r3
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002496:	429a      	cmp	r2, r3
 8002498:	d917      	bls.n	80024ca <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800249e:	491b      	ldr	r1, [pc, #108]	; (800250c <I2C_Compute_SCLL_SCLH+0x208>)
 80024a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3310      	adds	r3, #16
 80024ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024b0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80024b2:	4916      	ldr	r1, [pc, #88]	; (800250c <I2C_Compute_SCLL_SCLH+0x208>)
 80024b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	330c      	adds	r3, #12
 80024c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c4:	601a      	str	r2, [r3, #0]
              ret = count;
 80024c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80024ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024cc:	3301      	adds	r3, #1
 80024ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	2bff      	cmp	r3, #255	; 0xff
 80024d4:	d999      	bls.n	800240a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80024d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d8:	3301      	adds	r3, #1
 80024da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024de:	2bff      	cmp	r3, #255	; 0xff
 80024e0:	f67f af6f 	bls.w	80023c2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80024e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e6:	3301      	adds	r3, #1
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <I2C_Compute_SCLL_SCLH+0x20c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f0:	429a      	cmp	r2, r3
 80024f2:	f4ff af56 	bcc.w	80023a2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	374c      	adds	r7, #76	; 0x4c
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	3b9aca00 	.word	0x3b9aca00
 8002508:	0800f7a0 	.word	0x0800f7a0
 800250c:	240003a0 	.word	0x240003a0
 8002510:	24000da0 	.word	0x24000da0

08002514 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <I2C4_MspInit+0xd0>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002522:	4a30      	ldr	r2, [pc, #192]	; (80025e4 <I2C4_MspInit+0xd0>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <I2C4_MspInit+0xd0>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <I2C4_MspInit+0xd0>)
 800253c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002540:	4a28      	ldr	r2, [pc, #160]	; (80025e4 <I2C4_MspInit+0xd0>)
 8002542:	f043 0308 	orr.w	r3, r3, #8
 8002546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <I2C4_MspInit+0xd0>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800255e:	2312      	movs	r3, #18
 8002560:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002566:	2302      	movs	r3, #2
 8002568:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800256a:	2304      	movs	r3, #4
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	481c      	ldr	r0, [pc, #112]	; (80025e8 <I2C4_MspInit+0xd4>)
 8002576:	f003 faa1 	bl	8005abc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800257a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002580:	2312      	movs	r3, #18
 8002582:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002588:	2302      	movs	r3, #2
 800258a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800258c:	2304      	movs	r3, #4
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	4814      	ldr	r0, [pc, #80]	; (80025e8 <I2C4_MspInit+0xd4>)
 8002598:	f003 fa90 	bl	8005abc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <I2C4_MspInit+0xd0>)
 800259e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <I2C4_MspInit+0xd0>)
 80025a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <I2C4_MspInit+0xd0>)
 80025ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <I2C4_MspInit+0xd0>)
 80025bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025c0:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <I2C4_MspInit+0xd0>)
 80025c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <I2C4_MspInit+0xd0>)
 80025cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <I2C4_MspInit+0xd0>)
 80025d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	; 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	58024400 	.word	0x58024400
 80025e8:	58020c00 	.word	0x58020c00

080025ec <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af04      	add	r7, sp, #16
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	4603      	mov	r3, r0
 80025f6:	81fb      	strh	r3, [r7, #14]
 80025f8:	460b      	mov	r3, r1
 80025fa:	81bb      	strh	r3, [r7, #12]
 80025fc:	4613      	mov	r3, r2
 80025fe:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002600:	8978      	ldrh	r0, [r7, #10]
 8002602:	89ba      	ldrh	r2, [r7, #12]
 8002604:	89f9      	ldrh	r1, [r7, #14]
 8002606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	8b3b      	ldrh	r3, [r7, #24]
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	4603      	mov	r3, r0
 8002616:	4807      	ldr	r0, [pc, #28]	; (8002634 <I2C4_ReadReg+0x48>)
 8002618:	f003 fcb4 	bl	8005f84 <HAL_I2C_Mem_Read>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002622:	2300      	movs	r3, #0
 8002624:	e001      	b.n	800262a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002626:	f06f 0307 	mvn.w	r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	24000da4 	.word	0x24000da4

08002638 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af02      	add	r7, sp, #8
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002642:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800264c:	2200      	movs	r2, #0
 800264e:	6839      	ldr	r1, [r7, #0]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f805 	bl	8002660 <BSP_LCD_InitEx>
 8002656:	4603      	mov	r3, r0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b09e      	sub	sp, #120	; 0x78
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800266e:	2300      	movs	r3, #0
 8002670:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d808      	bhi.n	800268e <BSP_LCD_InitEx+0x2e>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <BSP_LCD_InitEx+0x2e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d006      	beq.n	8002696 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800268e:	f06f 0301 	mvn.w	r3, #1
 8002692:	677b      	str	r3, [r7, #116]	; 0x74
 8002694:	e0a8      	b.n	80027e8 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d109      	bne.n	80026b0 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 800269c:	2302      	movs	r3, #2
 800269e:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 80026a0:	4a54      	ldr	r2, [pc, #336]	; (80027f4 <BSP_LCD_InitEx+0x194>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	015b      	lsls	r3, r3, #5
 80026a6:	4413      	add	r3, r2
 80026a8:	3310      	adds	r3, #16
 80026aa:	2202      	movs	r2, #2
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e008      	b.n	80026c2 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80026b0:	2300      	movs	r3, #0
 80026b2:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 80026b4:	4a4f      	ldr	r2, [pc, #316]	; (80027f4 <BSP_LCD_InitEx+0x194>)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	4413      	add	r3, r2
 80026bc:	3310      	adds	r3, #16
 80026be:	2204      	movs	r2, #4
 80026c0:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80026c2:	4a4c      	ldr	r2, [pc, #304]	; (80027f4 <BSP_LCD_InitEx+0x194>)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	015b      	lsls	r3, r3, #5
 80026c8:	4413      	add	r3, r2
 80026ca:	330c      	adds	r3, #12
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80026d0:	4a48      	ldr	r2, [pc, #288]	; (80027f4 <BSP_LCD_InitEx+0x194>)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015b      	lsls	r3, r3, #5
 80026d6:	4413      	add	r3, r2
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80026dc:	4a45      	ldr	r2, [pc, #276]	; (80027f4 <BSP_LCD_InitEx+0x194>)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	015b      	lsls	r3, r3, #5
 80026e2:	4413      	add	r3, r2
 80026e4:	3304      	adds	r3, #4
 80026e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026ea:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80026ec:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <BSP_LCD_InitEx+0x198>)
 80026ee:	4a43      	ldr	r2, [pc, #268]	; (80027fc <BSP_LCD_InitEx+0x19c>)
 80026f0:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <BSP_LCD_InitEx+0x1a0>)
 80026f4:	4a43      	ldr	r2, [pc, #268]	; (8002804 <BSP_LCD_InitEx+0x1a4>)
 80026f6:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 80026f8:	483f      	ldr	r0, [pc, #252]	; (80027f8 <BSP_LCD_InitEx+0x198>)
 80026fa:	f000 fd1b 	bl	8003134 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 80026fe:	4840      	ldr	r0, [pc, #256]	; (8002800 <BSP_LCD_InitEx+0x1a0>)
 8002700:	f000 fde4 	bl	80032cc <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8002704:	4b40      	ldr	r3, [pc, #256]	; (8002808 <BSP_LCD_InitEx+0x1a8>)
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8002708:	4b40      	ldr	r3, [pc, #256]	; (800280c <BSP_LCD_InitEx+0x1ac>)
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 800270c:	2370      	movs	r3, #112	; 0x70
 800270e:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8002710:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002714:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f8c4 	bl	80018a8 <FT5336_RegisterBusIO>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	da03      	bge.n	800272e <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002726:	f06f 0304 	mvn.w	r3, #4
 800272a:	677b      	str	r3, [r7, #116]	; 0x74
 800272c:	e02b      	b.n	8002786 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 800272e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002732:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff f8f7 	bl	800192c <FT5336_ReadID>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	da03      	bge.n	800274c <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002744:	f06f 0304 	mvn.w	r3, #4
 8002748:	677b      	str	r3, [r7, #116]	; 0x74
 800274a:	e01c      	b.n	8002786 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 800274c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274e:	2b51      	cmp	r3, #81	; 0x51
 8002750:	d003      	beq.n	800275a <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002752:	f06f 0306 	mvn.w	r3, #6
 8002756:	677b      	str	r3, [r7, #116]	; 0x74
 8002758:	e015      	b.n	8002786 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800275a:	4827      	ldr	r0, [pc, #156]	; (80027f8 <BSP_LCD_InitEx+0x198>)
 800275c:	f000 f8e8 	bl	8002930 <MX_LTDC_ClockConfig>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002766:	f06f 0303 	mvn.w	r3, #3
 800276a:	677b      	str	r3, [r7, #116]	; 0x74
 800276c:	e00b      	b.n	8002786 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800276e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002772:	6839      	ldr	r1, [r7, #0]
 8002774:	4820      	ldr	r0, [pc, #128]	; (80027f8 <BSP_LCD_InitEx+0x198>)
 8002776:	f000 f84d 	bl	8002814 <MX_LTDC_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002780:	f06f 0303 	mvn.w	r3, #3
 8002784:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8002786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002788:	2b00      	cmp	r3, #0
 800278a:	d12d      	bne.n	80027e8 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800278c:	2000      	movs	r0, #0
 800278e:	f000 fe2f 	bl	80033f0 <BSP_SDRAM_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8002798:	f06f 0303 	mvn.w	r3, #3
 800279c:	e025      	b.n	80027ea <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 80027aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027ae:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 80027b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 80027b4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	461a      	mov	r2, r3
 80027c0:	2100      	movs	r1, #0
 80027c2:	480d      	ldr	r0, [pc, #52]	; (80027f8 <BSP_LCD_InitEx+0x198>)
 80027c4:	f000 f872 	bl	80028ac <MX_LTDC_ConfigLayer>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80027ce:	f06f 0303 	mvn.w	r3, #3
 80027d2:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 80027d4:	480e      	ldr	r0, [pc, #56]	; (8002810 <BSP_LCD_InitEx+0x1b0>)
 80027d6:	f000 fde1 	bl	800339c <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 80027da:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <BSP_LCD_InitEx+0x194>)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	015b      	lsls	r3, r3, #5
 80027e0:	4413      	add	r3, r2
 80027e2:	3318      	adds	r3, #24
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80027e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3778      	adds	r7, #120	; 0x78
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	24000f54 	.word	0x24000f54
 80027f8:	24000eac 	.word	0x24000eac
 80027fc:	50001000 	.word	0x50001000
 8002800:	24000e44 	.word	0x24000e44
 8002804:	52001000 	.word	0x52001000
 8002808:	08001ed5 	.word	0x08001ed5
 800280c:	08001fcd 	.word	0x08001fcd
 8002810:	24000df8 	.word	0x24000df8

08002814 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <MX_LTDC_Init+0x94>)
 8002824:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2228      	movs	r2, #40	; 0x28
 8002842:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	222a      	movs	r2, #42	; 0x2a
 8002848:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2209      	movs	r2, #9
 8002862:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	220b      	movs	r2, #11
 8002868:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f103 020b 	add.w	r2, r3, #11
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f103 020d 	add.w	r2, r3, #13
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	22ff      	movs	r2, #255	; 0xff
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	22ff      	movs	r2, #255	; 0xff
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	22ff      	movs	r2, #255	; 0xff
 8002892:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f003 ffa4 	bl	80067e4 <HAL_LTDC_Init>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	50001000 	.word	0x50001000

080028ac <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b092      	sub	sp, #72	; 0x48
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 80028d6:	23ff      	movs	r3, #255	; 0xff
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80028de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80028e4:	2307      	movs	r3, #7
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	4619      	mov	r1, r3
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f004 f839 	bl	8006998 <HAL_LTDC_ConfigLayer>
 8002926:	4603      	mov	r3, r0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3748      	adds	r7, #72	; 0x48
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0b2      	sub	sp, #200	; 0xc8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002938:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002944:	2305      	movs	r3, #5
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8002948:	23a0      	movs	r3, #160	; 0xa0
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800294c:	2302      	movs	r3, #2
 800294e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002950:	2302      	movs	r3, #2
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002954:	2353      	movs	r3, #83	; 0x53
 8002956:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002960:	f107 0308 	add.w	r3, r7, #8
 8002964:	4618      	mov	r0, r3
 8002966:	f005 fc9f 	bl	80082a8 <HAL_RCCEx_PeriphCLKConfig>
 800296a:	4603      	mov	r3, r0
}
 800296c:	4618      	mov	r0, r3
 800296e:	37c8      	adds	r7, #200	; 0xc8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002988:	f06f 0301 	mvn.w	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e007      	b.n	80029a0 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <BSP_LCD_GetPixelFormat+0x3c>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	015b      	lsls	r3, r3, #5
 8002996:	4413      	add	r3, r2
 8002998:	330c      	adds	r3, #12
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80029a0:	68fb      	ldr	r3, [r7, #12]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	24000f54 	.word	0x24000f54

080029b4 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029c8:	f06f 0301 	mvn.w	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	e006      	b.n	80029de <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <BSP_LCD_SetActiveLayer+0x38>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	4413      	add	r3, r2
 80029d8:	3308      	adds	r3, #8
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80029de:	68fb      	ldr	r3, [r7, #12]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	24000f54 	.word	0x24000f54

080029f0 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a04:	f06f 0301 	mvn.w	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e006      	b.n	8002a1a <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <BSP_LCD_GetXSize+0x38>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	015b      	lsls	r3, r3, #5
 8002a12:	4413      	add	r3, r2
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	24000f54 	.word	0x24000f54

08002a2c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a40:	f06f 0301 	mvn.w	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	e007      	b.n	8002a58 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <BSP_LCD_GetYSize+0x3c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	015b      	lsls	r3, r3, #5
 8002a4e:	4413      	add	r3, r2
 8002a50:	3304      	adds	r3, #4
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002a58:	68fb      	ldr	r3, [r7, #12]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	24000f54 	.word	0x24000f54

08002a6c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	330a      	adds	r3, #10
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	330b      	adds	r3, #11
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	441a      	add	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	330c      	adds	r3, #12
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	441a      	add	r2, r3
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	330d      	adds	r3, #13
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	4413      	add	r3, r2
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	3312      	adds	r3, #18
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	3313      	adds	r3, #19
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	441a      	add	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	3314      	adds	r3, #20
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	441a      	add	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	3315      	adds	r3, #21
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	4413      	add	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	3316      	adds	r3, #22
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	3317      	adds	r3, #23
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	441a      	add	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3318      	adds	r3, #24
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	441a      	add	r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	3319      	adds	r3, #25
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	4413      	add	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	331c      	adds	r3, #28
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	331d      	adds	r3, #29
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	4413      	add	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8002b0a:	4a37      	ldr	r2, [pc, #220]	; (8002be8 <BSP_LCD_DrawBitmap+0x17c>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015b      	lsls	r3, r3, #5
 8002b10:	4413      	add	r3, r2
 8002b12:	3308      	adds	r3, #8
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a35      	ldr	r2, [pc, #212]	; (8002bec <BSP_LCD_DrawBitmap+0x180>)
 8002b18:	2134      	movs	r1, #52	; 0x34
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	335c      	adds	r3, #92	; 0x5c
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4930      	ldr	r1, [pc, #192]	; (8002be8 <BSP_LCD_DrawBitmap+0x17c>)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015b      	lsls	r3, r3, #5
 8002b2a:	440b      	add	r3, r1
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	fb03 f101 	mul.w	r1, r3, r1
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	440b      	add	r3, r1
 8002b38:	482b      	ldr	r0, [pc, #172]	; (8002be8 <BSP_LCD_DrawBitmap+0x17c>)
 8002b3a:	68f9      	ldr	r1, [r7, #12]
 8002b3c:	0149      	lsls	r1, r1, #5
 8002b3e:	4401      	add	r1, r0
 8002b40:	3110      	adds	r1, #16
 8002b42:	6809      	ldr	r1, [r1, #0]
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	3b20      	subs	r3, #32
 8002b50:	2b07      	cmp	r3, #7
 8002b52:	d802      	bhi.n	8002b5a <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	e008      	b.n	8002b6c <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	3b10      	subs	r3, #16
 8002b5e:	2b07      	cmp	r3, #7
 8002b60:	d802      	bhi.n	8002b68 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002b62:	2302      	movs	r3, #2
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	e001      	b.n	8002b6c <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	08d2      	lsrs	r2, r2, #3
 8002b7a:	fb03 f202 	mul.w	r2, r3, r2
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	4413      	add	r3, r2
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8c:	e023      	b.n	8002bd6 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6a39      	ldr	r1, [r7, #32]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fa77 	bl	800308c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <BSP_LCD_DrawBitmap+0x17c>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015b      	lsls	r3, r3, #5
 8002ba4:	4413      	add	r3, r2
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	490f      	ldr	r1, [pc, #60]	; (8002be8 <BSP_LCD_DrawBitmap+0x17c>)
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	0152      	lsls	r2, r2, #5
 8002bae:	440a      	add	r2, r1
 8002bb0:	3210      	adds	r2, #16
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bba:	4413      	add	r3, r2
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	08db      	lsrs	r3, r3, #3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	425b      	negs	r3, r3
 8002bca:	6a3a      	ldr	r2, [r7, #32]
 8002bcc:	4413      	add	r3, r2
 8002bce:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d3d7      	bcc.n	8002b8e <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8002bde:	69fb      	ldr	r3, [r7, #28]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3730      	adds	r7, #48	; 0x30
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	24000f54 	.word	0x24000f54
 8002bec:	24000eac 	.word	0x24000eac

08002bf0 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	e032      	b.n	8002c6e <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e028      	b.n	8002c60 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	3301      	adds	r3, #1
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	3302      	adds	r3, #2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	431a      	orrs	r2, r3
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	3303      	adds	r3, #3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	18d1      	adds	r1, r2, r3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	441a      	add	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f95e 	bl	8002f04 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <BSP_LCD_FillRGBRect+0x90>)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	015b      	lsls	r3, r3, #5
 8002c4e:	4413      	add	r3, r2
 8002c50:	3310      	adds	r3, #16
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4413      	add	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d3d2      	bcc.n	8002c0e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3c8      	bcc.n	8002c08 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	24000f54 	.word	0x24000f54

08002c84 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002c92:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <BSP_LCD_DrawHLine+0x94>)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	015b      	lsls	r3, r3, #5
 8002c98:	4413      	add	r3, r2
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <BSP_LCD_DrawHLine+0x98>)
 8002ca0:	2134      	movs	r1, #52	; 0x34
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	335c      	adds	r3, #92	; 0x5c
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	491a      	ldr	r1, [pc, #104]	; (8002d18 <BSP_LCD_DrawHLine+0x94>)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	015b      	lsls	r3, r3, #5
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4817      	ldr	r0, [pc, #92]	; (8002d18 <BSP_LCD_DrawHLine+0x94>)
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	0149      	lsls	r1, r1, #5
 8002cbe:	4401      	add	r1, r0
 8002cc0:	6809      	ldr	r1, [r1, #0]
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	fb01 f000 	mul.w	r0, r1, r0
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	4401      	add	r1, r0
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	441a      	add	r2, r3
 8002cda:	490f      	ldr	r1, [pc, #60]	; (8002d18 <BSP_LCD_DrawHLine+0x94>)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015b      	lsls	r3, r3, #5
 8002ce0:	440b      	add	r3, r1
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d907      	bls.n	8002cf8 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <BSP_LCD_DrawHLine+0x94>)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	015b      	lsls	r3, r3, #5
 8002cee:	4413      	add	r3, r2
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002cf8:	6979      	ldr	r1, [r7, #20]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2301      	movs	r3, #1
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f956 	bl	8002fb8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	24000f54 	.word	0x24000f54
 8002d1c:	24000eac 	.word	0x24000eac

08002d20 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002d2e:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <BSP_LCD_DrawVLine+0xa0>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	4413      	add	r3, r2
 8002d36:	3308      	adds	r3, #8
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <BSP_LCD_DrawVLine+0xa4>)
 8002d3c:	2134      	movs	r1, #52	; 0x34
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	335c      	adds	r3, #92	; 0x5c
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	491d      	ldr	r1, [pc, #116]	; (8002dc0 <BSP_LCD_DrawVLine+0xa0>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	015b      	lsls	r3, r3, #5
 8002d4e:	440b      	add	r3, r1
 8002d50:	3310      	adds	r3, #16
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	481a      	ldr	r0, [pc, #104]	; (8002dc0 <BSP_LCD_DrawVLine+0xa0>)
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	0149      	lsls	r1, r1, #5
 8002d5a:	4401      	add	r1, r0
 8002d5c:	6809      	ldr	r1, [r1, #0]
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	fb01 f000 	mul.w	r0, r1, r0
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	4401      	add	r1, r0
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	441a      	add	r2, r3
 8002d76:	4912      	ldr	r1, [pc, #72]	; (8002dc0 <BSP_LCD_DrawVLine+0xa0>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015b      	lsls	r3, r3, #5
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3304      	adds	r3, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d908      	bls.n	8002d98 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <BSP_LCD_DrawVLine+0xa0>)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	015b      	lsls	r3, r3, #5
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002d98:	6979      	ldr	r1, [r7, #20]
 8002d9a:	4a09      	ldr	r2, [pc, #36]	; (8002dc0 <BSP_LCD_DrawVLine+0xa0>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	015b      	lsls	r3, r3, #5
 8002da0:	4413      	add	r3, r2
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	6a3a      	ldr	r2, [r7, #32]
 8002da8:	9201      	str	r2, [sp, #4]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2201      	movs	r2, #1
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f901 	bl	8002fb8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	24000f54 	.word	0x24000f54
 8002dc4:	24000eac 	.word	0x24000eac

08002dc8 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002dd6:	4a1b      	ldr	r2, [pc, #108]	; (8002e44 <BSP_LCD_FillRect+0x7c>)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	015b      	lsls	r3, r3, #5
 8002ddc:	4413      	add	r3, r2
 8002dde:	3308      	adds	r3, #8
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <BSP_LCD_FillRect+0x80>)
 8002de4:	2134      	movs	r1, #52	; 0x34
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	335c      	adds	r3, #92	; 0x5c
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4914      	ldr	r1, [pc, #80]	; (8002e44 <BSP_LCD_FillRect+0x7c>)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	015b      	lsls	r3, r3, #5
 8002df6:	440b      	add	r3, r1
 8002df8:	3310      	adds	r3, #16
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4811      	ldr	r0, [pc, #68]	; (8002e44 <BSP_LCD_FillRect+0x7c>)
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	0149      	lsls	r1, r1, #5
 8002e02:	4401      	add	r1, r0
 8002e04:	6809      	ldr	r1, [r1, #0]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	fb01 f000 	mul.w	r0, r1, r0
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	4401      	add	r1, r0
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002e18:	6979      	ldr	r1, [r7, #20]
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <BSP_LCD_FillRect+0x7c>)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	015b      	lsls	r3, r3, #5
 8002e20:	4413      	add	r3, r2
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	9201      	str	r2, [sp, #4]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f8c0 	bl	8002fb8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	24000f54 	.word	0x24000f54
 8002e48:	24000eac 	.word	0x24000eac

08002e4c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002e5a:	4a28      	ldr	r2, [pc, #160]	; (8002efc <BSP_LCD_ReadPixel+0xb0>)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015b      	lsls	r3, r3, #5
 8002e60:	4413      	add	r3, r2
 8002e62:	3308      	adds	r3, #8
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <BSP_LCD_ReadPixel+0xb4>)
 8002e68:	2134      	movs	r1, #52	; 0x34
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3348      	adds	r3, #72	; 0x48
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11c      	bne.n	8002eb2 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002e78:	4a20      	ldr	r2, [pc, #128]	; (8002efc <BSP_LCD_ReadPixel+0xb0>)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	015b      	lsls	r3, r3, #5
 8002e7e:	4413      	add	r3, r2
 8002e80:	3308      	adds	r3, #8
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <BSP_LCD_ReadPixel+0xb4>)
 8002e86:	2134      	movs	r1, #52	; 0x34
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	335c      	adds	r3, #92	; 0x5c
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	491a      	ldr	r1, [pc, #104]	; (8002efc <BSP_LCD_ReadPixel+0xb0>)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	440b      	add	r3, r1
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	fb03 f101 	mul.w	r1, r3, r1
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	440b      	add	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e01d      	b.n	8002eee <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <BSP_LCD_ReadPixel+0xb0>)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	015b      	lsls	r3, r3, #5
 8002eb8:	4413      	add	r3, r2
 8002eba:	3308      	adds	r3, #8
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a10      	ldr	r2, [pc, #64]	; (8002f00 <BSP_LCD_ReadPixel+0xb4>)
 8002ec0:	2134      	movs	r1, #52	; 0x34
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	335c      	adds	r3, #92	; 0x5c
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	490b      	ldr	r1, [pc, #44]	; (8002efc <BSP_LCD_ReadPixel+0xb0>)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	015b      	lsls	r3, r3, #5
 8002ed2:	440b      	add	r3, r1
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	fb03 f101 	mul.w	r1, r3, r1
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	440b      	add	r3, r1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	24000f54 	.word	0x24000f54
 8002f00:	24000eac 	.word	0x24000eac

08002f04 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f12:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <BSP_LCD_WritePixel+0xac>)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	015b      	lsls	r3, r3, #5
 8002f18:	4413      	add	r3, r2
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a25      	ldr	r2, [pc, #148]	; (8002fb4 <BSP_LCD_WritePixel+0xb0>)
 8002f20:	2134      	movs	r1, #52	; 0x34
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3348      	adds	r3, #72	; 0x48
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d11c      	bne.n	8002f6a <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <BSP_LCD_WritePixel+0xac>)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	015b      	lsls	r3, r3, #5
 8002f36:	4413      	add	r3, r2
 8002f38:	3308      	adds	r3, #8
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <BSP_LCD_WritePixel+0xb0>)
 8002f3e:	2134      	movs	r1, #52	; 0x34
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	335c      	adds	r3, #92	; 0x5c
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4919      	ldr	r1, [pc, #100]	; (8002fb0 <BSP_LCD_WritePixel+0xac>)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	015b      	lsls	r3, r3, #5
 8002f50:	440b      	add	r3, r1
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	fb03 f101 	mul.w	r1, r3, r1
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	440b      	add	r3, r1
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	461a      	mov	r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e01b      	b.n	8002fa2 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8002f6a:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <BSP_LCD_WritePixel+0xac>)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	015b      	lsls	r3, r3, #5
 8002f70:	4413      	add	r3, r2
 8002f72:	3308      	adds	r3, #8
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <BSP_LCD_WritePixel+0xb0>)
 8002f78:	2134      	movs	r1, #52	; 0x34
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	335c      	adds	r3, #92	; 0x5c
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	490a      	ldr	r1, [pc, #40]	; (8002fb0 <BSP_LCD_WritePixel+0xac>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015b      	lsls	r3, r3, #5
 8002f8a:	440b      	add	r3, r1
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	fb03 f101 	mul.w	r1, r3, r1
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	440b      	add	r3, r1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	b292      	uxth	r2, r2
 8002fa0:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	24000f54 	.word	0x24000f54
 8002fb4:	24000eac 	.word	0x24000eac

08002fb8 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002fca:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <LL_FillBuffer+0xc8>)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	015b      	lsls	r3, r3, #5
 8002fd0:	4413      	add	r3, r2
 8002fd2:	330c      	adds	r3, #12
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d129      	bne.n	800302e <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002fda:	2302      	movs	r3, #2
 8002fdc:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	0adb      	lsrs	r3, r3, #11
 8002fe2:	f003 021f 	and.w	r2, r3, #31
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	4413      	add	r3, r2
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	3317      	adds	r3, #23
 8002ff2:	099b      	lsrs	r3, r3, #6
 8002ff4:	0419      	lsls	r1, r3, #16
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ffe:	4613      	mov	r3, r2
 8003000:	01db      	lsls	r3, r3, #7
 8003002:	4413      	add	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4413      	add	r3, r2
 8003008:	3321      	adds	r3, #33	; 0x21
 800300a:	099b      	lsrs	r3, r3, #6
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	4319      	orrs	r1, r3
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	f003 021f 	and.w	r2, r3, #31
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	4413      	add	r3, r2
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	3317      	adds	r3, #23
 8003022:	099b      	lsrs	r3, r3, #6
 8003024:	430b      	orrs	r3, r1
 8003026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800302a:	613b      	str	r3, [r7, #16]
    break;
 800302c:	e002      	b.n	8003034 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
    break;
 8003032:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LL_FillBuffer+0xcc>)
 8003036:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800303a:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800303c:	4a11      	ldr	r2, [pc, #68]	; (8003084 <LL_FillBuffer+0xcc>)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <LL_FillBuffer+0xcc>)
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <LL_FillBuffer+0xcc>)
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <LL_FillBuffer+0xd0>)
 800304c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800304e:	480d      	ldr	r0, [pc, #52]	; (8003084 <LL_FillBuffer+0xcc>)
 8003050:	f002 f9fa 	bl	8005448 <HAL_DMA2D_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10e      	bne.n	8003078 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6939      	ldr	r1, [r7, #16]
 8003064:	4807      	ldr	r0, [pc, #28]	; (8003084 <LL_FillBuffer+0xcc>)
 8003066:	f002 fa5d 	bl	8005524 <HAL_DMA2D_Start>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003070:	2132      	movs	r1, #50	; 0x32
 8003072:	4804      	ldr	r0, [pc, #16]	; (8003084 <LL_FillBuffer+0xcc>)
 8003074:	f002 fa81 	bl	800557a <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	24000f54 	.word	0x24000f54
 8003084:	24000e44 	.word	0x24000e44
 8003088:	52001000 	.word	0x52001000

0800308c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <LL_ConvertLineToRGB+0x9c>)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	015b      	lsls	r3, r3, #5
 80030a0:	4413      	add	r3, r2
 80030a2:	330c      	adds	r3, #12
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d102      	bne.n	80030b0 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80030aa:	2302      	movs	r3, #2
 80030ac:	617b      	str	r3, [r7, #20]
    break;
 80030ae:	e002      	b.n	80030b6 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
    break;
 80030b4:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030bc:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80030be:	4a1b      	ldr	r2, [pc, #108]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80030d0:	4b16      	ldr	r3, [pc, #88]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030d2:	22ff      	movs	r2, #255	; 0xff
 80030d4:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80030d6:	4a15      	ldr	r2, [pc, #84]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030e4:	4a12      	ldr	r2, [pc, #72]	; (8003130 <LL_ConvertLineToRGB+0xa4>)
 80030e6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80030e8:	4810      	ldr	r0, [pc, #64]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030ea:	f002 f9ad 	bl	8005448 <HAL_DMA2D_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d115      	bne.n	8003120 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80030f4:	2101      	movs	r1, #1
 80030f6:	480d      	ldr	r0, [pc, #52]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 80030f8:	f002 fb28 	bl	800574c <HAL_DMA2D_ConfigLayer>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10e      	bne.n	8003120 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	2301      	movs	r3, #1
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	4807      	ldr	r0, [pc, #28]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 800310e:	f002 fa09 	bl	8005524 <HAL_DMA2D_Start>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d103      	bne.n	8003120 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003118:	2132      	movs	r1, #50	; 0x32
 800311a:	4804      	ldr	r0, [pc, #16]	; (800312c <LL_ConvertLineToRGB+0xa0>)
 800311c:	f002 fa2d 	bl	800557a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	24000f54 	.word	0x24000f54
 800312c:	24000e44 	.word	0x24000e44
 8003130:	52001000 	.word	0x52001000

08003134 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08e      	sub	sp, #56	; 0x38
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a5b      	ldr	r2, [pc, #364]	; (80032b0 <LTDC_MspInit+0x17c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	f040 80b0 	bne.w	80032a8 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003148:	4b5a      	ldr	r3, [pc, #360]	; (80032b4 <LTDC_MspInit+0x180>)
 800314a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800314e:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <LTDC_MspInit+0x180>)
 8003150:	f043 0308 	orr.w	r3, r3, #8
 8003154:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003158:	4b56      	ldr	r3, [pc, #344]	; (80032b4 <LTDC_MspInit+0x180>)
 800315a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	623b      	str	r3, [r7, #32]
 8003164:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003166:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <LTDC_MspInit+0x180>)
 8003168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800316c:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <LTDC_MspInit+0x180>)
 800316e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003176:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <LTDC_MspInit+0x180>)
 8003178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003184:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <LTDC_MspInit+0x180>)
 8003186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800318a:	4a4a      	ldr	r2, [pc, #296]	; (80032b4 <LTDC_MspInit+0x180>)
 800318c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003194:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <LTDC_MspInit+0x180>)
 8003196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80031a2:	4b44      	ldr	r3, [pc, #272]	; (80032b4 <LTDC_MspInit+0x180>)
 80031a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a8:	4a42      	ldr	r2, [pc, #264]	; (80032b4 <LTDC_MspInit+0x180>)
 80031aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031b2:	4b40      	ldr	r3, [pc, #256]	; (80032b4 <LTDC_MspInit+0x180>)
 80031b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031c0:	4b3c      	ldr	r3, [pc, #240]	; (80032b4 <LTDC_MspInit+0x180>)
 80031c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031c6:	4a3b      	ldr	r2, [pc, #236]	; (80032b4 <LTDC_MspInit+0x180>)
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d0:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <LTDC_MspInit+0x180>)
 80031d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031de:	4b35      	ldr	r3, [pc, #212]	; (80032b4 <LTDC_MspInit+0x180>)
 80031e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e4:	4a33      	ldr	r2, [pc, #204]	; (80032b4 <LTDC_MspInit+0x180>)
 80031e6:	f043 0308 	orr.w	r3, r3, #8
 80031ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <LTDC_MspInit+0x180>)
 80031f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 80031fc:	f24d 2303 	movw	r3, #53763	; 0xd203
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800320a:	2302      	movs	r3, #2
 800320c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800320e:	230e      	movs	r3, #14
 8003210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003216:	4619      	mov	r1, r3
 8003218:	4827      	ldr	r0, [pc, #156]	; (80032b8 <LTDC_MspInit+0x184>)
 800321a:	f002 fc4f 	bl	8005abc <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 800321e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003224:	230e      	movs	r3, #14
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322c:	4619      	mov	r1, r3
 800322e:	4823      	ldr	r0, [pc, #140]	; (80032bc <LTDC_MspInit+0x188>)
 8003230:	f002 fc44 	bl	8005abc <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003234:	23ff      	movs	r3, #255	; 0xff
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003238:	230e      	movs	r3, #14
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800323c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003240:	4619      	mov	r1, r3
 8003242:	481f      	ldr	r0, [pc, #124]	; (80032c0 <LTDC_MspInit+0x18c>)
 8003244:	f002 fc3a 	bl	8005abc <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8003248:	f240 2302 	movw	r3, #514	; 0x202
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003256:	2302      	movs	r3, #2
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800325a:	230e      	movs	r3, #14
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800325e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003262:	4619      	mov	r1, r3
 8003264:	4817      	ldr	r0, [pc, #92]	; (80032c4 <LTDC_MspInit+0x190>)
 8003266:	f002 fc29 	bl	8005abc <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800326e:	2301      	movs	r3, #1
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003276:	4619      	mov	r1, r3
 8003278:	4813      	ldr	r0, [pc, #76]	; (80032c8 <LTDC_MspInit+0x194>)
 800327a:	f002 fc1f 	bl	8005abc <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800327e:	2201      	movs	r2, #1
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	4811      	ldr	r0, [pc, #68]	; (80032c8 <LTDC_MspInit+0x194>)
 8003284:	f002 fdca 	bl	8005e1c <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <LTDC_MspInit+0x180>)
 800328a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <LTDC_MspInit+0x180>)
 8003290:	f043 0308 	orr.w	r3, r3, #8
 8003294:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <LTDC_MspInit+0x180>)
 800329a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <LTDC_MspInit+0x180>)
 80032a0:	f023 0308 	bic.w	r3, r3, #8
 80032a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 80032a8:	bf00      	nop
 80032aa:	3738      	adds	r7, #56	; 0x38
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	50001000 	.word	0x50001000
 80032b4:	58024400 	.word	0x58024400
 80032b8:	58022000 	.word	0x58022000
 80032bc:	58022400 	.word	0x58022400
 80032c0:	58022800 	.word	0x58022800
 80032c4:	58021c00 	.word	0x58021c00
 80032c8:	58020c00 	.word	0x58020c00

080032cc <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a11      	ldr	r2, [pc, #68]	; (8003320 <DMA2D_MspInit+0x54>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d11a      	bne.n	8003314 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <DMA2D_MspInit+0x58>)
 80032e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80032e4:	4a0f      	ldr	r2, [pc, #60]	; (8003324 <DMA2D_MspInit+0x58>)
 80032e6:	f043 0310 	orr.w	r3, r3, #16
 80032ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <DMA2D_MspInit+0x58>)
 80032f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <DMA2D_MspInit+0x58>)
 80032fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <DMA2D_MspInit+0x58>)
 8003302:	f043 0310 	orr.w	r3, r3, #16
 8003306:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <DMA2D_MspInit+0x58>)
 800330a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800330c:	4a05      	ldr	r2, [pc, #20]	; (8003324 <DMA2D_MspInit+0x58>)
 800330e:	f023 0310 	bic.w	r3, r3, #16
 8003312:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	52001000 	.word	0x52001000
 8003324:	58024400 	.word	0x58024400

08003328 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <TIMx_PWM_MspInit+0x6c>)
 8003332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003336:	4a17      	ldr	r2, [pc, #92]	; (8003394 <TIMx_PWM_MspInit+0x6c>)
 8003338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <TIMx_PWM_MspInit+0x6c>)
 8003342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <TIMx_PWM_MspInit+0x6c>)
 8003350:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003354:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <TIMx_PWM_MspInit+0x6c>)
 8003356:	f043 0302 	orr.w	r3, r3, #2
 800335a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <TIMx_PWM_MspInit+0x6c>)
 8003360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003374:	2301      	movs	r3, #1
 8003376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8003378:	2303      	movs	r3, #3
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 800337c:	2301      	movs	r3, #1
 800337e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	4619      	mov	r1, r3
 8003386:	4804      	ldr	r0, [pc, #16]	; (8003398 <TIMx_PWM_MspInit+0x70>)
 8003388:	f002 fb98 	bl	8005abc <HAL_GPIO_Init>
}
 800338c:	bf00      	nop
 800338e:	3728      	adds	r7, #40	; 0x28
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	58024400 	.word	0x58024400
 8003398:	58022800 	.word	0x58022800

0800339c <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a11      	ldr	r2, [pc, #68]	; (80033ec <TIMx_PWM_Init+0x50>)
 80033a8:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f006 ff73 	bl	800a296 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ffb9 	bl	8003328 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2204      	movs	r2, #4
 80033ba:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f24c 3250 	movw	r2, #50000	; 0xc350
 80033c2:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f006 ff03 	bl	800a1e8 <HAL_TIM_PWM_Init>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40010400 	.word	0x40010400

080033f0 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8003402:	f06f 0301 	mvn.w	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e044      	b.n	8003494 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2234      	movs	r2, #52	; 0x34
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <BSP_SDRAM_Init+0xb0>)
 8003414:	4413      	add	r3, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f8a8 	bl	800356c <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2234      	movs	r2, #52	; 0x34
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	4a1e      	ldr	r2, [pc, #120]	; (80034a0 <BSP_SDRAM_Init+0xb0>)
 8003426:	4413      	add	r3, r2
 8003428:	2210      	movs	r2, #16
 800342a:	2104      	movs	r1, #4
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f83b 	bl	80034a8 <MX_SDRAM_BANK2_Init>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	e029      	b.n	8003494 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <BSP_SDRAM_Init+0xb4>)
 8003442:	2208      	movs	r2, #8
 8003444:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <BSP_SDRAM_Init+0xb4>)
 8003448:	2203      	movs	r2, #3
 800344a:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800344c:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <BSP_SDRAM_Init+0xb4>)
 800344e:	f240 6203 	movw	r2, #1539	; 0x603
 8003452:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8003454:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <BSP_SDRAM_Init+0xb4>)
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800345a:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <BSP_SDRAM_Init+0xb4>)
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8003460:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <BSP_SDRAM_Init+0xb4>)
 8003462:	2230      	movs	r2, #48	; 0x30
 8003464:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8003466:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <BSP_SDRAM_Init+0xb4>)
 8003468:	2200      	movs	r2, #0
 800346a:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <BSP_SDRAM_Init+0xb4>)
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2234      	movs	r2, #52	; 0x34
 8003478:	fb02 f303 	mul.w	r3, r2, r3
 800347c:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <BSP_SDRAM_Init+0xb0>)
 800347e:	4413      	add	r3, r2
 8003480:	4908      	ldr	r1, [pc, #32]	; (80034a4 <BSP_SDRAM_Init+0xb4>)
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fac9 	bl	8001a1a <MT48LC4M32B2_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800348e:	f06f 0304 	mvn.w	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8003494:	68fb      	ldr	r3, [r7, #12]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	24000f74 	.word	0x24000f74
 80034a4:	24000fa8 	.word	0x24000fa8

080034a8 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08c      	sub	sp, #48	; 0x30
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 80034b4:	4b20      	ldr	r3, [pc, #128]	; (8003538 <MX_SDRAM_BANK2_Init+0x90>)
 80034b6:	4a21      	ldr	r2, [pc, #132]	; (800353c <MX_SDRAM_BANK2_Init+0x94>)
 80034b8:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <MX_SDRAM_BANK2_Init+0x90>)
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80034de:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ec:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 80034fc:	2302      	movs	r3, #2
 80034fe:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003500:	2307      	movs	r3, #7
 8003502:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003504:	2304      	movs	r3, #4
 8003506:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8003508:	2307      	movs	r3, #7
 800350a:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800350c:	2302      	movs	r3, #2
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8003510:	2302      	movs	r3, #2
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8003514:	2302      	movs	r3, #2
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f006 fcee 	bl	8009f00 <HAL_SDRAM_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3730      	adds	r7, #48	; 0x30
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	24000f74 	.word	0x24000f74
 800353c:	52004140 	.word	0x52004140

08003540 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <BSP_SDRAM_IRQHandler+0x28>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2134      	movs	r1, #52	; 0x34
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3330      	adds	r3, #48	; 0x30
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f003 fc99 	bl	8006e90 <HAL_MDMA_IRQHandler>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	24000f74 	.word	0x24000f74

0800356c <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08e      	sub	sp, #56	; 0x38
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003574:	4b73      	ldr	r3, [pc, #460]	; (8003744 <SDRAM_MspInit+0x1d8>)
 8003576:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800357a:	4a72      	ldr	r2, [pc, #456]	; (8003744 <SDRAM_MspInit+0x1d8>)
 800357c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003580:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003584:	4b6f      	ldr	r3, [pc, #444]	; (8003744 <SDRAM_MspInit+0x1d8>)
 8003586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800358a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8003592:	4b6c      	ldr	r3, [pc, #432]	; (8003744 <SDRAM_MspInit+0x1d8>)
 8003594:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003598:	4a6a      	ldr	r2, [pc, #424]	; (8003744 <SDRAM_MspInit+0x1d8>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80035a2:	4b68      	ldr	r3, [pc, #416]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035b0:	4b64      	ldr	r3, [pc, #400]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b6:	4a63      	ldr	r2, [pc, #396]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035b8:	f043 0308 	orr.w	r3, r3, #8
 80035bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c0:	4b60      	ldr	r3, [pc, #384]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ce:	4b5d      	ldr	r3, [pc, #372]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d4:	4a5b      	ldr	r2, [pc, #364]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035d6:	f043 0310 	orr.w	r3, r3, #16
 80035da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035de:	4b59      	ldr	r3, [pc, #356]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ec:	4b55      	ldr	r3, [pc, #340]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f2:	4a54      	ldr	r2, [pc, #336]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035f4:	f043 0320 	orr.w	r3, r3, #32
 80035f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035fc:	4b51      	ldr	r3, [pc, #324]	; (8003744 <SDRAM_MspInit+0x1d8>)
 80035fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800360a:	4b4e      	ldr	r3, [pc, #312]	; (8003744 <SDRAM_MspInit+0x1d8>)
 800360c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003610:	4a4c      	ldr	r2, [pc, #304]	; (8003744 <SDRAM_MspInit+0x1d8>)
 8003612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800361a:	4b4a      	ldr	r3, [pc, #296]	; (8003744 <SDRAM_MspInit+0x1d8>)
 800361c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003628:	4b46      	ldr	r3, [pc, #280]	; (8003744 <SDRAM_MspInit+0x1d8>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362e:	4a45      	ldr	r2, [pc, #276]	; (8003744 <SDRAM_MspInit+0x1d8>)
 8003630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003638:	4b42      	ldr	r3, [pc, #264]	; (8003744 <SDRAM_MspInit+0x1d8>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003646:	2302      	movs	r3, #2
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800364a:	2301      	movs	r3, #1
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800364e:	2303      	movs	r3, #3
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003652:	230c      	movs	r3, #12
 8003654:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8003656:	f24c 7303 	movw	r3, #50947	; 0xc703
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800365c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003660:	4619      	mov	r1, r3
 8003662:	4839      	ldr	r0, [pc, #228]	; (8003748 <SDRAM_MspInit+0x1dc>)
 8003664:	f002 fa2a 	bl	8005abc <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003668:	f64f 7383 	movw	r3, #65411	; 0xff83
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800366e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003672:	4619      	mov	r1, r3
 8003674:	4835      	ldr	r0, [pc, #212]	; (800374c <SDRAM_MspInit+0x1e0>)
 8003676:	f002 fa21 	bl	8005abc <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800367a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003684:	4619      	mov	r1, r3
 8003686:	4832      	ldr	r0, [pc, #200]	; (8003750 <SDRAM_MspInit+0x1e4>)
 8003688:	f002 fa18 	bl	8005abc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800368c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003696:	4619      	mov	r1, r3
 8003698:	482e      	ldr	r0, [pc, #184]	; (8003754 <SDRAM_MspInit+0x1e8>)
 800369a:	f002 fa0f 	bl	8005abc <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800369e:	23e0      	movs	r3, #224	; 0xe0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80036a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a6:	4619      	mov	r1, r3
 80036a8:	482b      	ldr	r0, [pc, #172]	; (8003758 <SDRAM_MspInit+0x1ec>)
 80036aa:	f002 fa07 	bl	8005abc <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036b4:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036bc:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80036be:	4b27      	ldr	r3, [pc, #156]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036cc:	f240 2202 	movw	r2, #514	; 0x202
 80036d0:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036d4:	f640 0208 	movw	r2, #2056	; 0x808
 80036d8:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036dc:	2220      	movs	r2, #32
 80036de:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80036e6:	4b1d      	ldr	r3, [pc, #116]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <SDRAM_MspInit+0x1f0>)
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003700:	4b16      	ldr	r3, [pc, #88]	; (800375c <SDRAM_MspInit+0x1f0>)
 8003702:	2200      	movs	r2, #0
 8003704:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <SDRAM_MspInit+0x1f0>)
 8003708:	2200      	movs	r2, #0
 800370a:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <SDRAM_MspInit+0x1f0>)
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <SDRAM_MspInit+0x1f4>)
 8003710:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003712:	4b14      	ldr	r3, [pc, #80]	; (8003764 <SDRAM_MspInit+0x1f8>)
 8003714:	4a11      	ldr	r2, [pc, #68]	; (800375c <SDRAM_MspInit+0x1f0>)
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <SDRAM_MspInit+0x1f0>)
 800371a:	4a12      	ldr	r2, [pc, #72]	; (8003764 <SDRAM_MspInit+0x1f8>)
 800371c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800371e:	480f      	ldr	r0, [pc, #60]	; (800375c <SDRAM_MspInit+0x1f0>)
 8003720:	f003 fb5e 	bl	8006de0 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8003724:	480d      	ldr	r0, [pc, #52]	; (800375c <SDRAM_MspInit+0x1f0>)
 8003726:	f003 fb0f 	bl	8006d48 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800372a:	2200      	movs	r2, #0
 800372c:	210f      	movs	r1, #15
 800372e:	207a      	movs	r0, #122	; 0x7a
 8003730:	f000 f9c7 	bl	8003ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8003734:	207a      	movs	r0, #122	; 0x7a
 8003736:	f000 f9de 	bl	8003af6 <HAL_NVIC_EnableIRQ>
}
 800373a:	bf00      	nop
 800373c:	3738      	adds	r7, #56	; 0x38
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	58024400 	.word	0x58024400
 8003748:	58020c00 	.word	0x58020c00
 800374c:	58021000 	.word	0x58021000
 8003750:	58021400 	.word	0x58021400
 8003754:	58021800 	.word	0x58021800
 8003758:	58021c00 	.word	0x58021c00
 800375c:	24000fc8 	.word	0x24000fc8
 8003760:	52000040 	.word	0x52000040
 8003764:	24000f74 	.word	0x24000f74

08003768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800376e:	2003      	movs	r0, #3
 8003770:	f000 f99c 	bl	8003aac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003774:	f004 fbc2 	bl	8007efc <HAL_RCC_GetSysClockFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <HAL_Init+0x68>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	4913      	ldr	r1, [pc, #76]	; (80037d4 <HAL_Init+0x6c>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_Init+0x68>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <HAL_Init+0x6c>)
 800379c:	5cd3      	ldrb	r3, [r2, r3]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
 80037a8:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <HAL_Init+0x70>)
 80037aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037ac:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <HAL_Init+0x74>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037b2:	200f      	movs	r0, #15
 80037b4:	f000 f814 	bl	80037e0 <HAL_InitTick>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e002      	b.n	80037c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037c2:	f7fd fe37 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	58024400 	.word	0x58024400
 80037d4:	0800f784 	.word	0x0800f784
 80037d8:	24000014 	.word	0x24000014
 80037dc:	24000010 	.word	0x24000010

080037e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <HAL_InitTick+0x60>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e021      	b.n	8003838 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_InitTick+0x64>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_InitTick+0x60>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003802:	fbb3 f3f1 	udiv	r3, r3, r1
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f981 	bl	8003b12 <HAL_SYSTICK_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e00e      	b.n	8003838 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d80a      	bhi.n	8003836 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003820:	2200      	movs	r2, #0
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	f000 f94b 	bl	8003ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800382c:	4a06      	ldr	r2, [pc, #24]	; (8003848 <HAL_InitTick+0x68>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	24000030 	.word	0x24000030
 8003844:	24000010 	.word	0x24000010
 8003848:	2400002c 	.word	0x2400002c

0800384c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x20>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_IncTick+0x24>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4413      	add	r3, r2
 800385c:	4a04      	ldr	r2, [pc, #16]	; (8003870 <HAL_IncTick+0x24>)
 800385e:	6013      	str	r3, [r2, #0]
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	24000030 	.word	0x24000030
 8003870:	24001034 	.word	0x24001034

08003874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return uwTick;
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <HAL_GetTick+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	24001034 	.word	0x24001034

0800388c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003894:	f7ff ffee 	bl	8003874 <HAL_GetTick>
 8003898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d005      	beq.n	80038b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_Delay+0x44>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038b2:	bf00      	nop
 80038b4:	f7ff ffde 	bl	8003874 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d8f7      	bhi.n	80038b4 <HAL_Delay+0x28>
  {
  }
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	24000030 	.word	0x24000030

080038d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_GetREVID+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0c1b      	lsrs	r3, r3, #16
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	5c001000 	.word	0x5c001000

080038ec <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_EnableCompensationCell+0x1c>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	4a04      	ldr	r2, [pc, #16]	; (8003908 <HAL_EnableCompensationCell+0x1c>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6213      	str	r3, [r2, #32]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	58000400 	.word	0x58000400

0800390c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <__NVIC_SetPriorityGrouping+0x40>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003928:	4013      	ands	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <__NVIC_SetPriorityGrouping+0x44>)
 8003936:	4313      	orrs	r3, r2
 8003938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393a:	4a04      	ldr	r2, [pc, #16]	; (800394c <__NVIC_SetPriorityGrouping+0x40>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	60d3      	str	r3, [r2, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00
 8003950:	05fa0000 	.word	0x05fa0000

08003954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <__NVIC_GetPriorityGrouping+0x18>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	f003 0307 	and.w	r3, r3, #7
}
 8003962:	4618      	mov	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800397a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800397e:	2b00      	cmp	r3, #0
 8003980:	db0b      	blt.n	800399a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	f003 021f 	and.w	r2, r3, #31
 8003988:	4907      	ldr	r1, [pc, #28]	; (80039a8 <__NVIC_EnableIRQ+0x38>)
 800398a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2001      	movs	r0, #1
 8003992:	fa00 f202 	lsl.w	r2, r0, r2
 8003996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	e000e100 	.word	0xe000e100

080039ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db0a      	blt.n	80039d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	490c      	ldr	r1, [pc, #48]	; (80039f8 <__NVIC_SetPriority+0x4c>)
 80039c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d4:	e00a      	b.n	80039ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4908      	ldr	r1, [pc, #32]	; (80039fc <__NVIC_SetPriority+0x50>)
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	3b04      	subs	r3, #4
 80039e4:	0112      	lsls	r2, r2, #4
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	440b      	add	r3, r1
 80039ea:	761a      	strb	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000e100 	.word	0xe000e100
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	; 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f1c3 0307 	rsb	r3, r3, #7
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	bf28      	it	cs
 8003a1e:	2304      	movcs	r3, #4
 8003a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d902      	bls.n	8003a30 <NVIC_EncodePriority+0x30>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3b03      	subs	r3, #3
 8003a2e:	e000      	b.n	8003a32 <NVIC_EncodePriority+0x32>
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	f04f 32ff 	mov.w	r2, #4294967295
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	401a      	ands	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a48:	f04f 31ff 	mov.w	r1, #4294967295
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	43d9      	mvns	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a58:	4313      	orrs	r3, r2
         );
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3724      	adds	r7, #36	; 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a78:	d301      	bcc.n	8003a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e00f      	b.n	8003a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <SysTick_Config+0x40>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a86:	210f      	movs	r1, #15
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8c:	f7ff ff8e 	bl	80039ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <SysTick_Config+0x40>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a96:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <SysTick_Config+0x40>)
 8003a98:	2207      	movs	r2, #7
 8003a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	e000e010 	.word	0xe000e010

08003aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff ff29 	bl	800390c <__NVIC_SetPriorityGrouping>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b086      	sub	sp, #24
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad0:	f7ff ff40 	bl	8003954 <__NVIC_GetPriorityGrouping>
 8003ad4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff90 	bl	8003a00 <NVIC_EncodePriority>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff5f 	bl	80039ac <__NVIC_SetPriority>
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff33 	bl	8003970 <__NVIC_EnableIRQ>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ffa4 	bl	8003a68 <SysTick_Config>
 8003b20:	4603      	mov	r3, r0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b34:	f7ff fe9e 	bl	8003874 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e2dc      	b.n	80040fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d008      	beq.n	8003b62 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e2cd      	b.n	80040fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a76      	ldr	r2, [pc, #472]	; (8003d40 <HAL_DMA_Abort+0x214>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d04a      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a74      	ldr	r2, [pc, #464]	; (8003d44 <HAL_DMA_Abort+0x218>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d045      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a73      	ldr	r2, [pc, #460]	; (8003d48 <HAL_DMA_Abort+0x21c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d040      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a71      	ldr	r2, [pc, #452]	; (8003d4c <HAL_DMA_Abort+0x220>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d03b      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a70      	ldr	r2, [pc, #448]	; (8003d50 <HAL_DMA_Abort+0x224>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d036      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6e      	ldr	r2, [pc, #440]	; (8003d54 <HAL_DMA_Abort+0x228>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d031      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6d      	ldr	r2, [pc, #436]	; (8003d58 <HAL_DMA_Abort+0x22c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d02c      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6b      	ldr	r2, [pc, #428]	; (8003d5c <HAL_DMA_Abort+0x230>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d027      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6a      	ldr	r2, [pc, #424]	; (8003d60 <HAL_DMA_Abort+0x234>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d022      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a68      	ldr	r2, [pc, #416]	; (8003d64 <HAL_DMA_Abort+0x238>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01d      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a67      	ldr	r2, [pc, #412]	; (8003d68 <HAL_DMA_Abort+0x23c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d018      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a65      	ldr	r2, [pc, #404]	; (8003d6c <HAL_DMA_Abort+0x240>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a64      	ldr	r2, [pc, #400]	; (8003d70 <HAL_DMA_Abort+0x244>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a62      	ldr	r2, [pc, #392]	; (8003d74 <HAL_DMA_Abort+0x248>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a61      	ldr	r2, [pc, #388]	; (8003d78 <HAL_DMA_Abort+0x24c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_DMA_Abort+0xd6>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5f      	ldr	r2, [pc, #380]	; (8003d7c <HAL_DMA_Abort+0x250>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_DMA_Abort+0xda>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_DMA_Abort+0xdc>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 021e 	bic.w	r2, r2, #30
 8003c1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e00a      	b.n	8003c4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 020e 	bic.w	r2, r2, #14
 8003c42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <HAL_DMA_Abort+0x214>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d072      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3a      	ldr	r2, [pc, #232]	; (8003d44 <HAL_DMA_Abort+0x218>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d06d      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a39      	ldr	r2, [pc, #228]	; (8003d48 <HAL_DMA_Abort+0x21c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d068      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a37      	ldr	r2, [pc, #220]	; (8003d4c <HAL_DMA_Abort+0x220>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d063      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a36      	ldr	r2, [pc, #216]	; (8003d50 <HAL_DMA_Abort+0x224>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d05e      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a34      	ldr	r2, [pc, #208]	; (8003d54 <HAL_DMA_Abort+0x228>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d059      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a33      	ldr	r2, [pc, #204]	; (8003d58 <HAL_DMA_Abort+0x22c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d054      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a31      	ldr	r2, [pc, #196]	; (8003d5c <HAL_DMA_Abort+0x230>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d04f      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a30      	ldr	r2, [pc, #192]	; (8003d60 <HAL_DMA_Abort+0x234>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d04a      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2e      	ldr	r2, [pc, #184]	; (8003d64 <HAL_DMA_Abort+0x238>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d045      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2d      	ldr	r2, [pc, #180]	; (8003d68 <HAL_DMA_Abort+0x23c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d040      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <HAL_DMA_Abort+0x240>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d03b      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a2a      	ldr	r2, [pc, #168]	; (8003d70 <HAL_DMA_Abort+0x244>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d036      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a28      	ldr	r2, [pc, #160]	; (8003d74 <HAL_DMA_Abort+0x248>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d031      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <HAL_DMA_Abort+0x24c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d02c      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <HAL_DMA_Abort+0x250>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d027      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <HAL_DMA_Abort+0x254>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d022      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <HAL_DMA_Abort+0x258>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01d      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <HAL_DMA_Abort+0x25c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d018      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_DMA_Abort+0x260>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_DMA_Abort+0x264>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <HAL_DMA_Abort+0x268>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_DMA_Abort+0x26c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d004      	beq.n	8003d3a <HAL_DMA_Abort+0x20e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <HAL_DMA_Abort+0x270>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d132      	bne.n	8003da0 <HAL_DMA_Abort+0x274>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e031      	b.n	8003da2 <HAL_DMA_Abort+0x276>
 8003d3e:	bf00      	nop
 8003d40:	40020010 	.word	0x40020010
 8003d44:	40020028 	.word	0x40020028
 8003d48:	40020040 	.word	0x40020040
 8003d4c:	40020058 	.word	0x40020058
 8003d50:	40020070 	.word	0x40020070
 8003d54:	40020088 	.word	0x40020088
 8003d58:	400200a0 	.word	0x400200a0
 8003d5c:	400200b8 	.word	0x400200b8
 8003d60:	40020410 	.word	0x40020410
 8003d64:	40020428 	.word	0x40020428
 8003d68:	40020440 	.word	0x40020440
 8003d6c:	40020458 	.word	0x40020458
 8003d70:	40020470 	.word	0x40020470
 8003d74:	40020488 	.word	0x40020488
 8003d78:	400204a0 	.word	0x400204a0
 8003d7c:	400204b8 	.word	0x400204b8
 8003d80:	58025408 	.word	0x58025408
 8003d84:	5802541c 	.word	0x5802541c
 8003d88:	58025430 	.word	0x58025430
 8003d8c:	58025444 	.word	0x58025444
 8003d90:	58025458 	.word	0x58025458
 8003d94:	5802546c 	.word	0x5802546c
 8003d98:	58025480 	.word	0x58025480
 8003d9c:	58025494 	.word	0x58025494
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6d      	ldr	r2, [pc, #436]	; (8003f70 <HAL_DMA_Abort+0x444>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d04a      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a6b      	ldr	r2, [pc, #428]	; (8003f74 <HAL_DMA_Abort+0x448>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d045      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a6a      	ldr	r2, [pc, #424]	; (8003f78 <HAL_DMA_Abort+0x44c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d040      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a68      	ldr	r2, [pc, #416]	; (8003f7c <HAL_DMA_Abort+0x450>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d03b      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a67      	ldr	r2, [pc, #412]	; (8003f80 <HAL_DMA_Abort+0x454>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d036      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a65      	ldr	r2, [pc, #404]	; (8003f84 <HAL_DMA_Abort+0x458>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d031      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a64      	ldr	r2, [pc, #400]	; (8003f88 <HAL_DMA_Abort+0x45c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d02c      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a62      	ldr	r2, [pc, #392]	; (8003f8c <HAL_DMA_Abort+0x460>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d027      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a61      	ldr	r2, [pc, #388]	; (8003f90 <HAL_DMA_Abort+0x464>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a5f      	ldr	r2, [pc, #380]	; (8003f94 <HAL_DMA_Abort+0x468>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01d      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5e      	ldr	r2, [pc, #376]	; (8003f98 <HAL_DMA_Abort+0x46c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d018      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a5c      	ldr	r2, [pc, #368]	; (8003f9c <HAL_DMA_Abort+0x470>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a5b      	ldr	r2, [pc, #364]	; (8003fa0 <HAL_DMA_Abort+0x474>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a59      	ldr	r2, [pc, #356]	; (8003fa4 <HAL_DMA_Abort+0x478>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a58      	ldr	r2, [pc, #352]	; (8003fa8 <HAL_DMA_Abort+0x47c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_DMA_Abort+0x32a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a56      	ldr	r2, [pc, #344]	; (8003fac <HAL_DMA_Abort+0x480>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d108      	bne.n	8003e68 <HAL_DMA_Abort+0x33c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0201 	bic.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e007      	b.n	8003e78 <HAL_DMA_Abort+0x34c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e78:	e013      	b.n	8003ea2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e7a:	f7ff fcfb 	bl	8003874 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d90c      	bls.n	8003ea2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2203      	movs	r2, #3
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e12d      	b.n	80040fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e5      	bne.n	8003e7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2f      	ldr	r2, [pc, #188]	; (8003f70 <HAL_DMA_Abort+0x444>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2d      	ldr	r2, [pc, #180]	; (8003f74 <HAL_DMA_Abort+0x448>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <HAL_DMA_Abort+0x44c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2a      	ldr	r2, [pc, #168]	; (8003f7c <HAL_DMA_Abort+0x450>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a29      	ldr	r2, [pc, #164]	; (8003f80 <HAL_DMA_Abort+0x454>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a27      	ldr	r2, [pc, #156]	; (8003f84 <HAL_DMA_Abort+0x458>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <HAL_DMA_Abort+0x45c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a24      	ldr	r2, [pc, #144]	; (8003f8c <HAL_DMA_Abort+0x460>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <HAL_DMA_Abort+0x464>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a21      	ldr	r2, [pc, #132]	; (8003f94 <HAL_DMA_Abort+0x468>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <HAL_DMA_Abort+0x46c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <HAL_DMA_Abort+0x470>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <HAL_DMA_Abort+0x474>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <HAL_DMA_Abort+0x478>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <HAL_DMA_Abort+0x47c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_Abort+0x422>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <HAL_DMA_Abort+0x480>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d101      	bne.n	8003f52 <HAL_DMA_Abort+0x426>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_DMA_Abort+0x428>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d02b      	beq.n	8003fb0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	223f      	movs	r2, #63	; 0x3f
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	609a      	str	r2, [r3, #8]
 8003f6e:	e02a      	b.n	8003fc6 <HAL_DMA_Abort+0x49a>
 8003f70:	40020010 	.word	0x40020010
 8003f74:	40020028 	.word	0x40020028
 8003f78:	40020040 	.word	0x40020040
 8003f7c:	40020058 	.word	0x40020058
 8003f80:	40020070 	.word	0x40020070
 8003f84:	40020088 	.word	0x40020088
 8003f88:	400200a0 	.word	0x400200a0
 8003f8c:	400200b8 	.word	0x400200b8
 8003f90:	40020410 	.word	0x40020410
 8003f94:	40020428 	.word	0x40020428
 8003f98:	40020440 	.word	0x40020440
 8003f9c:	40020458 	.word	0x40020458
 8003fa0:	40020470 	.word	0x40020470
 8003fa4:	40020488 	.word	0x40020488
 8003fa8:	400204a0 	.word	0x400204a0
 8003fac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a4f      	ldr	r2, [pc, #316]	; (8004108 <HAL_DMA_Abort+0x5dc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d072      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a4d      	ldr	r2, [pc, #308]	; (800410c <HAL_DMA_Abort+0x5e0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d06d      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a4c      	ldr	r2, [pc, #304]	; (8004110 <HAL_DMA_Abort+0x5e4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d068      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a4a      	ldr	r2, [pc, #296]	; (8004114 <HAL_DMA_Abort+0x5e8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d063      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a49      	ldr	r2, [pc, #292]	; (8004118 <HAL_DMA_Abort+0x5ec>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d05e      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a47      	ldr	r2, [pc, #284]	; (800411c <HAL_DMA_Abort+0x5f0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d059      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a46      	ldr	r2, [pc, #280]	; (8004120 <HAL_DMA_Abort+0x5f4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d054      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a44      	ldr	r2, [pc, #272]	; (8004124 <HAL_DMA_Abort+0x5f8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d04f      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a43      	ldr	r2, [pc, #268]	; (8004128 <HAL_DMA_Abort+0x5fc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d04a      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a41      	ldr	r2, [pc, #260]	; (800412c <HAL_DMA_Abort+0x600>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d045      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a40      	ldr	r2, [pc, #256]	; (8004130 <HAL_DMA_Abort+0x604>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d040      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3e      	ldr	r2, [pc, #248]	; (8004134 <HAL_DMA_Abort+0x608>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d03b      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a3d      	ldr	r2, [pc, #244]	; (8004138 <HAL_DMA_Abort+0x60c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d036      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a3b      	ldr	r2, [pc, #236]	; (800413c <HAL_DMA_Abort+0x610>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d031      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a3a      	ldr	r2, [pc, #232]	; (8004140 <HAL_DMA_Abort+0x614>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d02c      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a38      	ldr	r2, [pc, #224]	; (8004144 <HAL_DMA_Abort+0x618>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d027      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a37      	ldr	r2, [pc, #220]	; (8004148 <HAL_DMA_Abort+0x61c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d022      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a35      	ldr	r2, [pc, #212]	; (800414c <HAL_DMA_Abort+0x620>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01d      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a34      	ldr	r2, [pc, #208]	; (8004150 <HAL_DMA_Abort+0x624>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d018      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a32      	ldr	r2, [pc, #200]	; (8004154 <HAL_DMA_Abort+0x628>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a31      	ldr	r2, [pc, #196]	; (8004158 <HAL_DMA_Abort+0x62c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2f      	ldr	r2, [pc, #188]	; (800415c <HAL_DMA_Abort+0x630>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2e      	ldr	r2, [pc, #184]	; (8004160 <HAL_DMA_Abort+0x634>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_DMA_Abort+0x58a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <HAL_DMA_Abort+0x638>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_DMA_Abort+0x58e>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_DMA_Abort+0x590>
 80040ba:	2300      	movs	r3, #0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40020010 	.word	0x40020010
 800410c:	40020028 	.word	0x40020028
 8004110:	40020040 	.word	0x40020040
 8004114:	40020058 	.word	0x40020058
 8004118:	40020070 	.word	0x40020070
 800411c:	40020088 	.word	0x40020088
 8004120:	400200a0 	.word	0x400200a0
 8004124:	400200b8 	.word	0x400200b8
 8004128:	40020410 	.word	0x40020410
 800412c:	40020428 	.word	0x40020428
 8004130:	40020440 	.word	0x40020440
 8004134:	40020458 	.word	0x40020458
 8004138:	40020470 	.word	0x40020470
 800413c:	40020488 	.word	0x40020488
 8004140:	400204a0 	.word	0x400204a0
 8004144:	400204b8 	.word	0x400204b8
 8004148:	58025408 	.word	0x58025408
 800414c:	5802541c 	.word	0x5802541c
 8004150:	58025430 	.word	0x58025430
 8004154:	58025444 	.word	0x58025444
 8004158:	58025458 	.word	0x58025458
 800415c:	5802546c 	.word	0x5802546c
 8004160:	58025480 	.word	0x58025480
 8004164:	58025494 	.word	0x58025494

08004168 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e237      	b.n	80045ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d004      	beq.n	8004190 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e22c      	b.n	80045ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a5c      	ldr	r2, [pc, #368]	; (8004308 <HAL_DMA_Abort_IT+0x1a0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d04a      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a5b      	ldr	r2, [pc, #364]	; (800430c <HAL_DMA_Abort_IT+0x1a4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d045      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a59      	ldr	r2, [pc, #356]	; (8004310 <HAL_DMA_Abort_IT+0x1a8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d040      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a58      	ldr	r2, [pc, #352]	; (8004314 <HAL_DMA_Abort_IT+0x1ac>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d03b      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a56      	ldr	r2, [pc, #344]	; (8004318 <HAL_DMA_Abort_IT+0x1b0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d036      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a55      	ldr	r2, [pc, #340]	; (800431c <HAL_DMA_Abort_IT+0x1b4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d031      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a53      	ldr	r2, [pc, #332]	; (8004320 <HAL_DMA_Abort_IT+0x1b8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02c      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a52      	ldr	r2, [pc, #328]	; (8004324 <HAL_DMA_Abort_IT+0x1bc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d027      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a50      	ldr	r2, [pc, #320]	; (8004328 <HAL_DMA_Abort_IT+0x1c0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d022      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a4f      	ldr	r2, [pc, #316]	; (800432c <HAL_DMA_Abort_IT+0x1c4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d01d      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a4d      	ldr	r2, [pc, #308]	; (8004330 <HAL_DMA_Abort_IT+0x1c8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a4c      	ldr	r2, [pc, #304]	; (8004334 <HAL_DMA_Abort_IT+0x1cc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a4a      	ldr	r2, [pc, #296]	; (8004338 <HAL_DMA_Abort_IT+0x1d0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00e      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a49      	ldr	r2, [pc, #292]	; (800433c <HAL_DMA_Abort_IT+0x1d4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a47      	ldr	r2, [pc, #284]	; (8004340 <HAL_DMA_Abort_IT+0x1d8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_DMA_Abort_IT+0xc8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a46      	ldr	r2, [pc, #280]	; (8004344 <HAL_DMA_Abort_IT+0x1dc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_DMA_Abort_IT+0xcc>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_DMA_Abort_IT+0xce>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8086 	beq.w	8004348 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2204      	movs	r2, #4
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a2f      	ldr	r2, [pc, #188]	; (8004308 <HAL_DMA_Abort_IT+0x1a0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04a      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2e      	ldr	r2, [pc, #184]	; (800430c <HAL_DMA_Abort_IT+0x1a4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d045      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2c      	ldr	r2, [pc, #176]	; (8004310 <HAL_DMA_Abort_IT+0x1a8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d040      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2b      	ldr	r2, [pc, #172]	; (8004314 <HAL_DMA_Abort_IT+0x1ac>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d03b      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a29      	ldr	r2, [pc, #164]	; (8004318 <HAL_DMA_Abort_IT+0x1b0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d036      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a28      	ldr	r2, [pc, #160]	; (800431c <HAL_DMA_Abort_IT+0x1b4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d031      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a26      	ldr	r2, [pc, #152]	; (8004320 <HAL_DMA_Abort_IT+0x1b8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02c      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a25      	ldr	r2, [pc, #148]	; (8004324 <HAL_DMA_Abort_IT+0x1bc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d027      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a23      	ldr	r2, [pc, #140]	; (8004328 <HAL_DMA_Abort_IT+0x1c0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a22      	ldr	r2, [pc, #136]	; (800432c <HAL_DMA_Abort_IT+0x1c4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d01d      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a20      	ldr	r2, [pc, #128]	; (8004330 <HAL_DMA_Abort_IT+0x1c8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1f      	ldr	r2, [pc, #124]	; (8004334 <HAL_DMA_Abort_IT+0x1cc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <HAL_DMA_Abort_IT+0x1d0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_DMA_Abort_IT+0x1d4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <HAL_DMA_Abort_IT+0x1d8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x17c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a19      	ldr	r2, [pc, #100]	; (8004344 <HAL_DMA_Abort_IT+0x1dc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d108      	bne.n	80042f6 <HAL_DMA_Abort_IT+0x18e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e178      	b.n	80045e8 <HAL_DMA_Abort_IT+0x480>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e16f      	b.n	80045e8 <HAL_DMA_Abort_IT+0x480>
 8004308:	40020010 	.word	0x40020010
 800430c:	40020028 	.word	0x40020028
 8004310:	40020040 	.word	0x40020040
 8004314:	40020058 	.word	0x40020058
 8004318:	40020070 	.word	0x40020070
 800431c:	40020088 	.word	0x40020088
 8004320:	400200a0 	.word	0x400200a0
 8004324:	400200b8 	.word	0x400200b8
 8004328:	40020410 	.word	0x40020410
 800432c:	40020428 	.word	0x40020428
 8004330:	40020440 	.word	0x40020440
 8004334:	40020458 	.word	0x40020458
 8004338:	40020470 	.word	0x40020470
 800433c:	40020488 	.word	0x40020488
 8004340:	400204a0 	.word	0x400204a0
 8004344:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 020e 	bic.w	r2, r2, #14
 8004356:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6c      	ldr	r2, [pc, #432]	; (8004510 <HAL_DMA_Abort_IT+0x3a8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d04a      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6b      	ldr	r2, [pc, #428]	; (8004514 <HAL_DMA_Abort_IT+0x3ac>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d045      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a69      	ldr	r2, [pc, #420]	; (8004518 <HAL_DMA_Abort_IT+0x3b0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d040      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a68      	ldr	r2, [pc, #416]	; (800451c <HAL_DMA_Abort_IT+0x3b4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d03b      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a66      	ldr	r2, [pc, #408]	; (8004520 <HAL_DMA_Abort_IT+0x3b8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d036      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a65      	ldr	r2, [pc, #404]	; (8004524 <HAL_DMA_Abort_IT+0x3bc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d031      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a63      	ldr	r2, [pc, #396]	; (8004528 <HAL_DMA_Abort_IT+0x3c0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d02c      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a62      	ldr	r2, [pc, #392]	; (800452c <HAL_DMA_Abort_IT+0x3c4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d027      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a60      	ldr	r2, [pc, #384]	; (8004530 <HAL_DMA_Abort_IT+0x3c8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d022      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a5f      	ldr	r2, [pc, #380]	; (8004534 <HAL_DMA_Abort_IT+0x3cc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d01d      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a5d      	ldr	r2, [pc, #372]	; (8004538 <HAL_DMA_Abort_IT+0x3d0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d018      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a5c      	ldr	r2, [pc, #368]	; (800453c <HAL_DMA_Abort_IT+0x3d4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a5a      	ldr	r2, [pc, #360]	; (8004540 <HAL_DMA_Abort_IT+0x3d8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a59      	ldr	r2, [pc, #356]	; (8004544 <HAL_DMA_Abort_IT+0x3dc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a57      	ldr	r2, [pc, #348]	; (8004548 <HAL_DMA_Abort_IT+0x3e0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_DMA_Abort_IT+0x290>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a56      	ldr	r2, [pc, #344]	; (800454c <HAL_DMA_Abort_IT+0x3e4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d108      	bne.n	800440a <HAL_DMA_Abort_IT+0x2a2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e007      	b.n	800441a <HAL_DMA_Abort_IT+0x2b2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <HAL_DMA_Abort_IT+0x3a8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d072      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3a      	ldr	r2, [pc, #232]	; (8004514 <HAL_DMA_Abort_IT+0x3ac>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d06d      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a39      	ldr	r2, [pc, #228]	; (8004518 <HAL_DMA_Abort_IT+0x3b0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d068      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a37      	ldr	r2, [pc, #220]	; (800451c <HAL_DMA_Abort_IT+0x3b4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d063      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a36      	ldr	r2, [pc, #216]	; (8004520 <HAL_DMA_Abort_IT+0x3b8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d05e      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a34      	ldr	r2, [pc, #208]	; (8004524 <HAL_DMA_Abort_IT+0x3bc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d059      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a33      	ldr	r2, [pc, #204]	; (8004528 <HAL_DMA_Abort_IT+0x3c0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d054      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a31      	ldr	r2, [pc, #196]	; (800452c <HAL_DMA_Abort_IT+0x3c4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d04f      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a30      	ldr	r2, [pc, #192]	; (8004530 <HAL_DMA_Abort_IT+0x3c8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d04a      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2e      	ldr	r2, [pc, #184]	; (8004534 <HAL_DMA_Abort_IT+0x3cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d045      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2d      	ldr	r2, [pc, #180]	; (8004538 <HAL_DMA_Abort_IT+0x3d0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d040      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a2b      	ldr	r2, [pc, #172]	; (800453c <HAL_DMA_Abort_IT+0x3d4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d03b      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <HAL_DMA_Abort_IT+0x3d8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d036      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a28      	ldr	r2, [pc, #160]	; (8004544 <HAL_DMA_Abort_IT+0x3dc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d031      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a27      	ldr	r2, [pc, #156]	; (8004548 <HAL_DMA_Abort_IT+0x3e0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d02c      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a25      	ldr	r2, [pc, #148]	; (800454c <HAL_DMA_Abort_IT+0x3e4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d027      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a24      	ldr	r2, [pc, #144]	; (8004550 <HAL_DMA_Abort_IT+0x3e8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d022      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a22      	ldr	r2, [pc, #136]	; (8004554 <HAL_DMA_Abort_IT+0x3ec>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01d      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a21      	ldr	r2, [pc, #132]	; (8004558 <HAL_DMA_Abort_IT+0x3f0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d018      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_DMA_Abort_IT+0x3f4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <HAL_DMA_Abort_IT+0x3f8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00e      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_DMA_Abort_IT+0x3fc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d009      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <HAL_DMA_Abort_IT+0x400>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d004      	beq.n	800450a <HAL_DMA_Abort_IT+0x3a2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_DMA_Abort_IT+0x404>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d132      	bne.n	8004570 <HAL_DMA_Abort_IT+0x408>
 800450a:	2301      	movs	r3, #1
 800450c:	e031      	b.n	8004572 <HAL_DMA_Abort_IT+0x40a>
 800450e:	bf00      	nop
 8004510:	40020010 	.word	0x40020010
 8004514:	40020028 	.word	0x40020028
 8004518:	40020040 	.word	0x40020040
 800451c:	40020058 	.word	0x40020058
 8004520:	40020070 	.word	0x40020070
 8004524:	40020088 	.word	0x40020088
 8004528:	400200a0 	.word	0x400200a0
 800452c:	400200b8 	.word	0x400200b8
 8004530:	40020410 	.word	0x40020410
 8004534:	40020428 	.word	0x40020428
 8004538:	40020440 	.word	0x40020440
 800453c:	40020458 	.word	0x40020458
 8004540:	40020470 	.word	0x40020470
 8004544:	40020488 	.word	0x40020488
 8004548:	400204a0 	.word	0x400204a0
 800454c:	400204b8 	.word	0x400204b8
 8004550:	58025408 	.word	0x58025408
 8004554:	5802541c 	.word	0x5802541c
 8004558:	58025430 	.word	0x58025430
 800455c:	58025444 	.word	0x58025444
 8004560:	58025458 	.word	0x58025458
 8004564:	5802546c 	.word	0x5802546c
 8004568:	58025480 	.word	0x58025480
 800456c:	58025494 	.word	0x58025494
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d028      	beq.n	80045c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004584:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	2201      	movs	r2, #1
 8004596:	409a      	lsls	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop

080045f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004600:	4b67      	ldr	r3, [pc, #412]	; (80047a0 <HAL_DMA_IRQHandler+0x1ac>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a67      	ldr	r2, [pc, #412]	; (80047a4 <HAL_DMA_IRQHandler+0x1b0>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0a9b      	lsrs	r3, r3, #10
 800460c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a5f      	ldr	r2, [pc, #380]	; (80047a8 <HAL_DMA_IRQHandler+0x1b4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d04a      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a5d      	ldr	r2, [pc, #372]	; (80047ac <HAL_DMA_IRQHandler+0x1b8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d045      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a5c      	ldr	r2, [pc, #368]	; (80047b0 <HAL_DMA_IRQHandler+0x1bc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d040      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a5a      	ldr	r2, [pc, #360]	; (80047b4 <HAL_DMA_IRQHandler+0x1c0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d03b      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a59      	ldr	r2, [pc, #356]	; (80047b8 <HAL_DMA_IRQHandler+0x1c4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d036      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a57      	ldr	r2, [pc, #348]	; (80047bc <HAL_DMA_IRQHandler+0x1c8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d031      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a56      	ldr	r2, [pc, #344]	; (80047c0 <HAL_DMA_IRQHandler+0x1cc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d02c      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a54      	ldr	r2, [pc, #336]	; (80047c4 <HAL_DMA_IRQHandler+0x1d0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d027      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a53      	ldr	r2, [pc, #332]	; (80047c8 <HAL_DMA_IRQHandler+0x1d4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a51      	ldr	r2, [pc, #324]	; (80047cc <HAL_DMA_IRQHandler+0x1d8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01d      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a50      	ldr	r2, [pc, #320]	; (80047d0 <HAL_DMA_IRQHandler+0x1dc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a4e      	ldr	r2, [pc, #312]	; (80047d4 <HAL_DMA_IRQHandler+0x1e0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a4d      	ldr	r2, [pc, #308]	; (80047d8 <HAL_DMA_IRQHandler+0x1e4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a4b      	ldr	r2, [pc, #300]	; (80047dc <HAL_DMA_IRQHandler+0x1e8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a4a      	ldr	r2, [pc, #296]	; (80047e0 <HAL_DMA_IRQHandler+0x1ec>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_DMA_IRQHandler+0xd2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a48      	ldr	r2, [pc, #288]	; (80047e4 <HAL_DMA_IRQHandler+0x1f0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_DMA_IRQHandler+0xd6>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_DMA_IRQHandler+0xd8>
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 842b 	beq.w	8004f28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	2208      	movs	r2, #8
 80046dc:	409a      	lsls	r2, r3
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a2 	beq.w	800482c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a2e      	ldr	r2, [pc, #184]	; (80047a8 <HAL_DMA_IRQHandler+0x1b4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d04a      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a2d      	ldr	r2, [pc, #180]	; (80047ac <HAL_DMA_IRQHandler+0x1b8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d045      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a2b      	ldr	r2, [pc, #172]	; (80047b0 <HAL_DMA_IRQHandler+0x1bc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d040      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a2a      	ldr	r2, [pc, #168]	; (80047b4 <HAL_DMA_IRQHandler+0x1c0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d03b      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a28      	ldr	r2, [pc, #160]	; (80047b8 <HAL_DMA_IRQHandler+0x1c4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d036      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a27      	ldr	r2, [pc, #156]	; (80047bc <HAL_DMA_IRQHandler+0x1c8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d031      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a25      	ldr	r2, [pc, #148]	; (80047c0 <HAL_DMA_IRQHandler+0x1cc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d02c      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a24      	ldr	r2, [pc, #144]	; (80047c4 <HAL_DMA_IRQHandler+0x1d0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d027      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <HAL_DMA_IRQHandler+0x1d4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a21      	ldr	r2, [pc, #132]	; (80047cc <HAL_DMA_IRQHandler+0x1d8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <HAL_DMA_IRQHandler+0x1dc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_DMA_IRQHandler+0x1e0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <HAL_DMA_IRQHandler+0x1e4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <HAL_DMA_IRQHandler+0x1e8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a19      	ldr	r2, [pc, #100]	; (80047e0 <HAL_DMA_IRQHandler+0x1ec>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_DMA_IRQHandler+0x194>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_DMA_IRQHandler+0x1f0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d12f      	bne.n	80047e8 <HAL_DMA_IRQHandler+0x1f4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	bf14      	ite	ne
 8004796:	2301      	movne	r3, #1
 8004798:	2300      	moveq	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	e02e      	b.n	80047fc <HAL_DMA_IRQHandler+0x208>
 800479e:	bf00      	nop
 80047a0:	24000010 	.word	0x24000010
 80047a4:	1b4e81b5 	.word	0x1b4e81b5
 80047a8:	40020010 	.word	0x40020010
 80047ac:	40020028 	.word	0x40020028
 80047b0:	40020040 	.word	0x40020040
 80047b4:	40020058 	.word	0x40020058
 80047b8:	40020070 	.word	0x40020070
 80047bc:	40020088 	.word	0x40020088
 80047c0:	400200a0 	.word	0x400200a0
 80047c4:	400200b8 	.word	0x400200b8
 80047c8:	40020410 	.word	0x40020410
 80047cc:	40020428 	.word	0x40020428
 80047d0:	40020440 	.word	0x40020440
 80047d4:	40020458 	.word	0x40020458
 80047d8:	40020470 	.word	0x40020470
 80047dc:	40020488 	.word	0x40020488
 80047e0:	400204a0 	.word	0x400204a0
 80047e4:	400204b8 	.word	0x400204b8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf14      	ite	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	2300      	moveq	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0204 	bic.w	r2, r2, #4
 800480e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	2208      	movs	r2, #8
 800481a:	409a      	lsls	r2, r3
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	f043 0201 	orr.w	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d06e      	beq.n	8004920 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a69      	ldr	r2, [pc, #420]	; (80049ec <HAL_DMA_IRQHandler+0x3f8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d04a      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a67      	ldr	r2, [pc, #412]	; (80049f0 <HAL_DMA_IRQHandler+0x3fc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d045      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a66      	ldr	r2, [pc, #408]	; (80049f4 <HAL_DMA_IRQHandler+0x400>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d040      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a64      	ldr	r2, [pc, #400]	; (80049f8 <HAL_DMA_IRQHandler+0x404>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d03b      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a63      	ldr	r2, [pc, #396]	; (80049fc <HAL_DMA_IRQHandler+0x408>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d036      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a61      	ldr	r2, [pc, #388]	; (8004a00 <HAL_DMA_IRQHandler+0x40c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d031      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a60      	ldr	r2, [pc, #384]	; (8004a04 <HAL_DMA_IRQHandler+0x410>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d02c      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a5e      	ldr	r2, [pc, #376]	; (8004a08 <HAL_DMA_IRQHandler+0x414>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d027      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5d      	ldr	r2, [pc, #372]	; (8004a0c <HAL_DMA_IRQHandler+0x418>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d022      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a5b      	ldr	r2, [pc, #364]	; (8004a10 <HAL_DMA_IRQHandler+0x41c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01d      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a5a      	ldr	r2, [pc, #360]	; (8004a14 <HAL_DMA_IRQHandler+0x420>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d018      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <HAL_DMA_IRQHandler+0x424>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a57      	ldr	r2, [pc, #348]	; (8004a1c <HAL_DMA_IRQHandler+0x428>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a55      	ldr	r2, [pc, #340]	; (8004a20 <HAL_DMA_IRQHandler+0x42c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d009      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a54      	ldr	r2, [pc, #336]	; (8004a24 <HAL_DMA_IRQHandler+0x430>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2ee>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a52      	ldr	r2, [pc, #328]	; (8004a28 <HAL_DMA_IRQHandler+0x434>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10a      	bne.n	80048f8 <HAL_DMA_IRQHandler+0x304>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e003      	b.n	8004900 <HAL_DMA_IRQHandler+0x30c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00d      	beq.n	8004920 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2201      	movs	r2, #1
 800490e:	409a      	lsls	r2, r3
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	f043 0202 	orr.w	r2, r3, #2
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004924:	f003 031f 	and.w	r3, r3, #31
 8004928:	2204      	movs	r2, #4
 800492a:	409a      	lsls	r2, r3
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 808f 	beq.w	8004a54 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <HAL_DMA_IRQHandler+0x3f8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d04a      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2a      	ldr	r2, [pc, #168]	; (80049f0 <HAL_DMA_IRQHandler+0x3fc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d045      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a29      	ldr	r2, [pc, #164]	; (80049f4 <HAL_DMA_IRQHandler+0x400>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d040      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a27      	ldr	r2, [pc, #156]	; (80049f8 <HAL_DMA_IRQHandler+0x404>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d03b      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a26      	ldr	r2, [pc, #152]	; (80049fc <HAL_DMA_IRQHandler+0x408>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d036      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a24      	ldr	r2, [pc, #144]	; (8004a00 <HAL_DMA_IRQHandler+0x40c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d031      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a23      	ldr	r2, [pc, #140]	; (8004a04 <HAL_DMA_IRQHandler+0x410>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d02c      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a21      	ldr	r2, [pc, #132]	; (8004a08 <HAL_DMA_IRQHandler+0x414>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d027      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a20      	ldr	r2, [pc, #128]	; (8004a0c <HAL_DMA_IRQHandler+0x418>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <HAL_DMA_IRQHandler+0x41c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <HAL_DMA_IRQHandler+0x420>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <HAL_DMA_IRQHandler+0x424>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <HAL_DMA_IRQHandler+0x428>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_DMA_IRQHandler+0x42c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <HAL_DMA_IRQHandler+0x430>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x3e2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <HAL_DMA_IRQHandler+0x434>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d12a      	bne.n	8004a2c <HAL_DMA_IRQHandler+0x438>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf14      	ite	ne
 80049e4:	2301      	movne	r3, #1
 80049e6:	2300      	moveq	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e023      	b.n	8004a34 <HAL_DMA_IRQHandler+0x440>
 80049ec:	40020010 	.word	0x40020010
 80049f0:	40020028 	.word	0x40020028
 80049f4:	40020040 	.word	0x40020040
 80049f8:	40020058 	.word	0x40020058
 80049fc:	40020070 	.word	0x40020070
 8004a00:	40020088 	.word	0x40020088
 8004a04:	400200a0 	.word	0x400200a0
 8004a08:	400200b8 	.word	0x400200b8
 8004a0c:	40020410 	.word	0x40020410
 8004a10:	40020428 	.word	0x40020428
 8004a14:	40020440 	.word	0x40020440
 8004a18:	40020458 	.word	0x40020458
 8004a1c:	40020470 	.word	0x40020470
 8004a20:	40020488 	.word	0x40020488
 8004a24:	400204a0 	.word	0x400204a0
 8004a28:	400204b8 	.word	0x400204b8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00d      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2204      	movs	r2, #4
 8004a42:	409a      	lsls	r2, r3
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	f043 0204 	orr.w	r2, r3, #4
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	2210      	movs	r2, #16
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 80a6 	beq.w	8004bb6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a85      	ldr	r2, [pc, #532]	; (8004c84 <HAL_DMA_IRQHandler+0x690>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d04a      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a83      	ldr	r2, [pc, #524]	; (8004c88 <HAL_DMA_IRQHandler+0x694>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d045      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a82      	ldr	r2, [pc, #520]	; (8004c8c <HAL_DMA_IRQHandler+0x698>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d040      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a80      	ldr	r2, [pc, #512]	; (8004c90 <HAL_DMA_IRQHandler+0x69c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d03b      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a7f      	ldr	r2, [pc, #508]	; (8004c94 <HAL_DMA_IRQHandler+0x6a0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d036      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a7d      	ldr	r2, [pc, #500]	; (8004c98 <HAL_DMA_IRQHandler+0x6a4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d031      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a7c      	ldr	r2, [pc, #496]	; (8004c9c <HAL_DMA_IRQHandler+0x6a8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d02c      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a7a      	ldr	r2, [pc, #488]	; (8004ca0 <HAL_DMA_IRQHandler+0x6ac>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d027      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a79      	ldr	r2, [pc, #484]	; (8004ca4 <HAL_DMA_IRQHandler+0x6b0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a77      	ldr	r2, [pc, #476]	; (8004ca8 <HAL_DMA_IRQHandler+0x6b4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a76      	ldr	r2, [pc, #472]	; (8004cac <HAL_DMA_IRQHandler+0x6b8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a74      	ldr	r2, [pc, #464]	; (8004cb0 <HAL_DMA_IRQHandler+0x6bc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a73      	ldr	r2, [pc, #460]	; (8004cb4 <HAL_DMA_IRQHandler+0x6c0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a71      	ldr	r2, [pc, #452]	; (8004cb8 <HAL_DMA_IRQHandler+0x6c4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a70      	ldr	r2, [pc, #448]	; (8004cbc <HAL_DMA_IRQHandler+0x6c8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x516>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a6e      	ldr	r2, [pc, #440]	; (8004cc0 <HAL_DMA_IRQHandler+0x6cc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10a      	bne.n	8004b20 <HAL_DMA_IRQHandler+0x52c>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e009      	b.n	8004b34 <HAL_DMA_IRQHandler+0x540>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bf14      	ite	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	2300      	moveq	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d03e      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2210      	movs	r2, #16
 8004b42:	409a      	lsls	r2, r3
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d108      	bne.n	8004b76 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d024      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4798      	blx	r3
 8004b74:	e01f      	b.n	8004bb6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01b      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
 8004b86:	e016      	b.n	8004bb6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d107      	bne.n	8004ba6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0208 	bic.w	r2, r2, #8
 8004ba4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8110 	beq.w	8004dec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	; (8004c84 <HAL_DMA_IRQHandler+0x690>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d04a      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2b      	ldr	r2, [pc, #172]	; (8004c88 <HAL_DMA_IRQHandler+0x694>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d045      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a29      	ldr	r2, [pc, #164]	; (8004c8c <HAL_DMA_IRQHandler+0x698>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d040      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a28      	ldr	r2, [pc, #160]	; (8004c90 <HAL_DMA_IRQHandler+0x69c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d03b      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <HAL_DMA_IRQHandler+0x6a0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d036      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <HAL_DMA_IRQHandler+0x6a4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d031      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a23      	ldr	r2, [pc, #140]	; (8004c9c <HAL_DMA_IRQHandler+0x6a8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d02c      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <HAL_DMA_IRQHandler+0x6ac>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d027      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <HAL_DMA_IRQHandler+0x6b0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d022      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <HAL_DMA_IRQHandler+0x6b4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d01d      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <HAL_DMA_IRQHandler+0x6b8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d018      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <HAL_DMA_IRQHandler+0x6bc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1a      	ldr	r2, [pc, #104]	; (8004cb4 <HAL_DMA_IRQHandler+0x6c0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <HAL_DMA_IRQHandler+0x6c4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <HAL_DMA_IRQHandler+0x6c8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x678>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <HAL_DMA_IRQHandler+0x6cc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d12b      	bne.n	8004cc4 <HAL_DMA_IRQHandler+0x6d0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf14      	ite	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	2300      	moveq	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	e02a      	b.n	8004cd8 <HAL_DMA_IRQHandler+0x6e4>
 8004c82:	bf00      	nop
 8004c84:	40020010 	.word	0x40020010
 8004c88:	40020028 	.word	0x40020028
 8004c8c:	40020040 	.word	0x40020040
 8004c90:	40020058 	.word	0x40020058
 8004c94:	40020070 	.word	0x40020070
 8004c98:	40020088 	.word	0x40020088
 8004c9c:	400200a0 	.word	0x400200a0
 8004ca0:	400200b8 	.word	0x400200b8
 8004ca4:	40020410 	.word	0x40020410
 8004ca8:	40020428 	.word	0x40020428
 8004cac:	40020440 	.word	0x40020440
 8004cb0:	40020458 	.word	0x40020458
 8004cb4:	40020470 	.word	0x40020470
 8004cb8:	40020488 	.word	0x40020488
 8004cbc:	400204a0 	.word	0x400204a0
 8004cc0:	400204b8 	.word	0x400204b8
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	bf14      	ite	ne
 8004cd2:	2301      	movne	r3, #1
 8004cd4:	2300      	moveq	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8087 	beq.w	8004dec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	409a      	lsls	r2, r3
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d139      	bne.n	8004d6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0216 	bic.w	r2, r2, #22
 8004d08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <HAL_DMA_IRQHandler+0x736>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0208 	bic.w	r2, r2, #8
 8004d38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	223f      	movs	r2, #63	; 0x3f
 8004d44:	409a      	lsls	r2, r3
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 834a 	beq.w	80053f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	4798      	blx	r3
          }
          return;
 8004d6c:	e344      	b.n	80053f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d018      	beq.n	8004dae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d02c      	beq.n	8004dec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
 8004d9a:	e027      	b.n	8004dec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d023      	beq.n	8004dec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
 8004dac:	e01e      	b.n	8004dec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10f      	bne.n	8004ddc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0210 	bic.w	r2, r2, #16
 8004dca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8306 	beq.w	8005402 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8088 	beq.w	8004f14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2204      	movs	r2, #4
 8004e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7a      	ldr	r2, [pc, #488]	; (8004ffc <HAL_DMA_IRQHandler+0xa08>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d04a      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a79      	ldr	r2, [pc, #484]	; (8005000 <HAL_DMA_IRQHandler+0xa0c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d045      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a77      	ldr	r2, [pc, #476]	; (8005004 <HAL_DMA_IRQHandler+0xa10>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d040      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a76      	ldr	r2, [pc, #472]	; (8005008 <HAL_DMA_IRQHandler+0xa14>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d03b      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a74      	ldr	r2, [pc, #464]	; (800500c <HAL_DMA_IRQHandler+0xa18>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d036      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a73      	ldr	r2, [pc, #460]	; (8005010 <HAL_DMA_IRQHandler+0xa1c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d031      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a71      	ldr	r2, [pc, #452]	; (8005014 <HAL_DMA_IRQHandler+0xa20>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d02c      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a70      	ldr	r2, [pc, #448]	; (8005018 <HAL_DMA_IRQHandler+0xa24>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d027      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6e      	ldr	r2, [pc, #440]	; (800501c <HAL_DMA_IRQHandler+0xa28>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d022      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a6d      	ldr	r2, [pc, #436]	; (8005020 <HAL_DMA_IRQHandler+0xa2c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d01d      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a6b      	ldr	r2, [pc, #428]	; (8005024 <HAL_DMA_IRQHandler+0xa30>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d018      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a6a      	ldr	r2, [pc, #424]	; (8005028 <HAL_DMA_IRQHandler+0xa34>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a68      	ldr	r2, [pc, #416]	; (800502c <HAL_DMA_IRQHandler+0xa38>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00e      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a67      	ldr	r2, [pc, #412]	; (8005030 <HAL_DMA_IRQHandler+0xa3c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a65      	ldr	r2, [pc, #404]	; (8005034 <HAL_DMA_IRQHandler+0xa40>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_DMA_IRQHandler+0x8b8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a64      	ldr	r2, [pc, #400]	; (8005038 <HAL_DMA_IRQHandler+0xa44>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d108      	bne.n	8004ebe <HAL_DMA_IRQHandler+0x8ca>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e007      	b.n	8004ece <HAL_DMA_IRQHandler+0x8da>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d307      	bcc.n	8004eea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f2      	bne.n	8004ece <HAL_DMA_IRQHandler+0x8da>
 8004ee8:	e000      	b.n	8004eec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004eea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2203      	movs	r2, #3
 8004efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004f02:	e003      	b.n	8004f0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8272 	beq.w	8005402 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
 8004f26:	e26c      	b.n	8005402 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a43      	ldr	r2, [pc, #268]	; (800503c <HAL_DMA_IRQHandler+0xa48>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x984>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a42      	ldr	r2, [pc, #264]	; (8005040 <HAL_DMA_IRQHandler+0xa4c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d01d      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x984>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a40      	ldr	r2, [pc, #256]	; (8005044 <HAL_DMA_IRQHandler+0xa50>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x984>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3f      	ldr	r2, [pc, #252]	; (8005048 <HAL_DMA_IRQHandler+0xa54>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x984>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a3d      	ldr	r2, [pc, #244]	; (800504c <HAL_DMA_IRQHandler+0xa58>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x984>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a3c      	ldr	r2, [pc, #240]	; (8005050 <HAL_DMA_IRQHandler+0xa5c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x984>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3a      	ldr	r2, [pc, #232]	; (8005054 <HAL_DMA_IRQHandler+0xa60>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x984>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a39      	ldr	r2, [pc, #228]	; (8005058 <HAL_DMA_IRQHandler+0xa64>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x988>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_DMA_IRQHandler+0x98a>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 823f 	beq.w	8005402 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2204      	movs	r2, #4
 8004f96:	409a      	lsls	r2, r3
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80cd 	beq.w	800513c <HAL_DMA_IRQHandler+0xb48>
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80c7 	beq.w	800513c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d049      	beq.n	800505c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8210 	beq.w	80053fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fe4:	e20a      	b.n	80053fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8206 	beq.w	80053fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ff8:	e200      	b.n	80053fc <HAL_DMA_IRQHandler+0xe08>
 8004ffa:	bf00      	nop
 8004ffc:	40020010 	.word	0x40020010
 8005000:	40020028 	.word	0x40020028
 8005004:	40020040 	.word	0x40020040
 8005008:	40020058 	.word	0x40020058
 800500c:	40020070 	.word	0x40020070
 8005010:	40020088 	.word	0x40020088
 8005014:	400200a0 	.word	0x400200a0
 8005018:	400200b8 	.word	0x400200b8
 800501c:	40020410 	.word	0x40020410
 8005020:	40020428 	.word	0x40020428
 8005024:	40020440 	.word	0x40020440
 8005028:	40020458 	.word	0x40020458
 800502c:	40020470 	.word	0x40020470
 8005030:	40020488 	.word	0x40020488
 8005034:	400204a0 	.word	0x400204a0
 8005038:	400204b8 	.word	0x400204b8
 800503c:	58025408 	.word	0x58025408
 8005040:	5802541c 	.word	0x5802541c
 8005044:	58025430 	.word	0x58025430
 8005048:	58025444 	.word	0x58025444
 800504c:	58025458 	.word	0x58025458
 8005050:	5802546c 	.word	0x5802546c
 8005054:	58025480 	.word	0x58025480
 8005058:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d160      	bne.n	8005128 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a7f      	ldr	r2, [pc, #508]	; (8005268 <HAL_DMA_IRQHandler+0xc74>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d04a      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a7d      	ldr	r2, [pc, #500]	; (800526c <HAL_DMA_IRQHandler+0xc78>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d045      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a7c      	ldr	r2, [pc, #496]	; (8005270 <HAL_DMA_IRQHandler+0xc7c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d040      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a7a      	ldr	r2, [pc, #488]	; (8005274 <HAL_DMA_IRQHandler+0xc80>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d03b      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a79      	ldr	r2, [pc, #484]	; (8005278 <HAL_DMA_IRQHandler+0xc84>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d036      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a77      	ldr	r2, [pc, #476]	; (800527c <HAL_DMA_IRQHandler+0xc88>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d031      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a76      	ldr	r2, [pc, #472]	; (8005280 <HAL_DMA_IRQHandler+0xc8c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d02c      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a74      	ldr	r2, [pc, #464]	; (8005284 <HAL_DMA_IRQHandler+0xc90>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d027      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a73      	ldr	r2, [pc, #460]	; (8005288 <HAL_DMA_IRQHandler+0xc94>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d022      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a71      	ldr	r2, [pc, #452]	; (800528c <HAL_DMA_IRQHandler+0xc98>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01d      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a70      	ldr	r2, [pc, #448]	; (8005290 <HAL_DMA_IRQHandler+0xc9c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d018      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a6e      	ldr	r2, [pc, #440]	; (8005294 <HAL_DMA_IRQHandler+0xca0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6d      	ldr	r2, [pc, #436]	; (8005298 <HAL_DMA_IRQHandler+0xca4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a6b      	ldr	r2, [pc, #428]	; (800529c <HAL_DMA_IRQHandler+0xca8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a6a      	ldr	r2, [pc, #424]	; (80052a0 <HAL_DMA_IRQHandler+0xcac>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_DMA_IRQHandler+0xb12>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a68      	ldr	r2, [pc, #416]	; (80052a4 <HAL_DMA_IRQHandler+0xcb0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d108      	bne.n	8005118 <HAL_DMA_IRQHandler+0xb24>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0208 	bic.w	r2, r2, #8
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	e007      	b.n	8005128 <HAL_DMA_IRQHandler+0xb34>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0204 	bic.w	r2, r2, #4
 8005126:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8165 	beq.w	80053fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800513a:	e15f      	b.n	80053fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	2202      	movs	r2, #2
 8005146:	409a      	lsls	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 80c5 	beq.w	80052dc <HAL_DMA_IRQHandler+0xce8>
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80bf 	beq.w	80052dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2202      	movs	r2, #2
 8005168:	409a      	lsls	r2, r3
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d018      	beq.n	80051aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 813a 	beq.w	8005400 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005194:	e134      	b.n	8005400 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8130 	beq.w	8005400 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a8:	e12a      	b.n	8005400 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f040 8089 	bne.w	80052c8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2b      	ldr	r2, [pc, #172]	; (8005268 <HAL_DMA_IRQHandler+0xc74>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d04a      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a29      	ldr	r2, [pc, #164]	; (800526c <HAL_DMA_IRQHandler+0xc78>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d045      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a28      	ldr	r2, [pc, #160]	; (8005270 <HAL_DMA_IRQHandler+0xc7c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d040      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a26      	ldr	r2, [pc, #152]	; (8005274 <HAL_DMA_IRQHandler+0xc80>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d03b      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a25      	ldr	r2, [pc, #148]	; (8005278 <HAL_DMA_IRQHandler+0xc84>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d036      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a23      	ldr	r2, [pc, #140]	; (800527c <HAL_DMA_IRQHandler+0xc88>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a22      	ldr	r2, [pc, #136]	; (8005280 <HAL_DMA_IRQHandler+0xc8c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d02c      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a20      	ldr	r2, [pc, #128]	; (8005284 <HAL_DMA_IRQHandler+0xc90>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d027      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <HAL_DMA_IRQHandler+0xc94>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1d      	ldr	r2, [pc, #116]	; (800528c <HAL_DMA_IRQHandler+0xc98>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <HAL_DMA_IRQHandler+0xc9c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <HAL_DMA_IRQHandler+0xca0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a19      	ldr	r2, [pc, #100]	; (8005298 <HAL_DMA_IRQHandler+0xca4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a17      	ldr	r2, [pc, #92]	; (800529c <HAL_DMA_IRQHandler+0xca8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <HAL_DMA_IRQHandler+0xcac>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_DMA_IRQHandler+0xc62>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <HAL_DMA_IRQHandler+0xcb0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d128      	bne.n	80052a8 <HAL_DMA_IRQHandler+0xcb4>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0214 	bic.w	r2, r2, #20
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	e027      	b.n	80052b8 <HAL_DMA_IRQHandler+0xcc4>
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020040 	.word	0x40020040
 8005274:	40020058 	.word	0x40020058
 8005278:	40020070 	.word	0x40020070
 800527c:	40020088 	.word	0x40020088
 8005280:	400200a0 	.word	0x400200a0
 8005284:	400200b8 	.word	0x400200b8
 8005288:	40020410 	.word	0x40020410
 800528c:	40020428 	.word	0x40020428
 8005290:	40020440 	.word	0x40020440
 8005294:	40020458 	.word	0x40020458
 8005298:	40020470 	.word	0x40020470
 800529c:	40020488 	.word	0x40020488
 80052a0:	400204a0 	.word	0x400204a0
 80052a4:	400204b8 	.word	0x400204b8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 020a 	bic.w	r2, r2, #10
 80052b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8097 	beq.w	8005400 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052da:	e091      	b.n	8005400 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e0:	f003 031f 	and.w	r3, r3, #31
 80052e4:	2208      	movs	r2, #8
 80052e6:	409a      	lsls	r2, r3
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8088 	beq.w	8005402 <HAL_DMA_IRQHandler+0xe0e>
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8082 	beq.w	8005402 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a41      	ldr	r2, [pc, #260]	; (8005408 <HAL_DMA_IRQHandler+0xe14>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d04a      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3f      	ldr	r2, [pc, #252]	; (800540c <HAL_DMA_IRQHandler+0xe18>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d045      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a3e      	ldr	r2, [pc, #248]	; (8005410 <HAL_DMA_IRQHandler+0xe1c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d040      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a3c      	ldr	r2, [pc, #240]	; (8005414 <HAL_DMA_IRQHandler+0xe20>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d03b      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a3b      	ldr	r2, [pc, #236]	; (8005418 <HAL_DMA_IRQHandler+0xe24>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d036      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a39      	ldr	r2, [pc, #228]	; (800541c <HAL_DMA_IRQHandler+0xe28>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d031      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a38      	ldr	r2, [pc, #224]	; (8005420 <HAL_DMA_IRQHandler+0xe2c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d02c      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a36      	ldr	r2, [pc, #216]	; (8005424 <HAL_DMA_IRQHandler+0xe30>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d027      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a35      	ldr	r2, [pc, #212]	; (8005428 <HAL_DMA_IRQHandler+0xe34>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d022      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a33      	ldr	r2, [pc, #204]	; (800542c <HAL_DMA_IRQHandler+0xe38>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01d      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a32      	ldr	r2, [pc, #200]	; (8005430 <HAL_DMA_IRQHandler+0xe3c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a30      	ldr	r2, [pc, #192]	; (8005434 <HAL_DMA_IRQHandler+0xe40>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d013      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2f      	ldr	r2, [pc, #188]	; (8005438 <HAL_DMA_IRQHandler+0xe44>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2d      	ldr	r2, [pc, #180]	; (800543c <HAL_DMA_IRQHandler+0xe48>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2c      	ldr	r2, [pc, #176]	; (8005440 <HAL_DMA_IRQHandler+0xe4c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_DMA_IRQHandler+0xdaa>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a2a      	ldr	r2, [pc, #168]	; (8005444 <HAL_DMA_IRQHandler+0xe50>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d108      	bne.n	80053b0 <HAL_DMA_IRQHandler+0xdbc>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 021c 	bic.w	r2, r2, #28
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	e007      	b.n	80053c0 <HAL_DMA_IRQHandler+0xdcc>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 020e 	bic.w	r2, r2, #14
 80053be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	2201      	movs	r2, #1
 80053ca:	409a      	lsls	r2, r3
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d009      	beq.n	8005402 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
 80053f6:	e004      	b.n	8005402 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80053f8:	bf00      	nop
 80053fa:	e002      	b.n	8005402 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005400:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40020010 	.word	0x40020010
 800540c:	40020028 	.word	0x40020028
 8005410:	40020040 	.word	0x40020040
 8005414:	40020058 	.word	0x40020058
 8005418:	40020070 	.word	0x40020070
 800541c:	40020088 	.word	0x40020088
 8005420:	400200a0 	.word	0x400200a0
 8005424:	400200b8 	.word	0x400200b8
 8005428:	40020410 	.word	0x40020410
 800542c:	40020428 	.word	0x40020428
 8005430:	40020440 	.word	0x40020440
 8005434:	40020458 	.word	0x40020458
 8005438:	40020470 	.word	0x40020470
 800543c:	40020488 	.word	0x40020488
 8005440:	400204a0 	.word	0x400204a0
 8005444:	400204b8 	.word	0x400204b8

08005448 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e04f      	b.n	80054fa <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f84e 	bl	8005510 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4b20      	ldr	r3, [pc, #128]	; (8005504 <HAL_DMA2D_Init+0xbc>)
 8005484:	4013      	ands	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6851      	ldr	r1, [r2, #4]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	69d2      	ldr	r2, [r2, #28]
 800548e:	4311      	orrs	r1, r2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	430b      	orrs	r3, r1
 8005496:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800549e:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <HAL_DMA2D_Init+0xc0>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6891      	ldr	r1, [r2, #8]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6992      	ldr	r2, [r2, #24]
 80054aa:	4311      	orrs	r1, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ba:	4b14      	ldr	r3, [pc, #80]	; (800550c <HAL_DMA2D_Init+0xc4>)
 80054bc:	4013      	ands	r3, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68d1      	ldr	r1, [r2, #12]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	430b      	orrs	r3, r1
 80054c8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	051a      	lsls	r2, r3, #20
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	055b      	lsls	r3, r3, #21
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	fff8ffbf 	.word	0xfff8ffbf
 8005508:	fffffef8 	.word	0xfffffef8
 800550c:	ffff0000 	.word	0xffff0000

08005510 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_DMA2D_Start+0x1c>
 800553c:	2302      	movs	r3, #2
 800553e:	e018      	b.n	8005572 <HAL_DMA2D_Start+0x4e>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f9a4 	bl	80058a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d056      	beq.n	8005644 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005596:	f7fe f96d 	bl	8003874 <HAL_GetTick>
 800559a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800559c:	e04b      	b.n	8005636 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d023      	beq.n	80055f8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055be:	f043 0202 	orr.w	r2, r3, #2
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2221      	movs	r2, #33	; 0x21
 80055e2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2204      	movs	r2, #4
 80055e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0a5      	b.n	8005744 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fe:	d01a      	beq.n	8005636 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005600:	f7fe f938 	bl	8003874 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d302      	bcc.n	8005616 <HAL_DMA2D_PollForTransfer+0x9c>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10f      	bne.n	8005636 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2203      	movs	r2, #3
 8005626:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e086      	b.n	8005744 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0ac      	beq.n	800559e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d061      	beq.n	800572a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005666:	f7fe f905 	bl	8003874 <HAL_GetTick>
 800566a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800566c:	e056      	b.n	800571c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800567c:	2b00      	cmp	r3, #0
 800567e:	d02e      	beq.n	80056de <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800568e:	f043 0204 	orr.w	r2, r3, #4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d005      	beq.n	80056ac <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a4:	f043 0202 	orr.w	r2, r3, #2
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ba:	f043 0201 	orr.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2229      	movs	r2, #41	; 0x29
 80056c8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2204      	movs	r2, #4
 80056ce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e032      	b.n	8005744 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d01a      	beq.n	800571c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fe f8c5 	bl	8003874 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <HAL_DMA2D_PollForTransfer+0x182>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10f      	bne.n	800571c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2203      	movs	r2, #3
 800570c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e013      	b.n	8005744 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0a1      	beq.n	800566e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2212      	movs	r2, #18
 8005730:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_DMA2D_ConfigLayer+0x24>
 800576c:	2302      	movs	r3, #2
 800576e:	e092      	b.n	8005896 <HAL_DMA2D_ConfigLayer+0x14a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	3328      	adds	r3, #40	; 0x28
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	4413      	add	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057a4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80057b0:	4b3c      	ldr	r3, [pc, #240]	; (80058a4 <HAL_DMA2D_ConfigLayer+0x158>)
 80057b2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b0a      	cmp	r3, #10
 80057ba:	d003      	beq.n	80057c4 <HAL_DMA2D_ConfigLayer+0x78>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b09      	cmp	r3, #9
 80057c2:	d107      	bne.n	80057d4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	e005      	b.n	80057e0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d120      	bne.n	8005828 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	43db      	mvns	r3, r3
 80057f0:	ea02 0103 	and.w	r1, r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b0a      	cmp	r3, #10
 800580e:	d003      	beq.n	8005818 <HAL_DMA2D_ConfigLayer+0xcc>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b09      	cmp	r3, #9
 8005816:	d135      	bne.n	8005884 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005824:	629a      	str	r2, [r3, #40]	; 0x28
 8005826:	e02d      	b.n	8005884 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b0b      	cmp	r3, #11
 800582e:	d109      	bne.n	8005844 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	049b      	lsls	r3, r3, #18
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005842:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69da      	ldr	r2, [r3, #28]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	43db      	mvns	r3, r3
 800584e:	ea02 0103 	and.w	r1, r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	430a      	orrs	r2, r1
 800585a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	6812      	ldr	r2, [r2, #0]
 8005864:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b0a      	cmp	r3, #10
 800586c:	d003      	beq.n	8005876 <HAL_DMA2D_ConfigLayer+0x12a>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b09      	cmp	r3, #9
 8005874:	d106      	bne.n	8005884 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005882:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	ff33000f 	.word	0xff33000f

080058a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b08b      	sub	sp, #44	; 0x2c
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	041a      	lsls	r2, r3, #16
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	431a      	orrs	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058e0:	d174      	bne.n	80059cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	431a      	orrs	r2, r3
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	4313      	orrs	r3, r2
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
 8005918:	e053      	b.n	80059c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d106      	bne.n	8005930 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4313      	orrs	r3, r2
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
 800592e:	e048      	b.n	80059c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d111      	bne.n	800595c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	0cdb      	lsrs	r3, r3, #19
 800593c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	0a9b      	lsrs	r3, r3, #10
 8005942:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	02db      	lsls	r3, r3, #11
 8005952:	4313      	orrs	r3, r2
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
 800595a:	e032      	b.n	80059c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b03      	cmp	r3, #3
 8005962:	d117      	bne.n	8005994 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	0fdb      	lsrs	r3, r3, #31
 8005968:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	0cdb      	lsrs	r3, r3, #19
 800596e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	0adb      	lsrs	r3, r3, #11
 8005974:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	08db      	lsrs	r3, r3, #3
 800597a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	029b      	lsls	r3, r3, #10
 8005984:	431a      	orrs	r2, r3
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	03db      	lsls	r3, r3, #15
 800598a:	4313      	orrs	r3, r2
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
 8005992:	e016      	b.n	80059c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	0f1b      	lsrs	r3, r3, #28
 8005998:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	0d1b      	lsrs	r3, r3, #20
 800599e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	0b1b      	lsrs	r3, r3, #12
 80059a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	011a      	lsls	r2, r3, #4
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	431a      	orrs	r2, r3
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	031b      	lsls	r3, r3, #12
 80059ba:	4313      	orrs	r3, r2
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80059ca:	e00d      	b.n	80059e8 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059d4:	d104      	bne.n	80059e0 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	615a      	str	r2, [r3, #20]
}
 80059de:	e003      	b.n	80059e8 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	60da      	str	r2, [r3, #12]
}
 80059e8:	bf00      	nop
 80059ea:	372c      	adds	r7, #44	; 0x2c
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	460b      	mov	r3, r1
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e00a      	b.n	8005a26 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005a10:	7afb      	ldrb	r3, [r7, #11]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	605a      	str	r2, [r3, #4]
      break;
 8005a1c:	e002      	b.n	8005a24 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
      break;
 8005a22:	bf00      	nop
  }

  return status;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e003      	b.n	8005a4e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
  }
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	0c1b      	lsrs	r3, r3, #16
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2201      	movs	r2, #1
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	011a      	lsls	r2, r3, #4
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <HAL_EXTI_IRQHandler+0x5c>)
 8005a86:	4413      	add	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4013      	ands	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4798      	blx	r3
    }
  }
}
 8005aae:	bf00      	nop
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	58000088 	.word	0x58000088

08005abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b089      	sub	sp, #36	; 0x24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005aca:	4b89      	ldr	r3, [pc, #548]	; (8005cf0 <HAL_GPIO_Init+0x234>)
 8005acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ace:	e194      	b.n	8005dfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	4013      	ands	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 8186 	beq.w	8005df4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d005      	beq.n	8005b00 <HAL_GPIO_Init+0x44>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d130      	bne.n	8005b62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b36:	2201      	movs	r2, #1
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4013      	ands	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	091b      	lsrs	r3, r3, #4
 8005b4c:	f003 0201 	and.w	r2, r3, #1
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d017      	beq.n	8005b9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	2203      	movs	r2, #3
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	4013      	ands	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d123      	bne.n	8005bf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	08da      	lsrs	r2, r3, #3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3208      	adds	r2, #8
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	220f      	movs	r2, #15
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	08da      	lsrs	r2, r3, #3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3208      	adds	r2, #8
 8005bec:	69b9      	ldr	r1, [r7, #24]
 8005bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	2203      	movs	r2, #3
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f003 0203 	and.w	r2, r3, #3
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 80e0 	beq.w	8005df4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c34:	4b2f      	ldr	r3, [pc, #188]	; (8005cf4 <HAL_GPIO_Init+0x238>)
 8005c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c3a:	4a2e      	ldr	r2, [pc, #184]	; (8005cf4 <HAL_GPIO_Init+0x238>)
 8005c3c:	f043 0302 	orr.w	r3, r3, #2
 8005c40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c44:	4b2b      	ldr	r3, [pc, #172]	; (8005cf4 <HAL_GPIO_Init+0x238>)
 8005c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c52:	4a29      	ldr	r2, [pc, #164]	; (8005cf8 <HAL_GPIO_Init+0x23c>)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	089b      	lsrs	r3, r3, #2
 8005c58:	3302      	adds	r3, #2
 8005c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	220f      	movs	r2, #15
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	4013      	ands	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a20      	ldr	r2, [pc, #128]	; (8005cfc <HAL_GPIO_Init+0x240>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d052      	beq.n	8005d24 <HAL_GPIO_Init+0x268>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <HAL_GPIO_Init+0x244>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d031      	beq.n	8005cea <HAL_GPIO_Init+0x22e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a1e      	ldr	r2, [pc, #120]	; (8005d04 <HAL_GPIO_Init+0x248>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d02b      	beq.n	8005ce6 <HAL_GPIO_Init+0x22a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <HAL_GPIO_Init+0x24c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d025      	beq.n	8005ce2 <HAL_GPIO_Init+0x226>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_GPIO_Init+0x250>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01f      	beq.n	8005cde <HAL_GPIO_Init+0x222>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_GPIO_Init+0x254>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d019      	beq.n	8005cda <HAL_GPIO_Init+0x21e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <HAL_GPIO_Init+0x258>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <HAL_GPIO_Init+0x21a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <HAL_GPIO_Init+0x25c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00d      	beq.n	8005cd2 <HAL_GPIO_Init+0x216>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <HAL_GPIO_Init+0x260>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <HAL_GPIO_Init+0x212>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <HAL_GPIO_Init+0x264>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <HAL_GPIO_Init+0x20e>
 8005cc6:	2309      	movs	r3, #9
 8005cc8:	e02d      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005cca:	230a      	movs	r3, #10
 8005ccc:	e02b      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005cce:	2308      	movs	r3, #8
 8005cd0:	e029      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005cd2:	2307      	movs	r3, #7
 8005cd4:	e027      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005cd6:	2306      	movs	r3, #6
 8005cd8:	e025      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005cda:	2305      	movs	r3, #5
 8005cdc:	e023      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005cde:	2304      	movs	r3, #4
 8005ce0:	e021      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e01f      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e01d      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e01b      	b.n	8005d26 <HAL_GPIO_Init+0x26a>
 8005cee:	bf00      	nop
 8005cf0:	58000080 	.word	0x58000080
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	58000400 	.word	0x58000400
 8005cfc:	58020000 	.word	0x58020000
 8005d00:	58020400 	.word	0x58020400
 8005d04:	58020800 	.word	0x58020800
 8005d08:	58020c00 	.word	0x58020c00
 8005d0c:	58021000 	.word	0x58021000
 8005d10:	58021400 	.word	0x58021400
 8005d14:	58021800 	.word	0x58021800
 8005d18:	58021c00 	.word	0x58021c00
 8005d1c:	58022000 	.word	0x58022000
 8005d20:	58022400 	.word	0x58022400
 8005d24:	2300      	movs	r3, #0
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	f002 0203 	and.w	r2, r2, #3
 8005d2c:	0092      	lsls	r2, r2, #2
 8005d2e:	4093      	lsls	r3, r2
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d36:	4938      	ldr	r1, [pc, #224]	; (8005e18 <HAL_GPIO_Init+0x35c>)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	089b      	lsrs	r3, r3, #2
 8005d3c:	3302      	adds	r3, #2
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	4013      	ands	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4013      	ands	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	3301      	adds	r3, #1
 8005df8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f47f ae63 	bne.w	8005ad0 <HAL_GPIO_Init+0x14>
  }
}
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	3724      	adds	r7, #36	; 0x24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	58000400 	.word	0x58000400

08005e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	807b      	strh	r3, [r7, #2]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e2c:	787b      	ldrb	r3, [r7, #1]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e32:	887a      	ldrh	r2, [r7, #2]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e38:	e003      	b.n	8005e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e3a:	887b      	ldrh	r3, [r7, #2]
 8005e3c:	041a      	lsls	r2, r3, #16
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	619a      	str	r2, [r3, #24]
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e07f      	b.n	8005f62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f87a 	bl	8005f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2224      	movs	r2, #36	; 0x24
 8005e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0201 	bic.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d107      	bne.n	8005eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ec6:	609a      	str	r2, [r3, #8]
 8005ec8:	e006      	b.n	8005ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d104      	bne.n	8005eea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6859      	ldr	r1, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <HAL_I2C_Init+0x11c>)
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69d9      	ldr	r1, [r3, #28]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	02008000 	.word	0x02008000

08005f70 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	817b      	strh	r3, [r7, #10]
 8005f96:	460b      	mov	r3, r1
 8005f98:	813b      	strh	r3, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	f040 80fd 	bne.w	80061a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_I2C_Mem_Read+0x34>
 8005fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d105      	bne.n	8005fc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0f1      	b.n	80061a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_I2C_Mem_Read+0x4e>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e0ea      	b.n	80061a8 <HAL_I2C_Mem_Read+0x224>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fda:	f7fd fc4b 	bl	8003874 <HAL_GetTick>
 8005fde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2319      	movs	r3, #25
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 f975 	bl	80062dc <I2C_WaitOnFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0d5      	b.n	80061a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2222      	movs	r2, #34	; 0x22
 8006000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2240      	movs	r2, #64	; 0x40
 8006008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800601c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006024:	88f8      	ldrh	r0, [r7, #6]
 8006026:	893a      	ldrh	r2, [r7, #8]
 8006028:	8979      	ldrh	r1, [r7, #10]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	4603      	mov	r3, r0
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f8d9 	bl	80061ec <I2C_RequestMemoryRead>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d005      	beq.n	800604c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0ad      	b.n	80061a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2bff      	cmp	r3, #255	; 0xff
 8006054:	d90e      	bls.n	8006074 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	22ff      	movs	r2, #255	; 0xff
 800605a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	b2da      	uxtb	r2, r3
 8006062:	8979      	ldrh	r1, [r7, #10]
 8006064:	4b52      	ldr	r3, [pc, #328]	; (80061b0 <HAL_I2C_Mem_Read+0x22c>)
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 faef 	bl	8006650 <I2C_TransferConfig>
 8006072:	e00f      	b.n	8006094 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	b2da      	uxtb	r2, r3
 8006084:	8979      	ldrh	r1, [r7, #10]
 8006086:	4b4a      	ldr	r3, [pc, #296]	; (80061b0 <HAL_I2C_Mem_Read+0x22c>)
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fade 	bl	8006650 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	2200      	movs	r2, #0
 800609c:	2104      	movs	r1, #4
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f91c 	bl	80062dc <I2C_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e07c      	b.n	80061a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d034      	beq.n	8006154 <HAL_I2C_Mem_Read+0x1d0>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d130      	bne.n	8006154 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	2200      	movs	r2, #0
 80060fa:	2180      	movs	r1, #128	; 0x80
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 f8ed 	bl	80062dc <I2C_WaitOnFlagUntilTimeout>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e04d      	b.n	80061a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2bff      	cmp	r3, #255	; 0xff
 8006114:	d90e      	bls.n	8006134 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	22ff      	movs	r2, #255	; 0xff
 800611a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006120:	b2da      	uxtb	r2, r3
 8006122:	8979      	ldrh	r1, [r7, #10]
 8006124:	2300      	movs	r3, #0
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fa8f 	bl	8006650 <I2C_TransferConfig>
 8006132:	e00f      	b.n	8006154 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006142:	b2da      	uxtb	r2, r3
 8006144:	8979      	ldrh	r1, [r7, #10]
 8006146:	2300      	movs	r3, #0
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fa7e 	bl	8006650 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d19a      	bne.n	8006094 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f950 	bl	8006408 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e01a      	b.n	80061a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2220      	movs	r2, #32
 8006178:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <HAL_I2C_Mem_Read+0x230>)
 8006186:	400b      	ands	r3, r1
 8006188:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e000      	b.n	80061a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80061a6:	2302      	movs	r3, #2
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	80002400 	.word	0x80002400
 80061b4:	fe00e800 	.word	0xfe00e800

080061b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c6:	b2db      	uxtb	r3, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	4608      	mov	r0, r1
 80061f6:	4611      	mov	r1, r2
 80061f8:	461a      	mov	r2, r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	817b      	strh	r3, [r7, #10]
 80061fe:	460b      	mov	r3, r1
 8006200:	813b      	strh	r3, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	8979      	ldrh	r1, [r7, #10]
 800620c:	4b20      	ldr	r3, [pc, #128]	; (8006290 <I2C_RequestMemoryRead+0xa4>)
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	2300      	movs	r3, #0
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fa1c 	bl	8006650 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	69b9      	ldr	r1, [r7, #24]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f8ac 	bl	800637a <I2C_WaitOnTXISFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e02c      	b.n	8006286 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d105      	bne.n	800623e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006232:	893b      	ldrh	r3, [r7, #8]
 8006234:	b2da      	uxtb	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28
 800623c:	e015      	b.n	800626a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800623e:	893b      	ldrh	r3, [r7, #8]
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	b29b      	uxth	r3, r3
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	69b9      	ldr	r1, [r7, #24]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f892 	bl	800637a <I2C_WaitOnTXISFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e012      	b.n	8006286 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006260:	893b      	ldrh	r3, [r7, #8]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2200      	movs	r2, #0
 8006272:	2140      	movs	r1, #64	; 0x40
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 f831 	bl	80062dc <I2C_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	80002000 	.word	0x80002000

08006294 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d103      	bne.n	80062b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d007      	beq.n	80062d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	619a      	str	r2, [r3, #24]
  }
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062ec:	e031      	b.n	8006352 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d02d      	beq.n	8006352 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f6:	f7fd fabd 	bl	8003874 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d302      	bcc.n	800630c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d122      	bne.n	8006352 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4013      	ands	r3, r2
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	429a      	cmp	r2, r3
 800631a:	bf0c      	ite	eq
 800631c:	2301      	moveq	r3, #1
 800631e:	2300      	movne	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	429a      	cmp	r2, r3
 8006328:	d113      	bne.n	8006352 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e00f      	b.n	8006372 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4013      	ands	r3, r2
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	429a      	cmp	r2, r3
 8006360:	bf0c      	ite	eq
 8006362:	2301      	moveq	r3, #1
 8006364:	2300      	movne	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	429a      	cmp	r2, r3
 800636e:	d0be      	beq.n	80062ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006386:	e033      	b.n	80063f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	68b9      	ldr	r1, [r7, #8]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f87f 	bl	8006490 <I2C_IsErrorOccurred>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e031      	b.n	8006400 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d025      	beq.n	80063f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a4:	f7fd fa66 	bl	8003874 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d302      	bcc.n	80063ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d11a      	bne.n	80063f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d013      	beq.n	80063f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e007      	b.n	8006400 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d1c4      	bne.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006414:	e02f      	b.n	8006476 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f838 	bl	8006490 <I2C_IsErrorOccurred>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e02d      	b.n	8006486 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800642a:	f7fd fa23 	bl	8003874 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	429a      	cmp	r2, r3
 8006438:	d302      	bcc.n	8006440 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d11a      	bne.n	8006476 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b20      	cmp	r3, #32
 800644c:	d013      	beq.n	8006476 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e007      	b.n	8006486 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b20      	cmp	r3, #32
 8006482:	d1c8      	bne.n	8006416 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	; 0x28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d068      	beq.n	800658e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2210      	movs	r2, #16
 80064c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064c4:	e049      	b.n	800655a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d045      	beq.n	800655a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064ce:	f7fd f9d1 	bl	8003874 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d302      	bcc.n	80064e4 <I2C_IsErrorOccurred+0x54>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d13a      	bne.n	800655a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006506:	d121      	bne.n	800654c <I2C_IsErrorOccurred+0xbc>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800650e:	d01d      	beq.n	800654c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	2b20      	cmp	r3, #32
 8006514:	d01a      	beq.n	800654c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006524:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006526:	f7fd f9a5 	bl	8003874 <HAL_GetTick>
 800652a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800652c:	e00e      	b.n	800654c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800652e:	f7fd f9a1 	bl	8003874 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b19      	cmp	r3, #25
 800653a:	d907      	bls.n	800654c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	f043 0320 	orr.w	r3, r3, #32
 8006542:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800654a:	e006      	b.n	800655a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b20      	cmp	r3, #32
 8006558:	d1e9      	bne.n	800652e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b20      	cmp	r3, #32
 8006566:	d003      	beq.n	8006570 <I2C_IsErrorOccurred+0xe0>
 8006568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0aa      	beq.n	80064c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006574:	2b00      	cmp	r3, #0
 8006576:	d103      	bne.n	8006580 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2220      	movs	r2, #32
 800657e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	f043 0304 	orr.w	r3, r3, #4
 8006586:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00b      	beq.n	80065da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f043 0308 	orr.w	r3, r3, #8
 80065c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	f043 0302 	orr.w	r3, r3, #2
 80065ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80065fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01c      	beq.n	800663e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff fe45 	bl	8006294 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6859      	ldr	r1, [r3, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	4b0d      	ldr	r3, [pc, #52]	; (800664c <I2C_IsErrorOccurred+0x1bc>)
 8006616:	400b      	ands	r3, r1
 8006618:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	431a      	orrs	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800663e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006642:	4618      	mov	r0, r3
 8006644:	3728      	adds	r7, #40	; 0x28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	fe00e800 	.word	0xfe00e800

08006650 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	607b      	str	r3, [r7, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	817b      	strh	r3, [r7, #10]
 800665e:	4613      	mov	r3, r2
 8006660:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006662:	897b      	ldrh	r3, [r7, #10]
 8006664:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006668:	7a7b      	ldrb	r3, [r7, #9]
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006670:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	4313      	orrs	r3, r2
 800667a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800667e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	0d5b      	lsrs	r3, r3, #21
 800668a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800668e:	4b08      	ldr	r3, [pc, #32]	; (80066b0 <I2C_TransferConfig+0x60>)
 8006690:	430b      	orrs	r3, r1
 8006692:	43db      	mvns	r3, r3
 8006694:	ea02 0103 	and.w	r1, r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066a2:	bf00      	nop
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	03ff63ff 	.word	0x03ff63ff

080066b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d138      	bne.n	800673c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e032      	b.n	800673e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2224      	movs	r2, #36	; 0x24
 80066e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006706:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6819      	ldr	r1, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b20      	cmp	r3, #32
 800675e:	d139      	bne.n	80067d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800676a:	2302      	movs	r3, #2
 800676c:	e033      	b.n	80067d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2224      	movs	r2, #36	; 0x24
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800679c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	e000      	b.n	80067d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
  }
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
	...

080067e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e0bf      	b.n	8006976 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f8ba 	bl	8006984 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006826:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6999      	ldr	r1, [r3, #24]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800683c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6899      	ldr	r1, [r3, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b4a      	ldr	r3, [pc, #296]	; (8006980 <HAL_LTDC_Init+0x19c>)
 8006858:	400b      	ands	r3, r1
 800685a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	041b      	lsls	r3, r3, #16
 8006862:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6899      	ldr	r1, [r3, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68d9      	ldr	r1, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <HAL_LTDC_Init+0x19c>)
 8006886:	400b      	ands	r3, r1
 8006888:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	041b      	lsls	r3, r3, #16
 8006890:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68d9      	ldr	r1, [r3, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1a      	ldr	r2, [r3, #32]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6919      	ldr	r1, [r3, #16]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b33      	ldr	r3, [pc, #204]	; (8006980 <HAL_LTDC_Init+0x19c>)
 80068b4:	400b      	ands	r3, r1
 80068b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	041b      	lsls	r3, r3, #16
 80068be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6919      	ldr	r1, [r3, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6959      	ldr	r1, [r3, #20]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	4b27      	ldr	r3, [pc, #156]	; (8006980 <HAL_LTDC_Init+0x19c>)
 80068e2:	400b      	ands	r3, r1
 80068e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6959      	ldr	r1, [r3, #20]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006914:	041b      	lsls	r3, r3, #16
 8006916:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006926:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0206 	orr.w	r2, r2, #6
 8006952:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	f000f800 	.word	0xf000f800

08006984 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006998:	b5b0      	push	{r4, r5, r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_LTDC_ConfigLayer+0x1a>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e02c      	b.n	8006a0c <HAL_LTDC_ConfigLayer+0x74>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2202      	movs	r2, #2
 80069be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2134      	movs	r1, #52	; 0x34
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	4413      	add	r3, r2
 80069ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4614      	mov	r4, r2
 80069d6:	461d      	mov	r5, r3
 80069d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f811 	bl	8006a14 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2201      	movs	r2, #1
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bdb0      	pop	{r4, r5, r7, pc}

08006a14 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b089      	sub	sp, #36	; 0x24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	0c1b      	lsrs	r3, r3, #16
 8006a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a30:	4413      	add	r3, r2
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	01db      	lsls	r3, r3, #7
 8006a40:	4413      	add	r3, r2
 8006a42:	3384      	adds	r3, #132	; 0x84
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	01d2      	lsls	r2, r2, #7
 8006a50:	440a      	add	r2, r1
 8006a52:	3284      	adds	r2, #132	; 0x84
 8006a54:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a58:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a6a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a6c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4619      	mov	r1, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	01db      	lsls	r3, r3, #7
 8006a78:	440b      	add	r3, r1
 8006a7a:	3384      	adds	r3, #132	; 0x84
 8006a7c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a82:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a92:	4413      	add	r3, r2
 8006a94:	041b      	lsls	r3, r3, #16
 8006a96:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	01db      	lsls	r3, r3, #7
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3384      	adds	r3, #132	; 0x84
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	4611      	mov	r1, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	01d2      	lsls	r2, r2, #7
 8006ab2:	440a      	add	r2, r1
 8006ab4:	3284      	adds	r2, #132	; 0x84
 8006ab6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006aba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aca:	4413      	add	r3, r2
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	01db      	lsls	r3, r3, #7
 8006ad8:	440b      	add	r3, r1
 8006ada:	3384      	adds	r3, #132	; 0x84
 8006adc:	4619      	mov	r1, r3
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	01db      	lsls	r3, r3, #7
 8006aee:	4413      	add	r3, r2
 8006af0:	3384      	adds	r3, #132	; 0x84
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	4611      	mov	r1, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	01d2      	lsls	r2, r2, #7
 8006afe:	440a      	add	r2, r1
 8006b00:	3284      	adds	r2, #132	; 0x84
 8006b02:	f023 0307 	bic.w	r3, r3, #7
 8006b06:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	01db      	lsls	r3, r3, #7
 8006b12:	4413      	add	r3, r2
 8006b14:	3384      	adds	r3, #132	; 0x84
 8006b16:	461a      	mov	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	061b      	lsls	r3, r3, #24
 8006b38:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	01db      	lsls	r3, r3, #7
 8006b44:	4413      	add	r3, r2
 8006b46:	3384      	adds	r3, #132	; 0x84
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	01db      	lsls	r3, r3, #7
 8006b54:	4413      	add	r3, r2
 8006b56:	3384      	adds	r3, #132	; 0x84
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b64:	461a      	mov	r2, r3
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4619      	mov	r1, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	01db      	lsls	r3, r3, #7
 8006b78:	440b      	add	r3, r1
 8006b7a:	3384      	adds	r3, #132	; 0x84
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	01db      	lsls	r3, r3, #7
 8006b8e:	4413      	add	r3, r2
 8006b90:	3384      	adds	r3, #132	; 0x84
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	4611      	mov	r1, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	01d2      	lsls	r2, r2, #7
 8006b9e:	440a      	add	r2, r1
 8006ba0:	3284      	adds	r2, #132	; 0x84
 8006ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ba6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	01db      	lsls	r3, r3, #7
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3384      	adds	r3, #132	; 0x84
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	01db      	lsls	r3, r3, #7
 8006bc8:	4413      	add	r3, r2
 8006bca:	3384      	adds	r3, #132	; 0x84
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	01db      	lsls	r3, r3, #7
 8006bd8:	440b      	add	r3, r1
 8006bda:	3384      	adds	r3, #132	; 0x84
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4b58      	ldr	r3, [pc, #352]	; (8006d40 <LTDC_SetConfig+0x32c>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	68f9      	ldr	r1, [r7, #12]
 8006bee:	6809      	ldr	r1, [r1, #0]
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	01c9      	lsls	r1, r1, #7
 8006bf6:	4401      	add	r1, r0
 8006bf8:	3184      	adds	r1, #132	; 0x84
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	01db      	lsls	r3, r3, #7
 8006c08:	4413      	add	r3, r2
 8006c0a:	3384      	adds	r3, #132	; 0x84
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	01db      	lsls	r3, r3, #7
 8006c18:	4413      	add	r3, r2
 8006c1a:	3384      	adds	r3, #132	; 0x84
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	2300      	movs	r3, #0
 8006c20:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	01db      	lsls	r3, r3, #7
 8006c2c:	4413      	add	r3, r2
 8006c2e:	3384      	adds	r3, #132	; 0x84
 8006c30:	461a      	mov	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006c40:	2304      	movs	r3, #4
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	e01b      	b.n	8006c7e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d102      	bne.n	8006c54 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	e014      	b.n	8006c7e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d00b      	beq.n	8006c74 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d007      	beq.n	8006c74 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d003      	beq.n	8006c74 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c70:	2b07      	cmp	r3, #7
 8006c72:	d102      	bne.n	8006c7a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006c74:	2302      	movs	r3, #2
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e001      	b.n	8006c7e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	01db      	lsls	r3, r3, #7
 8006c88:	4413      	add	r3, r2
 8006c8a:	3384      	adds	r3, #132	; 0x84
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	6812      	ldr	r2, [r2, #0]
 8006c92:	4611      	mov	r1, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	01d2      	lsls	r2, r2, #7
 8006c98:	440a      	add	r2, r1
 8006c9a:	3284      	adds	r2, #132	; 0x84
 8006c9c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	fb02 f303 	mul.w	r3, r2, r3
 8006cac:	041a      	lsls	r2, r3, #16
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6859      	ldr	r1, [r3, #4]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	1acb      	subs	r3, r1, r3
 8006cb8:	69f9      	ldr	r1, [r7, #28]
 8006cba:	fb01 f303 	mul.w	r3, r1, r3
 8006cbe:	3307      	adds	r3, #7
 8006cc0:	68f9      	ldr	r1, [r7, #12]
 8006cc2:	6809      	ldr	r1, [r1, #0]
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	01c9      	lsls	r1, r1, #7
 8006cca:	4401      	add	r1, r0
 8006ccc:	3184      	adds	r1, #132	; 0x84
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	01db      	lsls	r3, r3, #7
 8006cdc:	4413      	add	r3, r2
 8006cde:	3384      	adds	r3, #132	; 0x84
 8006ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	01db      	lsls	r3, r3, #7
 8006cec:	440b      	add	r3, r1
 8006cee:	3384      	adds	r3, #132	; 0x84
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <LTDC_SetConfig+0x330>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	01db      	lsls	r3, r3, #7
 8006d02:	4413      	add	r3, r2
 8006d04:	3384      	adds	r3, #132	; 0x84
 8006d06:	461a      	mov	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	01db      	lsls	r3, r3, #7
 8006d18:	4413      	add	r3, r2
 8006d1a:	3384      	adds	r3, #132	; 0x84
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	4611      	mov	r1, r2
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	01d2      	lsls	r2, r2, #7
 8006d28:	440a      	add	r2, r1
 8006d2a:	3284      	adds	r2, #132	; 0x84
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	6013      	str	r3, [r2, #0]
}
 8006d32:	bf00      	nop
 8006d34:	3724      	adds	r7, #36	; 0x24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	fffff8f8 	.word	0xfffff8f8
 8006d44:	fffff800 	.word	0xfffff800

08006d48 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d50:	f7fc fd90 	bl	8003874 <HAL_GetTick>
 8006d54:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e03b      	b.n	8006dd8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006d80:	e00f      	b.n	8006da2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006d82:	f7fc fd77 	bl	8003874 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b05      	cmp	r3, #5
 8006d8e:	d908      	bls.n	8006da2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2240      	movs	r2, #64	; 0x40
 8006d94:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2203      	movs	r2, #3
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e01a      	b.n	8006dd8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e8      	bne.n	8006d82 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f9c1 	bl	8007138 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e048      	b.n	8006e84 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0201 	bic.w	r2, r2, #1
 8006e00:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2200      	movs	r2, #0
 8006e18:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2200      	movs	r2, #0
 8006e28:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2200      	movs	r2, #0
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	221f      	movs	r2, #31
 8006e58:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e9c:	4b91      	ldr	r3, [pc, #580]	; (80070e4 <HAL_MDMA_IRQHandler+0x254>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a91      	ldr	r2, [pc, #580]	; (80070e8 <HAL_MDMA_IRQHandler+0x258>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	0a9b      	lsrs	r3, r3, #10
 8006ea8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	4b8e      	ldr	r3, [pc, #568]	; (80070ec <HAL_MDMA_IRQHandler+0x25c>)
 8006eb2:	4413      	add	r3, r2
 8006eb4:	099b      	lsrs	r3, r3, #6
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	2201      	movs	r2, #1
 8006ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8006ec2:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 812d 	beq.w	800712c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d054      	beq.n	8006f8a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d04d      	beq.n	8006f8a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0202 	bic.w	r2, r2, #2
 8006efc:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f14:	f043 0201 	orr.w	r2, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	669a      	str	r2, [r3, #104]	; 0x68
 8006f1c:	e005      	b.n	8006f2a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f22:	f043 0202 	orr.w	r2, r3, #2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f38:	f043 0204 	orr.w	r2, r3, #4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f4e:	f043 0208 	orr.w	r2, r3, #8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f64:	f043 0210 	orr.w	r2, r3, #16
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f7a:	f043 0220 	orr.w	r2, r3, #32
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2201      	movs	r2, #1
 8006f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d012      	beq.n	8006fbe <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2210      	movs	r2, #16
 8006fac:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d012      	beq.n	8006ff2 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f003 0310 	and.w	r3, r3, #16
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00b      	beq.n	8006ff2 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2208      	movs	r2, #8
 8006fe0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d012      	beq.n	8007026 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00b      	beq.n	8007026 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2204      	movs	r2, #4
 8007014:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d039      	beq.n	80070a8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d032      	beq.n	80070a8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8007050:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b04      	cmp	r3, #4
 800705c:	d110      	bne.n	8007080 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007072:	2b00      	cmp	r3, #0
 8007074:	d05c      	beq.n	8007130 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
        }
        return;
 800707e:	e057      	b.n	8007130 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2202      	movs	r2, #2
 8007086:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d040      	beq.n	8007132 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2204      	movs	r2, #4
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0201 	bic.w	r2, r2, #1
 80070c6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d30d      	bcc.n	80070f0 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1f2      	bne.n	80070c8 <HAL_MDMA_IRQHandler+0x238>
 80070e2:	e006      	b.n	80070f2 <HAL_MDMA_IRQHandler+0x262>
 80070e4:	24000010 	.word	0x24000010
 80070e8:	1b4e81b5 	.word	0x1b4e81b5
 80070ec:	adffffc0 	.word	0xadffffc0
        break;
 80070f0:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2203      	movs	r2, #3
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007110:	e003      	b.n	800711a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
 800712a:	e002      	b.n	8007132 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800712c:	bf00      	nop
 800712e:	e000      	b.n	8007132 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8007130:	bf00      	nop
    }
  }
}
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68d9      	ldr	r1, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	695a      	ldr	r2, [r3, #20]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800715e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800716a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007176:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717c:	3b01      	subs	r3, #1
 800717e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8007180:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800718c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800718e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007198:	d107      	bne.n	80071aa <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80071a8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2200      	movs	r2, #0
 80071b0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	da11      	bge.n	80071de <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695a      	ldr	r2, [r3, #20]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80071c8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	425b      	negs	r3, r3
 80071d0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	b292      	uxth	r2, r2
 80071da:	621a      	str	r2, [r3, #32]
 80071dc:	e006      	b.n	80071ec <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	b292      	uxth	r2, r2
 80071ea:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da15      	bge.n	8007220 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007202:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	425b      	negs	r3, r3
 800720a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6a19      	ldr	r1, [r3, #32]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	041a      	lsls	r2, r3, #16
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	621a      	str	r2, [r3, #32]
 800721e:	e009      	b.n	8007234 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6a19      	ldr	r1, [r3, #32]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	041a      	lsls	r2, r3, #16
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723c:	d006      	beq.n	800724c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	629a      	str	r2, [r3, #40]	; 0x28
 800724a:	e003      	b.n	8007254 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2200      	movs	r2, #0
 8007252:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2200      	movs	r2, #0
 800725a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007270:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b04      	cmp	r3, #4
 800727a:	d00a      	beq.n	8007292 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800727c:	4b16      	ldr	r3, [pc, #88]	; (80072d8 <HAL_PWREx_ConfigSupply+0x70>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	429a      	cmp	r2, r3
 8007288:	d001      	beq.n	800728e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e01f      	b.n	80072ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	e01d      	b.n	80072ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007292:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f023 0207 	bic.w	r2, r3, #7
 800729a:	490f      	ldr	r1, [pc, #60]	; (80072d8 <HAL_PWREx_ConfigSupply+0x70>)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80072a2:	f7fc fae7 	bl	8003874 <HAL_GetTick>
 80072a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072a8:	e009      	b.n	80072be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80072aa:	f7fc fae3 	bl	8003874 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072b8:	d901      	bls.n	80072be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e007      	b.n	80072ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072be:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <HAL_PWREx_ConfigSupply+0x70>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ca:	d1ee      	bne.n	80072aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	58024800 	.word	0x58024800

080072dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	; 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d102      	bne.n	80072f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f000 bc48 	b.w	8007b80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8088 	beq.w	800740e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072fe:	4b99      	ldr	r3, [pc, #612]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007308:	4b96      	ldr	r3, [pc, #600]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007310:	2b10      	cmp	r3, #16
 8007312:	d007      	beq.n	8007324 <HAL_RCC_OscConfig+0x48>
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	2b18      	cmp	r3, #24
 8007318:	d111      	bne.n	800733e <HAL_RCC_OscConfig+0x62>
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	f003 0303 	and.w	r3, r3, #3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d10c      	bne.n	800733e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007324:	4b8f      	ldr	r3, [pc, #572]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d06d      	beq.n	800740c <HAL_RCC_OscConfig+0x130>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d169      	bne.n	800740c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	f000 bc21 	b.w	8007b80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007346:	d106      	bne.n	8007356 <HAL_RCC_OscConfig+0x7a>
 8007348:	4b86      	ldr	r3, [pc, #536]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a85      	ldr	r2, [pc, #532]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800734e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e02e      	b.n	80073b4 <HAL_RCC_OscConfig+0xd8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10c      	bne.n	8007378 <HAL_RCC_OscConfig+0x9c>
 800735e:	4b81      	ldr	r3, [pc, #516]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a80      	ldr	r2, [pc, #512]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4b7e      	ldr	r3, [pc, #504]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a7d      	ldr	r2, [pc, #500]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	e01d      	b.n	80073b4 <HAL_RCC_OscConfig+0xd8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007380:	d10c      	bne.n	800739c <HAL_RCC_OscConfig+0xc0>
 8007382:	4b78      	ldr	r3, [pc, #480]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a77      	ldr	r2, [pc, #476]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	4b75      	ldr	r3, [pc, #468]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a74      	ldr	r2, [pc, #464]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	e00b      	b.n	80073b4 <HAL_RCC_OscConfig+0xd8>
 800739c:	4b71      	ldr	r3, [pc, #452]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a70      	ldr	r2, [pc, #448]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80073a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	4b6e      	ldr	r3, [pc, #440]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a6d      	ldr	r2, [pc, #436]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80073ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d013      	beq.n	80073e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073bc:	f7fc fa5a 	bl	8003874 <HAL_GetTick>
 80073c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073c4:	f7fc fa56 	bl	8003874 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b64      	cmp	r3, #100	; 0x64
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e3d4      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073d6:	4b63      	ldr	r3, [pc, #396]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0f0      	beq.n	80073c4 <HAL_RCC_OscConfig+0xe8>
 80073e2:	e014      	b.n	800740e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e4:	f7fc fa46 	bl	8003874 <HAL_GetTick>
 80073e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073ec:	f7fc fa42 	bl	8003874 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b64      	cmp	r3, #100	; 0x64
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e3c0      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073fe:	4b59      	ldr	r3, [pc, #356]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f0      	bne.n	80073ec <HAL_RCC_OscConfig+0x110>
 800740a:	e000      	b.n	800740e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800740c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0302 	and.w	r3, r3, #2
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 80ca 	beq.w	80075b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800741c:	4b51      	ldr	r3, [pc, #324]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007424:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007426:	4b4f      	ldr	r3, [pc, #316]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d007      	beq.n	8007442 <HAL_RCC_OscConfig+0x166>
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	2b18      	cmp	r3, #24
 8007436:	d156      	bne.n	80074e6 <HAL_RCC_OscConfig+0x20a>
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d151      	bne.n	80074e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007442:	4b48      	ldr	r3, [pc, #288]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <HAL_RCC_OscConfig+0x17e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e392      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800745a:	4b42      	ldr	r3, [pc, #264]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f023 0219 	bic.w	r2, r3, #25
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	493f      	ldr	r1, [pc, #252]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007468:	4313      	orrs	r3, r2
 800746a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746c:	f7fc fa02 	bl	8003874 <HAL_GetTick>
 8007470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007474:	f7fc f9fe 	bl	8003874 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e37c      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007486:	4b37      	ldr	r3, [pc, #220]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0304 	and.w	r3, r3, #4
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0f0      	beq.n	8007474 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007492:	f7fc fa1f 	bl	80038d4 <HAL_GetREVID>
 8007496:	4603      	mov	r3, r0
 8007498:	f241 0203 	movw	r2, #4099	; 0x1003
 800749c:	4293      	cmp	r3, r2
 800749e:	d817      	bhi.n	80074d0 <HAL_RCC_OscConfig+0x1f4>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b40      	cmp	r3, #64	; 0x40
 80074a6:	d108      	bne.n	80074ba <HAL_RCC_OscConfig+0x1de>
 80074a8:	4b2e      	ldr	r3, [pc, #184]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80074b0:	4a2c      	ldr	r2, [pc, #176]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80074b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074b8:	e07a      	b.n	80075b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ba:	4b2a      	ldr	r3, [pc, #168]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	031b      	lsls	r3, r3, #12
 80074c8:	4926      	ldr	r1, [pc, #152]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074ce:	e06f      	b.n	80075b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d0:	4b24      	ldr	r3, [pc, #144]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	061b      	lsls	r3, r3, #24
 80074de:	4921      	ldr	r1, [pc, #132]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074e4:	e064      	b.n	80075b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d047      	beq.n	800757e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074ee:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f023 0219 	bic.w	r2, r3, #25
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	491a      	ldr	r1, [pc, #104]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007500:	f7fc f9b8 	bl	8003874 <HAL_GetTick>
 8007504:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007506:	e008      	b.n	800751a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007508:	f7fc f9b4 	bl	8003874 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e332      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800751a:	4b12      	ldr	r3, [pc, #72]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0f0      	beq.n	8007508 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007526:	f7fc f9d5 	bl	80038d4 <HAL_GetREVID>
 800752a:	4603      	mov	r3, r0
 800752c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007530:	4293      	cmp	r3, r2
 8007532:	d819      	bhi.n	8007568 <HAL_RCC_OscConfig+0x28c>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	d108      	bne.n	800754e <HAL_RCC_OscConfig+0x272>
 800753c:	4b09      	ldr	r3, [pc, #36]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007544:	4a07      	ldr	r2, [pc, #28]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800754a:	6053      	str	r3, [r2, #4]
 800754c:	e030      	b.n	80075b0 <HAL_RCC_OscConfig+0x2d4>
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	031b      	lsls	r3, r3, #12
 800755c:	4901      	ldr	r1, [pc, #4]	; (8007564 <HAL_RCC_OscConfig+0x288>)
 800755e:	4313      	orrs	r3, r2
 8007560:	604b      	str	r3, [r1, #4]
 8007562:	e025      	b.n	80075b0 <HAL_RCC_OscConfig+0x2d4>
 8007564:	58024400 	.word	0x58024400
 8007568:	4b9a      	ldr	r3, [pc, #616]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	061b      	lsls	r3, r3, #24
 8007576:	4997      	ldr	r1, [pc, #604]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007578:	4313      	orrs	r3, r2
 800757a:	604b      	str	r3, [r1, #4]
 800757c:	e018      	b.n	80075b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800757e:	4b95      	ldr	r3, [pc, #596]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a94      	ldr	r2, [pc, #592]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758a:	f7fc f973 	bl	8003874 <HAL_GetTick>
 800758e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007592:	f7fc f96f 	bl	8003874 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e2ed      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80075a4:	4b8b      	ldr	r3, [pc, #556]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0304 	and.w	r3, r3, #4
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f0      	bne.n	8007592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80a9 	beq.w	8007710 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075be:	4b85      	ldr	r3, [pc, #532]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075c8:	4b82      	ldr	r3, [pc, #520]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d007      	beq.n	80075e4 <HAL_RCC_OscConfig+0x308>
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b18      	cmp	r3, #24
 80075d8:	d13a      	bne.n	8007650 <HAL_RCC_OscConfig+0x374>
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d135      	bne.n	8007650 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075e4:	4b7b      	ldr	r3, [pc, #492]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <HAL_RCC_OscConfig+0x320>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	2b80      	cmp	r3, #128	; 0x80
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e2c1      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075fc:	f7fc f96a 	bl	80038d4 <HAL_GetREVID>
 8007600:	4603      	mov	r3, r0
 8007602:	f241 0203 	movw	r2, #4099	; 0x1003
 8007606:	4293      	cmp	r3, r2
 8007608:	d817      	bhi.n	800763a <HAL_RCC_OscConfig+0x35e>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	2b20      	cmp	r3, #32
 8007610:	d108      	bne.n	8007624 <HAL_RCC_OscConfig+0x348>
 8007612:	4b70      	ldr	r3, [pc, #448]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800761a:	4a6e      	ldr	r2, [pc, #440]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800761c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007620:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007622:	e075      	b.n	8007710 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007624:	4b6b      	ldr	r3, [pc, #428]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	069b      	lsls	r3, r3, #26
 8007632:	4968      	ldr	r1, [pc, #416]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007634:	4313      	orrs	r3, r2
 8007636:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007638:	e06a      	b.n	8007710 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800763a:	4b66      	ldr	r3, [pc, #408]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	061b      	lsls	r3, r3, #24
 8007648:	4962      	ldr	r1, [pc, #392]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800764a:	4313      	orrs	r3, r2
 800764c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800764e:	e05f      	b.n	8007710 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d042      	beq.n	80076de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007658:	4b5e      	ldr	r3, [pc, #376]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a5d      	ldr	r2, [pc, #372]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800765e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fc f906 	bl	8003874 <HAL_GetTick>
 8007668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800766c:	f7fc f902 	bl	8003874 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e280      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800767e:	4b55      	ldr	r3, [pc, #340]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f0      	beq.n	800766c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800768a:	f7fc f923 	bl	80038d4 <HAL_GetREVID>
 800768e:	4603      	mov	r3, r0
 8007690:	f241 0203 	movw	r2, #4099	; 0x1003
 8007694:	4293      	cmp	r3, r2
 8007696:	d817      	bhi.n	80076c8 <HAL_RCC_OscConfig+0x3ec>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	2b20      	cmp	r3, #32
 800769e:	d108      	bne.n	80076b2 <HAL_RCC_OscConfig+0x3d6>
 80076a0:	4b4c      	ldr	r3, [pc, #304]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80076a8:	4a4a      	ldr	r2, [pc, #296]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80076aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076ae:	6053      	str	r3, [r2, #4]
 80076b0:	e02e      	b.n	8007710 <HAL_RCC_OscConfig+0x434>
 80076b2:	4b48      	ldr	r3, [pc, #288]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	069b      	lsls	r3, r3, #26
 80076c0:	4944      	ldr	r1, [pc, #272]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	604b      	str	r3, [r1, #4]
 80076c6:	e023      	b.n	8007710 <HAL_RCC_OscConfig+0x434>
 80076c8:	4b42      	ldr	r3, [pc, #264]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	061b      	lsls	r3, r3, #24
 80076d6:	493f      	ldr	r1, [pc, #252]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	60cb      	str	r3, [r1, #12]
 80076dc:	e018      	b.n	8007710 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80076de:	4b3d      	ldr	r3, [pc, #244]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a3c      	ldr	r2, [pc, #240]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80076e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ea:	f7fc f8c3 	bl	8003874 <HAL_GetTick>
 80076ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076f0:	e008      	b.n	8007704 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80076f2:	f7fc f8bf 	bl	8003874 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e23d      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007704:	4b33      	ldr	r3, [pc, #204]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1f0      	bne.n	80076f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0308 	and.w	r3, r3, #8
 8007718:	2b00      	cmp	r3, #0
 800771a:	d036      	beq.n	800778a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d019      	beq.n	8007758 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007724:	4b2b      	ldr	r3, [pc, #172]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007728:	4a2a      	ldr	r2, [pc, #168]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800772a:	f043 0301 	orr.w	r3, r3, #1
 800772e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007730:	f7fc f8a0 	bl	8003874 <HAL_GetTick>
 8007734:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007738:	f7fc f89c 	bl	8003874 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e21a      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800774a:	4b22      	ldr	r3, [pc, #136]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800774c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f0      	beq.n	8007738 <HAL_RCC_OscConfig+0x45c>
 8007756:	e018      	b.n	800778a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800775a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800775c:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007764:	f7fc f886 	bl	8003874 <HAL_GetTick>
 8007768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800776c:	f7fc f882 	bl	8003874 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e200      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800777e:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 8007780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d039      	beq.n	800780a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d01c      	beq.n	80077d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800779e:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a0c      	ldr	r2, [pc, #48]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80077a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80077aa:	f7fc f863 	bl	8003874 <HAL_GetTick>
 80077ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80077b0:	e008      	b.n	80077c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077b2:	f7fc f85f 	bl	8003874 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d901      	bls.n	80077c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e1dd      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80077c4:	4b03      	ldr	r3, [pc, #12]	; (80077d4 <HAL_RCC_OscConfig+0x4f8>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0f0      	beq.n	80077b2 <HAL_RCC_OscConfig+0x4d6>
 80077d0:	e01b      	b.n	800780a <HAL_RCC_OscConfig+0x52e>
 80077d2:	bf00      	nop
 80077d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80077d8:	4b9b      	ldr	r3, [pc, #620]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a9a      	ldr	r2, [pc, #616]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80077de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80077e4:	f7fc f846 	bl	8003874 <HAL_GetTick>
 80077e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ec:	f7fc f842 	bl	8003874 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e1c0      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80077fe:	4b92      	ldr	r3, [pc, #584]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1f0      	bne.n	80077ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 8081 	beq.w	800791a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007818:	4b8c      	ldr	r3, [pc, #560]	; (8007a4c <HAL_RCC_OscConfig+0x770>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a8b      	ldr	r2, [pc, #556]	; (8007a4c <HAL_RCC_OscConfig+0x770>)
 800781e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007822:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007824:	f7fc f826 	bl	8003874 <HAL_GetTick>
 8007828:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800782a:	e008      	b.n	800783e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800782c:	f7fc f822 	bl	8003874 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	2b64      	cmp	r3, #100	; 0x64
 8007838:	d901      	bls.n	800783e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e1a0      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800783e:	4b83      	ldr	r3, [pc, #524]	; (8007a4c <HAL_RCC_OscConfig+0x770>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0f0      	beq.n	800782c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d106      	bne.n	8007860 <HAL_RCC_OscConfig+0x584>
 8007852:	4b7d      	ldr	r3, [pc, #500]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007856:	4a7c      	ldr	r2, [pc, #496]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	6713      	str	r3, [r2, #112]	; 0x70
 800785e:	e02d      	b.n	80078bc <HAL_RCC_OscConfig+0x5e0>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10c      	bne.n	8007882 <HAL_RCC_OscConfig+0x5a6>
 8007868:	4b77      	ldr	r3, [pc, #476]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 800786a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786c:	4a76      	ldr	r2, [pc, #472]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 800786e:	f023 0301 	bic.w	r3, r3, #1
 8007872:	6713      	str	r3, [r2, #112]	; 0x70
 8007874:	4b74      	ldr	r3, [pc, #464]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007878:	4a73      	ldr	r2, [pc, #460]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 800787a:	f023 0304 	bic.w	r3, r3, #4
 800787e:	6713      	str	r3, [r2, #112]	; 0x70
 8007880:	e01c      	b.n	80078bc <HAL_RCC_OscConfig+0x5e0>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b05      	cmp	r3, #5
 8007888:	d10c      	bne.n	80078a4 <HAL_RCC_OscConfig+0x5c8>
 800788a:	4b6f      	ldr	r3, [pc, #444]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	4a6e      	ldr	r2, [pc, #440]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007890:	f043 0304 	orr.w	r3, r3, #4
 8007894:	6713      	str	r3, [r2, #112]	; 0x70
 8007896:	4b6c      	ldr	r3, [pc, #432]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789a:	4a6b      	ldr	r2, [pc, #428]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 800789c:	f043 0301 	orr.w	r3, r3, #1
 80078a0:	6713      	str	r3, [r2, #112]	; 0x70
 80078a2:	e00b      	b.n	80078bc <HAL_RCC_OscConfig+0x5e0>
 80078a4:	4b68      	ldr	r3, [pc, #416]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80078a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a8:	4a67      	ldr	r2, [pc, #412]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80078aa:	f023 0301 	bic.w	r3, r3, #1
 80078ae:	6713      	str	r3, [r2, #112]	; 0x70
 80078b0:	4b65      	ldr	r3, [pc, #404]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80078b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b4:	4a64      	ldr	r2, [pc, #400]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80078b6:	f023 0304 	bic.w	r3, r3, #4
 80078ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d015      	beq.n	80078f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c4:	f7fb ffd6 	bl	8003874 <HAL_GetTick>
 80078c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078ca:	e00a      	b.n	80078e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078cc:	f7fb ffd2 	bl	8003874 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078da:	4293      	cmp	r3, r2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e14e      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078e2:	4b59      	ldr	r3, [pc, #356]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0ee      	beq.n	80078cc <HAL_RCC_OscConfig+0x5f0>
 80078ee:	e014      	b.n	800791a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f0:	f7fb ffc0 	bl	8003874 <HAL_GetTick>
 80078f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078f6:	e00a      	b.n	800790e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f8:	f7fb ffbc 	bl	8003874 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	f241 3288 	movw	r2, #5000	; 0x1388
 8007906:	4293      	cmp	r3, r2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e138      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800790e:	4b4e      	ldr	r3, [pc, #312]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1ee      	bne.n	80078f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 812d 	beq.w	8007b7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007924:	4b48      	ldr	r3, [pc, #288]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800792c:	2b18      	cmp	r3, #24
 800792e:	f000 80bd 	beq.w	8007aac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2b02      	cmp	r3, #2
 8007938:	f040 809e 	bne.w	8007a78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800793c:	4b42      	ldr	r3, [pc, #264]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a41      	ldr	r2, [pc, #260]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007948:	f7fb ff94 	bl	8003874 <HAL_GetTick>
 800794c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800794e:	e008      	b.n	8007962 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007950:	f7fb ff90 	bl	8003874 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d901      	bls.n	8007962 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e10e      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007962:	4b39      	ldr	r3, [pc, #228]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f0      	bne.n	8007950 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007972:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <HAL_RCC_OscConfig+0x774>)
 8007974:	4013      	ands	r3, r2
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800797e:	0112      	lsls	r2, r2, #4
 8007980:	430a      	orrs	r2, r1
 8007982:	4931      	ldr	r1, [pc, #196]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007984:	4313      	orrs	r3, r2
 8007986:	628b      	str	r3, [r1, #40]	; 0x28
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	3b01      	subs	r3, #1
 800798e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007996:	3b01      	subs	r3, #1
 8007998:	025b      	lsls	r3, r3, #9
 800799a:	b29b      	uxth	r3, r3
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a2:	3b01      	subs	r3, #1
 80079a4:	041b      	lsls	r3, r3, #16
 80079a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079aa:	431a      	orrs	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b0:	3b01      	subs	r3, #1
 80079b2:	061b      	lsls	r3, r3, #24
 80079b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079b8:	4923      	ldr	r1, [pc, #140]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80079be:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	4a21      	ldr	r2, [pc, #132]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80079c4:	f023 0301 	bic.w	r3, r3, #1
 80079c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80079ca:	4b1f      	ldr	r3, [pc, #124]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80079cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ce:	4b21      	ldr	r3, [pc, #132]	; (8007a54 <HAL_RCC_OscConfig+0x778>)
 80079d0:	4013      	ands	r3, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80079d6:	00d2      	lsls	r2, r2, #3
 80079d8:	491b      	ldr	r1, [pc, #108]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80079de:	4b1a      	ldr	r3, [pc, #104]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	f023 020c 	bic.w	r2, r3, #12
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	4917      	ldr	r1, [pc, #92]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80079f0:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80079f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f4:	f023 0202 	bic.w	r2, r3, #2
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fc:	4912      	ldr	r1, [pc, #72]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a02:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	4a10      	ldr	r2, [pc, #64]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a0e:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	4a0d      	ldr	r2, [pc, #52]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007a1a:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	4a0a      	ldr	r2, [pc, #40]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	4a07      	ldr	r2, [pc, #28]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a04      	ldr	r2, [pc, #16]	; (8007a48 <HAL_RCC_OscConfig+0x76c>)
 8007a38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3e:	f7fb ff19 	bl	8003874 <HAL_GetTick>
 8007a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a44:	e011      	b.n	8007a6a <HAL_RCC_OscConfig+0x78e>
 8007a46:	bf00      	nop
 8007a48:	58024400 	.word	0x58024400
 8007a4c:	58024800 	.word	0x58024800
 8007a50:	fffffc0c 	.word	0xfffffc0c
 8007a54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a58:	f7fb ff0c 	bl	8003874 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e08a      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a6a:	4b47      	ldr	r3, [pc, #284]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCC_OscConfig+0x77c>
 8007a76:	e082      	b.n	8007b7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a78:	4b43      	ldr	r3, [pc, #268]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a42      	ldr	r2, [pc, #264]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a84:	f7fb fef6 	bl	8003874 <HAL_GetTick>
 8007a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a8c:	f7fb fef2 	bl	8003874 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e070      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a9e:	4b3a      	ldr	r3, [pc, #232]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1f0      	bne.n	8007a8c <HAL_RCC_OscConfig+0x7b0>
 8007aaa:	e068      	b.n	8007b7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007aac:	4b36      	ldr	r3, [pc, #216]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007ab2:	4b35      	ldr	r3, [pc, #212]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d031      	beq.n	8007b24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f003 0203 	and.w	r2, r3, #3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d12a      	bne.n	8007b24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	091b      	lsrs	r3, r3, #4
 8007ad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d122      	bne.n	8007b24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d11a      	bne.n	8007b24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	0a5b      	lsrs	r3, r3, #9
 8007af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d111      	bne.n	8007b24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	0c1b      	lsrs	r3, r3, #16
 8007b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d108      	bne.n	8007b24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	0e1b      	lsrs	r3, r3, #24
 8007b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d001      	beq.n	8007b28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e02b      	b.n	8007b80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007b28:	4b17      	ldr	r3, [pc, #92]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2c:	08db      	lsrs	r3, r3, #3
 8007b2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d01f      	beq.n	8007b7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007b3e:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	4a11      	ldr	r2, [pc, #68]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007b44:	f023 0301 	bic.w	r3, r3, #1
 8007b48:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b4a:	f7fb fe93 	bl	8003874 <HAL_GetTick>
 8007b4e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007b50:	bf00      	nop
 8007b52:	f7fb fe8f 	bl	8003874 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d0f9      	beq.n	8007b52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b5e:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b62:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <HAL_RCC_OscConfig+0x8b0>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b6a:	00d2      	lsls	r2, r2, #3
 8007b6c:	4906      	ldr	r1, [pc, #24]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	4a04      	ldr	r2, [pc, #16]	; (8007b88 <HAL_RCC_OscConfig+0x8ac>)
 8007b78:	f043 0301 	orr.w	r3, r3, #1
 8007b7c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3730      	adds	r7, #48	; 0x30
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	58024400 	.word	0x58024400
 8007b8c:	ffff0007 	.word	0xffff0007

08007b90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e19c      	b.n	8007ede <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ba4:	4b8a      	ldr	r3, [pc, #552]	; (8007dd0 <HAL_RCC_ClockConfig+0x240>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d910      	bls.n	8007bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bb2:	4b87      	ldr	r3, [pc, #540]	; (8007dd0 <HAL_RCC_ClockConfig+0x240>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f023 020f 	bic.w	r2, r3, #15
 8007bba:	4985      	ldr	r1, [pc, #532]	; (8007dd0 <HAL_RCC_ClockConfig+0x240>)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bc2:	4b83      	ldr	r3, [pc, #524]	; (8007dd0 <HAL_RCC_ClockConfig+0x240>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d001      	beq.n	8007bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e184      	b.n	8007ede <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d010      	beq.n	8007c02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	4b7b      	ldr	r3, [pc, #492]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d908      	bls.n	8007c02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007bf0:	4b78      	ldr	r3, [pc, #480]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	4975      	ldr	r1, [pc, #468]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d010      	beq.n	8007c30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	695a      	ldr	r2, [r3, #20]
 8007c12:	4b70      	ldr	r3, [pc, #448]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d908      	bls.n	8007c30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c1e:	4b6d      	ldr	r3, [pc, #436]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	496a      	ldr	r1, [pc, #424]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d010      	beq.n	8007c5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	699a      	ldr	r2, [r3, #24]
 8007c40:	4b64      	ldr	r3, [pc, #400]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d908      	bls.n	8007c5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c4c:	4b61      	ldr	r3, [pc, #388]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	495e      	ldr	r1, [pc, #376]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d010      	beq.n	8007c8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69da      	ldr	r2, [r3, #28]
 8007c6e:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d908      	bls.n	8007c8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007c7a:	4b56      	ldr	r3, [pc, #344]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	4953      	ldr	r1, [pc, #332]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d010      	beq.n	8007cba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	4b4d      	ldr	r3, [pc, #308]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	f003 030f 	and.w	r3, r3, #15
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d908      	bls.n	8007cba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ca8:	4b4a      	ldr	r3, [pc, #296]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	f023 020f 	bic.w	r2, r3, #15
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	4947      	ldr	r1, [pc, #284]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d055      	beq.n	8007d72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007cc6:	4b43      	ldr	r3, [pc, #268]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	4940      	ldr	r1, [pc, #256]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d107      	bne.n	8007cf0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ce0:	4b3c      	ldr	r3, [pc, #240]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d121      	bne.n	8007d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e0f6      	b.n	8007ede <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d107      	bne.n	8007d08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cf8:	4b36      	ldr	r3, [pc, #216]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d115      	bne.n	8007d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e0ea      	b.n	8007ede <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d107      	bne.n	8007d20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d10:	4b30      	ldr	r3, [pc, #192]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d109      	bne.n	8007d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e0de      	b.n	8007ede <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d20:	4b2c      	ldr	r3, [pc, #176]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e0d6      	b.n	8007ede <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d30:	4b28      	ldr	r3, [pc, #160]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f023 0207 	bic.w	r2, r3, #7
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4925      	ldr	r1, [pc, #148]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d42:	f7fb fd97 	bl	8003874 <HAL_GetTick>
 8007d46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d48:	e00a      	b.n	8007d60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d4a:	f7fb fd93 	bl	8003874 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e0be      	b.n	8007ede <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d60:	4b1c      	ldr	r3, [pc, #112]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d1eb      	bne.n	8007d4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d010      	beq.n	8007da0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d208      	bcs.n	8007da0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d8e:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f023 020f 	bic.w	r2, r3, #15
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	490e      	ldr	r1, [pc, #56]	; (8007dd4 <HAL_RCC_ClockConfig+0x244>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007da0:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <HAL_RCC_ClockConfig+0x240>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 030f 	and.w	r3, r3, #15
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d214      	bcs.n	8007dd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dae:	4b08      	ldr	r3, [pc, #32]	; (8007dd0 <HAL_RCC_ClockConfig+0x240>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f023 020f 	bic.w	r2, r3, #15
 8007db6:	4906      	ldr	r1, [pc, #24]	; (8007dd0 <HAL_RCC_ClockConfig+0x240>)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dbe:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <HAL_RCC_ClockConfig+0x240>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d005      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e086      	b.n	8007ede <HAL_RCC_ClockConfig+0x34e>
 8007dd0:	52002000 	.word	0x52002000
 8007dd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d010      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	4b3f      	ldr	r3, [pc, #252]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d208      	bcs.n	8007e06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007df4:	4b3c      	ldr	r3, [pc, #240]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	4939      	ldr	r1, [pc, #228]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0308 	and.w	r3, r3, #8
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d010      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	695a      	ldr	r2, [r3, #20]
 8007e16:	4b34      	ldr	r3, [pc, #208]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d208      	bcs.n	8007e34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e22:	4b31      	ldr	r3, [pc, #196]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	492e      	ldr	r1, [pc, #184]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0310 	and.w	r3, r3, #16
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d010      	beq.n	8007e62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	4b28      	ldr	r3, [pc, #160]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d208      	bcs.n	8007e62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e50:	4b25      	ldr	r3, [pc, #148]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	4922      	ldr	r1, [pc, #136]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0320 	and.w	r3, r3, #32
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d010      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69da      	ldr	r2, [r3, #28]
 8007e72:	4b1d      	ldr	r3, [pc, #116]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d208      	bcs.n	8007e90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	4917      	ldr	r1, [pc, #92]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007e90:	f000 f834 	bl	8007efc <HAL_RCC_GetSysClockFreq>
 8007e94:	4602      	mov	r2, r0
 8007e96:	4b14      	ldr	r3, [pc, #80]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	4912      	ldr	r1, [pc, #72]	; (8007eec <HAL_RCC_ClockConfig+0x35c>)
 8007ea2:	5ccb      	ldrb	r3, [r1, r3]
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8007eac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007eae:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <HAL_RCC_ClockConfig+0x358>)
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	4a0d      	ldr	r2, [pc, #52]	; (8007eec <HAL_RCC_ClockConfig+0x35c>)
 8007eb8:	5cd3      	ldrb	r3, [r2, r3]
 8007eba:	f003 031f 	and.w	r3, r3, #31
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec4:	4a0a      	ldr	r2, [pc, #40]	; (8007ef0 <HAL_RCC_ClockConfig+0x360>)
 8007ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ec8:	4a0a      	ldr	r2, [pc, #40]	; (8007ef4 <HAL_RCC_ClockConfig+0x364>)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007ece:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <HAL_RCC_ClockConfig+0x368>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fb fc84 	bl	80037e0 <HAL_InitTick>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	58024400 	.word	0x58024400
 8007eec:	0800f784 	.word	0x0800f784
 8007ef0:	24000014 	.word	0x24000014
 8007ef4:	24000010 	.word	0x24000010
 8007ef8:	2400002c 	.word	0x2400002c

08007efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b089      	sub	sp, #36	; 0x24
 8007f00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f02:	4bb3      	ldr	r3, [pc, #716]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f0a:	2b18      	cmp	r3, #24
 8007f0c:	f200 8155 	bhi.w	80081ba <HAL_RCC_GetSysClockFreq+0x2be>
 8007f10:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f16:	bf00      	nop
 8007f18:	08007f7d 	.word	0x08007f7d
 8007f1c:	080081bb 	.word	0x080081bb
 8007f20:	080081bb 	.word	0x080081bb
 8007f24:	080081bb 	.word	0x080081bb
 8007f28:	080081bb 	.word	0x080081bb
 8007f2c:	080081bb 	.word	0x080081bb
 8007f30:	080081bb 	.word	0x080081bb
 8007f34:	080081bb 	.word	0x080081bb
 8007f38:	08007fa3 	.word	0x08007fa3
 8007f3c:	080081bb 	.word	0x080081bb
 8007f40:	080081bb 	.word	0x080081bb
 8007f44:	080081bb 	.word	0x080081bb
 8007f48:	080081bb 	.word	0x080081bb
 8007f4c:	080081bb 	.word	0x080081bb
 8007f50:	080081bb 	.word	0x080081bb
 8007f54:	080081bb 	.word	0x080081bb
 8007f58:	08007fa9 	.word	0x08007fa9
 8007f5c:	080081bb 	.word	0x080081bb
 8007f60:	080081bb 	.word	0x080081bb
 8007f64:	080081bb 	.word	0x080081bb
 8007f68:	080081bb 	.word	0x080081bb
 8007f6c:	080081bb 	.word	0x080081bb
 8007f70:	080081bb 	.word	0x080081bb
 8007f74:	080081bb 	.word	0x080081bb
 8007f78:	08007faf 	.word	0x08007faf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f7c:	4b94      	ldr	r3, [pc, #592]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d009      	beq.n	8007f9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f88:	4b91      	ldr	r3, [pc, #580]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	08db      	lsrs	r3, r3, #3
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	4a90      	ldr	r2, [pc, #576]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
 8007f98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007f9a:	e111      	b.n	80081c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007f9c:	4b8d      	ldr	r3, [pc, #564]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f9e:	61bb      	str	r3, [r7, #24]
      break;
 8007fa0:	e10e      	b.n	80081c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007fa2:	4b8d      	ldr	r3, [pc, #564]	; (80081d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007fa4:	61bb      	str	r3, [r7, #24]
      break;
 8007fa6:	e10b      	b.n	80081c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007fa8:	4b8c      	ldr	r3, [pc, #560]	; (80081dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007faa:	61bb      	str	r3, [r7, #24]
      break;
 8007fac:	e108      	b.n	80081c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fae:	4b88      	ldr	r3, [pc, #544]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007fb8:	4b85      	ldr	r3, [pc, #532]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbc:	091b      	lsrs	r3, r3, #4
 8007fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fc2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007fc4:	4b82      	ldr	r3, [pc, #520]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007fce:	4b80      	ldr	r3, [pc, #512]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd2:	08db      	lsrs	r3, r3, #3
 8007fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	fb02 f303 	mul.w	r3, r2, r3
 8007fde:	ee07 3a90 	vmov	s15, r3
 8007fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 80e1 	beq.w	80081b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	f000 8083 	beq.w	8008100 <HAL_RCC_GetSysClockFreq+0x204>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	f200 80a1 	bhi.w	8008144 <HAL_RCC_GetSysClockFreq+0x248>
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <HAL_RCC_GetSysClockFreq+0x114>
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d056      	beq.n	80080bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800800e:	e099      	b.n	8008144 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008010:	4b6f      	ldr	r3, [pc, #444]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b00      	cmp	r3, #0
 800801a:	d02d      	beq.n	8008078 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800801c:	4b6c      	ldr	r3, [pc, #432]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	08db      	lsrs	r3, r3, #3
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	4a6b      	ldr	r2, [pc, #428]	; (80081d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
 800802c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	ee07 3a90 	vmov	s15, r3
 8008034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008046:	4b62      	ldr	r3, [pc, #392]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804e:	ee07 3a90 	vmov	s15, r3
 8008052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008056:	ed97 6a02 	vldr	s12, [r7, #8]
 800805a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80081e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800805e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800806e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008072:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008076:	e087      	b.n	8008188 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008082:	eddf 6a58 	vldr	s13, [pc, #352]	; 80081e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800808a:	4b51      	ldr	r3, [pc, #324]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800808c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008092:	ee07 3a90 	vmov	s15, r3
 8008096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800809a:	ed97 6a02 	vldr	s12, [r7, #8]
 800809e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80081e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080ba:	e065      	b.n	8008188 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80081e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80080ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ce:	4b40      	ldr	r3, [pc, #256]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080de:	ed97 6a02 	vldr	s12, [r7, #8]
 80080e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80081e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080fe:	e043      	b.n	8008188 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80081ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800810e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008112:	4b2f      	ldr	r3, [pc, #188]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008122:	ed97 6a02 	vldr	s12, [r7, #8]
 8008126:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80081e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800812a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008142:	e021      	b.n	8008188 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80081e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008156:	4b1e      	ldr	r3, [pc, #120]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008166:	ed97 6a02 	vldr	s12, [r7, #8]
 800816a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80081e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800816e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008186:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008188:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	0a5b      	lsrs	r3, r3, #9
 800818e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008192:	3301      	adds	r3, #1
 8008194:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	ee07 3a90 	vmov	s15, r3
 800819c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80081a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ac:	ee17 3a90 	vmov	r3, s15
 80081b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80081b2:	e005      	b.n	80081c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	61bb      	str	r3, [r7, #24]
      break;
 80081b8:	e002      	b.n	80081c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80081ba:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081bc:	61bb      	str	r3, [r7, #24]
      break;
 80081be:	bf00      	nop
  }

  return sysclockfreq;
 80081c0:	69bb      	ldr	r3, [r7, #24]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3724      	adds	r7, #36	; 0x24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	58024400 	.word	0x58024400
 80081d4:	03d09000 	.word	0x03d09000
 80081d8:	003d0900 	.word	0x003d0900
 80081dc:	017d7840 	.word	0x017d7840
 80081e0:	46000000 	.word	0x46000000
 80081e4:	4c742400 	.word	0x4c742400
 80081e8:	4a742400 	.word	0x4a742400
 80081ec:	4bbebc20 	.word	0x4bbebc20

080081f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80081f6:	f7ff fe81 	bl	8007efc <HAL_RCC_GetSysClockFreq>
 80081fa:	4602      	mov	r2, r0
 80081fc:	4b10      	ldr	r3, [pc, #64]	; (8008240 <HAL_RCC_GetHCLKFreq+0x50>)
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	0a1b      	lsrs	r3, r3, #8
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	490f      	ldr	r1, [pc, #60]	; (8008244 <HAL_RCC_GetHCLKFreq+0x54>)
 8008208:	5ccb      	ldrb	r3, [r1, r3]
 800820a:	f003 031f 	and.w	r3, r3, #31
 800820e:	fa22 f303 	lsr.w	r3, r2, r3
 8008212:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008214:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <HAL_RCC_GetHCLKFreq+0x50>)
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	4a09      	ldr	r2, [pc, #36]	; (8008244 <HAL_RCC_GetHCLKFreq+0x54>)
 800821e:	5cd3      	ldrb	r3, [r2, r3]
 8008220:	f003 031f 	and.w	r3, r3, #31
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	fa22 f303 	lsr.w	r3, r2, r3
 800822a:	4a07      	ldr	r2, [pc, #28]	; (8008248 <HAL_RCC_GetHCLKFreq+0x58>)
 800822c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800822e:	4a07      	ldr	r2, [pc, #28]	; (800824c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008234:	4b04      	ldr	r3, [pc, #16]	; (8008248 <HAL_RCC_GetHCLKFreq+0x58>)
 8008236:	681b      	ldr	r3, [r3, #0]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	58024400 	.word	0x58024400
 8008244:	0800f784 	.word	0x0800f784
 8008248:	24000014 	.word	0x24000014
 800824c:	24000010 	.word	0x24000010

08008250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008254:	f7ff ffcc 	bl	80081f0 <HAL_RCC_GetHCLKFreq>
 8008258:	4602      	mov	r2, r0
 800825a:	4b06      	ldr	r3, [pc, #24]	; (8008274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	091b      	lsrs	r3, r3, #4
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	4904      	ldr	r1, [pc, #16]	; (8008278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008266:	5ccb      	ldrb	r3, [r1, r3]
 8008268:	f003 031f 	and.w	r3, r3, #31
 800826c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008270:	4618      	mov	r0, r3
 8008272:	bd80      	pop	{r7, pc}
 8008274:	58024400 	.word	0x58024400
 8008278:	0800f784 	.word	0x0800f784

0800827c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008280:	f7ff ffb6 	bl	80081f0 <HAL_RCC_GetHCLKFreq>
 8008284:	4602      	mov	r2, r0
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	4904      	ldr	r1, [pc, #16]	; (80082a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008292:	5ccb      	ldrb	r3, [r1, r3]
 8008294:	f003 031f 	and.w	r3, r3, #31
 8008298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800829c:	4618      	mov	r0, r3
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	58024400 	.word	0x58024400
 80082a4:	0800f784 	.word	0x0800f784

080082a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082ac:	b0ca      	sub	sp, #296	; 0x128
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082b4:	2300      	movs	r3, #0
 80082b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082ba:	2300      	movs	r3, #0
 80082bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80082cc:	2500      	movs	r5, #0
 80082ce:	ea54 0305 	orrs.w	r3, r4, r5
 80082d2:	d049      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80082d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082de:	d02f      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80082e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082e4:	d828      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80082e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082ea:	d01a      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80082ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082f0:	d822      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80082f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082fa:	d007      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80082fc:	e01c      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082fe:	4bb8      	ldr	r3, [pc, #736]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	4ab7      	ldr	r2, [pc, #732]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008308:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800830a:	e01a      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800830c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008310:	3308      	adds	r3, #8
 8008312:	2102      	movs	r1, #2
 8008314:	4618      	mov	r0, r3
 8008316:	f001 fc8f 	bl	8009c38 <RCCEx_PLL2_Config>
 800831a:	4603      	mov	r3, r0
 800831c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008320:	e00f      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008326:	3328      	adds	r3, #40	; 0x28
 8008328:	2102      	movs	r1, #2
 800832a:	4618      	mov	r0, r3
 800832c:	f001 fd36 	bl	8009d9c <RCCEx_PLL3_Config>
 8008330:	4603      	mov	r3, r0
 8008332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008336:	e004      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800833e:	e000      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800834a:	4ba5      	ldr	r3, [pc, #660]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800834c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800834e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008358:	4aa1      	ldr	r2, [pc, #644]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800835a:	430b      	orrs	r3, r1
 800835c:	6513      	str	r3, [r2, #80]	; 0x50
 800835e:	e003      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008360:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008364:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008374:	f04f 0900 	mov.w	r9, #0
 8008378:	ea58 0309 	orrs.w	r3, r8, r9
 800837c:	d047      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800837e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008384:	2b04      	cmp	r3, #4
 8008386:	d82a      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008388:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800838a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838e:	bf00      	nop
 8008390:	080083a5 	.word	0x080083a5
 8008394:	080083b3 	.word	0x080083b3
 8008398:	080083c9 	.word	0x080083c9
 800839c:	080083e7 	.word	0x080083e7
 80083a0:	080083e7 	.word	0x080083e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a4:	4b8e      	ldr	r3, [pc, #568]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	4a8d      	ldr	r2, [pc, #564]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083b0:	e01a      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b6:	3308      	adds	r3, #8
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 fc3c 	bl	8009c38 <RCCEx_PLL2_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083c6:	e00f      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083cc:	3328      	adds	r3, #40	; 0x28
 80083ce:	2100      	movs	r1, #0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fce3 	bl	8009d9c <RCCEx_PLL3_Config>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083dc:	e004      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083e4:	e000      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80083e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10a      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083f0:	4b7b      	ldr	r3, [pc, #492]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f4:	f023 0107 	bic.w	r1, r3, #7
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fe:	4a78      	ldr	r2, [pc, #480]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008400:	430b      	orrs	r3, r1
 8008402:	6513      	str	r3, [r2, #80]	; 0x50
 8008404:	e003      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800840a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800840e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800841a:	f04f 0b00 	mov.w	fp, #0
 800841e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008422:	d04c      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842e:	d030      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008434:	d829      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008436:	2bc0      	cmp	r3, #192	; 0xc0
 8008438:	d02d      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800843a:	2bc0      	cmp	r3, #192	; 0xc0
 800843c:	d825      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800843e:	2b80      	cmp	r3, #128	; 0x80
 8008440:	d018      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008442:	2b80      	cmp	r3, #128	; 0x80
 8008444:	d821      	bhi.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800844a:	2b40      	cmp	r3, #64	; 0x40
 800844c:	d007      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800844e:	e01c      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008450:	4b63      	ldr	r3, [pc, #396]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	4a62      	ldr	r2, [pc, #392]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800845a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800845c:	e01c      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800845e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008462:	3308      	adds	r3, #8
 8008464:	2100      	movs	r1, #0
 8008466:	4618      	mov	r0, r3
 8008468:	f001 fbe6 	bl	8009c38 <RCCEx_PLL2_Config>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008472:	e011      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008478:	3328      	adds	r3, #40	; 0x28
 800847a:	2100      	movs	r1, #0
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fc8d 	bl	8009d9c <RCCEx_PLL3_Config>
 8008482:	4603      	mov	r3, r0
 8008484:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008488:	e006      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008490:	e002      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008492:	bf00      	nop
 8008494:	e000      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10a      	bne.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80084a0:	4b4f      	ldr	r3, [pc, #316]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80084a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ae:	4a4c      	ldr	r2, [pc, #304]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084b0:	430b      	orrs	r3, r1
 80084b2:	6513      	str	r3, [r2, #80]	; 0x50
 80084b4:	e003      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80084be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80084ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80084ce:	2300      	movs	r3, #0
 80084d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80084d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80084d8:	460b      	mov	r3, r1
 80084da:	4313      	orrs	r3, r2
 80084dc:	d053      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80084de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80084e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084ea:	d035      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80084ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084f0:	d82e      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80084f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084f6:	d031      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80084f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084fc:	d828      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80084fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008502:	d01a      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008508:	d822      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800850e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008512:	d007      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008514:	e01c      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008516:	4b32      	ldr	r3, [pc, #200]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	4a31      	ldr	r2, [pc, #196]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800851c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008520:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008522:	e01c      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008528:	3308      	adds	r3, #8
 800852a:	2100      	movs	r1, #0
 800852c:	4618      	mov	r0, r3
 800852e:	f001 fb83 	bl	8009c38 <RCCEx_PLL2_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008538:	e011      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800853a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853e:	3328      	adds	r3, #40	; 0x28
 8008540:	2100      	movs	r1, #0
 8008542:	4618      	mov	r0, r3
 8008544:	f001 fc2a 	bl	8009d9c <RCCEx_PLL3_Config>
 8008548:	4603      	mov	r3, r0
 800854a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800854e:	e006      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008556:	e002      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008558:	bf00      	nop
 800855a:	e000      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800855c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800855e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10b      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008566:	4b1e      	ldr	r3, [pc, #120]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800856e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008576:	4a1a      	ldr	r2, [pc, #104]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008578:	430b      	orrs	r3, r1
 800857a:	6593      	str	r3, [r2, #88]	; 0x58
 800857c:	e003      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008592:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008596:	2300      	movs	r3, #0
 8008598:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800859c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80085a0:	460b      	mov	r3, r1
 80085a2:	4313      	orrs	r3, r2
 80085a4:	d056      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085b2:	d038      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80085b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085b8:	d831      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80085ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085be:	d034      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80085c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085c4:	d82b      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80085c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085ca:	d01d      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80085cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085d0:	d825      	bhi.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d006      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80085d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085da:	d00a      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80085dc:	e01f      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80085de:	bf00      	nop
 80085e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085e4:	4ba2      	ldr	r3, [pc, #648]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	4aa1      	ldr	r2, [pc, #644]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085f0:	e01c      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f6:	3308      	adds	r3, #8
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 fb1c 	bl	8009c38 <RCCEx_PLL2_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008606:	e011      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860c:	3328      	adds	r3, #40	; 0x28
 800860e:	2100      	movs	r1, #0
 8008610:	4618      	mov	r0, r3
 8008612:	f001 fbc3 	bl	8009d9c <RCCEx_PLL3_Config>
 8008616:	4603      	mov	r3, r0
 8008618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800861c:	e006      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008624:	e002      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008626:	bf00      	nop
 8008628:	e000      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800862a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10b      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008634:	4b8e      	ldr	r3, [pc, #568]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008638:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800863c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008640:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008644:	4a8a      	ldr	r2, [pc, #552]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008646:	430b      	orrs	r3, r1
 8008648:	6593      	str	r3, [r2, #88]	; 0x58
 800864a:	e003      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008650:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008660:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008664:	2300      	movs	r3, #0
 8008666:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800866a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800866e:	460b      	mov	r3, r1
 8008670:	4313      	orrs	r3, r2
 8008672:	d03a      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867a:	2b30      	cmp	r3, #48	; 0x30
 800867c:	d01f      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800867e:	2b30      	cmp	r3, #48	; 0x30
 8008680:	d819      	bhi.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008682:	2b20      	cmp	r3, #32
 8008684:	d00c      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008686:	2b20      	cmp	r3, #32
 8008688:	d815      	bhi.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d019      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800868e:	2b10      	cmp	r3, #16
 8008690:	d111      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008692:	4b77      	ldr	r3, [pc, #476]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	4a76      	ldr	r2, [pc, #472]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800869c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800869e:	e011      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a4:	3308      	adds	r3, #8
 80086a6:	2102      	movs	r1, #2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 fac5 	bl	8009c38 <RCCEx_PLL2_Config>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80086b4:	e006      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086bc:	e002      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80086be:	bf00      	nop
 80086c0:	e000      	b.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80086c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80086cc:	4b68      	ldr	r3, [pc, #416]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80086d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086da:	4a65      	ldr	r2, [pc, #404]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086dc:	430b      	orrs	r3, r1
 80086de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086e0:	e003      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80086ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80086f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80086fa:	2300      	movs	r3, #0
 80086fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008700:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008704:	460b      	mov	r3, r1
 8008706:	4313      	orrs	r3, r2
 8008708:	d051      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800870e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008714:	d035      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800871a:	d82e      	bhi.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800871c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008720:	d031      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008726:	d828      	bhi.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800872c:	d01a      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800872e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008732:	d822      	bhi.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873c:	d007      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800873e:	e01c      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008740:	4b4b      	ldr	r3, [pc, #300]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	4a4a      	ldr	r2, [pc, #296]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800874c:	e01c      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800874e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008752:	3308      	adds	r3, #8
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f001 fa6e 	bl	8009c38 <RCCEx_PLL2_Config>
 800875c:	4603      	mov	r3, r0
 800875e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008762:	e011      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008768:	3328      	adds	r3, #40	; 0x28
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f001 fb15 	bl	8009d9c <RCCEx_PLL3_Config>
 8008772:	4603      	mov	r3, r0
 8008774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008778:	e006      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008780:	e002      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008782:	bf00      	nop
 8008784:	e000      	b.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008790:	4b37      	ldr	r3, [pc, #220]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008794:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879e:	4a34      	ldr	r2, [pc, #208]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087a0:	430b      	orrs	r3, r1
 80087a2:	6513      	str	r3, [r2, #80]	; 0x50
 80087a4:	e003      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80087ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80087ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087be:	2300      	movs	r3, #0
 80087c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80087c8:	460b      	mov	r3, r1
 80087ca:	4313      	orrs	r3, r2
 80087cc:	d056      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80087ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087d8:	d033      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80087da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087de:	d82c      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80087e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087e4:	d02f      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80087e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087ea:	d826      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80087ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087f0:	d02b      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80087f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087f6:	d820      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80087f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087fc:	d012      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80087fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008802:	d81a      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d022      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800880c:	d115      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008812:	3308      	adds	r3, #8
 8008814:	2101      	movs	r1, #1
 8008816:	4618      	mov	r0, r3
 8008818:	f001 fa0e 	bl	8009c38 <RCCEx_PLL2_Config>
 800881c:	4603      	mov	r3, r0
 800881e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008822:	e015      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008828:	3328      	adds	r3, #40	; 0x28
 800882a:	2101      	movs	r1, #1
 800882c:	4618      	mov	r0, r3
 800882e:	f001 fab5 	bl	8009d9c <RCCEx_PLL3_Config>
 8008832:	4603      	mov	r3, r0
 8008834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008838:	e00a      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008840:	e006      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008842:	bf00      	nop
 8008844:	e004      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008846:	bf00      	nop
 8008848:	e002      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800884a:	bf00      	nop
 800884c:	e000      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800884e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10d      	bne.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008858:	4b05      	ldr	r3, [pc, #20]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800885a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008866:	4a02      	ldr	r2, [pc, #8]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008868:	430b      	orrs	r3, r1
 800886a:	6513      	str	r3, [r2, #80]	; 0x50
 800886c:	e006      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800886e:	bf00      	nop
 8008870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800887c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800888c:	2300      	movs	r3, #0
 800888e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008892:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008896:	460b      	mov	r3, r1
 8008898:	4313      	orrs	r3, r2
 800889a:	d055      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800889c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088a8:	d033      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80088aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088ae:	d82c      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80088b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b4:	d02f      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ba:	d826      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80088bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088c0:	d02b      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80088c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088c6:	d820      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80088c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088cc:	d012      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80088ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d2:	d81a      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d022      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80088d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088dc:	d115      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e2:	3308      	adds	r3, #8
 80088e4:	2101      	movs	r1, #1
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 f9a6 	bl	8009c38 <RCCEx_PLL2_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80088f2:	e015      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f8:	3328      	adds	r3, #40	; 0x28
 80088fa:	2101      	movs	r1, #1
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 fa4d 	bl	8009d9c <RCCEx_PLL3_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008908:	e00a      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008910:	e006      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008912:	bf00      	nop
 8008914:	e004      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008916:	bf00      	nop
 8008918:	e002      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800891a:	bf00      	nop
 800891c:	e000      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800891e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10b      	bne.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008928:	4ba3      	ldr	r3, [pc, #652]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800892a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800892c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008938:	4a9f      	ldr	r2, [pc, #636]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800893a:	430b      	orrs	r3, r1
 800893c:	6593      	str	r3, [r2, #88]	; 0x58
 800893e:	e003      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008958:	2300      	movs	r3, #0
 800895a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800895e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008962:	460b      	mov	r3, r1
 8008964:	4313      	orrs	r3, r2
 8008966:	d037      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008972:	d00e      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008978:	d816      	bhi.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d018      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800897e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008982:	d111      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008984:	4b8c      	ldr	r3, [pc, #560]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4a8b      	ldr	r2, [pc, #556]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800898a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800898e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008990:	e00f      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008996:	3308      	adds	r3, #8
 8008998:	2101      	movs	r1, #1
 800899a:	4618      	mov	r0, r3
 800899c:	f001 f94c 	bl	8009c38 <RCCEx_PLL2_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80089a6:	e004      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089ae:	e000      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80089b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10a      	bne.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089ba:	4b7f      	ldr	r3, [pc, #508]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c8:	4a7b      	ldr	r2, [pc, #492]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089ca:	430b      	orrs	r3, r1
 80089cc:	6513      	str	r3, [r2, #80]	; 0x50
 80089ce:	e003      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80089d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80089e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089e8:	2300      	movs	r3, #0
 80089ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80089ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4313      	orrs	r3, r2
 80089f6:	d039      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80089f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d81c      	bhi.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008a02:	a201      	add	r2, pc, #4	; (adr r2, 8008a08 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a08:	08008a45 	.word	0x08008a45
 8008a0c:	08008a19 	.word	0x08008a19
 8008a10:	08008a27 	.word	0x08008a27
 8008a14:	08008a45 	.word	0x08008a45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a18:	4b67      	ldr	r3, [pc, #412]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1c:	4a66      	ldr	r2, [pc, #408]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008a24:	e00f      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	2102      	movs	r1, #2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 f902 	bl	8009c38 <RCCEx_PLL2_Config>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008a3a:	e004      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a42:	e000      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10a      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008a4e:	4b5a      	ldr	r3, [pc, #360]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a52:	f023 0103 	bic.w	r1, r3, #3
 8008a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a5c:	4a56      	ldr	r2, [pc, #344]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a5e:	430b      	orrs	r3, r1
 8008a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a62:	e003      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008a78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008a86:	460b      	mov	r3, r1
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f000 809f 	beq.w	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a8e:	4b4b      	ldr	r3, [pc, #300]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a4a      	ldr	r2, [pc, #296]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a9a:	f7fa feeb 	bl	8003874 <HAL_GetTick>
 8008a9e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008aa2:	e00b      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008aa4:	f7fa fee6 	bl	8003874 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b64      	cmp	r3, #100	; 0x64
 8008ab2:	d903      	bls.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008aba:	e005      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008abc:	4b3f      	ldr	r3, [pc, #252]	; (8008bbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0ed      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d179      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008ad0:	4b39      	ldr	r3, [pc, #228]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ad2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008adc:	4053      	eors	r3, r2
 8008ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d015      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ae6:	4b34      	ldr	r3, [pc, #208]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008af2:	4b31      	ldr	r3, [pc, #196]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af6:	4a30      	ldr	r2, [pc, #192]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008afc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008afe:	4b2e      	ldr	r3, [pc, #184]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b02:	4a2d      	ldr	r2, [pc, #180]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b0a:	4a2b      	ldr	r2, [pc, #172]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1e:	d118      	bne.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b20:	f7fa fea8 	bl	8003874 <HAL_GetTick>
 8008b24:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b28:	e00d      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b2a:	f7fa fea3 	bl	8003874 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b34:	1ad2      	subs	r2, r2, r3
 8008b36:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d903      	bls.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008b44:	e005      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b46:	4b1c      	ldr	r3, [pc, #112]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0eb      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d129      	bne.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b6a:	d10e      	bne.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008b6c:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b7c:	091a      	lsrs	r2, r3, #4
 8008b7e:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008b80:	4013      	ands	r3, r2
 8008b82:	4a0d      	ldr	r2, [pc, #52]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b84:	430b      	orrs	r3, r1
 8008b86:	6113      	str	r3, [r2, #16]
 8008b88:	e005      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	4a0a      	ldr	r2, [pc, #40]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b94:	6113      	str	r3, [r2, #16]
 8008b96:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ba6:	4a04      	ldr	r2, [pc, #16]	; (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	6713      	str	r3, [r2, #112]	; 0x70
 8008bac:	e00e      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008bb6:	e009      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	58024800 	.word	0x58024800
 8008bc0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f002 0301 	and.w	r3, r2, #1
 8008bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008be2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4313      	orrs	r3, r2
 8008bea:	f000 8089 	beq.w	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bf4:	2b28      	cmp	r3, #40	; 0x28
 8008bf6:	d86b      	bhi.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008cd9 	.word	0x08008cd9
 8008c04:	08008cd1 	.word	0x08008cd1
 8008c08:	08008cd1 	.word	0x08008cd1
 8008c0c:	08008cd1 	.word	0x08008cd1
 8008c10:	08008cd1 	.word	0x08008cd1
 8008c14:	08008cd1 	.word	0x08008cd1
 8008c18:	08008cd1 	.word	0x08008cd1
 8008c1c:	08008cd1 	.word	0x08008cd1
 8008c20:	08008ca5 	.word	0x08008ca5
 8008c24:	08008cd1 	.word	0x08008cd1
 8008c28:	08008cd1 	.word	0x08008cd1
 8008c2c:	08008cd1 	.word	0x08008cd1
 8008c30:	08008cd1 	.word	0x08008cd1
 8008c34:	08008cd1 	.word	0x08008cd1
 8008c38:	08008cd1 	.word	0x08008cd1
 8008c3c:	08008cd1 	.word	0x08008cd1
 8008c40:	08008cbb 	.word	0x08008cbb
 8008c44:	08008cd1 	.word	0x08008cd1
 8008c48:	08008cd1 	.word	0x08008cd1
 8008c4c:	08008cd1 	.word	0x08008cd1
 8008c50:	08008cd1 	.word	0x08008cd1
 8008c54:	08008cd1 	.word	0x08008cd1
 8008c58:	08008cd1 	.word	0x08008cd1
 8008c5c:	08008cd1 	.word	0x08008cd1
 8008c60:	08008cd9 	.word	0x08008cd9
 8008c64:	08008cd1 	.word	0x08008cd1
 8008c68:	08008cd1 	.word	0x08008cd1
 8008c6c:	08008cd1 	.word	0x08008cd1
 8008c70:	08008cd1 	.word	0x08008cd1
 8008c74:	08008cd1 	.word	0x08008cd1
 8008c78:	08008cd1 	.word	0x08008cd1
 8008c7c:	08008cd1 	.word	0x08008cd1
 8008c80:	08008cd9 	.word	0x08008cd9
 8008c84:	08008cd1 	.word	0x08008cd1
 8008c88:	08008cd1 	.word	0x08008cd1
 8008c8c:	08008cd1 	.word	0x08008cd1
 8008c90:	08008cd1 	.word	0x08008cd1
 8008c94:	08008cd1 	.word	0x08008cd1
 8008c98:	08008cd1 	.word	0x08008cd1
 8008c9c:	08008cd1 	.word	0x08008cd1
 8008ca0:	08008cd9 	.word	0x08008cd9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca8:	3308      	adds	r3, #8
 8008caa:	2101      	movs	r1, #1
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 ffc3 	bl	8009c38 <RCCEx_PLL2_Config>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008cb8:	e00f      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cbe:	3328      	adds	r3, #40	; 0x28
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 f86a 	bl	8009d9c <RCCEx_PLL3_Config>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008cce:	e004      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cd6:	e000      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ce2:	4bbf      	ldr	r3, [pc, #764]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cf0:	4abb      	ldr	r2, [pc, #748]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cf2:	430b      	orrs	r3, r1
 8008cf4:	6553      	str	r3, [r2, #84]	; 0x54
 8008cf6:	e003      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	f002 0302 	and.w	r3, r2, #2
 8008d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d10:	2300      	movs	r3, #0
 8008d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008d16:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	d041      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d26:	2b05      	cmp	r3, #5
 8008d28:	d824      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d7d 	.word	0x08008d7d
 8008d34:	08008d49 	.word	0x08008d49
 8008d38:	08008d5f 	.word	0x08008d5f
 8008d3c:	08008d7d 	.word	0x08008d7d
 8008d40:	08008d7d 	.word	0x08008d7d
 8008d44:	08008d7d 	.word	0x08008d7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	2101      	movs	r1, #1
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 ff71 	bl	8009c38 <RCCEx_PLL2_Config>
 8008d56:	4603      	mov	r3, r0
 8008d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008d5c:	e00f      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d62:	3328      	adds	r3, #40	; 0x28
 8008d64:	2101      	movs	r1, #1
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 f818 	bl	8009d9c <RCCEx_PLL3_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008d72:	e004      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d7a:	e000      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d86:	4b96      	ldr	r3, [pc, #600]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8a:	f023 0107 	bic.w	r1, r3, #7
 8008d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d94:	4a92      	ldr	r2, [pc, #584]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d96:	430b      	orrs	r3, r1
 8008d98:	6553      	str	r3, [r2, #84]	; 0x54
 8008d9a:	e003      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008da0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	f002 0304 	and.w	r3, r2, #4
 8008db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008db4:	2300      	movs	r3, #0
 8008db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	d044      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dcc:	2b05      	cmp	r3, #5
 8008dce:	d825      	bhi.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008dd0:	a201      	add	r2, pc, #4	; (adr r2, 8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd6:	bf00      	nop
 8008dd8:	08008e25 	.word	0x08008e25
 8008ddc:	08008df1 	.word	0x08008df1
 8008de0:	08008e07 	.word	0x08008e07
 8008de4:	08008e25 	.word	0x08008e25
 8008de8:	08008e25 	.word	0x08008e25
 8008dec:	08008e25 	.word	0x08008e25
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df4:	3308      	adds	r3, #8
 8008df6:	2101      	movs	r1, #1
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 ff1d 	bl	8009c38 <RCCEx_PLL2_Config>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008e04:	e00f      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0a:	3328      	adds	r3, #40	; 0x28
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 ffc4 	bl	8009d9c <RCCEx_PLL3_Config>
 8008e14:	4603      	mov	r3, r0
 8008e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008e1a:	e004      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e22:	e000      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10b      	bne.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e2e:	4b6c      	ldr	r3, [pc, #432]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e32:	f023 0107 	bic.w	r1, r3, #7
 8008e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e3e:	4a68      	ldr	r2, [pc, #416]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e40:	430b      	orrs	r3, r1
 8008e42:	6593      	str	r3, [r2, #88]	; 0x58
 8008e44:	e003      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f002 0320 	and.w	r3, r2, #32
 8008e5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	d055      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e7a:	d033      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e80:	d82c      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e86:	d02f      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8c:	d826      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e92:	d02b      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e98:	d820      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e9e:	d012      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea4:	d81a      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d022      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eae:	d115      	bne.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 febd 	bl	8009c38 <RCCEx_PLL2_Config>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ec4:	e015      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eca:	3328      	adds	r3, #40	; 0x28
 8008ecc:	2102      	movs	r1, #2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 ff64 	bl	8009d9c <RCCEx_PLL3_Config>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008eda:	e00a      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ee2:	e006      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ee4:	bf00      	nop
 8008ee6:	e004      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ee8:	bf00      	nop
 8008eea:	e002      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008eec:	bf00      	nop
 8008eee:	e000      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10b      	bne.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008efa:	4b39      	ldr	r3, [pc, #228]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f0a:	4a35      	ldr	r2, [pc, #212]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	6553      	str	r3, [r2, #84]	; 0x54
 8008f10:	e003      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f30:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4313      	orrs	r3, r2
 8008f38:	d058      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f46:	d033      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008f48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f4c:	d82c      	bhi.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f52:	d02f      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f58:	d826      	bhi.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f5e:	d02b      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008f60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f64:	d820      	bhi.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f6a:	d012      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f70:	d81a      	bhi.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d022      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f7a:	d115      	bne.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f80:	3308      	adds	r3, #8
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fe57 	bl	8009c38 <RCCEx_PLL2_Config>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008f90:	e015      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f96:	3328      	adds	r3, #40	; 0x28
 8008f98:	2102      	movs	r1, #2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fefe 	bl	8009d9c <RCCEx_PLL3_Config>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008fa6:	e00a      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fae:	e006      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008fb0:	bf00      	nop
 8008fb2:	e004      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008fb4:	bf00      	nop
 8008fb6:	e002      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008fb8:	bf00      	nop
 8008fba:	e000      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10e      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008fc6:	4b06      	ldr	r3, [pc, #24]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fd6:	4a02      	ldr	r2, [pc, #8]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fd8:	430b      	orrs	r3, r1
 8008fda:	6593      	str	r3, [r2, #88]	; 0x58
 8008fdc:	e006      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008fde:	bf00      	nop
 8008fe0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fe8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009002:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009006:	460b      	mov	r3, r1
 8009008:	4313      	orrs	r3, r2
 800900a:	d055      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800900c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009010:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009014:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009018:	d033      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800901a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800901e:	d82c      	bhi.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009024:	d02f      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800902a:	d826      	bhi.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800902c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009030:	d02b      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009032:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009036:	d820      	bhi.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800903c:	d012      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800903e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009042:	d81a      	bhi.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d022      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800904c:	d115      	bne.n	800907a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800904e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009052:	3308      	adds	r3, #8
 8009054:	2100      	movs	r1, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fdee 	bl	8009c38 <RCCEx_PLL2_Config>
 800905c:	4603      	mov	r3, r0
 800905e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009062:	e015      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009068:	3328      	adds	r3, #40	; 0x28
 800906a:	2102      	movs	r1, #2
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fe95 	bl	8009d9c <RCCEx_PLL3_Config>
 8009072:	4603      	mov	r3, r0
 8009074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009078:	e00a      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009080:	e006      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009082:	bf00      	nop
 8009084:	e004      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009086:	bf00      	nop
 8009088:	e002      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800908a:	bf00      	nop
 800908c:	e000      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800908e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10b      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009098:	4ba1      	ldr	r3, [pc, #644]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800909a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80090a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090a8:	4a9d      	ldr	r2, [pc, #628]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090aa:	430b      	orrs	r3, r1
 80090ac:	6593      	str	r3, [r2, #88]	; 0x58
 80090ae:	e003      	b.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80090b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	f002 0308 	and.w	r3, r2, #8
 80090c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090c8:	2300      	movs	r3, #0
 80090ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80090d2:	460b      	mov	r3, r1
 80090d4:	4313      	orrs	r3, r2
 80090d6:	d01e      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80090d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e4:	d10c      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ea:	3328      	adds	r3, #40	; 0x28
 80090ec:	2102      	movs	r1, #2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fe54 	bl	8009d9c <RCCEx_PLL3_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009100:	4b87      	ldr	r3, [pc, #540]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009104:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009110:	4a83      	ldr	r2, [pc, #524]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009112:	430b      	orrs	r3, r1
 8009114:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f002 0310 	and.w	r3, r2, #16
 8009122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009126:	2300      	movs	r3, #0
 8009128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800912c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009130:	460b      	mov	r3, r1
 8009132:	4313      	orrs	r3, r2
 8009134:	d01e      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800913e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009142:	d10c      	bne.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009148:	3328      	adds	r3, #40	; 0x28
 800914a:	2102      	movs	r1, #2
 800914c:	4618      	mov	r0, r3
 800914e:	f000 fe25 	bl	8009d9c <RCCEx_PLL3_Config>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800915e:	4b70      	ldr	r3, [pc, #448]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009162:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800916a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800916e:	4a6c      	ldr	r2, [pc, #432]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009170:	430b      	orrs	r3, r1
 8009172:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009184:	2300      	movs	r3, #0
 8009186:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800918a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800918e:	460b      	mov	r3, r1
 8009190:	4313      	orrs	r3, r2
 8009192:	d03e      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009198:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800919c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091a0:	d022      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80091a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091a6:	d81b      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80091ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b0:	d00b      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80091b2:	e015      	b.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b8:	3308      	adds	r3, #8
 80091ba:	2100      	movs	r1, #0
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 fd3b 	bl	8009c38 <RCCEx_PLL2_Config>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80091c8:	e00f      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ce:	3328      	adds	r3, #40	; 0x28
 80091d0:	2102      	movs	r1, #2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 fde2 	bl	8009d9c <RCCEx_PLL3_Config>
 80091d8:	4603      	mov	r3, r0
 80091da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80091de:	e004      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091e6:	e000      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80091e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10b      	bne.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80091f2:	4b4b      	ldr	r3, [pc, #300]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80091fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009202:	4a47      	ldr	r2, [pc, #284]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009204:	430b      	orrs	r3, r1
 8009206:	6593      	str	r3, [r2, #88]	; 0x58
 8009208:	e003      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800920e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800921e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009220:	2300      	movs	r3, #0
 8009222:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009224:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009228:	460b      	mov	r3, r1
 800922a:	4313      	orrs	r3, r2
 800922c:	d03b      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800922e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009236:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800923a:	d01f      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800923c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009240:	d818      	bhi.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009246:	d003      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800924c:	d007      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800924e:	e011      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009250:	4b33      	ldr	r3, [pc, #204]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	4a32      	ldr	r2, [pc, #200]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800925a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800925c:	e00f      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800925e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009262:	3328      	adds	r3, #40	; 0x28
 8009264:	2101      	movs	r1, #1
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fd98 	bl	8009d9c <RCCEx_PLL3_Config>
 800926c:	4603      	mov	r3, r0
 800926e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009272:	e004      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800927a:	e000      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800927c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800927e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10b      	bne.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009286:	4b26      	ldr	r3, [pc, #152]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800928e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009296:	4a22      	ldr	r2, [pc, #136]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009298:	430b      	orrs	r3, r1
 800929a:	6553      	str	r3, [r2, #84]	; 0x54
 800929c:	e003      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800929e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80092a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80092b2:	673b      	str	r3, [r7, #112]	; 0x70
 80092b4:	2300      	movs	r3, #0
 80092b6:	677b      	str	r3, [r7, #116]	; 0x74
 80092b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80092bc:	460b      	mov	r3, r1
 80092be:	4313      	orrs	r3, r2
 80092c0:	d034      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80092c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80092cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092d0:	d007      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80092d2:	e011      	b.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092d4:	4b12      	ldr	r3, [pc, #72]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	4a11      	ldr	r2, [pc, #68]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80092e0:	e00e      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e6:	3308      	adds	r3, #8
 80092e8:	2102      	movs	r1, #2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fca4 	bl	8009c38 <RCCEx_PLL2_Config>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80092f6:	e003      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009300:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10d      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800930a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009316:	4a02      	ldr	r2, [pc, #8]	; (8009320 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009318:	430b      	orrs	r3, r1
 800931a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800931c:	e006      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800931e:	bf00      	nop
 8009320:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009328:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800932c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009338:	66bb      	str	r3, [r7, #104]	; 0x68
 800933a:	2300      	movs	r3, #0
 800933c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800933e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009342:	460b      	mov	r3, r1
 8009344:	4313      	orrs	r3, r2
 8009346:	d00c      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934c:	3328      	adds	r3, #40	; 0x28
 800934e:	2102      	movs	r1, #2
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fd23 	bl	8009d9c <RCCEx_PLL3_Config>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800936e:	663b      	str	r3, [r7, #96]	; 0x60
 8009370:	2300      	movs	r3, #0
 8009372:	667b      	str	r3, [r7, #100]	; 0x64
 8009374:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009378:	460b      	mov	r3, r1
 800937a:	4313      	orrs	r3, r2
 800937c:	d038      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800937e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800938a:	d018      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800938c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009390:	d811      	bhi.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009396:	d014      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800939c:	d80b      	bhi.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d011      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80093a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a6:	d106      	bne.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a8:	4bc3      	ldr	r3, [pc, #780]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	4ac2      	ldr	r2, [pc, #776]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80093b4:	e008      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093bc:	e004      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80093be:	bf00      	nop
 80093c0:	e002      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80093c2:	bf00      	nop
 80093c4:	e000      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80093c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10b      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093d0:	4bb9      	ldr	r3, [pc, #740]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093e0:	4ab5      	ldr	r2, [pc, #724]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093e2:	430b      	orrs	r3, r1
 80093e4:	6553      	str	r3, [r2, #84]	; 0x54
 80093e6:	e003      	b.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80093fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80093fe:	2300      	movs	r3, #0
 8009400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009402:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009406:	460b      	mov	r3, r1
 8009408:	4313      	orrs	r3, r2
 800940a:	d009      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800940c:	4baa      	ldr	r3, [pc, #680]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800940e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009410:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800941a:	4aa7      	ldr	r2, [pc, #668]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800941c:	430b      	orrs	r3, r1
 800941e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800942c:	653b      	str	r3, [r7, #80]	; 0x50
 800942e:	2300      	movs	r3, #0
 8009430:	657b      	str	r3, [r7, #84]	; 0x54
 8009432:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009436:	460b      	mov	r3, r1
 8009438:	4313      	orrs	r3, r2
 800943a:	d00a      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800943c:	4b9e      	ldr	r3, [pc, #632]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009448:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800944c:	4a9a      	ldr	r2, [pc, #616]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800944e:	430b      	orrs	r3, r1
 8009450:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800945e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009460:	2300      	movs	r3, #0
 8009462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009464:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009468:	460b      	mov	r3, r1
 800946a:	4313      	orrs	r3, r2
 800946c:	d009      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800946e:	4b92      	ldr	r3, [pc, #584]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009472:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800947a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800947c:	4a8e      	ldr	r2, [pc, #568]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800947e:	430b      	orrs	r3, r1
 8009480:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800948e:	643b      	str	r3, [r7, #64]	; 0x40
 8009490:	2300      	movs	r3, #0
 8009492:	647b      	str	r3, [r7, #68]	; 0x44
 8009494:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009498:	460b      	mov	r3, r1
 800949a:	4313      	orrs	r3, r2
 800949c:	d00e      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800949e:	4b86      	ldr	r3, [pc, #536]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	4a85      	ldr	r2, [pc, #532]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094a8:	6113      	str	r3, [r2, #16]
 80094aa:	4b83      	ldr	r3, [pc, #524]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094ac:	6919      	ldr	r1, [r3, #16]
 80094ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80094b6:	4a80      	ldr	r2, [pc, #512]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094b8:	430b      	orrs	r3, r1
 80094ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80094bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80094c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80094ca:	2300      	movs	r3, #0
 80094cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80094d2:	460b      	mov	r3, r1
 80094d4:	4313      	orrs	r3, r2
 80094d6:	d009      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094d8:	4b77      	ldr	r3, [pc, #476]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094dc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80094e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e6:	4a74      	ldr	r2, [pc, #464]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094e8:	430b      	orrs	r3, r1
 80094ea:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80094ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80094f8:	633b      	str	r3, [r7, #48]	; 0x30
 80094fa:	2300      	movs	r3, #0
 80094fc:	637b      	str	r3, [r7, #52]	; 0x34
 80094fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009502:	460b      	mov	r3, r1
 8009504:	4313      	orrs	r3, r2
 8009506:	d00a      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009508:	4b6b      	ldr	r3, [pc, #428]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800950a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009518:	4a67      	ldr	r2, [pc, #412]	; (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800951a:	430b      	orrs	r3, r1
 800951c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800951e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	2100      	movs	r1, #0
 8009528:	62b9      	str	r1, [r7, #40]	; 0x28
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009530:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009534:	460b      	mov	r3, r1
 8009536:	4313      	orrs	r3, r2
 8009538:	d011      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800953e:	3308      	adds	r3, #8
 8009540:	2100      	movs	r1, #0
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fb78 	bl	8009c38 <RCCEx_PLL2_Config>
 8009548:	4603      	mov	r3, r0
 800954a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800954e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800955a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800955e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	2100      	movs	r1, #0
 8009568:	6239      	str	r1, [r7, #32]
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
 8009570:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009574:	460b      	mov	r3, r1
 8009576:	4313      	orrs	r3, r2
 8009578:	d011      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800957a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957e:	3308      	adds	r3, #8
 8009580:	2101      	movs	r1, #1
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fb58 	bl	8009c38 <RCCEx_PLL2_Config>
 8009588:	4603      	mov	r3, r0
 800958a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800958e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800959a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800959e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	2100      	movs	r1, #0
 80095a8:	61b9      	str	r1, [r7, #24]
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80095b4:	460b      	mov	r3, r1
 80095b6:	4313      	orrs	r3, r2
 80095b8:	d011      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095be:	3308      	adds	r3, #8
 80095c0:	2102      	movs	r1, #2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fb38 	bl	8009c38 <RCCEx_PLL2_Config>
 80095c8:	4603      	mov	r3, r0
 80095ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80095ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d003      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80095de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	2100      	movs	r1, #0
 80095e8:	6139      	str	r1, [r7, #16]
 80095ea:	f003 0308 	and.w	r3, r3, #8
 80095ee:	617b      	str	r3, [r7, #20]
 80095f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80095f4:	460b      	mov	r3, r1
 80095f6:	4313      	orrs	r3, r2
 80095f8:	d011      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095fe:	3328      	adds	r3, #40	; 0x28
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fbca 	bl	8009d9c <RCCEx_PLL3_Config>
 8009608:	4603      	mov	r3, r0
 800960a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800960e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800961a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800961e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	2100      	movs	r1, #0
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	f003 0310 	and.w	r3, r3, #16
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009634:	460b      	mov	r3, r1
 8009636:	4313      	orrs	r3, r2
 8009638:	d011      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800963a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800963e:	3328      	adds	r3, #40	; 0x28
 8009640:	2101      	movs	r1, #1
 8009642:	4618      	mov	r0, r3
 8009644:	f000 fbaa 	bl	8009d9c <RCCEx_PLL3_Config>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800964e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800965a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800965e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	2100      	movs	r1, #0
 8009668:	6039      	str	r1, [r7, #0]
 800966a:	f003 0320 	and.w	r3, r3, #32
 800966e:	607b      	str	r3, [r7, #4]
 8009670:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009674:	460b      	mov	r3, r1
 8009676:	4313      	orrs	r3, r2
 8009678:	d011      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800967a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967e:	3328      	adds	r3, #40	; 0x28
 8009680:	2102      	movs	r1, #2
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fb8a 	bl	8009d9c <RCCEx_PLL3_Config>
 8009688:	4603      	mov	r3, r0
 800968a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800968e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800969a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800969e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	e000      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80096b2:	46bd      	mov	sp, r7
 80096b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096b8:	58024400 	.word	0x58024400

080096bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80096c0:	f7fe fd96 	bl	80081f0 <HAL_RCC_GetHCLKFreq>
 80096c4:	4602      	mov	r2, r0
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	091b      	lsrs	r3, r3, #4
 80096cc:	f003 0307 	and.w	r3, r3, #7
 80096d0:	4904      	ldr	r1, [pc, #16]	; (80096e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80096d2:	5ccb      	ldrb	r3, [r1, r3]
 80096d4:	f003 031f 	and.w	r3, r3, #31
 80096d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80096dc:	4618      	mov	r0, r3
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	58024400 	.word	0x58024400
 80096e4:	0800f784 	.word	0x0800f784

080096e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b089      	sub	sp, #36	; 0x24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096f0:	4ba1      	ldr	r3, [pc, #644]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f4:	f003 0303 	and.w	r3, r3, #3
 80096f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80096fa:	4b9f      	ldr	r3, [pc, #636]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fe:	0b1b      	lsrs	r3, r3, #12
 8009700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009704:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009706:	4b9c      	ldr	r3, [pc, #624]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	091b      	lsrs	r3, r3, #4
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009712:	4b99      	ldr	r3, [pc, #612]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009716:	08db      	lsrs	r3, r3, #3
 8009718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	fb02 f303 	mul.w	r3, r2, r3
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 8111 	beq.w	8009958 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	2b02      	cmp	r3, #2
 800973a:	f000 8083 	beq.w	8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	2b02      	cmp	r3, #2
 8009742:	f200 80a1 	bhi.w	8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d056      	beq.n	8009800 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009752:	e099      	b.n	8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009754:	4b88      	ldr	r3, [pc, #544]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0320 	and.w	r3, r3, #32
 800975c:	2b00      	cmp	r3, #0
 800975e:	d02d      	beq.n	80097bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009760:	4b85      	ldr	r3, [pc, #532]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	08db      	lsrs	r3, r3, #3
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	4a84      	ldr	r2, [pc, #528]	; (800997c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800976c:	fa22 f303 	lsr.w	r3, r2, r3
 8009770:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978a:	4b7b      	ldr	r3, [pc, #492]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979a:	ed97 6a03 	vldr	s12, [r7, #12]
 800979e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80097ba:	e087      	b.n	80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80097ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ce:	4b6a      	ldr	r3, [pc, #424]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d6:	ee07 3a90 	vmov	s15, r3
 80097da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097de:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097fe:	e065      	b.n	80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800980e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009812:	4b59      	ldr	r3, [pc, #356]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009822:	ed97 6a03 	vldr	s12, [r7, #12]
 8009826:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800982a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800983a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009842:	e043      	b.n	80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	ee07 3a90 	vmov	s15, r3
 800984a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800998c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009856:	4b48      	ldr	r3, [pc, #288]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009866:	ed97 6a03 	vldr	s12, [r7, #12]
 800986a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800986e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800987a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800987e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009886:	e021      	b.n	80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009892:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800989a:	4b37      	ldr	r3, [pc, #220]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800989c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80098cc:	4b2a      	ldr	r3, [pc, #168]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	0a5b      	lsrs	r3, r3, #9
 80098d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80098ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098f2:	ee17 2a90 	vmov	r2, s15
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80098fa:	4b1f      	ldr	r3, [pc, #124]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fe:	0c1b      	lsrs	r3, r3, #16
 8009900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009904:	ee07 3a90 	vmov	s15, r3
 8009908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009910:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009914:	edd7 6a07 	vldr	s13, [r7, #28]
 8009918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800991c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009920:	ee17 2a90 	vmov	r2, s15
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009928:	4b13      	ldr	r3, [pc, #76]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	0e1b      	lsrs	r3, r3, #24
 800992e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800993e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009942:	edd7 6a07 	vldr	s13, [r7, #28]
 8009946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800994a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800994e:	ee17 2a90 	vmov	r2, s15
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009956:	e008      	b.n	800996a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	609a      	str	r2, [r3, #8]
}
 800996a:	bf00      	nop
 800996c:	3724      	adds	r7, #36	; 0x24
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	58024400 	.word	0x58024400
 800997c:	03d09000 	.word	0x03d09000
 8009980:	46000000 	.word	0x46000000
 8009984:	4c742400 	.word	0x4c742400
 8009988:	4a742400 	.word	0x4a742400
 800998c:	4bbebc20 	.word	0x4bbebc20

08009990 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009990:	b480      	push	{r7}
 8009992:	b089      	sub	sp, #36	; 0x24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009998:	4ba1      	ldr	r3, [pc, #644]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800999a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999c:	f003 0303 	and.w	r3, r3, #3
 80099a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80099a2:	4b9f      	ldr	r3, [pc, #636]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a6:	0d1b      	lsrs	r3, r3, #20
 80099a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80099ae:	4b9c      	ldr	r3, [pc, #624]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b2:	0a1b      	lsrs	r3, r3, #8
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80099ba:	4b99      	ldr	r3, [pc, #612]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099be:	08db      	lsrs	r3, r3, #3
 80099c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 8111 	beq.w	8009c00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	f000 8083 	beq.w	8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	f200 80a1 	bhi.w	8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d056      	beq.n	8009aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80099fa:	e099      	b.n	8009b30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099fc:	4b88      	ldr	r3, [pc, #544]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0320 	and.w	r3, r3, #32
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d02d      	beq.n	8009a64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a08:	4b85      	ldr	r3, [pc, #532]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	08db      	lsrs	r3, r3, #3
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	4a84      	ldr	r2, [pc, #528]	; (8009c24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009a14:	fa22 f303 	lsr.w	r3, r2, r3
 8009a18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	ee07 3a90 	vmov	s15, r3
 8009a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a32:	4b7b      	ldr	r3, [pc, #492]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3a:	ee07 3a90 	vmov	s15, r3
 8009a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a62:	e087      	b.n	8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	ee07 3a90 	vmov	s15, r3
 8009a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a76:	4b6a      	ldr	r3, [pc, #424]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aa6:	e065      	b.n	8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aba:	4b59      	ldr	r3, [pc, #356]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ace:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aea:	e043      	b.n	8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afe:	4b48      	ldr	r3, [pc, #288]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b2e:	e021      	b.n	8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b42:	4b37      	ldr	r3, [pc, #220]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009b74:	4b2a      	ldr	r3, [pc, #168]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b78:	0a5b      	lsrs	r3, r3, #9
 8009b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b9a:	ee17 2a90 	vmov	r2, s15
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009ba2:	4b1f      	ldr	r3, [pc, #124]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	0c1b      	lsrs	r3, r3, #16
 8009ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bac:	ee07 3a90 	vmov	s15, r3
 8009bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc8:	ee17 2a90 	vmov	r2, s15
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009bd0:	4b13      	ldr	r3, [pc, #76]	; (8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd4:	0e1b      	lsrs	r3, r3, #24
 8009bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf6:	ee17 2a90 	vmov	r2, s15
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009bfe:	e008      	b.n	8009c12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	609a      	str	r2, [r3, #8]
}
 8009c12:	bf00      	nop
 8009c14:	3724      	adds	r7, #36	; 0x24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	58024400 	.word	0x58024400
 8009c24:	03d09000 	.word	0x03d09000
 8009c28:	46000000 	.word	0x46000000
 8009c2c:	4c742400 	.word	0x4c742400
 8009c30:	4a742400 	.word	0x4a742400
 8009c34:	4bbebc20 	.word	0x4bbebc20

08009c38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c46:	4b53      	ldr	r3, [pc, #332]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4a:	f003 0303 	and.w	r3, r3, #3
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d101      	bne.n	8009c56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e099      	b.n	8009d8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009c56:	4b4f      	ldr	r3, [pc, #316]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a4e      	ldr	r2, [pc, #312]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009c5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c62:	f7f9 fe07 	bl	8003874 <HAL_GetTick>
 8009c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c68:	e008      	b.n	8009c7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009c6a:	f7f9 fe03 	bl	8003874 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d901      	bls.n	8009c7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e086      	b.n	8009d8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c7c:	4b45      	ldr	r3, [pc, #276]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1f0      	bne.n	8009c6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009c88:	4b42      	ldr	r3, [pc, #264]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	031b      	lsls	r3, r3, #12
 8009c96:	493f      	ldr	r1, [pc, #252]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	025b      	lsls	r3, r3, #9
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	041b      	lsls	r3, r3, #16
 8009cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009cbe:	431a      	orrs	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	061b      	lsls	r3, r3, #24
 8009cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ccc:	4931      	ldr	r1, [pc, #196]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009cd2:	4b30      	ldr	r3, [pc, #192]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	492d      	ldr	r1, [pc, #180]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ce4:	4b2b      	ldr	r3, [pc, #172]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	f023 0220 	bic.w	r2, r3, #32
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	4928      	ldr	r1, [pc, #160]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009cf6:	4b27      	ldr	r3, [pc, #156]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfa:	4a26      	ldr	r2, [pc, #152]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009cfc:	f023 0310 	bic.w	r3, r3, #16
 8009d00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d02:	4b24      	ldr	r3, [pc, #144]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d06:	4b24      	ldr	r3, [pc, #144]	; (8009d98 <RCCEx_PLL2_Config+0x160>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	69d2      	ldr	r2, [r2, #28]
 8009d0e:	00d2      	lsls	r2, r2, #3
 8009d10:	4920      	ldr	r1, [pc, #128]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d12:	4313      	orrs	r3, r2
 8009d14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009d16:	4b1f      	ldr	r3, [pc, #124]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1a:	4a1e      	ldr	r2, [pc, #120]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d1c:	f043 0310 	orr.w	r3, r3, #16
 8009d20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d106      	bne.n	8009d36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009d28:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	4a19      	ldr	r2, [pc, #100]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d34:	e00f      	b.n	8009d56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d106      	bne.n	8009d4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009d3c:	4b15      	ldr	r3, [pc, #84]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d40:	4a14      	ldr	r2, [pc, #80]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d48:	e005      	b.n	8009d56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009d4a:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4e:	4a11      	ldr	r2, [pc, #68]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009d56:	4b0f      	ldr	r3, [pc, #60]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a0e      	ldr	r2, [pc, #56]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d62:	f7f9 fd87 	bl	8003874 <HAL_GetTick>
 8009d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d68:	e008      	b.n	8009d7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d6a:	f7f9 fd83 	bl	8003874 <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d901      	bls.n	8009d7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e006      	b.n	8009d8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d7c:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <RCCEx_PLL2_Config+0x15c>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0f0      	beq.n	8009d6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	58024400 	.word	0x58024400
 8009d98:	ffff0007 	.word	0xffff0007

08009d9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009daa:	4b53      	ldr	r3, [pc, #332]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d101      	bne.n	8009dba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e099      	b.n	8009eee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009dba:	4b4f      	ldr	r3, [pc, #316]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a4e      	ldr	r2, [pc, #312]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dc6:	f7f9 fd55 	bl	8003874 <HAL_GetTick>
 8009dca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009dcc:	e008      	b.n	8009de0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009dce:	f7f9 fd51 	bl	8003874 <HAL_GetTick>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d901      	bls.n	8009de0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e086      	b.n	8009eee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009de0:	4b45      	ldr	r3, [pc, #276]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1f0      	bne.n	8009dce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009dec:	4b42      	ldr	r3, [pc, #264]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	051b      	lsls	r3, r3, #20
 8009dfa:	493f      	ldr	r1, [pc, #252]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	628b      	str	r3, [r1, #40]	; 0x28
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	025b      	lsls	r3, r3, #9
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	431a      	orrs	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	041b      	lsls	r3, r3, #16
 8009e1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	061b      	lsls	r3, r3, #24
 8009e2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e30:	4931      	ldr	r1, [pc, #196]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e32:	4313      	orrs	r3, r2
 8009e34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009e36:	4b30      	ldr	r3, [pc, #192]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	492d      	ldr	r1, [pc, #180]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e44:	4313      	orrs	r3, r2
 8009e46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009e48:	4b2b      	ldr	r3, [pc, #172]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	4928      	ldr	r1, [pc, #160]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e5a:	4b27      	ldr	r3, [pc, #156]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5e:	4a26      	ldr	r2, [pc, #152]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e66:	4b24      	ldr	r3, [pc, #144]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e6a:	4b24      	ldr	r3, [pc, #144]	; (8009efc <RCCEx_PLL3_Config+0x160>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	69d2      	ldr	r2, [r2, #28]
 8009e72:	00d2      	lsls	r2, r2, #3
 8009e74:	4920      	ldr	r1, [pc, #128]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e7a:	4b1f      	ldr	r3, [pc, #124]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7e:	4a1e      	ldr	r2, [pc, #120]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d106      	bne.n	8009e9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	4a19      	ldr	r2, [pc, #100]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e98:	e00f      	b.n	8009eba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d106      	bne.n	8009eae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ea0:	4b15      	ldr	r3, [pc, #84]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	4a14      	ldr	r2, [pc, #80]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009ea6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009eac:	e005      	b.n	8009eba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009eae:	4b12      	ldr	r3, [pc, #72]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb2:	4a11      	ldr	r2, [pc, #68]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009eb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009eba:	4b0f      	ldr	r3, [pc, #60]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a0e      	ldr	r2, [pc, #56]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ec6:	f7f9 fcd5 	bl	8003874 <HAL_GetTick>
 8009eca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ecc:	e008      	b.n	8009ee0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ece:	f7f9 fcd1 	bl	8003874 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d901      	bls.n	8009ee0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e006      	b.n	8009eee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <RCCEx_PLL3_Config+0x15c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d0f0      	beq.n	8009ece <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	58024400 	.word	0x58024400
 8009efc:	ffff0007 	.word	0xffff0007

08009f00 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e02b      	b.n	8009f6c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d106      	bne.n	8009f2e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f825 	bl	8009f78 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2202      	movs	r2, #2
 8009f32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4610      	mov	r0, r2
 8009f42:	f002 f983 	bl	800c24c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	f002 f9d7 	bl	800c304 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009f56:	4b07      	ldr	r3, [pc, #28]	; (8009f74 <HAL_SDRAM_Init+0x74>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a06      	ldr	r2, [pc, #24]	; (8009f74 <HAL_SDRAM_Init+0x74>)
 8009f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f60:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	52004000 	.word	0x52004000

08009f78 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f9e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d101      	bne.n	8009faa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e021      	b.n	8009fee <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d002      	beq.n	8009fb6 <HAL_SDRAM_SendCommand+0x2a>
 8009fb0:	7dfb      	ldrb	r3, [r7, #23]
 8009fb2:	2b05      	cmp	r3, #5
 8009fb4:	d118      	bne.n	8009fe8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2202      	movs	r2, #2
 8009fba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f002 fa06 	bl	800c3d8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d104      	bne.n	8009fde <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2205      	movs	r2, #5
 8009fd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009fdc:	e006      	b.n	8009fec <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009fe6:	e001      	b.n	8009fec <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e000      	b.n	8009fee <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d101      	bne.n	800a010 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a00c:	2302      	movs	r3, #2
 800a00e:	e016      	b.n	800a03e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d10f      	bne.n	800a03c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2202      	movs	r2, #2
 800a020:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f002 f9f8 	bl	800c420 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	e000      	b.n	800a03e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e049      	b.n	800a0ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d106      	bne.n	800a072 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f841 	bl	800a0f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2202      	movs	r2, #2
 800a076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3304      	adds	r3, #4
 800a082:	4619      	mov	r1, r3
 800a084:	4610      	mov	r0, r2
 800a086:	f000 fac7 	bl	800a618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d001      	beq.n	800a120 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e04c      	b.n	800a1ba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2202      	movs	r2, #2
 800a124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a26      	ldr	r2, [pc, #152]	; (800a1c8 <HAL_TIM_Base_Start+0xc0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d022      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13a:	d01d      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a22      	ldr	r2, [pc, #136]	; (800a1cc <HAL_TIM_Base_Start+0xc4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d018      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a21      	ldr	r2, [pc, #132]	; (800a1d0 <HAL_TIM_Base_Start+0xc8>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d013      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a1f      	ldr	r2, [pc, #124]	; (800a1d4 <HAL_TIM_Base_Start+0xcc>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d00e      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <HAL_TIM_Base_Start+0xd0>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d009      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1c      	ldr	r2, [pc, #112]	; (800a1dc <HAL_TIM_Base_Start+0xd4>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d004      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a1b      	ldr	r2, [pc, #108]	; (800a1e0 <HAL_TIM_Base_Start+0xd8>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d115      	bne.n	800a1a4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	689a      	ldr	r2, [r3, #8]
 800a17e:	4b19      	ldr	r3, [pc, #100]	; (800a1e4 <HAL_TIM_Base_Start+0xdc>)
 800a180:	4013      	ands	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b06      	cmp	r3, #6
 800a188:	d015      	beq.n	800a1b6 <HAL_TIM_Base_Start+0xae>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a190:	d011      	beq.n	800a1b6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f042 0201 	orr.w	r2, r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a2:	e008      	b.n	800a1b6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0201 	orr.w	r2, r2, #1
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	e000      	b.n	800a1b8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	40010000 	.word	0x40010000
 800a1cc:	40000400 	.word	0x40000400
 800a1d0:	40000800 	.word	0x40000800
 800a1d4:	40000c00 	.word	0x40000c00
 800a1d8:	40010400 	.word	0x40010400
 800a1dc:	40001800 	.word	0x40001800
 800a1e0:	40014000 	.word	0x40014000
 800a1e4:	00010007 	.word	0x00010007

0800a1e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e049      	b.n	800a28e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d106      	bne.n	800a214 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f89d 	bl	800a34e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3304      	adds	r3, #4
 800a224:	4619      	mov	r1, r3
 800a226:	4610      	mov	r0, r2
 800a228:	f000 f9f6 	bl	800a618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6a1a      	ldr	r2, [r3, #32]
 800a2ac:	f241 1311 	movw	r3, #4369	; 0x1111
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10f      	bne.n	800a2d6 <HAL_TIM_PWM_DeInit+0x40>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6a1a      	ldr	r2, [r3, #32]
 800a2bc:	f240 4344 	movw	r3, #1092	; 0x444
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d107      	bne.n	800a2d6 <HAL_TIM_PWM_DeInit+0x40>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f022 0201 	bic.w	r2, r2, #1
 800a2d4:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f843 	bl	800a362 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	f003 0302 	and.w	r3, r3, #2
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d122      	bne.n	800a3d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	2b02      	cmp	r3, #2
 800a398:	d11b      	bne.n	800a3d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f06f 0202 	mvn.w	r2, #2
 800a3a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	f003 0303 	and.w	r3, r3, #3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f90f 	bl	800a5dc <HAL_TIM_IC_CaptureCallback>
 800a3be:	e005      	b.n	800a3cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f901 	bl	800a5c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f912 	bl	800a5f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d122      	bne.n	800a426 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	f003 0304 	and.w	r3, r3, #4
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	d11b      	bne.n	800a426 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f06f 0204 	mvn.w	r2, #4
 800a3f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d003      	beq.n	800a414 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f8e5 	bl	800a5dc <HAL_TIM_IC_CaptureCallback>
 800a412:	e005      	b.n	800a420 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f8d7 	bl	800a5c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f8e8 	bl	800a5f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	f003 0308 	and.w	r3, r3, #8
 800a430:	2b08      	cmp	r3, #8
 800a432:	d122      	bne.n	800a47a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	f003 0308 	and.w	r3, r3, #8
 800a43e:	2b08      	cmp	r3, #8
 800a440:	d11b      	bne.n	800a47a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f06f 0208 	mvn.w	r2, #8
 800a44a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2204      	movs	r2, #4
 800a450:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d003      	beq.n	800a468 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f8bb 	bl	800a5dc <HAL_TIM_IC_CaptureCallback>
 800a466:	e005      	b.n	800a474 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f8ad 	bl	800a5c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f8be 	bl	800a5f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	f003 0310 	and.w	r3, r3, #16
 800a484:	2b10      	cmp	r3, #16
 800a486:	d122      	bne.n	800a4ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	f003 0310 	and.w	r3, r3, #16
 800a492:	2b10      	cmp	r3, #16
 800a494:	d11b      	bne.n	800a4ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f06f 0210 	mvn.w	r2, #16
 800a49e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2208      	movs	r2, #8
 800a4a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69db      	ldr	r3, [r3, #28]
 800a4ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d003      	beq.n	800a4bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f891 	bl	800a5dc <HAL_TIM_IC_CaptureCallback>
 800a4ba:	e005      	b.n	800a4c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f883 	bl	800a5c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f894 	bl	800a5f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d10e      	bne.n	800a4fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d107      	bne.n	800a4fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f06f 0201 	mvn.w	r2, #1
 800a4f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f85d 	bl	800a5b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a504:	2b80      	cmp	r3, #128	; 0x80
 800a506:	d10e      	bne.n	800a526 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a512:	2b80      	cmp	r3, #128	; 0x80
 800a514:	d107      	bne.n	800a526 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a51e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f91d 	bl	800a760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a534:	d10e      	bne.n	800a554 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a540:	2b80      	cmp	r3, #128	; 0x80
 800a542:	d107      	bne.n	800a554 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a54c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f910 	bl	800a774 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a55e:	2b40      	cmp	r3, #64	; 0x40
 800a560:	d10e      	bne.n	800a580 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56c:	2b40      	cmp	r3, #64	; 0x40
 800a56e:	d107      	bne.n	800a580 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f842 	bl	800a604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b20      	cmp	r3, #32
 800a58c:	d10e      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b20      	cmp	r3, #32
 800a59a:	d107      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f06f 0220 	mvn.w	r2, #32
 800a5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f8d0 	bl	800a74c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a40      	ldr	r2, [pc, #256]	; (800a72c <TIM_Base_SetConfig+0x114>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d013      	beq.n	800a658 <TIM_Base_SetConfig+0x40>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a636:	d00f      	beq.n	800a658 <TIM_Base_SetConfig+0x40>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a3d      	ldr	r2, [pc, #244]	; (800a730 <TIM_Base_SetConfig+0x118>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d00b      	beq.n	800a658 <TIM_Base_SetConfig+0x40>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a3c      	ldr	r2, [pc, #240]	; (800a734 <TIM_Base_SetConfig+0x11c>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d007      	beq.n	800a658 <TIM_Base_SetConfig+0x40>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4a3b      	ldr	r2, [pc, #236]	; (800a738 <TIM_Base_SetConfig+0x120>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d003      	beq.n	800a658 <TIM_Base_SetConfig+0x40>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a3a      	ldr	r2, [pc, #232]	; (800a73c <TIM_Base_SetConfig+0x124>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d108      	bne.n	800a66a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a65e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a2f      	ldr	r2, [pc, #188]	; (800a72c <TIM_Base_SetConfig+0x114>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d01f      	beq.n	800a6b2 <TIM_Base_SetConfig+0x9a>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a678:	d01b      	beq.n	800a6b2 <TIM_Base_SetConfig+0x9a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a2c      	ldr	r2, [pc, #176]	; (800a730 <TIM_Base_SetConfig+0x118>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d017      	beq.n	800a6b2 <TIM_Base_SetConfig+0x9a>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a2b      	ldr	r2, [pc, #172]	; (800a734 <TIM_Base_SetConfig+0x11c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d013      	beq.n	800a6b2 <TIM_Base_SetConfig+0x9a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a2a      	ldr	r2, [pc, #168]	; (800a738 <TIM_Base_SetConfig+0x120>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d00f      	beq.n	800a6b2 <TIM_Base_SetConfig+0x9a>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a29      	ldr	r2, [pc, #164]	; (800a73c <TIM_Base_SetConfig+0x124>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00b      	beq.n	800a6b2 <TIM_Base_SetConfig+0x9a>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a28      	ldr	r2, [pc, #160]	; (800a740 <TIM_Base_SetConfig+0x128>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d007      	beq.n	800a6b2 <TIM_Base_SetConfig+0x9a>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a27      	ldr	r2, [pc, #156]	; (800a744 <TIM_Base_SetConfig+0x12c>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d003      	beq.n	800a6b2 <TIM_Base_SetConfig+0x9a>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a26      	ldr	r2, [pc, #152]	; (800a748 <TIM_Base_SetConfig+0x130>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d108      	bne.n	800a6c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	689a      	ldr	r2, [r3, #8]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a10      	ldr	r2, [pc, #64]	; (800a72c <TIM_Base_SetConfig+0x114>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d00f      	beq.n	800a710 <TIM_Base_SetConfig+0xf8>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a12      	ldr	r2, [pc, #72]	; (800a73c <TIM_Base_SetConfig+0x124>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d00b      	beq.n	800a710 <TIM_Base_SetConfig+0xf8>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a11      	ldr	r2, [pc, #68]	; (800a740 <TIM_Base_SetConfig+0x128>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d007      	beq.n	800a710 <TIM_Base_SetConfig+0xf8>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a10      	ldr	r2, [pc, #64]	; (800a744 <TIM_Base_SetConfig+0x12c>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d003      	beq.n	800a710 <TIM_Base_SetConfig+0xf8>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a0f      	ldr	r2, [pc, #60]	; (800a748 <TIM_Base_SetConfig+0x130>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d103      	bne.n	800a718 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	691a      	ldr	r2, [r3, #16]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	615a      	str	r2, [r3, #20]
}
 800a71e:	bf00      	nop
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	40010000 	.word	0x40010000
 800a730:	40000400 	.word	0x40000400
 800a734:	40000800 	.word	0x40000800
 800a738:	40000c00 	.word	0x40000c00
 800a73c:	40010400 	.word	0x40010400
 800a740:	40014000 	.word	0x40014000
 800a744:	40014400 	.word	0x40014400
 800a748:	40014800 	.word	0x40014800

0800a74c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e042      	b.n	800a820 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d106      	bne.n	800a7b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7f6 fe7f 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2224      	movs	r2, #36	; 0x24
 800a7b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f022 0201 	bic.w	r2, r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fd5c 	bl	800b288 <UART_SetConfig>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d101      	bne.n	800a7da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e022      	b.n	800a820 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d002      	beq.n	800a7e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f001 fab8 	bl	800bd58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685a      	ldr	r2, [r3, #4]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689a      	ldr	r2, [r3, #8]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f042 0201 	orr.w	r2, r2, #1
 800a816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f001 fb3f 	bl	800be9c <UART_CheckIdleState>
 800a81e:	4603      	mov	r3, r0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08a      	sub	sp, #40	; 0x28
 800a82c:	af02      	add	r7, sp, #8
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	603b      	str	r3, [r7, #0]
 800a834:	4613      	mov	r3, r2
 800a836:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83e:	2b20      	cmp	r3, #32
 800a840:	d17b      	bne.n	800a93a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <HAL_UART_Transmit+0x26>
 800a848:	88fb      	ldrh	r3, [r7, #6]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e074      	b.n	800a93c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2221      	movs	r2, #33	; 0x21
 800a85e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a862:	f7f9 f807 	bl	8003874 <HAL_GetTick>
 800a866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	88fa      	ldrh	r2, [r7, #6]
 800a86c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	88fa      	ldrh	r2, [r7, #6]
 800a874:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a880:	d108      	bne.n	800a894 <HAL_UART_Transmit+0x6c>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d104      	bne.n	800a894 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	61bb      	str	r3, [r7, #24]
 800a892:	e003      	b.n	800a89c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a89c:	e030      	b.n	800a900 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2180      	movs	r1, #128	; 0x80
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f001 fba1 	bl	800bff0 <UART_WaitOnFlagUntilTimeout>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2220      	movs	r2, #32
 800a8b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e03d      	b.n	800a93c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10b      	bne.n	800a8de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	3302      	adds	r3, #2
 800a8da:	61bb      	str	r3, [r7, #24]
 800a8dc:	e007      	b.n	800a8ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	781a      	ldrb	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a906:	b29b      	uxth	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1c8      	bne.n	800a89e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	2200      	movs	r2, #0
 800a914:	2140      	movs	r1, #64	; 0x40
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f001 fb6a 	bl	800bff0 <UART_WaitOnFlagUntilTimeout>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d005      	beq.n	800a92e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2220      	movs	r2, #32
 800a926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e006      	b.n	800a93c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2220      	movs	r2, #32
 800a932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	e000      	b.n	800a93c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a93a:	2302      	movs	r3, #2
  }
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b08a      	sub	sp, #40	; 0x28
 800a948:	af02      	add	r7, sp, #8
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	4613      	mov	r3, r2
 800a952:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a95a:	2b20      	cmp	r3, #32
 800a95c:	f040 80b5 	bne.w	800aaca <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <HAL_UART_Receive+0x28>
 800a966:	88fb      	ldrh	r3, [r7, #6]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e0ad      	b.n	800aacc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2222      	movs	r2, #34	; 0x22
 800a97c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a986:	f7f8 ff75 	bl	8003874 <HAL_GetTick>
 800a98a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	88fa      	ldrh	r2, [r7, #6]
 800a990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	88fa      	ldrh	r2, [r7, #6]
 800a998:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9a4:	d10e      	bne.n	800a9c4 <HAL_UART_Receive+0x80>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d105      	bne.n	800a9ba <HAL_UART_Receive+0x76>
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a9b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9b8:	e02d      	b.n	800aa16 <HAL_UART_Receive+0xd2>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	22ff      	movs	r2, #255	; 0xff
 800a9be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9c2:	e028      	b.n	800aa16 <HAL_UART_Receive+0xd2>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10d      	bne.n	800a9e8 <HAL_UART_Receive+0xa4>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d104      	bne.n	800a9de <HAL_UART_Receive+0x9a>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	22ff      	movs	r2, #255	; 0xff
 800a9d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9dc:	e01b      	b.n	800aa16 <HAL_UART_Receive+0xd2>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	227f      	movs	r2, #127	; 0x7f
 800a9e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9e6:	e016      	b.n	800aa16 <HAL_UART_Receive+0xd2>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9f0:	d10d      	bne.n	800aa0e <HAL_UART_Receive+0xca>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d104      	bne.n	800aa04 <HAL_UART_Receive+0xc0>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	227f      	movs	r2, #127	; 0x7f
 800a9fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa02:	e008      	b.n	800aa16 <HAL_UART_Receive+0xd2>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	223f      	movs	r2, #63	; 0x3f
 800aa08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa0c:	e003      	b.n	800aa16 <HAL_UART_Receive+0xd2>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa1c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa26:	d108      	bne.n	800aa3a <HAL_UART_Receive+0xf6>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d104      	bne.n	800aa3a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	61bb      	str	r3, [r7, #24]
 800aa38:	e003      	b.n	800aa42 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800aa42:	e036      	b.n	800aab2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2120      	movs	r1, #32
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f001 face 	bl	800bff0 <UART_WaitOnFlagUntilTimeout>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d005      	beq.n	800aa66 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e032      	b.n	800aacc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10c      	bne.n	800aa86 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	8a7b      	ldrh	r3, [r7, #18]
 800aa76:	4013      	ands	r3, r2
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	3302      	adds	r3, #2
 800aa82:	61bb      	str	r3, [r7, #24]
 800aa84:	e00c      	b.n	800aaa0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	8a7b      	ldrh	r3, [r7, #18]
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	4013      	ands	r3, r2
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1c2      	bne.n	800aa44 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	e000      	b.n	800aacc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800aaca:	2302      	movs	r3, #2
  }
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3720      	adds	r7, #32
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b0ba      	sub	sp, #232	; 0xe8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aafa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aafe:	f640 030f 	movw	r3, #2063	; 0x80f
 800ab02:	4013      	ands	r3, r2
 800ab04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ab08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d11b      	bne.n	800ab48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab14:	f003 0320 	and.w	r3, r3, #32
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d015      	beq.n	800ab48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab20:	f003 0320 	and.w	r3, r3, #32
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d105      	bne.n	800ab34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d009      	beq.n	800ab48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f000 8377 	beq.w	800b22c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	4798      	blx	r3
      }
      return;
 800ab46:	e371      	b.n	800b22c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8123 	beq.w	800ad98 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ab56:	4b8d      	ldr	r3, [pc, #564]	; (800ad8c <HAL_UART_IRQHandler+0x2b8>)
 800ab58:	4013      	ands	r3, r2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d106      	bne.n	800ab6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ab62:	4b8b      	ldr	r3, [pc, #556]	; (800ad90 <HAL_UART_IRQHandler+0x2bc>)
 800ab64:	4013      	ands	r3, r2
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 8116 	beq.w	800ad98 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d011      	beq.n	800ab9c <HAL_UART_IRQHandler+0xc8>
 800ab78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00b      	beq.n	800ab9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab92:	f043 0201 	orr.w	r2, r3, #1
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aba0:	f003 0302 	and.w	r3, r3, #2
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d011      	beq.n	800abcc <HAL_UART_IRQHandler+0xf8>
 800aba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00b      	beq.n	800abcc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2202      	movs	r2, #2
 800abba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc2:	f043 0204 	orr.w	r2, r3, #4
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abd0:	f003 0304 	and.w	r3, r3, #4
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d011      	beq.n	800abfc <HAL_UART_IRQHandler+0x128>
 800abd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2204      	movs	r2, #4
 800abea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abf2:	f043 0202 	orr.w	r2, r3, #2
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800abfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac00:	f003 0308 	and.w	r3, r3, #8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d017      	beq.n	800ac38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac0c:	f003 0320 	and.w	r3, r3, #32
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d105      	bne.n	800ac20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ac18:	4b5c      	ldr	r3, [pc, #368]	; (800ad8c <HAL_UART_IRQHandler+0x2b8>)
 800ac1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00b      	beq.n	800ac38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2208      	movs	r2, #8
 800ac26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac2e:	f043 0208 	orr.w	r2, r3, #8
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d012      	beq.n	800ac6a <HAL_UART_IRQHandler+0x196>
 800ac44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00c      	beq.n	800ac6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac60:	f043 0220 	orr.w	r2, r3, #32
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 82dd 	beq.w	800b230 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d013      	beq.n	800acaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac86:	f003 0320 	and.w	r3, r3, #32
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d105      	bne.n	800ac9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d007      	beq.n	800acaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acbe:	2b40      	cmp	r3, #64	; 0x40
 800acc0:	d005      	beq.n	800acce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acca:	2b00      	cmp	r3, #0
 800accc:	d054      	beq.n	800ad78 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f001 f9f6 	bl	800c0c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acde:	2b40      	cmp	r3, #64	; 0x40
 800ace0:	d146      	bne.n	800ad70 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3308      	adds	r3, #8
 800ace8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800acf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800acfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3308      	adds	r3, #8
 800ad0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1d9      	bne.n	800ace2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d017      	beq.n	800ad68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad3e:	4a15      	ldr	r2, [pc, #84]	; (800ad94 <HAL_UART_IRQHandler+0x2c0>)
 800ad40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7f9 fa0d 	bl	8004168 <HAL_DMA_Abort_IT>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d019      	beq.n	800ad88 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ad62:	4610      	mov	r0, r2
 800ad64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad66:	e00f      	b.n	800ad88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fa77 	bl	800b25c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad6e:	e00b      	b.n	800ad88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fa73 	bl	800b25c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad76:	e007      	b.n	800ad88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fa6f 	bl	800b25c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ad86:	e253      	b.n	800b230 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad88:	bf00      	nop
    return;
 800ad8a:	e251      	b.n	800b230 <HAL_UART_IRQHandler+0x75c>
 800ad8c:	10000001 	.word	0x10000001
 800ad90:	04000120 	.word	0x04000120
 800ad94:	0800c18d 	.word	0x0800c18d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	f040 81e7 	bne.w	800b170 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ada2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada6:	f003 0310 	and.w	r3, r3, #16
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 81e0 	beq.w	800b170 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800adb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 81d9 	beq.w	800b170 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2210      	movs	r2, #16
 800adc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add0:	2b40      	cmp	r3, #64	; 0x40
 800add2:	f040 8151 	bne.w	800b078 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a96      	ldr	r2, [pc, #600]	; (800b038 <HAL_UART_IRQHandler+0x564>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d068      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a93      	ldr	r2, [pc, #588]	; (800b03c <HAL_UART_IRQHandler+0x568>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d061      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a91      	ldr	r2, [pc, #580]	; (800b040 <HAL_UART_IRQHandler+0x56c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d05a      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a8e      	ldr	r2, [pc, #568]	; (800b044 <HAL_UART_IRQHandler+0x570>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d053      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a8c      	ldr	r2, [pc, #560]	; (800b048 <HAL_UART_IRQHandler+0x574>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d04c      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a89      	ldr	r2, [pc, #548]	; (800b04c <HAL_UART_IRQHandler+0x578>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d045      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a87      	ldr	r2, [pc, #540]	; (800b050 <HAL_UART_IRQHandler+0x57c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d03e      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a84      	ldr	r2, [pc, #528]	; (800b054 <HAL_UART_IRQHandler+0x580>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d037      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a82      	ldr	r2, [pc, #520]	; (800b058 <HAL_UART_IRQHandler+0x584>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d030      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a7f      	ldr	r2, [pc, #508]	; (800b05c <HAL_UART_IRQHandler+0x588>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d029      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a7d      	ldr	r2, [pc, #500]	; (800b060 <HAL_UART_IRQHandler+0x58c>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d022      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a7a      	ldr	r2, [pc, #488]	; (800b064 <HAL_UART_IRQHandler+0x590>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d01b      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a78      	ldr	r2, [pc, #480]	; (800b068 <HAL_UART_IRQHandler+0x594>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d014      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a75      	ldr	r2, [pc, #468]	; (800b06c <HAL_UART_IRQHandler+0x598>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d00d      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a73      	ldr	r2, [pc, #460]	; (800b070 <HAL_UART_IRQHandler+0x59c>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d006      	beq.n	800aeb6 <HAL_UART_IRQHandler+0x3e2>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a70      	ldr	r2, [pc, #448]	; (800b074 <HAL_UART_IRQHandler+0x5a0>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d106      	bne.n	800aec4 <HAL_UART_IRQHandler+0x3f0>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	e005      	b.n	800aed0 <HAL_UART_IRQHandler+0x3fc>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aed4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 81ab 	beq.w	800b234 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aee4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aee8:	429a      	cmp	r2, r3
 800aeea:	f080 81a3 	bcs.w	800b234 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af04:	f000 8087 	beq.w	800b016 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	461a      	mov	r2, r3
 800af2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800af36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af42:	e841 2300 	strex	r3, r2, [r1]
 800af46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d1da      	bne.n	800af08 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3308      	adds	r3, #8
 800af58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af5c:	e853 3f00 	ldrex	r3, [r3]
 800af60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af64:	f023 0301 	bic.w	r3, r3, #1
 800af68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3308      	adds	r3, #8
 800af72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800af7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800af82:	e841 2300 	strex	r3, r2, [r1]
 800af86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800af88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1e1      	bne.n	800af52 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3308      	adds	r3, #8
 800af94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af98:	e853 3f00 	ldrex	r3, [r3]
 800af9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800af9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3308      	adds	r3, #8
 800afae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afba:	e841 2300 	strex	r3, r2, [r1]
 800afbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1e3      	bne.n	800af8e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2220      	movs	r2, #32
 800afca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afe4:	f023 0310 	bic.w	r3, r3, #16
 800afe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	461a      	mov	r2, r3
 800aff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aff6:	65bb      	str	r3, [r7, #88]	; 0x58
 800aff8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800affc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e4      	bne.n	800afd4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b010:	4618      	mov	r0, r3
 800b012:	f7f8 fd8b 	bl	8003b2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2202      	movs	r2, #2
 800b01a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b028:	b29b      	uxth	r3, r3
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f91d 	bl	800b270 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b036:	e0fd      	b.n	800b234 <HAL_UART_IRQHandler+0x760>
 800b038:	40020010 	.word	0x40020010
 800b03c:	40020028 	.word	0x40020028
 800b040:	40020040 	.word	0x40020040
 800b044:	40020058 	.word	0x40020058
 800b048:	40020070 	.word	0x40020070
 800b04c:	40020088 	.word	0x40020088
 800b050:	400200a0 	.word	0x400200a0
 800b054:	400200b8 	.word	0x400200b8
 800b058:	40020410 	.word	0x40020410
 800b05c:	40020428 	.word	0x40020428
 800b060:	40020440 	.word	0x40020440
 800b064:	40020458 	.word	0x40020458
 800b068:	40020470 	.word	0x40020470
 800b06c:	40020488 	.word	0x40020488
 800b070:	400204a0 	.word	0x400204a0
 800b074:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b084:	b29b      	uxth	r3, r3
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b092:	b29b      	uxth	r3, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	f000 80cf 	beq.w	800b238 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b09a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 80ca 	beq.w	800b238 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	e853 3f00 	ldrex	r3, [r3]
 800b0b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0c6:	647b      	str	r3, [r7, #68]	; 0x44
 800b0c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0ce:	e841 2300 	strex	r3, r2, [r1]
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1e4      	bne.n	800b0a4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3308      	adds	r3, #8
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	e853 3f00 	ldrex	r3, [r3]
 800b0e8:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ea:	6a3a      	ldr	r2, [r7, #32]
 800b0ec:	4b55      	ldr	r3, [pc, #340]	; (800b244 <HAL_UART_IRQHandler+0x770>)
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0fe:	633a      	str	r2, [r7, #48]	; 0x30
 800b100:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e3      	bne.n	800b0da <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2220      	movs	r2, #32
 800b116:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	e853 3f00 	ldrex	r3, [r3]
 800b132:	60fb      	str	r3, [r7, #12]
   return(result);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0310 	bic.w	r3, r3, #16
 800b13a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b148:	61fb      	str	r3, [r7, #28]
 800b14a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	69b9      	ldr	r1, [r7, #24]
 800b14e:	69fa      	ldr	r2, [r7, #28]
 800b150:	e841 2300 	strex	r3, r2, [r1]
 800b154:	617b      	str	r3, [r7, #20]
   return(result);
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e4      	bne.n	800b126 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b162:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f881 	bl	800b270 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b16e:	e063      	b.n	800b238 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00e      	beq.n	800b19a <HAL_UART_IRQHandler+0x6c6>
 800b17c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d008      	beq.n	800b19a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b190:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f001 f83b 	bl	800c20e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b198:	e051      	b.n	800b23e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d014      	beq.n	800b1d0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b1a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d105      	bne.n	800b1be <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b1b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d008      	beq.n	800b1d0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d03a      	beq.n	800b23c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	4798      	blx	r3
    }
    return;
 800b1ce:	e035      	b.n	800b23c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d009      	beq.n	800b1f0 <HAL_UART_IRQHandler+0x71c>
 800b1dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d003      	beq.n	800b1f0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 ffe5 	bl	800c1b8 <UART_EndTransmit_IT>
    return;
 800b1ee:	e026      	b.n	800b23e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d009      	beq.n	800b210 <HAL_UART_IRQHandler+0x73c>
 800b1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b200:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b204:	2b00      	cmp	r3, #0
 800b206:	d003      	beq.n	800b210 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f001 f814 	bl	800c236 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b20e:	e016      	b.n	800b23e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d010      	beq.n	800b23e <HAL_UART_IRQHandler+0x76a>
 800b21c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b220:	2b00      	cmp	r3, #0
 800b222:	da0c      	bge.n	800b23e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fffc 	bl	800c222 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b22a:	e008      	b.n	800b23e <HAL_UART_IRQHandler+0x76a>
      return;
 800b22c:	bf00      	nop
 800b22e:	e006      	b.n	800b23e <HAL_UART_IRQHandler+0x76a>
    return;
 800b230:	bf00      	nop
 800b232:	e004      	b.n	800b23e <HAL_UART_IRQHandler+0x76a>
      return;
 800b234:	bf00      	nop
 800b236:	e002      	b.n	800b23e <HAL_UART_IRQHandler+0x76a>
      return;
 800b238:	bf00      	nop
 800b23a:	e000      	b.n	800b23e <HAL_UART_IRQHandler+0x76a>
    return;
 800b23c:	bf00      	nop
  }
}
 800b23e:	37e8      	adds	r7, #232	; 0xe8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	effffffe 	.word	0xeffffffe

0800b248 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b28c:	b092      	sub	sp, #72	; 0x48
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	689a      	ldr	r2, [r3, #8]
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	4bbe      	ldr	r3, [pc, #760]	; (800b5b0 <UART_SetConfig+0x328>)
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	6812      	ldr	r2, [r2, #0]
 800b2be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2c0:	430b      	orrs	r3, r1
 800b2c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	68da      	ldr	r2, [r3, #12]
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4ab3      	ldr	r2, [pc, #716]	; (800b5b4 <UART_SetConfig+0x32c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d004      	beq.n	800b2f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	689a      	ldr	r2, [r3, #8]
 800b2fa:	4baf      	ldr	r3, [pc, #700]	; (800b5b8 <UART_SetConfig+0x330>)
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	6812      	ldr	r2, [r2, #0]
 800b302:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b304:	430b      	orrs	r3, r1
 800b306:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30e:	f023 010f 	bic.w	r1, r3, #15
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	430a      	orrs	r2, r1
 800b31c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4aa6      	ldr	r2, [pc, #664]	; (800b5bc <UART_SetConfig+0x334>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d177      	bne.n	800b418 <UART_SetConfig+0x190>
 800b328:	4ba5      	ldr	r3, [pc, #660]	; (800b5c0 <UART_SetConfig+0x338>)
 800b32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b32c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b330:	2b28      	cmp	r3, #40	; 0x28
 800b332:	d86d      	bhi.n	800b410 <UART_SetConfig+0x188>
 800b334:	a201      	add	r2, pc, #4	; (adr r2, 800b33c <UART_SetConfig+0xb4>)
 800b336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33a:	bf00      	nop
 800b33c:	0800b3e1 	.word	0x0800b3e1
 800b340:	0800b411 	.word	0x0800b411
 800b344:	0800b411 	.word	0x0800b411
 800b348:	0800b411 	.word	0x0800b411
 800b34c:	0800b411 	.word	0x0800b411
 800b350:	0800b411 	.word	0x0800b411
 800b354:	0800b411 	.word	0x0800b411
 800b358:	0800b411 	.word	0x0800b411
 800b35c:	0800b3e9 	.word	0x0800b3e9
 800b360:	0800b411 	.word	0x0800b411
 800b364:	0800b411 	.word	0x0800b411
 800b368:	0800b411 	.word	0x0800b411
 800b36c:	0800b411 	.word	0x0800b411
 800b370:	0800b411 	.word	0x0800b411
 800b374:	0800b411 	.word	0x0800b411
 800b378:	0800b411 	.word	0x0800b411
 800b37c:	0800b3f1 	.word	0x0800b3f1
 800b380:	0800b411 	.word	0x0800b411
 800b384:	0800b411 	.word	0x0800b411
 800b388:	0800b411 	.word	0x0800b411
 800b38c:	0800b411 	.word	0x0800b411
 800b390:	0800b411 	.word	0x0800b411
 800b394:	0800b411 	.word	0x0800b411
 800b398:	0800b411 	.word	0x0800b411
 800b39c:	0800b3f9 	.word	0x0800b3f9
 800b3a0:	0800b411 	.word	0x0800b411
 800b3a4:	0800b411 	.word	0x0800b411
 800b3a8:	0800b411 	.word	0x0800b411
 800b3ac:	0800b411 	.word	0x0800b411
 800b3b0:	0800b411 	.word	0x0800b411
 800b3b4:	0800b411 	.word	0x0800b411
 800b3b8:	0800b411 	.word	0x0800b411
 800b3bc:	0800b401 	.word	0x0800b401
 800b3c0:	0800b411 	.word	0x0800b411
 800b3c4:	0800b411 	.word	0x0800b411
 800b3c8:	0800b411 	.word	0x0800b411
 800b3cc:	0800b411 	.word	0x0800b411
 800b3d0:	0800b411 	.word	0x0800b411
 800b3d4:	0800b411 	.word	0x0800b411
 800b3d8:	0800b411 	.word	0x0800b411
 800b3dc:	0800b409 	.word	0x0800b409
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3e6:	e222      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b3e8:	2304      	movs	r3, #4
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ee:	e21e      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b3f0:	2308      	movs	r3, #8
 800b3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f6:	e21a      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b3f8:	2310      	movs	r3, #16
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fe:	e216      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b400:	2320      	movs	r3, #32
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b406:	e212      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b408:	2340      	movs	r3, #64	; 0x40
 800b40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b40e:	e20e      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b410:	2380      	movs	r3, #128	; 0x80
 800b412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b416:	e20a      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a69      	ldr	r2, [pc, #420]	; (800b5c4 <UART_SetConfig+0x33c>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d130      	bne.n	800b484 <UART_SetConfig+0x1fc>
 800b422:	4b67      	ldr	r3, [pc, #412]	; (800b5c0 <UART_SetConfig+0x338>)
 800b424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b426:	f003 0307 	and.w	r3, r3, #7
 800b42a:	2b05      	cmp	r3, #5
 800b42c:	d826      	bhi.n	800b47c <UART_SetConfig+0x1f4>
 800b42e:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <UART_SetConfig+0x1ac>)
 800b430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b434:	0800b44d 	.word	0x0800b44d
 800b438:	0800b455 	.word	0x0800b455
 800b43c:	0800b45d 	.word	0x0800b45d
 800b440:	0800b465 	.word	0x0800b465
 800b444:	0800b46d 	.word	0x0800b46d
 800b448:	0800b475 	.word	0x0800b475
 800b44c:	2300      	movs	r3, #0
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b452:	e1ec      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b454:	2304      	movs	r3, #4
 800b456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b45a:	e1e8      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b45c:	2308      	movs	r3, #8
 800b45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b462:	e1e4      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b464:	2310      	movs	r3, #16
 800b466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b46a:	e1e0      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b46c:	2320      	movs	r3, #32
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b472:	e1dc      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b474:	2340      	movs	r3, #64	; 0x40
 800b476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b47a:	e1d8      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b47c:	2380      	movs	r3, #128	; 0x80
 800b47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b482:	e1d4      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a4f      	ldr	r2, [pc, #316]	; (800b5c8 <UART_SetConfig+0x340>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d130      	bne.n	800b4f0 <UART_SetConfig+0x268>
 800b48e:	4b4c      	ldr	r3, [pc, #304]	; (800b5c0 <UART_SetConfig+0x338>)
 800b490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b492:	f003 0307 	and.w	r3, r3, #7
 800b496:	2b05      	cmp	r3, #5
 800b498:	d826      	bhi.n	800b4e8 <UART_SetConfig+0x260>
 800b49a:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <UART_SetConfig+0x218>)
 800b49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a0:	0800b4b9 	.word	0x0800b4b9
 800b4a4:	0800b4c1 	.word	0x0800b4c1
 800b4a8:	0800b4c9 	.word	0x0800b4c9
 800b4ac:	0800b4d1 	.word	0x0800b4d1
 800b4b0:	0800b4d9 	.word	0x0800b4d9
 800b4b4:	0800b4e1 	.word	0x0800b4e1
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4be:	e1b6      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b4c0:	2304      	movs	r3, #4
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4c6:	e1b2      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b4c8:	2308      	movs	r3, #8
 800b4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ce:	e1ae      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b4d0:	2310      	movs	r3, #16
 800b4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4d6:	e1aa      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b4d8:	2320      	movs	r3, #32
 800b4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4de:	e1a6      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b4e0:	2340      	movs	r3, #64	; 0x40
 800b4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4e6:	e1a2      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b4e8:	2380      	movs	r3, #128	; 0x80
 800b4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ee:	e19e      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a35      	ldr	r2, [pc, #212]	; (800b5cc <UART_SetConfig+0x344>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d130      	bne.n	800b55c <UART_SetConfig+0x2d4>
 800b4fa:	4b31      	ldr	r3, [pc, #196]	; (800b5c0 <UART_SetConfig+0x338>)
 800b4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4fe:	f003 0307 	and.w	r3, r3, #7
 800b502:	2b05      	cmp	r3, #5
 800b504:	d826      	bhi.n	800b554 <UART_SetConfig+0x2cc>
 800b506:	a201      	add	r2, pc, #4	; (adr r2, 800b50c <UART_SetConfig+0x284>)
 800b508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50c:	0800b525 	.word	0x0800b525
 800b510:	0800b52d 	.word	0x0800b52d
 800b514:	0800b535 	.word	0x0800b535
 800b518:	0800b53d 	.word	0x0800b53d
 800b51c:	0800b545 	.word	0x0800b545
 800b520:	0800b54d 	.word	0x0800b54d
 800b524:	2300      	movs	r3, #0
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52a:	e180      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b52c:	2304      	movs	r3, #4
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b532:	e17c      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b534:	2308      	movs	r3, #8
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53a:	e178      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b53c:	2310      	movs	r3, #16
 800b53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b542:	e174      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b544:	2320      	movs	r3, #32
 800b546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54a:	e170      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b54c:	2340      	movs	r3, #64	; 0x40
 800b54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b552:	e16c      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b554:	2380      	movs	r3, #128	; 0x80
 800b556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55a:	e168      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a1b      	ldr	r2, [pc, #108]	; (800b5d0 <UART_SetConfig+0x348>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d142      	bne.n	800b5ec <UART_SetConfig+0x364>
 800b566:	4b16      	ldr	r3, [pc, #88]	; (800b5c0 <UART_SetConfig+0x338>)
 800b568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b56a:	f003 0307 	and.w	r3, r3, #7
 800b56e:	2b05      	cmp	r3, #5
 800b570:	d838      	bhi.n	800b5e4 <UART_SetConfig+0x35c>
 800b572:	a201      	add	r2, pc, #4	; (adr r2, 800b578 <UART_SetConfig+0x2f0>)
 800b574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b578:	0800b591 	.word	0x0800b591
 800b57c:	0800b599 	.word	0x0800b599
 800b580:	0800b5a1 	.word	0x0800b5a1
 800b584:	0800b5a9 	.word	0x0800b5a9
 800b588:	0800b5d5 	.word	0x0800b5d5
 800b58c:	0800b5dd 	.word	0x0800b5dd
 800b590:	2300      	movs	r3, #0
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b596:	e14a      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b598:	2304      	movs	r3, #4
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59e:	e146      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b5a0:	2308      	movs	r3, #8
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a6:	e142      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b5a8:	2310      	movs	r3, #16
 800b5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ae:	e13e      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b5b0:	cfff69f3 	.word	0xcfff69f3
 800b5b4:	58000c00 	.word	0x58000c00
 800b5b8:	11fff4ff 	.word	0x11fff4ff
 800b5bc:	40011000 	.word	0x40011000
 800b5c0:	58024400 	.word	0x58024400
 800b5c4:	40004400 	.word	0x40004400
 800b5c8:	40004800 	.word	0x40004800
 800b5cc:	40004c00 	.word	0x40004c00
 800b5d0:	40005000 	.word	0x40005000
 800b5d4:	2320      	movs	r3, #32
 800b5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5da:	e128      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b5dc:	2340      	movs	r3, #64	; 0x40
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5e2:	e124      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b5e4:	2380      	movs	r3, #128	; 0x80
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ea:	e120      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4acb      	ldr	r2, [pc, #812]	; (800b920 <UART_SetConfig+0x698>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d176      	bne.n	800b6e4 <UART_SetConfig+0x45c>
 800b5f6:	4bcb      	ldr	r3, [pc, #812]	; (800b924 <UART_SetConfig+0x69c>)
 800b5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5fe:	2b28      	cmp	r3, #40	; 0x28
 800b600:	d86c      	bhi.n	800b6dc <UART_SetConfig+0x454>
 800b602:	a201      	add	r2, pc, #4	; (adr r2, 800b608 <UART_SetConfig+0x380>)
 800b604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b608:	0800b6ad 	.word	0x0800b6ad
 800b60c:	0800b6dd 	.word	0x0800b6dd
 800b610:	0800b6dd 	.word	0x0800b6dd
 800b614:	0800b6dd 	.word	0x0800b6dd
 800b618:	0800b6dd 	.word	0x0800b6dd
 800b61c:	0800b6dd 	.word	0x0800b6dd
 800b620:	0800b6dd 	.word	0x0800b6dd
 800b624:	0800b6dd 	.word	0x0800b6dd
 800b628:	0800b6b5 	.word	0x0800b6b5
 800b62c:	0800b6dd 	.word	0x0800b6dd
 800b630:	0800b6dd 	.word	0x0800b6dd
 800b634:	0800b6dd 	.word	0x0800b6dd
 800b638:	0800b6dd 	.word	0x0800b6dd
 800b63c:	0800b6dd 	.word	0x0800b6dd
 800b640:	0800b6dd 	.word	0x0800b6dd
 800b644:	0800b6dd 	.word	0x0800b6dd
 800b648:	0800b6bd 	.word	0x0800b6bd
 800b64c:	0800b6dd 	.word	0x0800b6dd
 800b650:	0800b6dd 	.word	0x0800b6dd
 800b654:	0800b6dd 	.word	0x0800b6dd
 800b658:	0800b6dd 	.word	0x0800b6dd
 800b65c:	0800b6dd 	.word	0x0800b6dd
 800b660:	0800b6dd 	.word	0x0800b6dd
 800b664:	0800b6dd 	.word	0x0800b6dd
 800b668:	0800b6c5 	.word	0x0800b6c5
 800b66c:	0800b6dd 	.word	0x0800b6dd
 800b670:	0800b6dd 	.word	0x0800b6dd
 800b674:	0800b6dd 	.word	0x0800b6dd
 800b678:	0800b6dd 	.word	0x0800b6dd
 800b67c:	0800b6dd 	.word	0x0800b6dd
 800b680:	0800b6dd 	.word	0x0800b6dd
 800b684:	0800b6dd 	.word	0x0800b6dd
 800b688:	0800b6cd 	.word	0x0800b6cd
 800b68c:	0800b6dd 	.word	0x0800b6dd
 800b690:	0800b6dd 	.word	0x0800b6dd
 800b694:	0800b6dd 	.word	0x0800b6dd
 800b698:	0800b6dd 	.word	0x0800b6dd
 800b69c:	0800b6dd 	.word	0x0800b6dd
 800b6a0:	0800b6dd 	.word	0x0800b6dd
 800b6a4:	0800b6dd 	.word	0x0800b6dd
 800b6a8:	0800b6d5 	.word	0x0800b6d5
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6b2:	e0bc      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ba:	e0b8      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b6bc:	2308      	movs	r3, #8
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6c2:	e0b4      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ca:	e0b0      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b6cc:	2320      	movs	r3, #32
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6d2:	e0ac      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b6d4:	2340      	movs	r3, #64	; 0x40
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6da:	e0a8      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b6dc:	2380      	movs	r3, #128	; 0x80
 800b6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6e2:	e0a4      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a8f      	ldr	r2, [pc, #572]	; (800b928 <UART_SetConfig+0x6a0>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d130      	bne.n	800b750 <UART_SetConfig+0x4c8>
 800b6ee:	4b8d      	ldr	r3, [pc, #564]	; (800b924 <UART_SetConfig+0x69c>)
 800b6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f2:	f003 0307 	and.w	r3, r3, #7
 800b6f6:	2b05      	cmp	r3, #5
 800b6f8:	d826      	bhi.n	800b748 <UART_SetConfig+0x4c0>
 800b6fa:	a201      	add	r2, pc, #4	; (adr r2, 800b700 <UART_SetConfig+0x478>)
 800b6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b700:	0800b719 	.word	0x0800b719
 800b704:	0800b721 	.word	0x0800b721
 800b708:	0800b729 	.word	0x0800b729
 800b70c:	0800b731 	.word	0x0800b731
 800b710:	0800b739 	.word	0x0800b739
 800b714:	0800b741 	.word	0x0800b741
 800b718:	2300      	movs	r3, #0
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b71e:	e086      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b720:	2304      	movs	r3, #4
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b726:	e082      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b728:	2308      	movs	r3, #8
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b72e:	e07e      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b730:	2310      	movs	r3, #16
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b736:	e07a      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b738:	2320      	movs	r3, #32
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b73e:	e076      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b740:	2340      	movs	r3, #64	; 0x40
 800b742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b746:	e072      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b748:	2380      	movs	r3, #128	; 0x80
 800b74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b74e:	e06e      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a75      	ldr	r2, [pc, #468]	; (800b92c <UART_SetConfig+0x6a4>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d130      	bne.n	800b7bc <UART_SetConfig+0x534>
 800b75a:	4b72      	ldr	r3, [pc, #456]	; (800b924 <UART_SetConfig+0x69c>)
 800b75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b75e:	f003 0307 	and.w	r3, r3, #7
 800b762:	2b05      	cmp	r3, #5
 800b764:	d826      	bhi.n	800b7b4 <UART_SetConfig+0x52c>
 800b766:	a201      	add	r2, pc, #4	; (adr r2, 800b76c <UART_SetConfig+0x4e4>)
 800b768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76c:	0800b785 	.word	0x0800b785
 800b770:	0800b78d 	.word	0x0800b78d
 800b774:	0800b795 	.word	0x0800b795
 800b778:	0800b79d 	.word	0x0800b79d
 800b77c:	0800b7a5 	.word	0x0800b7a5
 800b780:	0800b7ad 	.word	0x0800b7ad
 800b784:	2300      	movs	r3, #0
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b78a:	e050      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b78c:	2304      	movs	r3, #4
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b792:	e04c      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b794:	2308      	movs	r3, #8
 800b796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b79a:	e048      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b79c:	2310      	movs	r3, #16
 800b79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7a2:	e044      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b7a4:	2320      	movs	r3, #32
 800b7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7aa:	e040      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b7ac:	2340      	movs	r3, #64	; 0x40
 800b7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7b2:	e03c      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b7b4:	2380      	movs	r3, #128	; 0x80
 800b7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ba:	e038      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a5b      	ldr	r2, [pc, #364]	; (800b930 <UART_SetConfig+0x6a8>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d130      	bne.n	800b828 <UART_SetConfig+0x5a0>
 800b7c6:	4b57      	ldr	r3, [pc, #348]	; (800b924 <UART_SetConfig+0x69c>)
 800b7c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ca:	f003 0307 	and.w	r3, r3, #7
 800b7ce:	2b05      	cmp	r3, #5
 800b7d0:	d826      	bhi.n	800b820 <UART_SetConfig+0x598>
 800b7d2:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <UART_SetConfig+0x550>)
 800b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d8:	0800b7f1 	.word	0x0800b7f1
 800b7dc:	0800b7f9 	.word	0x0800b7f9
 800b7e0:	0800b801 	.word	0x0800b801
 800b7e4:	0800b809 	.word	0x0800b809
 800b7e8:	0800b811 	.word	0x0800b811
 800b7ec:	0800b819 	.word	0x0800b819
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7f6:	e01a      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b7f8:	2304      	movs	r3, #4
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7fe:	e016      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b800:	2308      	movs	r3, #8
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b806:	e012      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b808:	2310      	movs	r3, #16
 800b80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b80e:	e00e      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b810:	2320      	movs	r3, #32
 800b812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b816:	e00a      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b818:	2340      	movs	r3, #64	; 0x40
 800b81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b81e:	e006      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b820:	2380      	movs	r3, #128	; 0x80
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b826:	e002      	b.n	800b82e <UART_SetConfig+0x5a6>
 800b828:	2380      	movs	r3, #128	; 0x80
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a3f      	ldr	r2, [pc, #252]	; (800b930 <UART_SetConfig+0x6a8>)
 800b834:	4293      	cmp	r3, r2
 800b836:	f040 80f8 	bne.w	800ba2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b83a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b83e:	2b20      	cmp	r3, #32
 800b840:	dc46      	bgt.n	800b8d0 <UART_SetConfig+0x648>
 800b842:	2b02      	cmp	r3, #2
 800b844:	f2c0 8082 	blt.w	800b94c <UART_SetConfig+0x6c4>
 800b848:	3b02      	subs	r3, #2
 800b84a:	2b1e      	cmp	r3, #30
 800b84c:	d87e      	bhi.n	800b94c <UART_SetConfig+0x6c4>
 800b84e:	a201      	add	r2, pc, #4	; (adr r2, 800b854 <UART_SetConfig+0x5cc>)
 800b850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b854:	0800b8d7 	.word	0x0800b8d7
 800b858:	0800b94d 	.word	0x0800b94d
 800b85c:	0800b8df 	.word	0x0800b8df
 800b860:	0800b94d 	.word	0x0800b94d
 800b864:	0800b94d 	.word	0x0800b94d
 800b868:	0800b94d 	.word	0x0800b94d
 800b86c:	0800b8ef 	.word	0x0800b8ef
 800b870:	0800b94d 	.word	0x0800b94d
 800b874:	0800b94d 	.word	0x0800b94d
 800b878:	0800b94d 	.word	0x0800b94d
 800b87c:	0800b94d 	.word	0x0800b94d
 800b880:	0800b94d 	.word	0x0800b94d
 800b884:	0800b94d 	.word	0x0800b94d
 800b888:	0800b94d 	.word	0x0800b94d
 800b88c:	0800b8ff 	.word	0x0800b8ff
 800b890:	0800b94d 	.word	0x0800b94d
 800b894:	0800b94d 	.word	0x0800b94d
 800b898:	0800b94d 	.word	0x0800b94d
 800b89c:	0800b94d 	.word	0x0800b94d
 800b8a0:	0800b94d 	.word	0x0800b94d
 800b8a4:	0800b94d 	.word	0x0800b94d
 800b8a8:	0800b94d 	.word	0x0800b94d
 800b8ac:	0800b94d 	.word	0x0800b94d
 800b8b0:	0800b94d 	.word	0x0800b94d
 800b8b4:	0800b94d 	.word	0x0800b94d
 800b8b8:	0800b94d 	.word	0x0800b94d
 800b8bc:	0800b94d 	.word	0x0800b94d
 800b8c0:	0800b94d 	.word	0x0800b94d
 800b8c4:	0800b94d 	.word	0x0800b94d
 800b8c8:	0800b94d 	.word	0x0800b94d
 800b8cc:	0800b93f 	.word	0x0800b93f
 800b8d0:	2b40      	cmp	r3, #64	; 0x40
 800b8d2:	d037      	beq.n	800b944 <UART_SetConfig+0x6bc>
 800b8d4:	e03a      	b.n	800b94c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b8d6:	f7fd fef1 	bl	80096bc <HAL_RCCEx_GetD3PCLK1Freq>
 800b8da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b8dc:	e03c      	b.n	800b958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fd ff00 	bl	80096e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ec:	e034      	b.n	800b958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8ee:	f107 0318 	add.w	r3, r7, #24
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe f84c 	bl	8009990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8fc:	e02c      	b.n	800b958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8fe:	4b09      	ldr	r3, [pc, #36]	; (800b924 <UART_SetConfig+0x69c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0320 	and.w	r3, r3, #32
 800b906:	2b00      	cmp	r3, #0
 800b908:	d016      	beq.n	800b938 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b90a:	4b06      	ldr	r3, [pc, #24]	; (800b924 <UART_SetConfig+0x69c>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	08db      	lsrs	r3, r3, #3
 800b910:	f003 0303 	and.w	r3, r3, #3
 800b914:	4a07      	ldr	r2, [pc, #28]	; (800b934 <UART_SetConfig+0x6ac>)
 800b916:	fa22 f303 	lsr.w	r3, r2, r3
 800b91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b91c:	e01c      	b.n	800b958 <UART_SetConfig+0x6d0>
 800b91e:	bf00      	nop
 800b920:	40011400 	.word	0x40011400
 800b924:	58024400 	.word	0x58024400
 800b928:	40007800 	.word	0x40007800
 800b92c:	40007c00 	.word	0x40007c00
 800b930:	58000c00 	.word	0x58000c00
 800b934:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b938:	4b9d      	ldr	r3, [pc, #628]	; (800bbb0 <UART_SetConfig+0x928>)
 800b93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b93c:	e00c      	b.n	800b958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b93e:	4b9d      	ldr	r3, [pc, #628]	; (800bbb4 <UART_SetConfig+0x92c>)
 800b940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b942:	e009      	b.n	800b958 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b94a:	e005      	b.n	800b958 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b94c:	2300      	movs	r3, #0
 800b94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b956:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f000 81de 	beq.w	800bd1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	4a94      	ldr	r2, [pc, #592]	; (800bbb8 <UART_SetConfig+0x930>)
 800b966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b96a:	461a      	mov	r2, r3
 800b96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b972:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	685a      	ldr	r2, [r3, #4]
 800b978:	4613      	mov	r3, r2
 800b97a:	005b      	lsls	r3, r3, #1
 800b97c:	4413      	add	r3, r2
 800b97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b980:	429a      	cmp	r2, r3
 800b982:	d305      	bcc.n	800b990 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b98a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d903      	bls.n	800b998 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b996:	e1c1      	b.n	800bd1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b99a:	2200      	movs	r2, #0
 800b99c:	60bb      	str	r3, [r7, #8]
 800b99e:	60fa      	str	r2, [r7, #12]
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	4a84      	ldr	r2, [pc, #528]	; (800bbb8 <UART_SetConfig+0x930>)
 800b9a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	603b      	str	r3, [r7, #0]
 800b9b0:	607a      	str	r2, [r7, #4]
 800b9b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9ba:	f7f4 fce1 	bl	8000380 <__aeabi_uldivmod>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	f04f 0200 	mov.w	r2, #0
 800b9ca:	f04f 0300 	mov.w	r3, #0
 800b9ce:	020b      	lsls	r3, r1, #8
 800b9d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b9d4:	0202      	lsls	r2, r0, #8
 800b9d6:	6979      	ldr	r1, [r7, #20]
 800b9d8:	6849      	ldr	r1, [r1, #4]
 800b9da:	0849      	lsrs	r1, r1, #1
 800b9dc:	2000      	movs	r0, #0
 800b9de:	460c      	mov	r4, r1
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	eb12 0804 	adds.w	r8, r2, r4
 800b9e6:	eb43 0905 	adc.w	r9, r3, r5
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	469a      	mov	sl, r3
 800b9f2:	4693      	mov	fp, r2
 800b9f4:	4652      	mov	r2, sl
 800b9f6:	465b      	mov	r3, fp
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	f7f4 fcc0 	bl	8000380 <__aeabi_uldivmod>
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4613      	mov	r3, r2
 800ba06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba0e:	d308      	bcc.n	800ba22 <UART_SetConfig+0x79a>
 800ba10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba16:	d204      	bcs.n	800ba22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba1e:	60da      	str	r2, [r3, #12]
 800ba20:	e17c      	b.n	800bd1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ba28:	e178      	b.n	800bd1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	69db      	ldr	r3, [r3, #28]
 800ba2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba32:	f040 80c5 	bne.w	800bbc0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ba36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ba3a:	2b20      	cmp	r3, #32
 800ba3c:	dc48      	bgt.n	800bad0 <UART_SetConfig+0x848>
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	db7b      	blt.n	800bb3a <UART_SetConfig+0x8b2>
 800ba42:	2b20      	cmp	r3, #32
 800ba44:	d879      	bhi.n	800bb3a <UART_SetConfig+0x8b2>
 800ba46:	a201      	add	r2, pc, #4	; (adr r2, 800ba4c <UART_SetConfig+0x7c4>)
 800ba48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4c:	0800bad7 	.word	0x0800bad7
 800ba50:	0800badf 	.word	0x0800badf
 800ba54:	0800bb3b 	.word	0x0800bb3b
 800ba58:	0800bb3b 	.word	0x0800bb3b
 800ba5c:	0800bae7 	.word	0x0800bae7
 800ba60:	0800bb3b 	.word	0x0800bb3b
 800ba64:	0800bb3b 	.word	0x0800bb3b
 800ba68:	0800bb3b 	.word	0x0800bb3b
 800ba6c:	0800baf7 	.word	0x0800baf7
 800ba70:	0800bb3b 	.word	0x0800bb3b
 800ba74:	0800bb3b 	.word	0x0800bb3b
 800ba78:	0800bb3b 	.word	0x0800bb3b
 800ba7c:	0800bb3b 	.word	0x0800bb3b
 800ba80:	0800bb3b 	.word	0x0800bb3b
 800ba84:	0800bb3b 	.word	0x0800bb3b
 800ba88:	0800bb3b 	.word	0x0800bb3b
 800ba8c:	0800bb07 	.word	0x0800bb07
 800ba90:	0800bb3b 	.word	0x0800bb3b
 800ba94:	0800bb3b 	.word	0x0800bb3b
 800ba98:	0800bb3b 	.word	0x0800bb3b
 800ba9c:	0800bb3b 	.word	0x0800bb3b
 800baa0:	0800bb3b 	.word	0x0800bb3b
 800baa4:	0800bb3b 	.word	0x0800bb3b
 800baa8:	0800bb3b 	.word	0x0800bb3b
 800baac:	0800bb3b 	.word	0x0800bb3b
 800bab0:	0800bb3b 	.word	0x0800bb3b
 800bab4:	0800bb3b 	.word	0x0800bb3b
 800bab8:	0800bb3b 	.word	0x0800bb3b
 800babc:	0800bb3b 	.word	0x0800bb3b
 800bac0:	0800bb3b 	.word	0x0800bb3b
 800bac4:	0800bb3b 	.word	0x0800bb3b
 800bac8:	0800bb3b 	.word	0x0800bb3b
 800bacc:	0800bb2d 	.word	0x0800bb2d
 800bad0:	2b40      	cmp	r3, #64	; 0x40
 800bad2:	d02e      	beq.n	800bb32 <UART_SetConfig+0x8aa>
 800bad4:	e031      	b.n	800bb3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bad6:	f7fc fbbb 	bl	8008250 <HAL_RCC_GetPCLK1Freq>
 800bada:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800badc:	e033      	b.n	800bb46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bade:	f7fc fbcd 	bl	800827c <HAL_RCC_GetPCLK2Freq>
 800bae2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bae4:	e02f      	b.n	800bb46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baea:	4618      	mov	r0, r3
 800baec:	f7fd fdfc 	bl	80096e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baf4:	e027      	b.n	800bb46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baf6:	f107 0318 	add.w	r3, r7, #24
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fd ff48 	bl	8009990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb04:	e01f      	b.n	800bb46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb06:	4b2d      	ldr	r3, [pc, #180]	; (800bbbc <UART_SetConfig+0x934>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f003 0320 	and.w	r3, r3, #32
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d009      	beq.n	800bb26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb12:	4b2a      	ldr	r3, [pc, #168]	; (800bbbc <UART_SetConfig+0x934>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	08db      	lsrs	r3, r3, #3
 800bb18:	f003 0303 	and.w	r3, r3, #3
 800bb1c:	4a24      	ldr	r2, [pc, #144]	; (800bbb0 <UART_SetConfig+0x928>)
 800bb1e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb24:	e00f      	b.n	800bb46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bb26:	4b22      	ldr	r3, [pc, #136]	; (800bbb0 <UART_SetConfig+0x928>)
 800bb28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb2a:	e00c      	b.n	800bb46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb2c:	4b21      	ldr	r3, [pc, #132]	; (800bbb4 <UART_SetConfig+0x92c>)
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb30:	e009      	b.n	800bb46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb38:	e005      	b.n	800bb46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bb44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 80e7 	beq.w	800bd1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb52:	4a19      	ldr	r2, [pc, #100]	; (800bbb8 <UART_SetConfig+0x930>)
 800bb54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb60:	005a      	lsls	r2, r3, #1
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	085b      	lsrs	r3, r3, #1
 800bb68:	441a      	add	r2, r3
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	2b0f      	cmp	r3, #15
 800bb78:	d916      	bls.n	800bba8 <UART_SetConfig+0x920>
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb80:	d212      	bcs.n	800bba8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	f023 030f 	bic.w	r3, r3, #15
 800bb8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8e:	085b      	lsrs	r3, r3, #1
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	f003 0307 	and.w	r3, r3, #7
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bba4:	60da      	str	r2, [r3, #12]
 800bba6:	e0b9      	b.n	800bd1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bbae:	e0b5      	b.n	800bd1c <UART_SetConfig+0xa94>
 800bbb0:	03d09000 	.word	0x03d09000
 800bbb4:	003d0900 	.word	0x003d0900
 800bbb8:	0800f850 	.word	0x0800f850
 800bbbc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bbc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bbc4:	2b20      	cmp	r3, #32
 800bbc6:	dc49      	bgt.n	800bc5c <UART_SetConfig+0x9d4>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	db7c      	blt.n	800bcc6 <UART_SetConfig+0xa3e>
 800bbcc:	2b20      	cmp	r3, #32
 800bbce:	d87a      	bhi.n	800bcc6 <UART_SetConfig+0xa3e>
 800bbd0:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <UART_SetConfig+0x950>)
 800bbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd6:	bf00      	nop
 800bbd8:	0800bc63 	.word	0x0800bc63
 800bbdc:	0800bc6b 	.word	0x0800bc6b
 800bbe0:	0800bcc7 	.word	0x0800bcc7
 800bbe4:	0800bcc7 	.word	0x0800bcc7
 800bbe8:	0800bc73 	.word	0x0800bc73
 800bbec:	0800bcc7 	.word	0x0800bcc7
 800bbf0:	0800bcc7 	.word	0x0800bcc7
 800bbf4:	0800bcc7 	.word	0x0800bcc7
 800bbf8:	0800bc83 	.word	0x0800bc83
 800bbfc:	0800bcc7 	.word	0x0800bcc7
 800bc00:	0800bcc7 	.word	0x0800bcc7
 800bc04:	0800bcc7 	.word	0x0800bcc7
 800bc08:	0800bcc7 	.word	0x0800bcc7
 800bc0c:	0800bcc7 	.word	0x0800bcc7
 800bc10:	0800bcc7 	.word	0x0800bcc7
 800bc14:	0800bcc7 	.word	0x0800bcc7
 800bc18:	0800bc93 	.word	0x0800bc93
 800bc1c:	0800bcc7 	.word	0x0800bcc7
 800bc20:	0800bcc7 	.word	0x0800bcc7
 800bc24:	0800bcc7 	.word	0x0800bcc7
 800bc28:	0800bcc7 	.word	0x0800bcc7
 800bc2c:	0800bcc7 	.word	0x0800bcc7
 800bc30:	0800bcc7 	.word	0x0800bcc7
 800bc34:	0800bcc7 	.word	0x0800bcc7
 800bc38:	0800bcc7 	.word	0x0800bcc7
 800bc3c:	0800bcc7 	.word	0x0800bcc7
 800bc40:	0800bcc7 	.word	0x0800bcc7
 800bc44:	0800bcc7 	.word	0x0800bcc7
 800bc48:	0800bcc7 	.word	0x0800bcc7
 800bc4c:	0800bcc7 	.word	0x0800bcc7
 800bc50:	0800bcc7 	.word	0x0800bcc7
 800bc54:	0800bcc7 	.word	0x0800bcc7
 800bc58:	0800bcb9 	.word	0x0800bcb9
 800bc5c:	2b40      	cmp	r3, #64	; 0x40
 800bc5e:	d02e      	beq.n	800bcbe <UART_SetConfig+0xa36>
 800bc60:	e031      	b.n	800bcc6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc62:	f7fc faf5 	bl	8008250 <HAL_RCC_GetPCLK1Freq>
 800bc66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc68:	e033      	b.n	800bcd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc6a:	f7fc fb07 	bl	800827c <HAL_RCC_GetPCLK2Freq>
 800bc6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc70:	e02f      	b.n	800bcd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fd fd36 	bl	80096e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc80:	e027      	b.n	800bcd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc82:	f107 0318 	add.w	r3, r7, #24
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fd fe82 	bl	8009990 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc90:	e01f      	b.n	800bcd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc92:	4b2d      	ldr	r3, [pc, #180]	; (800bd48 <UART_SetConfig+0xac0>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 0320 	and.w	r3, r3, #32
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d009      	beq.n	800bcb2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc9e:	4b2a      	ldr	r3, [pc, #168]	; (800bd48 <UART_SetConfig+0xac0>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	08db      	lsrs	r3, r3, #3
 800bca4:	f003 0303 	and.w	r3, r3, #3
 800bca8:	4a28      	ldr	r2, [pc, #160]	; (800bd4c <UART_SetConfig+0xac4>)
 800bcaa:	fa22 f303 	lsr.w	r3, r2, r3
 800bcae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bcb0:	e00f      	b.n	800bcd2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bcb2:	4b26      	ldr	r3, [pc, #152]	; (800bd4c <UART_SetConfig+0xac4>)
 800bcb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcb6:	e00c      	b.n	800bcd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bcb8:	4b25      	ldr	r3, [pc, #148]	; (800bd50 <UART_SetConfig+0xac8>)
 800bcba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcbc:	e009      	b.n	800bcd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcc4:	e005      	b.n	800bcd2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bcd0:	bf00      	nop
    }

    if (pclk != 0U)
 800bcd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d021      	beq.n	800bd1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	4a1d      	ldr	r2, [pc, #116]	; (800bd54 <UART_SetConfig+0xacc>)
 800bcde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bce2:	461a      	mov	r2, r3
 800bce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce6:	fbb3 f2f2 	udiv	r2, r3, r2
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	085b      	lsrs	r3, r3, #1
 800bcf0:	441a      	add	r2, r3
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcfa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfe:	2b0f      	cmp	r3, #15
 800bd00:	d909      	bls.n	800bd16 <UART_SetConfig+0xa8e>
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd08:	d205      	bcs.n	800bd16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	60da      	str	r2, [r3, #12]
 800bd14:	e002      	b.n	800bd1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	2200      	movs	r2, #0
 800bd36:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800bd38:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3748      	adds	r7, #72	; 0x48
 800bd40:	46bd      	mov	sp, r7
 800bd42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd46:	bf00      	nop
 800bd48:	58024400 	.word	0x58024400
 800bd4c:	03d09000 	.word	0x03d09000
 800bd50:	003d0900 	.word	0x003d0900
 800bd54:	0800f850 	.word	0x0800f850

0800bd58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd64:	f003 0301 	and.w	r3, r3, #1
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00a      	beq.n	800bd82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd86:	f003 0302 	and.w	r3, r3, #2
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00a      	beq.n	800bda4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	430a      	orrs	r2, r1
 800bda2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00a      	beq.n	800bdc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdca:	f003 0308 	and.w	r3, r3, #8
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00a      	beq.n	800bde8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	430a      	orrs	r2, r1
 800bde6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdec:	f003 0310 	and.w	r3, r3, #16
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00a      	beq.n	800be0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	430a      	orrs	r2, r1
 800be08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be0e:	f003 0320 	and.w	r3, r3, #32
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00a      	beq.n	800be2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	430a      	orrs	r2, r1
 800be2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01a      	beq.n	800be6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	430a      	orrs	r2, r1
 800be4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be56:	d10a      	bne.n	800be6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	430a      	orrs	r2, r1
 800be6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00a      	beq.n	800be90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	605a      	str	r2, [r3, #4]
  }
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b098      	sub	sp, #96	; 0x60
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800beac:	f7f7 fce2 	bl	8003874 <HAL_GetTick>
 800beb0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0308 	and.w	r3, r3, #8
 800bebc:	2b08      	cmp	r3, #8
 800bebe:	d12f      	bne.n	800bf20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bec8:	2200      	movs	r2, #0
 800beca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f88e 	bl	800bff0 <UART_WaitOnFlagUntilTimeout>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d022      	beq.n	800bf20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	e853 3f00 	ldrex	r3, [r3]
 800bee6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beee:	653b      	str	r3, [r7, #80]	; 0x50
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	461a      	mov	r2, r3
 800bef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bef8:	647b      	str	r3, [r7, #68]	; 0x44
 800befa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800befe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf00:	e841 2300 	strex	r3, r2, [r1]
 800bf04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e6      	bne.n	800beda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2220      	movs	r2, #32
 800bf10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	e063      	b.n	800bfe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f003 0304 	and.w	r3, r3, #4
 800bf2a:	2b04      	cmp	r3, #4
 800bf2c:	d149      	bne.n	800bfc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf36:	2200      	movs	r2, #0
 800bf38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f857 	bl	800bff0 <UART_WaitOnFlagUntilTimeout>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d03c      	beq.n	800bfc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	623b      	str	r3, [r7, #32]
   return(result);
 800bf56:	6a3b      	ldr	r3, [r7, #32]
 800bf58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	461a      	mov	r2, r3
 800bf64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf66:	633b      	str	r3, [r7, #48]	; 0x30
 800bf68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1e6      	bne.n	800bf48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	3308      	adds	r3, #8
 800bf80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	e853 3f00 	ldrex	r3, [r3]
 800bf88:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f023 0301 	bic.w	r3, r3, #1
 800bf90:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	3308      	adds	r3, #8
 800bf98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf9a:	61fa      	str	r2, [r7, #28]
 800bf9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9e:	69b9      	ldr	r1, [r7, #24]
 800bfa0:	69fa      	ldr	r2, [r7, #28]
 800bfa2:	e841 2300 	strex	r3, r2, [r1]
 800bfa6:	617b      	str	r3, [r7, #20]
   return(result);
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1e5      	bne.n	800bf7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e012      	b.n	800bfe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2220      	movs	r2, #32
 800bfc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2220      	movs	r2, #32
 800bfce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3758      	adds	r7, #88	; 0x58
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	603b      	str	r3, [r7, #0]
 800bffc:	4613      	mov	r3, r2
 800bffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c000:	e049      	b.n	800c096 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c008:	d045      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c00a:	f7f7 fc33 	bl	8003874 <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	69ba      	ldr	r2, [r7, #24]
 800c016:	429a      	cmp	r2, r3
 800c018:	d302      	bcc.n	800c020 <UART_WaitOnFlagUntilTimeout+0x30>
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c020:	2303      	movs	r3, #3
 800c022:	e048      	b.n	800c0b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 0304 	and.w	r3, r3, #4
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d031      	beq.n	800c096 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	69db      	ldr	r3, [r3, #28]
 800c038:	f003 0308 	and.w	r3, r3, #8
 800c03c:	2b08      	cmp	r3, #8
 800c03e:	d110      	bne.n	800c062 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2208      	movs	r2, #8
 800c046:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f000 f839 	bl	800c0c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2208      	movs	r2, #8
 800c052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e029      	b.n	800c0b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c06c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c070:	d111      	bne.n	800c096 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c07a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f000 f81f 	bl	800c0c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2220      	movs	r2, #32
 800c086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e00f      	b.n	800c0b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69da      	ldr	r2, [r3, #28]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	bf0c      	ite	eq
 800c0a6:	2301      	moveq	r3, #1
 800c0a8:	2300      	movne	r3, #0
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d0a6      	beq.n	800c002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b095      	sub	sp, #84	; 0x54
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d0:	e853 3f00 	ldrex	r3, [r3]
 800c0d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0e6:	643b      	str	r3, [r7, #64]	; 0x40
 800c0e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0ee:	e841 2300 	strex	r3, r2, [r1]
 800c0f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1e6      	bne.n	800c0c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	3308      	adds	r3, #8
 800c100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	e853 3f00 	ldrex	r3, [r3]
 800c108:	61fb      	str	r3, [r7, #28]
   return(result);
 800c10a:	69fa      	ldr	r2, [r7, #28]
 800c10c:	4b1e      	ldr	r3, [pc, #120]	; (800c188 <UART_EndRxTransfer+0xc8>)
 800c10e:	4013      	ands	r3, r2
 800c110:	64bb      	str	r3, [r7, #72]	; 0x48
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3308      	adds	r3, #8
 800c118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c11a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c11c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c122:	e841 2300 	strex	r3, r2, [r1]
 800c126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e5      	bne.n	800c0fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c132:	2b01      	cmp	r3, #1
 800c134:	d118      	bne.n	800c168 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	60bb      	str	r3, [r7, #8]
   return(result);
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f023 0310 	bic.w	r3, r3, #16
 800c14a:	647b      	str	r3, [r7, #68]	; 0x44
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c154:	61bb      	str	r3, [r7, #24]
 800c156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6979      	ldr	r1, [r7, #20]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	613b      	str	r3, [r7, #16]
   return(result);
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e6      	bne.n	800c136 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c17c:	bf00      	nop
 800c17e:	3754      	adds	r7, #84	; 0x54
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	effffffe 	.word	0xeffffffe

0800c18c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c198:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f7ff f856 	bl	800b25c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1b0:	bf00      	nop
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	e853 3f00 	ldrex	r3, [r3]
 800c1cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1d4:	61fb      	str	r3, [r7, #28]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	61bb      	str	r3, [r7, #24]
 800c1e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e2:	6979      	ldr	r1, [r7, #20]
 800c1e4:	69ba      	ldr	r2, [r7, #24]
 800c1e6:	e841 2300 	strex	r3, r2, [r1]
 800c1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1e6      	bne.n	800c1c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2220      	movs	r2, #32
 800c1f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7ff f821 	bl	800b248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c206:	bf00      	nop
 800c208:	3720      	adds	r7, #32
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c20e:	b480      	push	{r7}
 800c210:	b083      	sub	sp, #12
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c216:	bf00      	nop
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c22a:	bf00      	nop
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c236:	b480      	push	{r7}
 800c238:	b083      	sub	sp, #12
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c23e:	bf00      	nop
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
	...

0800c24c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d121      	bne.n	800c2a2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	4b27      	ldr	r3, [pc, #156]	; (800c300 <FMC_SDRAM_Init+0xb4>)
 800c264:	4013      	ands	r3, r2
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	6851      	ldr	r1, [r2, #4]
 800c26a:	683a      	ldr	r2, [r7, #0]
 800c26c:	6892      	ldr	r2, [r2, #8]
 800c26e:	4311      	orrs	r1, r2
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	68d2      	ldr	r2, [r2, #12]
 800c274:	4311      	orrs	r1, r2
 800c276:	683a      	ldr	r2, [r7, #0]
 800c278:	6912      	ldr	r2, [r2, #16]
 800c27a:	4311      	orrs	r1, r2
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	6952      	ldr	r2, [r2, #20]
 800c280:	4311      	orrs	r1, r2
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	6992      	ldr	r2, [r2, #24]
 800c286:	4311      	orrs	r1, r2
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	69d2      	ldr	r2, [r2, #28]
 800c28c:	4311      	orrs	r1, r2
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	6a12      	ldr	r2, [r2, #32]
 800c292:	4311      	orrs	r1, r2
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c298:	430a      	orrs	r2, r1
 800c29a:	431a      	orrs	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	e026      	b.n	800c2f0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	69d9      	ldr	r1, [r3, #28]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	6a1b      	ldr	r3, [r3, #32]
 800c2b2:	4319      	orrs	r1, r3
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b8:	430b      	orrs	r3, r1
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685a      	ldr	r2, [r3, #4]
 800c2c4:	4b0e      	ldr	r3, [pc, #56]	; (800c300 <FMC_SDRAM_Init+0xb4>)
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	683a      	ldr	r2, [r7, #0]
 800c2ca:	6851      	ldr	r1, [r2, #4]
 800c2cc:	683a      	ldr	r2, [r7, #0]
 800c2ce:	6892      	ldr	r2, [r2, #8]
 800c2d0:	4311      	orrs	r1, r2
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	68d2      	ldr	r2, [r2, #12]
 800c2d6:	4311      	orrs	r1, r2
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	6912      	ldr	r2, [r2, #16]
 800c2dc:	4311      	orrs	r1, r2
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	6952      	ldr	r2, [r2, #20]
 800c2e2:	4311      	orrs	r1, r2
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	6992      	ldr	r2, [r2, #24]
 800c2e8:	430a      	orrs	r2, r1
 800c2ea:	431a      	orrs	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	ffff8000 	.word	0xffff8000

0800c304 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d128      	bne.n	800c368 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	1e59      	subs	r1, r3, #1
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	3b01      	subs	r3, #1
 800c32a:	011b      	lsls	r3, r3, #4
 800c32c:	4319      	orrs	r1, r3
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	3b01      	subs	r3, #1
 800c334:	021b      	lsls	r3, r3, #8
 800c336:	4319      	orrs	r1, r3
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	031b      	lsls	r3, r3, #12
 800c340:	4319      	orrs	r1, r3
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	3b01      	subs	r3, #1
 800c348:	041b      	lsls	r3, r3, #16
 800c34a:	4319      	orrs	r1, r3
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	695b      	ldr	r3, [r3, #20]
 800c350:	3b01      	subs	r3, #1
 800c352:	051b      	lsls	r3, r3, #20
 800c354:	4319      	orrs	r1, r3
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	699b      	ldr	r3, [r3, #24]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	061b      	lsls	r3, r3, #24
 800c35e:	430b      	orrs	r3, r1
 800c360:	431a      	orrs	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	609a      	str	r2, [r3, #8]
 800c366:	e02d      	b.n	800c3c4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	689a      	ldr	r2, [r3, #8]
 800c36c:	4b19      	ldr	r3, [pc, #100]	; (800c3d4 <FMC_SDRAM_Timing_Init+0xd0>)
 800c36e:	4013      	ands	r3, r2
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	68d2      	ldr	r2, [r2, #12]
 800c374:	3a01      	subs	r2, #1
 800c376:	0311      	lsls	r1, r2, #12
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	6952      	ldr	r2, [r2, #20]
 800c37c:	3a01      	subs	r2, #1
 800c37e:	0512      	lsls	r2, r2, #20
 800c380:	430a      	orrs	r2, r1
 800c382:	431a      	orrs	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	1e59      	subs	r1, r3, #1
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	3b01      	subs	r3, #1
 800c39c:	011b      	lsls	r3, r3, #4
 800c39e:	4319      	orrs	r1, r3
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	021b      	lsls	r3, r3, #8
 800c3a8:	4319      	orrs	r1, r3
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	041b      	lsls	r3, r3, #16
 800c3b2:	4319      	orrs	r1, r3
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	061b      	lsls	r3, r3, #24
 800c3bc:	430b      	orrs	r3, r1
 800c3be:	431a      	orrs	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	ff0f0fff 	.word	0xff0f0fff

0800c3d8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	691a      	ldr	r2, [r3, #16]
 800c3e8:	4b0c      	ldr	r3, [pc, #48]	; (800c41c <FMC_SDRAM_SendCommand+0x44>)
 800c3ea:	4013      	ands	r3, r2
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	6811      	ldr	r1, [r2, #0]
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	6852      	ldr	r2, [r2, #4]
 800c3f4:	4311      	orrs	r1, r2
 800c3f6:	68ba      	ldr	r2, [r7, #8]
 800c3f8:	6892      	ldr	r2, [r2, #8]
 800c3fa:	3a01      	subs	r2, #1
 800c3fc:	0152      	lsls	r2, r2, #5
 800c3fe:	4311      	orrs	r1, r2
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	68d2      	ldr	r2, [r2, #12]
 800c404:	0252      	lsls	r2, r2, #9
 800c406:	430a      	orrs	r2, r1
 800c408:	431a      	orrs	r2, r3
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	ffc00000 	.word	0xffc00000

0800c420 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	695a      	ldr	r2, [r3, #20]
 800c42e:	4b07      	ldr	r3, [pc, #28]	; (800c44c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c430:	4013      	ands	r3, r2
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	0052      	lsls	r2, r2, #1
 800c436:	431a      	orrs	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	ffffc001 	.word	0xffffc001

0800c450 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	689a      	ldr	r2, [r3, #8]
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	683a      	ldr	r2, [r7, #0]
 800c47a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	601a      	str	r2, [r3, #0]
}
 800c48c:	bf00      	nop
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	6892      	ldr	r2, [r2, #8]
 800c4ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	6852      	ldr	r2, [r2, #4]
 800c4b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d103      	bne.n	800c4cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	689a      	ldr	r2, [r3, #8]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	1e5a      	subs	r2, r3, #1
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4f6:	4b4f      	ldr	r3, [pc, #316]	; (800c634 <xTaskIncrementTick+0x148>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f040 808f 	bne.w	800c61e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c500:	4b4d      	ldr	r3, [pc, #308]	; (800c638 <xTaskIncrementTick+0x14c>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3301      	adds	r3, #1
 800c506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c508:	4a4b      	ldr	r2, [pc, #300]	; (800c638 <xTaskIncrementTick+0x14c>)
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d120      	bne.n	800c556 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c514:	4b49      	ldr	r3, [pc, #292]	; (800c63c <xTaskIncrementTick+0x150>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00a      	beq.n	800c534 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c530:	bf00      	nop
 800c532:	e7fe      	b.n	800c532 <xTaskIncrementTick+0x46>
 800c534:	4b41      	ldr	r3, [pc, #260]	; (800c63c <xTaskIncrementTick+0x150>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	4b41      	ldr	r3, [pc, #260]	; (800c640 <xTaskIncrementTick+0x154>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a3f      	ldr	r2, [pc, #252]	; (800c63c <xTaskIncrementTick+0x150>)
 800c540:	6013      	str	r3, [r2, #0]
 800c542:	4a3f      	ldr	r2, [pc, #252]	; (800c640 <xTaskIncrementTick+0x154>)
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6013      	str	r3, [r2, #0]
 800c548:	4b3e      	ldr	r3, [pc, #248]	; (800c644 <xTaskIncrementTick+0x158>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3301      	adds	r3, #1
 800c54e:	4a3d      	ldr	r2, [pc, #244]	; (800c644 <xTaskIncrementTick+0x158>)
 800c550:	6013      	str	r3, [r2, #0]
 800c552:	f000 f8e3 	bl	800c71c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c556:	4b3c      	ldr	r3, [pc, #240]	; (800c648 <xTaskIncrementTick+0x15c>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d349      	bcc.n	800c5f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c560:	4b36      	ldr	r3, [pc, #216]	; (800c63c <xTaskIncrementTick+0x150>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d104      	bne.n	800c574 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c56a:	4b37      	ldr	r3, [pc, #220]	; (800c648 <xTaskIncrementTick+0x15c>)
 800c56c:	f04f 32ff 	mov.w	r2, #4294967295
 800c570:	601a      	str	r2, [r3, #0]
					break;
 800c572:	e03f      	b.n	800c5f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c574:	4b31      	ldr	r3, [pc, #196]	; (800c63c <xTaskIncrementTick+0x150>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d203      	bcs.n	800c594 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c58c:	4a2e      	ldr	r2, [pc, #184]	; (800c648 <xTaskIncrementTick+0x15c>)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c592:	e02f      	b.n	800c5f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	3304      	adds	r3, #4
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff ff7d 	bl	800c498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d004      	beq.n	800c5b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	3318      	adds	r3, #24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7ff ff74 	bl	800c498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b4:	4b25      	ldr	r3, [pc, #148]	; (800c64c <xTaskIncrementTick+0x160>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d903      	bls.n	800c5c4 <xTaskIncrementTick+0xd8>
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	4a22      	ldr	r2, [pc, #136]	; (800c64c <xTaskIncrementTick+0x160>)
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4a1f      	ldr	r2, [pc, #124]	; (800c650 <xTaskIncrementTick+0x164>)
 800c5d2:	441a      	add	r2, r3
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4610      	mov	r0, r2
 800c5dc:	f7ff ff38 	bl	800c450 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e4:	4b1b      	ldr	r3, [pc, #108]	; (800c654 <xTaskIncrementTick+0x168>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d3b8      	bcc.n	800c560 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5f2:	e7b5      	b.n	800c560 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5f4:	4b17      	ldr	r3, [pc, #92]	; (800c654 <xTaskIncrementTick+0x168>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5fa:	4915      	ldr	r1, [pc, #84]	; (800c650 <xTaskIncrementTick+0x164>)
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	440b      	add	r3, r1
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d901      	bls.n	800c610 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c60c:	2301      	movs	r3, #1
 800c60e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c610:	4b11      	ldr	r3, [pc, #68]	; (800c658 <xTaskIncrementTick+0x16c>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d007      	beq.n	800c628 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c618:	2301      	movs	r3, #1
 800c61a:	617b      	str	r3, [r7, #20]
 800c61c:	e004      	b.n	800c628 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c61e:	4b0f      	ldr	r3, [pc, #60]	; (800c65c <xTaskIncrementTick+0x170>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3301      	adds	r3, #1
 800c624:	4a0d      	ldr	r2, [pc, #52]	; (800c65c <xTaskIncrementTick+0x170>)
 800c626:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c628:	697b      	ldr	r3, [r7, #20]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3718      	adds	r7, #24
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	240014c0 	.word	0x240014c0
 800c638:	240014a4 	.word	0x240014a4
 800c63c:	2400149c 	.word	0x2400149c
 800c640:	240014a0 	.word	0x240014a0
 800c644:	240014b8 	.word	0x240014b8
 800c648:	240014bc 	.word	0x240014bc
 800c64c:	240014a8 	.word	0x240014a8
 800c650:	2400103c 	.word	0x2400103c
 800c654:	24001038 	.word	0x24001038
 800c658:	240014b4 	.word	0x240014b4
 800c65c:	240014b0 	.word	0x240014b0

0800c660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c666:	4b28      	ldr	r3, [pc, #160]	; (800c708 <vTaskSwitchContext+0xa8>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c66e:	4b27      	ldr	r3, [pc, #156]	; (800c70c <vTaskSwitchContext+0xac>)
 800c670:	2201      	movs	r2, #1
 800c672:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c674:	e041      	b.n	800c6fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c676:	4b25      	ldr	r3, [pc, #148]	; (800c70c <vTaskSwitchContext+0xac>)
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c67c:	4b24      	ldr	r3, [pc, #144]	; (800c710 <vTaskSwitchContext+0xb0>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	60fb      	str	r3, [r7, #12]
 800c682:	e010      	b.n	800c6a6 <vTaskSwitchContext+0x46>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d10a      	bne.n	800c6a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800c68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68e:	f383 8811 	msr	BASEPRI, r3
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	607b      	str	r3, [r7, #4]
}
 800c69c:	bf00      	nop
 800c69e:	e7fe      	b.n	800c69e <vTaskSwitchContext+0x3e>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	60fb      	str	r3, [r7, #12]
 800c6a6:	491b      	ldr	r1, [pc, #108]	; (800c714 <vTaskSwitchContext+0xb4>)
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	440b      	add	r3, r1
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d0e4      	beq.n	800c684 <vTaskSwitchContext+0x24>
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4a13      	ldr	r2, [pc, #76]	; (800c714 <vTaskSwitchContext+0xb4>)
 800c6c6:	4413      	add	r3, r2
 800c6c8:	60bb      	str	r3, [r7, #8]
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	605a      	str	r2, [r3, #4]
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	685a      	ldr	r2, [r3, #4]
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	3308      	adds	r3, #8
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d104      	bne.n	800c6ea <vTaskSwitchContext+0x8a>
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	605a      	str	r2, [r3, #4]
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	4a09      	ldr	r2, [pc, #36]	; (800c718 <vTaskSwitchContext+0xb8>)
 800c6f2:	6013      	str	r3, [r2, #0]
 800c6f4:	4a06      	ldr	r2, [pc, #24]	; (800c710 <vTaskSwitchContext+0xb0>)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6013      	str	r3, [r2, #0]
}
 800c6fa:	bf00      	nop
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	240014c0 	.word	0x240014c0
 800c70c:	240014b4 	.word	0x240014b4
 800c710:	240014a8 	.word	0x240014a8
 800c714:	2400103c 	.word	0x2400103c
 800c718:	24001038 	.word	0x24001038

0800c71c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c722:	4b0c      	ldr	r3, [pc, #48]	; (800c754 <prvResetNextTaskUnblockTime+0x38>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d104      	bne.n	800c736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c72c:	4b0a      	ldr	r3, [pc, #40]	; (800c758 <prvResetNextTaskUnblockTime+0x3c>)
 800c72e:	f04f 32ff 	mov.w	r2, #4294967295
 800c732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c734:	e008      	b.n	800c748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c736:	4b07      	ldr	r3, [pc, #28]	; (800c754 <prvResetNextTaskUnblockTime+0x38>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	4a04      	ldr	r2, [pc, #16]	; (800c758 <prvResetNextTaskUnblockTime+0x3c>)
 800c746:	6013      	str	r3, [r2, #0]
}
 800c748:	bf00      	nop
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr
 800c754:	2400149c 	.word	0x2400149c
 800c758:	240014bc 	.word	0x240014bc

0800c75c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c762:	4b0b      	ldr	r3, [pc, #44]	; (800c790 <xTaskGetSchedulerState+0x34>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d102      	bne.n	800c770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c76a:	2301      	movs	r3, #1
 800c76c:	607b      	str	r3, [r7, #4]
 800c76e:	e008      	b.n	800c782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c770:	4b08      	ldr	r3, [pc, #32]	; (800c794 <xTaskGetSchedulerState+0x38>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d102      	bne.n	800c77e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c778:	2302      	movs	r3, #2
 800c77a:	607b      	str	r3, [r7, #4]
 800c77c:	e001      	b.n	800c782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c77e:	2300      	movs	r3, #0
 800c780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c782:	687b      	ldr	r3, [r7, #4]
	}
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	240014ac 	.word	0x240014ac
 800c794:	240014c0 	.word	0x240014c0
	...

0800c7a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7a0:	4b07      	ldr	r3, [pc, #28]	; (800c7c0 <pxCurrentTCBConst2>)
 800c7a2:	6819      	ldr	r1, [r3, #0]
 800c7a4:	6808      	ldr	r0, [r1, #0]
 800c7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7aa:	f380 8809 	msr	PSP, r0
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f04f 0000 	mov.w	r0, #0
 800c7b6:	f380 8811 	msr	BASEPRI, r0
 800c7ba:	4770      	bx	lr
 800c7bc:	f3af 8000 	nop.w

0800c7c0 <pxCurrentTCBConst2>:
 800c7c0:	24001038 	.word	0x24001038
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop
	...

0800c7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7d0:	f3ef 8009 	mrs	r0, PSP
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	4b15      	ldr	r3, [pc, #84]	; (800c830 <pxCurrentTCBConst>)
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	f01e 0f10 	tst.w	lr, #16
 800c7e0:	bf08      	it	eq
 800c7e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ea:	6010      	str	r0, [r2, #0]
 800c7ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7f4:	f380 8811 	msr	BASEPRI, r0
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f7ff ff2e 	bl	800c660 <vTaskSwitchContext>
 800c804:	f04f 0000 	mov.w	r0, #0
 800c808:	f380 8811 	msr	BASEPRI, r0
 800c80c:	bc09      	pop	{r0, r3}
 800c80e:	6819      	ldr	r1, [r3, #0]
 800c810:	6808      	ldr	r0, [r1, #0]
 800c812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c816:	f01e 0f10 	tst.w	lr, #16
 800c81a:	bf08      	it	eq
 800c81c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c820:	f380 8809 	msr	PSP, r0
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	f3af 8000 	nop.w

0800c830 <pxCurrentTCBConst>:
 800c830:	24001038 	.word	0x24001038
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop

0800c838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
	__asm volatile
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	607b      	str	r3, [r7, #4]
}
 800c850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c852:	f7ff fe4b 	bl	800c4ec <xTaskIncrementTick>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d003      	beq.n	800c864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c85c:	4b06      	ldr	r3, [pc, #24]	; (800c878 <xPortSysTickHandler+0x40>)
 800c85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c862:	601a      	str	r2, [r3, #0]
 800c864:	2300      	movs	r3, #0
 800c866:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c86e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c870:	bf00      	nop
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	e000ed04 	.word	0xe000ed04

0800c87c <std>:
 800c87c:	2300      	movs	r3, #0
 800c87e:	b510      	push	{r4, lr}
 800c880:	4604      	mov	r4, r0
 800c882:	e9c0 3300 	strd	r3, r3, [r0]
 800c886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c88a:	6083      	str	r3, [r0, #8]
 800c88c:	8181      	strh	r1, [r0, #12]
 800c88e:	6643      	str	r3, [r0, #100]	; 0x64
 800c890:	81c2      	strh	r2, [r0, #14]
 800c892:	6183      	str	r3, [r0, #24]
 800c894:	4619      	mov	r1, r3
 800c896:	2208      	movs	r2, #8
 800c898:	305c      	adds	r0, #92	; 0x5c
 800c89a:	f000 f9d4 	bl	800cc46 <memset>
 800c89e:	4b0d      	ldr	r3, [pc, #52]	; (800c8d4 <std+0x58>)
 800c8a0:	6263      	str	r3, [r4, #36]	; 0x24
 800c8a2:	4b0d      	ldr	r3, [pc, #52]	; (800c8d8 <std+0x5c>)
 800c8a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c8a6:	4b0d      	ldr	r3, [pc, #52]	; (800c8dc <std+0x60>)
 800c8a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c8aa:	4b0d      	ldr	r3, [pc, #52]	; (800c8e0 <std+0x64>)
 800c8ac:	6323      	str	r3, [r4, #48]	; 0x30
 800c8ae:	4b0d      	ldr	r3, [pc, #52]	; (800c8e4 <std+0x68>)
 800c8b0:	6224      	str	r4, [r4, #32]
 800c8b2:	429c      	cmp	r4, r3
 800c8b4:	d006      	beq.n	800c8c4 <std+0x48>
 800c8b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c8ba:	4294      	cmp	r4, r2
 800c8bc:	d002      	beq.n	800c8c4 <std+0x48>
 800c8be:	33d0      	adds	r3, #208	; 0xd0
 800c8c0:	429c      	cmp	r4, r3
 800c8c2:	d105      	bne.n	800c8d0 <std+0x54>
 800c8c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8cc:	f000 ba34 	b.w	800cd38 <__retarget_lock_init_recursive>
 800c8d0:	bd10      	pop	{r4, pc}
 800c8d2:	bf00      	nop
 800c8d4:	0800cbc1 	.word	0x0800cbc1
 800c8d8:	0800cbe3 	.word	0x0800cbe3
 800c8dc:	0800cc1b 	.word	0x0800cc1b
 800c8e0:	0800cc3f 	.word	0x0800cc3f
 800c8e4:	240014c4 	.word	0x240014c4

0800c8e8 <stdio_exit_handler>:
 800c8e8:	4a02      	ldr	r2, [pc, #8]	; (800c8f4 <stdio_exit_handler+0xc>)
 800c8ea:	4903      	ldr	r1, [pc, #12]	; (800c8f8 <stdio_exit_handler+0x10>)
 800c8ec:	4803      	ldr	r0, [pc, #12]	; (800c8fc <stdio_exit_handler+0x14>)
 800c8ee:	f000 b869 	b.w	800c9c4 <_fwalk_sglue>
 800c8f2:	bf00      	nop
 800c8f4:	24000034 	.word	0x24000034
 800c8f8:	0800d8c1 	.word	0x0800d8c1
 800c8fc:	24000040 	.word	0x24000040

0800c900 <cleanup_stdio>:
 800c900:	6841      	ldr	r1, [r0, #4]
 800c902:	4b0c      	ldr	r3, [pc, #48]	; (800c934 <cleanup_stdio+0x34>)
 800c904:	4299      	cmp	r1, r3
 800c906:	b510      	push	{r4, lr}
 800c908:	4604      	mov	r4, r0
 800c90a:	d001      	beq.n	800c910 <cleanup_stdio+0x10>
 800c90c:	f000 ffd8 	bl	800d8c0 <_fflush_r>
 800c910:	68a1      	ldr	r1, [r4, #8]
 800c912:	4b09      	ldr	r3, [pc, #36]	; (800c938 <cleanup_stdio+0x38>)
 800c914:	4299      	cmp	r1, r3
 800c916:	d002      	beq.n	800c91e <cleanup_stdio+0x1e>
 800c918:	4620      	mov	r0, r4
 800c91a:	f000 ffd1 	bl	800d8c0 <_fflush_r>
 800c91e:	68e1      	ldr	r1, [r4, #12]
 800c920:	4b06      	ldr	r3, [pc, #24]	; (800c93c <cleanup_stdio+0x3c>)
 800c922:	4299      	cmp	r1, r3
 800c924:	d004      	beq.n	800c930 <cleanup_stdio+0x30>
 800c926:	4620      	mov	r0, r4
 800c928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c92c:	f000 bfc8 	b.w	800d8c0 <_fflush_r>
 800c930:	bd10      	pop	{r4, pc}
 800c932:	bf00      	nop
 800c934:	240014c4 	.word	0x240014c4
 800c938:	2400152c 	.word	0x2400152c
 800c93c:	24001594 	.word	0x24001594

0800c940 <global_stdio_init.part.0>:
 800c940:	b510      	push	{r4, lr}
 800c942:	4b0b      	ldr	r3, [pc, #44]	; (800c970 <global_stdio_init.part.0+0x30>)
 800c944:	4c0b      	ldr	r4, [pc, #44]	; (800c974 <global_stdio_init.part.0+0x34>)
 800c946:	4a0c      	ldr	r2, [pc, #48]	; (800c978 <global_stdio_init.part.0+0x38>)
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	4620      	mov	r0, r4
 800c94c:	2200      	movs	r2, #0
 800c94e:	2104      	movs	r1, #4
 800c950:	f7ff ff94 	bl	800c87c <std>
 800c954:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c958:	2201      	movs	r2, #1
 800c95a:	2109      	movs	r1, #9
 800c95c:	f7ff ff8e 	bl	800c87c <std>
 800c960:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c964:	2202      	movs	r2, #2
 800c966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c96a:	2112      	movs	r1, #18
 800c96c:	f7ff bf86 	b.w	800c87c <std>
 800c970:	240015fc 	.word	0x240015fc
 800c974:	240014c4 	.word	0x240014c4
 800c978:	0800c8e9 	.word	0x0800c8e9

0800c97c <__sfp_lock_acquire>:
 800c97c:	4801      	ldr	r0, [pc, #4]	; (800c984 <__sfp_lock_acquire+0x8>)
 800c97e:	f000 b9dc 	b.w	800cd3a <__retarget_lock_acquire_recursive>
 800c982:	bf00      	nop
 800c984:	24001605 	.word	0x24001605

0800c988 <__sfp_lock_release>:
 800c988:	4801      	ldr	r0, [pc, #4]	; (800c990 <__sfp_lock_release+0x8>)
 800c98a:	f000 b9d7 	b.w	800cd3c <__retarget_lock_release_recursive>
 800c98e:	bf00      	nop
 800c990:	24001605 	.word	0x24001605

0800c994 <__sinit>:
 800c994:	b510      	push	{r4, lr}
 800c996:	4604      	mov	r4, r0
 800c998:	f7ff fff0 	bl	800c97c <__sfp_lock_acquire>
 800c99c:	6a23      	ldr	r3, [r4, #32]
 800c99e:	b11b      	cbz	r3, 800c9a8 <__sinit+0x14>
 800c9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9a4:	f7ff bff0 	b.w	800c988 <__sfp_lock_release>
 800c9a8:	4b04      	ldr	r3, [pc, #16]	; (800c9bc <__sinit+0x28>)
 800c9aa:	6223      	str	r3, [r4, #32]
 800c9ac:	4b04      	ldr	r3, [pc, #16]	; (800c9c0 <__sinit+0x2c>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1f5      	bne.n	800c9a0 <__sinit+0xc>
 800c9b4:	f7ff ffc4 	bl	800c940 <global_stdio_init.part.0>
 800c9b8:	e7f2      	b.n	800c9a0 <__sinit+0xc>
 800c9ba:	bf00      	nop
 800c9bc:	0800c901 	.word	0x0800c901
 800c9c0:	240015fc 	.word	0x240015fc

0800c9c4 <_fwalk_sglue>:
 800c9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9c8:	4607      	mov	r7, r0
 800c9ca:	4688      	mov	r8, r1
 800c9cc:	4614      	mov	r4, r2
 800c9ce:	2600      	movs	r6, #0
 800c9d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9d4:	f1b9 0901 	subs.w	r9, r9, #1
 800c9d8:	d505      	bpl.n	800c9e6 <_fwalk_sglue+0x22>
 800c9da:	6824      	ldr	r4, [r4, #0]
 800c9dc:	2c00      	cmp	r4, #0
 800c9de:	d1f7      	bne.n	800c9d0 <_fwalk_sglue+0xc>
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d907      	bls.n	800c9fc <_fwalk_sglue+0x38>
 800c9ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	d003      	beq.n	800c9fc <_fwalk_sglue+0x38>
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	47c0      	blx	r8
 800c9fa:	4306      	orrs	r6, r0
 800c9fc:	3568      	adds	r5, #104	; 0x68
 800c9fe:	e7e9      	b.n	800c9d4 <_fwalk_sglue+0x10>

0800ca00 <iprintf>:
 800ca00:	b40f      	push	{r0, r1, r2, r3}
 800ca02:	b507      	push	{r0, r1, r2, lr}
 800ca04:	4906      	ldr	r1, [pc, #24]	; (800ca20 <iprintf+0x20>)
 800ca06:	ab04      	add	r3, sp, #16
 800ca08:	6808      	ldr	r0, [r1, #0]
 800ca0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca0e:	6881      	ldr	r1, [r0, #8]
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	f000 fc25 	bl	800d260 <_vfiprintf_r>
 800ca16:	b003      	add	sp, #12
 800ca18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca1c:	b004      	add	sp, #16
 800ca1e:	4770      	bx	lr
 800ca20:	2400008c 	.word	0x2400008c

0800ca24 <setvbuf>:
 800ca24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca28:	461d      	mov	r5, r3
 800ca2a:	4b54      	ldr	r3, [pc, #336]	; (800cb7c <setvbuf+0x158>)
 800ca2c:	681f      	ldr	r7, [r3, #0]
 800ca2e:	4604      	mov	r4, r0
 800ca30:	460e      	mov	r6, r1
 800ca32:	4690      	mov	r8, r2
 800ca34:	b127      	cbz	r7, 800ca40 <setvbuf+0x1c>
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	b913      	cbnz	r3, 800ca40 <setvbuf+0x1c>
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	f7ff ffaa 	bl	800c994 <__sinit>
 800ca40:	f1b8 0f02 	cmp.w	r8, #2
 800ca44:	d006      	beq.n	800ca54 <setvbuf+0x30>
 800ca46:	f1b8 0f01 	cmp.w	r8, #1
 800ca4a:	f200 8094 	bhi.w	800cb76 <setvbuf+0x152>
 800ca4e:	2d00      	cmp	r5, #0
 800ca50:	f2c0 8091 	blt.w	800cb76 <setvbuf+0x152>
 800ca54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca56:	07da      	lsls	r2, r3, #31
 800ca58:	d405      	bmi.n	800ca66 <setvbuf+0x42>
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	059b      	lsls	r3, r3, #22
 800ca5e:	d402      	bmi.n	800ca66 <setvbuf+0x42>
 800ca60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca62:	f000 f96a 	bl	800cd3a <__retarget_lock_acquire_recursive>
 800ca66:	4621      	mov	r1, r4
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f000 ff29 	bl	800d8c0 <_fflush_r>
 800ca6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca70:	b141      	cbz	r1, 800ca84 <setvbuf+0x60>
 800ca72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca76:	4299      	cmp	r1, r3
 800ca78:	d002      	beq.n	800ca80 <setvbuf+0x5c>
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	f000 f96e 	bl	800cd5c <_free_r>
 800ca80:	2300      	movs	r3, #0
 800ca82:	6363      	str	r3, [r4, #52]	; 0x34
 800ca84:	2300      	movs	r3, #0
 800ca86:	61a3      	str	r3, [r4, #24]
 800ca88:	6063      	str	r3, [r4, #4]
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	0618      	lsls	r0, r3, #24
 800ca8e:	d503      	bpl.n	800ca98 <setvbuf+0x74>
 800ca90:	6921      	ldr	r1, [r4, #16]
 800ca92:	4638      	mov	r0, r7
 800ca94:	f000 f962 	bl	800cd5c <_free_r>
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ca9e:	f023 0303 	bic.w	r3, r3, #3
 800caa2:	f1b8 0f02 	cmp.w	r8, #2
 800caa6:	81a3      	strh	r3, [r4, #12]
 800caa8:	d05f      	beq.n	800cb6a <setvbuf+0x146>
 800caaa:	ab01      	add	r3, sp, #4
 800caac:	466a      	mov	r2, sp
 800caae:	4621      	mov	r1, r4
 800cab0:	4638      	mov	r0, r7
 800cab2:	f000 ff2d 	bl	800d910 <__swhatbuf_r>
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	4318      	orrs	r0, r3
 800caba:	81a0      	strh	r0, [r4, #12]
 800cabc:	bb2d      	cbnz	r5, 800cb0a <setvbuf+0xe6>
 800cabe:	9d00      	ldr	r5, [sp, #0]
 800cac0:	4628      	mov	r0, r5
 800cac2:	f000 f997 	bl	800cdf4 <malloc>
 800cac6:	4606      	mov	r6, r0
 800cac8:	2800      	cmp	r0, #0
 800caca:	d150      	bne.n	800cb6e <setvbuf+0x14a>
 800cacc:	f8dd 9000 	ldr.w	r9, [sp]
 800cad0:	45a9      	cmp	r9, r5
 800cad2:	d13e      	bne.n	800cb52 <setvbuf+0x12e>
 800cad4:	f04f 35ff 	mov.w	r5, #4294967295
 800cad8:	2200      	movs	r2, #0
 800cada:	60a2      	str	r2, [r4, #8]
 800cadc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800cae0:	6022      	str	r2, [r4, #0]
 800cae2:	6122      	str	r2, [r4, #16]
 800cae4:	2201      	movs	r2, #1
 800cae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caea:	6162      	str	r2, [r4, #20]
 800caec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800caee:	f043 0302 	orr.w	r3, r3, #2
 800caf2:	07d1      	lsls	r1, r2, #31
 800caf4:	81a3      	strh	r3, [r4, #12]
 800caf6:	d404      	bmi.n	800cb02 <setvbuf+0xde>
 800caf8:	059b      	lsls	r3, r3, #22
 800cafa:	d402      	bmi.n	800cb02 <setvbuf+0xde>
 800cafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cafe:	f000 f91d 	bl	800cd3c <__retarget_lock_release_recursive>
 800cb02:	4628      	mov	r0, r5
 800cb04:	b003      	add	sp, #12
 800cb06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb0a:	2e00      	cmp	r6, #0
 800cb0c:	d0d8      	beq.n	800cac0 <setvbuf+0x9c>
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	b913      	cbnz	r3, 800cb18 <setvbuf+0xf4>
 800cb12:	4638      	mov	r0, r7
 800cb14:	f7ff ff3e 	bl	800c994 <__sinit>
 800cb18:	f1b8 0f01 	cmp.w	r8, #1
 800cb1c:	bf08      	it	eq
 800cb1e:	89a3      	ldrheq	r3, [r4, #12]
 800cb20:	6026      	str	r6, [r4, #0]
 800cb22:	bf04      	itt	eq
 800cb24:	f043 0301 	orreq.w	r3, r3, #1
 800cb28:	81a3      	strheq	r3, [r4, #12]
 800cb2a:	89a3      	ldrh	r3, [r4, #12]
 800cb2c:	f013 0208 	ands.w	r2, r3, #8
 800cb30:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800cb34:	d01d      	beq.n	800cb72 <setvbuf+0x14e>
 800cb36:	07da      	lsls	r2, r3, #31
 800cb38:	bf41      	itttt	mi
 800cb3a:	2200      	movmi	r2, #0
 800cb3c:	426d      	negmi	r5, r5
 800cb3e:	60a2      	strmi	r2, [r4, #8]
 800cb40:	61a5      	strmi	r5, [r4, #24]
 800cb42:	bf58      	it	pl
 800cb44:	60a5      	strpl	r5, [r4, #8]
 800cb46:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800cb48:	f015 0501 	ands.w	r5, r5, #1
 800cb4c:	d0d4      	beq.n	800caf8 <setvbuf+0xd4>
 800cb4e:	2500      	movs	r5, #0
 800cb50:	e7d7      	b.n	800cb02 <setvbuf+0xde>
 800cb52:	4648      	mov	r0, r9
 800cb54:	f000 f94e 	bl	800cdf4 <malloc>
 800cb58:	4606      	mov	r6, r0
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d0ba      	beq.n	800cad4 <setvbuf+0xb0>
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb64:	81a3      	strh	r3, [r4, #12]
 800cb66:	464d      	mov	r5, r9
 800cb68:	e7d1      	b.n	800cb0e <setvbuf+0xea>
 800cb6a:	2500      	movs	r5, #0
 800cb6c:	e7b4      	b.n	800cad8 <setvbuf+0xb4>
 800cb6e:	46a9      	mov	r9, r5
 800cb70:	e7f5      	b.n	800cb5e <setvbuf+0x13a>
 800cb72:	60a2      	str	r2, [r4, #8]
 800cb74:	e7e7      	b.n	800cb46 <setvbuf+0x122>
 800cb76:	f04f 35ff 	mov.w	r5, #4294967295
 800cb7a:	e7c2      	b.n	800cb02 <setvbuf+0xde>
 800cb7c:	2400008c 	.word	0x2400008c

0800cb80 <siprintf>:
 800cb80:	b40e      	push	{r1, r2, r3}
 800cb82:	b500      	push	{lr}
 800cb84:	b09c      	sub	sp, #112	; 0x70
 800cb86:	ab1d      	add	r3, sp, #116	; 0x74
 800cb88:	9002      	str	r0, [sp, #8]
 800cb8a:	9006      	str	r0, [sp, #24]
 800cb8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cb90:	4809      	ldr	r0, [pc, #36]	; (800cbb8 <siprintf+0x38>)
 800cb92:	9107      	str	r1, [sp, #28]
 800cb94:	9104      	str	r1, [sp, #16]
 800cb96:	4909      	ldr	r1, [pc, #36]	; (800cbbc <siprintf+0x3c>)
 800cb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb9c:	9105      	str	r1, [sp, #20]
 800cb9e:	6800      	ldr	r0, [r0, #0]
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	a902      	add	r1, sp, #8
 800cba4:	f000 fa34 	bl	800d010 <_svfiprintf_r>
 800cba8:	9b02      	ldr	r3, [sp, #8]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	701a      	strb	r2, [r3, #0]
 800cbae:	b01c      	add	sp, #112	; 0x70
 800cbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb4:	b003      	add	sp, #12
 800cbb6:	4770      	bx	lr
 800cbb8:	2400008c 	.word	0x2400008c
 800cbbc:	ffff0208 	.word	0xffff0208

0800cbc0 <__sread>:
 800cbc0:	b510      	push	{r4, lr}
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbc8:	f000 f868 	bl	800cc9c <_read_r>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	bfab      	itete	ge
 800cbd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbd2:	89a3      	ldrhlt	r3, [r4, #12]
 800cbd4:	181b      	addge	r3, r3, r0
 800cbd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbda:	bfac      	ite	ge
 800cbdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbde:	81a3      	strhlt	r3, [r4, #12]
 800cbe0:	bd10      	pop	{r4, pc}

0800cbe2 <__swrite>:
 800cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe6:	461f      	mov	r7, r3
 800cbe8:	898b      	ldrh	r3, [r1, #12]
 800cbea:	05db      	lsls	r3, r3, #23
 800cbec:	4605      	mov	r5, r0
 800cbee:	460c      	mov	r4, r1
 800cbf0:	4616      	mov	r6, r2
 800cbf2:	d505      	bpl.n	800cc00 <__swrite+0x1e>
 800cbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f000 f83c 	bl	800cc78 <_lseek_r>
 800cc00:	89a3      	ldrh	r3, [r4, #12]
 800cc02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc0a:	81a3      	strh	r3, [r4, #12]
 800cc0c:	4632      	mov	r2, r6
 800cc0e:	463b      	mov	r3, r7
 800cc10:	4628      	mov	r0, r5
 800cc12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc16:	f000 b853 	b.w	800ccc0 <_write_r>

0800cc1a <__sseek>:
 800cc1a:	b510      	push	{r4, lr}
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc22:	f000 f829 	bl	800cc78 <_lseek_r>
 800cc26:	1c43      	adds	r3, r0, #1
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	bf15      	itete	ne
 800cc2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc36:	81a3      	strheq	r3, [r4, #12]
 800cc38:	bf18      	it	ne
 800cc3a:	81a3      	strhne	r3, [r4, #12]
 800cc3c:	bd10      	pop	{r4, pc}

0800cc3e <__sclose>:
 800cc3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc42:	f000 b809 	b.w	800cc58 <_close_r>

0800cc46 <memset>:
 800cc46:	4402      	add	r2, r0
 800cc48:	4603      	mov	r3, r0
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d100      	bne.n	800cc50 <memset+0xa>
 800cc4e:	4770      	bx	lr
 800cc50:	f803 1b01 	strb.w	r1, [r3], #1
 800cc54:	e7f9      	b.n	800cc4a <memset+0x4>
	...

0800cc58 <_close_r>:
 800cc58:	b538      	push	{r3, r4, r5, lr}
 800cc5a:	4d06      	ldr	r5, [pc, #24]	; (800cc74 <_close_r+0x1c>)
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	4604      	mov	r4, r0
 800cc60:	4608      	mov	r0, r1
 800cc62:	602b      	str	r3, [r5, #0]
 800cc64:	f7f4 f812 	bl	8000c8c <_close>
 800cc68:	1c43      	adds	r3, r0, #1
 800cc6a:	d102      	bne.n	800cc72 <_close_r+0x1a>
 800cc6c:	682b      	ldr	r3, [r5, #0]
 800cc6e:	b103      	cbz	r3, 800cc72 <_close_r+0x1a>
 800cc70:	6023      	str	r3, [r4, #0]
 800cc72:	bd38      	pop	{r3, r4, r5, pc}
 800cc74:	24001600 	.word	0x24001600

0800cc78 <_lseek_r>:
 800cc78:	b538      	push	{r3, r4, r5, lr}
 800cc7a:	4d07      	ldr	r5, [pc, #28]	; (800cc98 <_lseek_r+0x20>)
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	4608      	mov	r0, r1
 800cc80:	4611      	mov	r1, r2
 800cc82:	2200      	movs	r2, #0
 800cc84:	602a      	str	r2, [r5, #0]
 800cc86:	461a      	mov	r2, r3
 800cc88:	f7f4 f817 	bl	8000cba <_lseek>
 800cc8c:	1c43      	adds	r3, r0, #1
 800cc8e:	d102      	bne.n	800cc96 <_lseek_r+0x1e>
 800cc90:	682b      	ldr	r3, [r5, #0]
 800cc92:	b103      	cbz	r3, 800cc96 <_lseek_r+0x1e>
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	bd38      	pop	{r3, r4, r5, pc}
 800cc98:	24001600 	.word	0x24001600

0800cc9c <_read_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	4d07      	ldr	r5, [pc, #28]	; (800ccbc <_read_r+0x20>)
 800cca0:	4604      	mov	r4, r0
 800cca2:	4608      	mov	r0, r1
 800cca4:	4611      	mov	r1, r2
 800cca6:	2200      	movs	r2, #0
 800cca8:	602a      	str	r2, [r5, #0]
 800ccaa:	461a      	mov	r2, r3
 800ccac:	f7f4 f832 	bl	8000d14 <_read>
 800ccb0:	1c43      	adds	r3, r0, #1
 800ccb2:	d102      	bne.n	800ccba <_read_r+0x1e>
 800ccb4:	682b      	ldr	r3, [r5, #0]
 800ccb6:	b103      	cbz	r3, 800ccba <_read_r+0x1e>
 800ccb8:	6023      	str	r3, [r4, #0]
 800ccba:	bd38      	pop	{r3, r4, r5, pc}
 800ccbc:	24001600 	.word	0x24001600

0800ccc0 <_write_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d07      	ldr	r5, [pc, #28]	; (800cce0 <_write_r+0x20>)
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	4608      	mov	r0, r1
 800ccc8:	4611      	mov	r1, r2
 800ccca:	2200      	movs	r2, #0
 800cccc:	602a      	str	r2, [r5, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f7f4 f848 	bl	8000d64 <_write>
 800ccd4:	1c43      	adds	r3, r0, #1
 800ccd6:	d102      	bne.n	800ccde <_write_r+0x1e>
 800ccd8:	682b      	ldr	r3, [r5, #0]
 800ccda:	b103      	cbz	r3, 800ccde <_write_r+0x1e>
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	bd38      	pop	{r3, r4, r5, pc}
 800cce0:	24001600 	.word	0x24001600

0800cce4 <__errno>:
 800cce4:	4b01      	ldr	r3, [pc, #4]	; (800ccec <__errno+0x8>)
 800cce6:	6818      	ldr	r0, [r3, #0]
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	2400008c 	.word	0x2400008c

0800ccf0 <__libc_init_array>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	4d0d      	ldr	r5, [pc, #52]	; (800cd28 <__libc_init_array+0x38>)
 800ccf4:	4c0d      	ldr	r4, [pc, #52]	; (800cd2c <__libc_init_array+0x3c>)
 800ccf6:	1b64      	subs	r4, r4, r5
 800ccf8:	10a4      	asrs	r4, r4, #2
 800ccfa:	2600      	movs	r6, #0
 800ccfc:	42a6      	cmp	r6, r4
 800ccfe:	d109      	bne.n	800cd14 <__libc_init_array+0x24>
 800cd00:	4d0b      	ldr	r5, [pc, #44]	; (800cd30 <__libc_init_array+0x40>)
 800cd02:	4c0c      	ldr	r4, [pc, #48]	; (800cd34 <__libc_init_array+0x44>)
 800cd04:	f000 ff80 	bl	800dc08 <_init>
 800cd08:	1b64      	subs	r4, r4, r5
 800cd0a:	10a4      	asrs	r4, r4, #2
 800cd0c:	2600      	movs	r6, #0
 800cd0e:	42a6      	cmp	r6, r4
 800cd10:	d105      	bne.n	800cd1e <__libc_init_array+0x2e>
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd18:	4798      	blx	r3
 800cd1a:	3601      	adds	r6, #1
 800cd1c:	e7ee      	b.n	800ccfc <__libc_init_array+0xc>
 800cd1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd22:	4798      	blx	r3
 800cd24:	3601      	adds	r6, #1
 800cd26:	e7f2      	b.n	800cd0e <__libc_init_array+0x1e>
 800cd28:	0800f8a4 	.word	0x0800f8a4
 800cd2c:	0800f8a4 	.word	0x0800f8a4
 800cd30:	0800f8a4 	.word	0x0800f8a4
 800cd34:	0800f8a8 	.word	0x0800f8a8

0800cd38 <__retarget_lock_init_recursive>:
 800cd38:	4770      	bx	lr

0800cd3a <__retarget_lock_acquire_recursive>:
 800cd3a:	4770      	bx	lr

0800cd3c <__retarget_lock_release_recursive>:
 800cd3c:	4770      	bx	lr

0800cd3e <memcpy>:
 800cd3e:	440a      	add	r2, r1
 800cd40:	4291      	cmp	r1, r2
 800cd42:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd46:	d100      	bne.n	800cd4a <memcpy+0xc>
 800cd48:	4770      	bx	lr
 800cd4a:	b510      	push	{r4, lr}
 800cd4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd54:	4291      	cmp	r1, r2
 800cd56:	d1f9      	bne.n	800cd4c <memcpy+0xe>
 800cd58:	bd10      	pop	{r4, pc}
	...

0800cd5c <_free_r>:
 800cd5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd5e:	2900      	cmp	r1, #0
 800cd60:	d044      	beq.n	800cdec <_free_r+0x90>
 800cd62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd66:	9001      	str	r0, [sp, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f1a1 0404 	sub.w	r4, r1, #4
 800cd6e:	bfb8      	it	lt
 800cd70:	18e4      	addlt	r4, r4, r3
 800cd72:	f000 f8e7 	bl	800cf44 <__malloc_lock>
 800cd76:	4a1e      	ldr	r2, [pc, #120]	; (800cdf0 <_free_r+0x94>)
 800cd78:	9801      	ldr	r0, [sp, #4]
 800cd7a:	6813      	ldr	r3, [r2, #0]
 800cd7c:	b933      	cbnz	r3, 800cd8c <_free_r+0x30>
 800cd7e:	6063      	str	r3, [r4, #4]
 800cd80:	6014      	str	r4, [r2, #0]
 800cd82:	b003      	add	sp, #12
 800cd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd88:	f000 b8e2 	b.w	800cf50 <__malloc_unlock>
 800cd8c:	42a3      	cmp	r3, r4
 800cd8e:	d908      	bls.n	800cda2 <_free_r+0x46>
 800cd90:	6825      	ldr	r5, [r4, #0]
 800cd92:	1961      	adds	r1, r4, r5
 800cd94:	428b      	cmp	r3, r1
 800cd96:	bf01      	itttt	eq
 800cd98:	6819      	ldreq	r1, [r3, #0]
 800cd9a:	685b      	ldreq	r3, [r3, #4]
 800cd9c:	1949      	addeq	r1, r1, r5
 800cd9e:	6021      	streq	r1, [r4, #0]
 800cda0:	e7ed      	b.n	800cd7e <_free_r+0x22>
 800cda2:	461a      	mov	r2, r3
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	b10b      	cbz	r3, 800cdac <_free_r+0x50>
 800cda8:	42a3      	cmp	r3, r4
 800cdaa:	d9fa      	bls.n	800cda2 <_free_r+0x46>
 800cdac:	6811      	ldr	r1, [r2, #0]
 800cdae:	1855      	adds	r5, r2, r1
 800cdb0:	42a5      	cmp	r5, r4
 800cdb2:	d10b      	bne.n	800cdcc <_free_r+0x70>
 800cdb4:	6824      	ldr	r4, [r4, #0]
 800cdb6:	4421      	add	r1, r4
 800cdb8:	1854      	adds	r4, r2, r1
 800cdba:	42a3      	cmp	r3, r4
 800cdbc:	6011      	str	r1, [r2, #0]
 800cdbe:	d1e0      	bne.n	800cd82 <_free_r+0x26>
 800cdc0:	681c      	ldr	r4, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	6053      	str	r3, [r2, #4]
 800cdc6:	440c      	add	r4, r1
 800cdc8:	6014      	str	r4, [r2, #0]
 800cdca:	e7da      	b.n	800cd82 <_free_r+0x26>
 800cdcc:	d902      	bls.n	800cdd4 <_free_r+0x78>
 800cdce:	230c      	movs	r3, #12
 800cdd0:	6003      	str	r3, [r0, #0]
 800cdd2:	e7d6      	b.n	800cd82 <_free_r+0x26>
 800cdd4:	6825      	ldr	r5, [r4, #0]
 800cdd6:	1961      	adds	r1, r4, r5
 800cdd8:	428b      	cmp	r3, r1
 800cdda:	bf04      	itt	eq
 800cddc:	6819      	ldreq	r1, [r3, #0]
 800cdde:	685b      	ldreq	r3, [r3, #4]
 800cde0:	6063      	str	r3, [r4, #4]
 800cde2:	bf04      	itt	eq
 800cde4:	1949      	addeq	r1, r1, r5
 800cde6:	6021      	streq	r1, [r4, #0]
 800cde8:	6054      	str	r4, [r2, #4]
 800cdea:	e7ca      	b.n	800cd82 <_free_r+0x26>
 800cdec:	b003      	add	sp, #12
 800cdee:	bd30      	pop	{r4, r5, pc}
 800cdf0:	24001608 	.word	0x24001608

0800cdf4 <malloc>:
 800cdf4:	4b02      	ldr	r3, [pc, #8]	; (800ce00 <malloc+0xc>)
 800cdf6:	4601      	mov	r1, r0
 800cdf8:	6818      	ldr	r0, [r3, #0]
 800cdfa:	f000 b823 	b.w	800ce44 <_malloc_r>
 800cdfe:	bf00      	nop
 800ce00:	2400008c 	.word	0x2400008c

0800ce04 <sbrk_aligned>:
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	4e0e      	ldr	r6, [pc, #56]	; (800ce40 <sbrk_aligned+0x3c>)
 800ce08:	460c      	mov	r4, r1
 800ce0a:	6831      	ldr	r1, [r6, #0]
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	b911      	cbnz	r1, 800ce16 <sbrk_aligned+0x12>
 800ce10:	f000 feb2 	bl	800db78 <_sbrk_r>
 800ce14:	6030      	str	r0, [r6, #0]
 800ce16:	4621      	mov	r1, r4
 800ce18:	4628      	mov	r0, r5
 800ce1a:	f000 fead 	bl	800db78 <_sbrk_r>
 800ce1e:	1c43      	adds	r3, r0, #1
 800ce20:	d00a      	beq.n	800ce38 <sbrk_aligned+0x34>
 800ce22:	1cc4      	adds	r4, r0, #3
 800ce24:	f024 0403 	bic.w	r4, r4, #3
 800ce28:	42a0      	cmp	r0, r4
 800ce2a:	d007      	beq.n	800ce3c <sbrk_aligned+0x38>
 800ce2c:	1a21      	subs	r1, r4, r0
 800ce2e:	4628      	mov	r0, r5
 800ce30:	f000 fea2 	bl	800db78 <_sbrk_r>
 800ce34:	3001      	adds	r0, #1
 800ce36:	d101      	bne.n	800ce3c <sbrk_aligned+0x38>
 800ce38:	f04f 34ff 	mov.w	r4, #4294967295
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
 800ce40:	2400160c 	.word	0x2400160c

0800ce44 <_malloc_r>:
 800ce44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce48:	1ccd      	adds	r5, r1, #3
 800ce4a:	f025 0503 	bic.w	r5, r5, #3
 800ce4e:	3508      	adds	r5, #8
 800ce50:	2d0c      	cmp	r5, #12
 800ce52:	bf38      	it	cc
 800ce54:	250c      	movcc	r5, #12
 800ce56:	2d00      	cmp	r5, #0
 800ce58:	4607      	mov	r7, r0
 800ce5a:	db01      	blt.n	800ce60 <_malloc_r+0x1c>
 800ce5c:	42a9      	cmp	r1, r5
 800ce5e:	d905      	bls.n	800ce6c <_malloc_r+0x28>
 800ce60:	230c      	movs	r3, #12
 800ce62:	603b      	str	r3, [r7, #0]
 800ce64:	2600      	movs	r6, #0
 800ce66:	4630      	mov	r0, r6
 800ce68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cf40 <_malloc_r+0xfc>
 800ce70:	f000 f868 	bl	800cf44 <__malloc_lock>
 800ce74:	f8d8 3000 	ldr.w	r3, [r8]
 800ce78:	461c      	mov	r4, r3
 800ce7a:	bb5c      	cbnz	r4, 800ced4 <_malloc_r+0x90>
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	4638      	mov	r0, r7
 800ce80:	f7ff ffc0 	bl	800ce04 <sbrk_aligned>
 800ce84:	1c43      	adds	r3, r0, #1
 800ce86:	4604      	mov	r4, r0
 800ce88:	d155      	bne.n	800cf36 <_malloc_r+0xf2>
 800ce8a:	f8d8 4000 	ldr.w	r4, [r8]
 800ce8e:	4626      	mov	r6, r4
 800ce90:	2e00      	cmp	r6, #0
 800ce92:	d145      	bne.n	800cf20 <_malloc_r+0xdc>
 800ce94:	2c00      	cmp	r4, #0
 800ce96:	d048      	beq.n	800cf2a <_malloc_r+0xe6>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	eb04 0903 	add.w	r9, r4, r3
 800cea2:	f000 fe69 	bl	800db78 <_sbrk_r>
 800cea6:	4581      	cmp	r9, r0
 800cea8:	d13f      	bne.n	800cf2a <_malloc_r+0xe6>
 800ceaa:	6821      	ldr	r1, [r4, #0]
 800ceac:	1a6d      	subs	r5, r5, r1
 800ceae:	4629      	mov	r1, r5
 800ceb0:	4638      	mov	r0, r7
 800ceb2:	f7ff ffa7 	bl	800ce04 <sbrk_aligned>
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	d037      	beq.n	800cf2a <_malloc_r+0xe6>
 800ceba:	6823      	ldr	r3, [r4, #0]
 800cebc:	442b      	add	r3, r5
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	f8d8 3000 	ldr.w	r3, [r8]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d038      	beq.n	800cf3a <_malloc_r+0xf6>
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	42a2      	cmp	r2, r4
 800cecc:	d12b      	bne.n	800cf26 <_malloc_r+0xe2>
 800cece:	2200      	movs	r2, #0
 800ced0:	605a      	str	r2, [r3, #4]
 800ced2:	e00f      	b.n	800cef4 <_malloc_r+0xb0>
 800ced4:	6822      	ldr	r2, [r4, #0]
 800ced6:	1b52      	subs	r2, r2, r5
 800ced8:	d41f      	bmi.n	800cf1a <_malloc_r+0xd6>
 800ceda:	2a0b      	cmp	r2, #11
 800cedc:	d917      	bls.n	800cf0e <_malloc_r+0xca>
 800cede:	1961      	adds	r1, r4, r5
 800cee0:	42a3      	cmp	r3, r4
 800cee2:	6025      	str	r5, [r4, #0]
 800cee4:	bf18      	it	ne
 800cee6:	6059      	strne	r1, [r3, #4]
 800cee8:	6863      	ldr	r3, [r4, #4]
 800ceea:	bf08      	it	eq
 800ceec:	f8c8 1000 	streq.w	r1, [r8]
 800cef0:	5162      	str	r2, [r4, r5]
 800cef2:	604b      	str	r3, [r1, #4]
 800cef4:	4638      	mov	r0, r7
 800cef6:	f104 060b 	add.w	r6, r4, #11
 800cefa:	f000 f829 	bl	800cf50 <__malloc_unlock>
 800cefe:	f026 0607 	bic.w	r6, r6, #7
 800cf02:	1d23      	adds	r3, r4, #4
 800cf04:	1af2      	subs	r2, r6, r3
 800cf06:	d0ae      	beq.n	800ce66 <_malloc_r+0x22>
 800cf08:	1b9b      	subs	r3, r3, r6
 800cf0a:	50a3      	str	r3, [r4, r2]
 800cf0c:	e7ab      	b.n	800ce66 <_malloc_r+0x22>
 800cf0e:	42a3      	cmp	r3, r4
 800cf10:	6862      	ldr	r2, [r4, #4]
 800cf12:	d1dd      	bne.n	800ced0 <_malloc_r+0x8c>
 800cf14:	f8c8 2000 	str.w	r2, [r8]
 800cf18:	e7ec      	b.n	800cef4 <_malloc_r+0xb0>
 800cf1a:	4623      	mov	r3, r4
 800cf1c:	6864      	ldr	r4, [r4, #4]
 800cf1e:	e7ac      	b.n	800ce7a <_malloc_r+0x36>
 800cf20:	4634      	mov	r4, r6
 800cf22:	6876      	ldr	r6, [r6, #4]
 800cf24:	e7b4      	b.n	800ce90 <_malloc_r+0x4c>
 800cf26:	4613      	mov	r3, r2
 800cf28:	e7cc      	b.n	800cec4 <_malloc_r+0x80>
 800cf2a:	230c      	movs	r3, #12
 800cf2c:	603b      	str	r3, [r7, #0]
 800cf2e:	4638      	mov	r0, r7
 800cf30:	f000 f80e 	bl	800cf50 <__malloc_unlock>
 800cf34:	e797      	b.n	800ce66 <_malloc_r+0x22>
 800cf36:	6025      	str	r5, [r4, #0]
 800cf38:	e7dc      	b.n	800cef4 <_malloc_r+0xb0>
 800cf3a:	605b      	str	r3, [r3, #4]
 800cf3c:	deff      	udf	#255	; 0xff
 800cf3e:	bf00      	nop
 800cf40:	24001608 	.word	0x24001608

0800cf44 <__malloc_lock>:
 800cf44:	4801      	ldr	r0, [pc, #4]	; (800cf4c <__malloc_lock+0x8>)
 800cf46:	f7ff bef8 	b.w	800cd3a <__retarget_lock_acquire_recursive>
 800cf4a:	bf00      	nop
 800cf4c:	24001604 	.word	0x24001604

0800cf50 <__malloc_unlock>:
 800cf50:	4801      	ldr	r0, [pc, #4]	; (800cf58 <__malloc_unlock+0x8>)
 800cf52:	f7ff bef3 	b.w	800cd3c <__retarget_lock_release_recursive>
 800cf56:	bf00      	nop
 800cf58:	24001604 	.word	0x24001604

0800cf5c <__ssputs_r>:
 800cf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf60:	688e      	ldr	r6, [r1, #8]
 800cf62:	461f      	mov	r7, r3
 800cf64:	42be      	cmp	r6, r7
 800cf66:	680b      	ldr	r3, [r1, #0]
 800cf68:	4682      	mov	sl, r0
 800cf6a:	460c      	mov	r4, r1
 800cf6c:	4690      	mov	r8, r2
 800cf6e:	d82c      	bhi.n	800cfca <__ssputs_r+0x6e>
 800cf70:	898a      	ldrh	r2, [r1, #12]
 800cf72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf76:	d026      	beq.n	800cfc6 <__ssputs_r+0x6a>
 800cf78:	6965      	ldr	r5, [r4, #20]
 800cf7a:	6909      	ldr	r1, [r1, #16]
 800cf7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf80:	eba3 0901 	sub.w	r9, r3, r1
 800cf84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf88:	1c7b      	adds	r3, r7, #1
 800cf8a:	444b      	add	r3, r9
 800cf8c:	106d      	asrs	r5, r5, #1
 800cf8e:	429d      	cmp	r5, r3
 800cf90:	bf38      	it	cc
 800cf92:	461d      	movcc	r5, r3
 800cf94:	0553      	lsls	r3, r2, #21
 800cf96:	d527      	bpl.n	800cfe8 <__ssputs_r+0x8c>
 800cf98:	4629      	mov	r1, r5
 800cf9a:	f7ff ff53 	bl	800ce44 <_malloc_r>
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	b360      	cbz	r0, 800cffc <__ssputs_r+0xa0>
 800cfa2:	6921      	ldr	r1, [r4, #16]
 800cfa4:	464a      	mov	r2, r9
 800cfa6:	f7ff feca 	bl	800cd3e <memcpy>
 800cfaa:	89a3      	ldrh	r3, [r4, #12]
 800cfac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfb4:	81a3      	strh	r3, [r4, #12]
 800cfb6:	6126      	str	r6, [r4, #16]
 800cfb8:	6165      	str	r5, [r4, #20]
 800cfba:	444e      	add	r6, r9
 800cfbc:	eba5 0509 	sub.w	r5, r5, r9
 800cfc0:	6026      	str	r6, [r4, #0]
 800cfc2:	60a5      	str	r5, [r4, #8]
 800cfc4:	463e      	mov	r6, r7
 800cfc6:	42be      	cmp	r6, r7
 800cfc8:	d900      	bls.n	800cfcc <__ssputs_r+0x70>
 800cfca:	463e      	mov	r6, r7
 800cfcc:	6820      	ldr	r0, [r4, #0]
 800cfce:	4632      	mov	r2, r6
 800cfd0:	4641      	mov	r1, r8
 800cfd2:	f000 fd95 	bl	800db00 <memmove>
 800cfd6:	68a3      	ldr	r3, [r4, #8]
 800cfd8:	1b9b      	subs	r3, r3, r6
 800cfda:	60a3      	str	r3, [r4, #8]
 800cfdc:	6823      	ldr	r3, [r4, #0]
 800cfde:	4433      	add	r3, r6
 800cfe0:	6023      	str	r3, [r4, #0]
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe8:	462a      	mov	r2, r5
 800cfea:	f000 fdd5 	bl	800db98 <_realloc_r>
 800cfee:	4606      	mov	r6, r0
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d1e0      	bne.n	800cfb6 <__ssputs_r+0x5a>
 800cff4:	6921      	ldr	r1, [r4, #16]
 800cff6:	4650      	mov	r0, sl
 800cff8:	f7ff feb0 	bl	800cd5c <_free_r>
 800cffc:	230c      	movs	r3, #12
 800cffe:	f8ca 3000 	str.w	r3, [sl]
 800d002:	89a3      	ldrh	r3, [r4, #12]
 800d004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d008:	81a3      	strh	r3, [r4, #12]
 800d00a:	f04f 30ff 	mov.w	r0, #4294967295
 800d00e:	e7e9      	b.n	800cfe4 <__ssputs_r+0x88>

0800d010 <_svfiprintf_r>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	4698      	mov	r8, r3
 800d016:	898b      	ldrh	r3, [r1, #12]
 800d018:	061b      	lsls	r3, r3, #24
 800d01a:	b09d      	sub	sp, #116	; 0x74
 800d01c:	4607      	mov	r7, r0
 800d01e:	460d      	mov	r5, r1
 800d020:	4614      	mov	r4, r2
 800d022:	d50e      	bpl.n	800d042 <_svfiprintf_r+0x32>
 800d024:	690b      	ldr	r3, [r1, #16]
 800d026:	b963      	cbnz	r3, 800d042 <_svfiprintf_r+0x32>
 800d028:	2140      	movs	r1, #64	; 0x40
 800d02a:	f7ff ff0b 	bl	800ce44 <_malloc_r>
 800d02e:	6028      	str	r0, [r5, #0]
 800d030:	6128      	str	r0, [r5, #16]
 800d032:	b920      	cbnz	r0, 800d03e <_svfiprintf_r+0x2e>
 800d034:	230c      	movs	r3, #12
 800d036:	603b      	str	r3, [r7, #0]
 800d038:	f04f 30ff 	mov.w	r0, #4294967295
 800d03c:	e0d0      	b.n	800d1e0 <_svfiprintf_r+0x1d0>
 800d03e:	2340      	movs	r3, #64	; 0x40
 800d040:	616b      	str	r3, [r5, #20]
 800d042:	2300      	movs	r3, #0
 800d044:	9309      	str	r3, [sp, #36]	; 0x24
 800d046:	2320      	movs	r3, #32
 800d048:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d050:	2330      	movs	r3, #48	; 0x30
 800d052:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d1f8 <_svfiprintf_r+0x1e8>
 800d056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d05a:	f04f 0901 	mov.w	r9, #1
 800d05e:	4623      	mov	r3, r4
 800d060:	469a      	mov	sl, r3
 800d062:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d066:	b10a      	cbz	r2, 800d06c <_svfiprintf_r+0x5c>
 800d068:	2a25      	cmp	r2, #37	; 0x25
 800d06a:	d1f9      	bne.n	800d060 <_svfiprintf_r+0x50>
 800d06c:	ebba 0b04 	subs.w	fp, sl, r4
 800d070:	d00b      	beq.n	800d08a <_svfiprintf_r+0x7a>
 800d072:	465b      	mov	r3, fp
 800d074:	4622      	mov	r2, r4
 800d076:	4629      	mov	r1, r5
 800d078:	4638      	mov	r0, r7
 800d07a:	f7ff ff6f 	bl	800cf5c <__ssputs_r>
 800d07e:	3001      	adds	r0, #1
 800d080:	f000 80a9 	beq.w	800d1d6 <_svfiprintf_r+0x1c6>
 800d084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d086:	445a      	add	r2, fp
 800d088:	9209      	str	r2, [sp, #36]	; 0x24
 800d08a:	f89a 3000 	ldrb.w	r3, [sl]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f000 80a1 	beq.w	800d1d6 <_svfiprintf_r+0x1c6>
 800d094:	2300      	movs	r3, #0
 800d096:	f04f 32ff 	mov.w	r2, #4294967295
 800d09a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d09e:	f10a 0a01 	add.w	sl, sl, #1
 800d0a2:	9304      	str	r3, [sp, #16]
 800d0a4:	9307      	str	r3, [sp, #28]
 800d0a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0aa:	931a      	str	r3, [sp, #104]	; 0x68
 800d0ac:	4654      	mov	r4, sl
 800d0ae:	2205      	movs	r2, #5
 800d0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b4:	4850      	ldr	r0, [pc, #320]	; (800d1f8 <_svfiprintf_r+0x1e8>)
 800d0b6:	f7f3 f913 	bl	80002e0 <memchr>
 800d0ba:	9a04      	ldr	r2, [sp, #16]
 800d0bc:	b9d8      	cbnz	r0, 800d0f6 <_svfiprintf_r+0xe6>
 800d0be:	06d0      	lsls	r0, r2, #27
 800d0c0:	bf44      	itt	mi
 800d0c2:	2320      	movmi	r3, #32
 800d0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c8:	0711      	lsls	r1, r2, #28
 800d0ca:	bf44      	itt	mi
 800d0cc:	232b      	movmi	r3, #43	; 0x2b
 800d0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d8:	d015      	beq.n	800d106 <_svfiprintf_r+0xf6>
 800d0da:	9a07      	ldr	r2, [sp, #28]
 800d0dc:	4654      	mov	r4, sl
 800d0de:	2000      	movs	r0, #0
 800d0e0:	f04f 0c0a 	mov.w	ip, #10
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0ea:	3b30      	subs	r3, #48	; 0x30
 800d0ec:	2b09      	cmp	r3, #9
 800d0ee:	d94d      	bls.n	800d18c <_svfiprintf_r+0x17c>
 800d0f0:	b1b0      	cbz	r0, 800d120 <_svfiprintf_r+0x110>
 800d0f2:	9207      	str	r2, [sp, #28]
 800d0f4:	e014      	b.n	800d120 <_svfiprintf_r+0x110>
 800d0f6:	eba0 0308 	sub.w	r3, r0, r8
 800d0fa:	fa09 f303 	lsl.w	r3, r9, r3
 800d0fe:	4313      	orrs	r3, r2
 800d100:	9304      	str	r3, [sp, #16]
 800d102:	46a2      	mov	sl, r4
 800d104:	e7d2      	b.n	800d0ac <_svfiprintf_r+0x9c>
 800d106:	9b03      	ldr	r3, [sp, #12]
 800d108:	1d19      	adds	r1, r3, #4
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	9103      	str	r1, [sp, #12]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bfbb      	ittet	lt
 800d112:	425b      	neglt	r3, r3
 800d114:	f042 0202 	orrlt.w	r2, r2, #2
 800d118:	9307      	strge	r3, [sp, #28]
 800d11a:	9307      	strlt	r3, [sp, #28]
 800d11c:	bfb8      	it	lt
 800d11e:	9204      	strlt	r2, [sp, #16]
 800d120:	7823      	ldrb	r3, [r4, #0]
 800d122:	2b2e      	cmp	r3, #46	; 0x2e
 800d124:	d10c      	bne.n	800d140 <_svfiprintf_r+0x130>
 800d126:	7863      	ldrb	r3, [r4, #1]
 800d128:	2b2a      	cmp	r3, #42	; 0x2a
 800d12a:	d134      	bne.n	800d196 <_svfiprintf_r+0x186>
 800d12c:	9b03      	ldr	r3, [sp, #12]
 800d12e:	1d1a      	adds	r2, r3, #4
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	9203      	str	r2, [sp, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	bfb8      	it	lt
 800d138:	f04f 33ff 	movlt.w	r3, #4294967295
 800d13c:	3402      	adds	r4, #2
 800d13e:	9305      	str	r3, [sp, #20]
 800d140:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d208 <_svfiprintf_r+0x1f8>
 800d144:	7821      	ldrb	r1, [r4, #0]
 800d146:	2203      	movs	r2, #3
 800d148:	4650      	mov	r0, sl
 800d14a:	f7f3 f8c9 	bl	80002e0 <memchr>
 800d14e:	b138      	cbz	r0, 800d160 <_svfiprintf_r+0x150>
 800d150:	9b04      	ldr	r3, [sp, #16]
 800d152:	eba0 000a 	sub.w	r0, r0, sl
 800d156:	2240      	movs	r2, #64	; 0x40
 800d158:	4082      	lsls	r2, r0
 800d15a:	4313      	orrs	r3, r2
 800d15c:	3401      	adds	r4, #1
 800d15e:	9304      	str	r3, [sp, #16]
 800d160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d164:	4825      	ldr	r0, [pc, #148]	; (800d1fc <_svfiprintf_r+0x1ec>)
 800d166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d16a:	2206      	movs	r2, #6
 800d16c:	f7f3 f8b8 	bl	80002e0 <memchr>
 800d170:	2800      	cmp	r0, #0
 800d172:	d038      	beq.n	800d1e6 <_svfiprintf_r+0x1d6>
 800d174:	4b22      	ldr	r3, [pc, #136]	; (800d200 <_svfiprintf_r+0x1f0>)
 800d176:	bb1b      	cbnz	r3, 800d1c0 <_svfiprintf_r+0x1b0>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	3307      	adds	r3, #7
 800d17c:	f023 0307 	bic.w	r3, r3, #7
 800d180:	3308      	adds	r3, #8
 800d182:	9303      	str	r3, [sp, #12]
 800d184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d186:	4433      	add	r3, r6
 800d188:	9309      	str	r3, [sp, #36]	; 0x24
 800d18a:	e768      	b.n	800d05e <_svfiprintf_r+0x4e>
 800d18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d190:	460c      	mov	r4, r1
 800d192:	2001      	movs	r0, #1
 800d194:	e7a6      	b.n	800d0e4 <_svfiprintf_r+0xd4>
 800d196:	2300      	movs	r3, #0
 800d198:	3401      	adds	r4, #1
 800d19a:	9305      	str	r3, [sp, #20]
 800d19c:	4619      	mov	r1, r3
 800d19e:	f04f 0c0a 	mov.w	ip, #10
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a8:	3a30      	subs	r2, #48	; 0x30
 800d1aa:	2a09      	cmp	r2, #9
 800d1ac:	d903      	bls.n	800d1b6 <_svfiprintf_r+0x1a6>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d0c6      	beq.n	800d140 <_svfiprintf_r+0x130>
 800d1b2:	9105      	str	r1, [sp, #20]
 800d1b4:	e7c4      	b.n	800d140 <_svfiprintf_r+0x130>
 800d1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e7f0      	b.n	800d1a2 <_svfiprintf_r+0x192>
 800d1c0:	ab03      	add	r3, sp, #12
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	4b0f      	ldr	r3, [pc, #60]	; (800d204 <_svfiprintf_r+0x1f4>)
 800d1c8:	a904      	add	r1, sp, #16
 800d1ca:	4638      	mov	r0, r7
 800d1cc:	f3af 8000 	nop.w
 800d1d0:	1c42      	adds	r2, r0, #1
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	d1d6      	bne.n	800d184 <_svfiprintf_r+0x174>
 800d1d6:	89ab      	ldrh	r3, [r5, #12]
 800d1d8:	065b      	lsls	r3, r3, #25
 800d1da:	f53f af2d 	bmi.w	800d038 <_svfiprintf_r+0x28>
 800d1de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1e0:	b01d      	add	sp, #116	; 0x74
 800d1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e6:	ab03      	add	r3, sp, #12
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	462a      	mov	r2, r5
 800d1ec:	4b05      	ldr	r3, [pc, #20]	; (800d204 <_svfiprintf_r+0x1f4>)
 800d1ee:	a904      	add	r1, sp, #16
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f000 f9bd 	bl	800d570 <_printf_i>
 800d1f6:	e7eb      	b.n	800d1d0 <_svfiprintf_r+0x1c0>
 800d1f8:	0800f868 	.word	0x0800f868
 800d1fc:	0800f872 	.word	0x0800f872
 800d200:	00000000 	.word	0x00000000
 800d204:	0800cf5d 	.word	0x0800cf5d
 800d208:	0800f86e 	.word	0x0800f86e

0800d20c <__sfputc_r>:
 800d20c:	6893      	ldr	r3, [r2, #8]
 800d20e:	3b01      	subs	r3, #1
 800d210:	2b00      	cmp	r3, #0
 800d212:	b410      	push	{r4}
 800d214:	6093      	str	r3, [r2, #8]
 800d216:	da08      	bge.n	800d22a <__sfputc_r+0x1e>
 800d218:	6994      	ldr	r4, [r2, #24]
 800d21a:	42a3      	cmp	r3, r4
 800d21c:	db01      	blt.n	800d222 <__sfputc_r+0x16>
 800d21e:	290a      	cmp	r1, #10
 800d220:	d103      	bne.n	800d22a <__sfputc_r+0x1e>
 800d222:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d226:	f000 bbd5 	b.w	800d9d4 <__swbuf_r>
 800d22a:	6813      	ldr	r3, [r2, #0]
 800d22c:	1c58      	adds	r0, r3, #1
 800d22e:	6010      	str	r0, [r2, #0]
 800d230:	7019      	strb	r1, [r3, #0]
 800d232:	4608      	mov	r0, r1
 800d234:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d238:	4770      	bx	lr

0800d23a <__sfputs_r>:
 800d23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23c:	4606      	mov	r6, r0
 800d23e:	460f      	mov	r7, r1
 800d240:	4614      	mov	r4, r2
 800d242:	18d5      	adds	r5, r2, r3
 800d244:	42ac      	cmp	r4, r5
 800d246:	d101      	bne.n	800d24c <__sfputs_r+0x12>
 800d248:	2000      	movs	r0, #0
 800d24a:	e007      	b.n	800d25c <__sfputs_r+0x22>
 800d24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d250:	463a      	mov	r2, r7
 800d252:	4630      	mov	r0, r6
 800d254:	f7ff ffda 	bl	800d20c <__sfputc_r>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	d1f3      	bne.n	800d244 <__sfputs_r+0xa>
 800d25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d260 <_vfiprintf_r>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	460d      	mov	r5, r1
 800d266:	b09d      	sub	sp, #116	; 0x74
 800d268:	4614      	mov	r4, r2
 800d26a:	4698      	mov	r8, r3
 800d26c:	4606      	mov	r6, r0
 800d26e:	b118      	cbz	r0, 800d278 <_vfiprintf_r+0x18>
 800d270:	6a03      	ldr	r3, [r0, #32]
 800d272:	b90b      	cbnz	r3, 800d278 <_vfiprintf_r+0x18>
 800d274:	f7ff fb8e 	bl	800c994 <__sinit>
 800d278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d27a:	07d9      	lsls	r1, r3, #31
 800d27c:	d405      	bmi.n	800d28a <_vfiprintf_r+0x2a>
 800d27e:	89ab      	ldrh	r3, [r5, #12]
 800d280:	059a      	lsls	r2, r3, #22
 800d282:	d402      	bmi.n	800d28a <_vfiprintf_r+0x2a>
 800d284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d286:	f7ff fd58 	bl	800cd3a <__retarget_lock_acquire_recursive>
 800d28a:	89ab      	ldrh	r3, [r5, #12]
 800d28c:	071b      	lsls	r3, r3, #28
 800d28e:	d501      	bpl.n	800d294 <_vfiprintf_r+0x34>
 800d290:	692b      	ldr	r3, [r5, #16]
 800d292:	b99b      	cbnz	r3, 800d2bc <_vfiprintf_r+0x5c>
 800d294:	4629      	mov	r1, r5
 800d296:	4630      	mov	r0, r6
 800d298:	f000 fbda 	bl	800da50 <__swsetup_r>
 800d29c:	b170      	cbz	r0, 800d2bc <_vfiprintf_r+0x5c>
 800d29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2a0:	07dc      	lsls	r4, r3, #31
 800d2a2:	d504      	bpl.n	800d2ae <_vfiprintf_r+0x4e>
 800d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a8:	b01d      	add	sp, #116	; 0x74
 800d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ae:	89ab      	ldrh	r3, [r5, #12]
 800d2b0:	0598      	lsls	r0, r3, #22
 800d2b2:	d4f7      	bmi.n	800d2a4 <_vfiprintf_r+0x44>
 800d2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2b6:	f7ff fd41 	bl	800cd3c <__retarget_lock_release_recursive>
 800d2ba:	e7f3      	b.n	800d2a4 <_vfiprintf_r+0x44>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c0:	2320      	movs	r3, #32
 800d2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ca:	2330      	movs	r3, #48	; 0x30
 800d2cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d480 <_vfiprintf_r+0x220>
 800d2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2d4:	f04f 0901 	mov.w	r9, #1
 800d2d8:	4623      	mov	r3, r4
 800d2da:	469a      	mov	sl, r3
 800d2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e0:	b10a      	cbz	r2, 800d2e6 <_vfiprintf_r+0x86>
 800d2e2:	2a25      	cmp	r2, #37	; 0x25
 800d2e4:	d1f9      	bne.n	800d2da <_vfiprintf_r+0x7a>
 800d2e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ea:	d00b      	beq.n	800d304 <_vfiprintf_r+0xa4>
 800d2ec:	465b      	mov	r3, fp
 800d2ee:	4622      	mov	r2, r4
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f7ff ffa1 	bl	800d23a <__sfputs_r>
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	f000 80a9 	beq.w	800d450 <_vfiprintf_r+0x1f0>
 800d2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d300:	445a      	add	r2, fp
 800d302:	9209      	str	r2, [sp, #36]	; 0x24
 800d304:	f89a 3000 	ldrb.w	r3, [sl]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 80a1 	beq.w	800d450 <_vfiprintf_r+0x1f0>
 800d30e:	2300      	movs	r3, #0
 800d310:	f04f 32ff 	mov.w	r2, #4294967295
 800d314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d318:	f10a 0a01 	add.w	sl, sl, #1
 800d31c:	9304      	str	r3, [sp, #16]
 800d31e:	9307      	str	r3, [sp, #28]
 800d320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d324:	931a      	str	r3, [sp, #104]	; 0x68
 800d326:	4654      	mov	r4, sl
 800d328:	2205      	movs	r2, #5
 800d32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d32e:	4854      	ldr	r0, [pc, #336]	; (800d480 <_vfiprintf_r+0x220>)
 800d330:	f7f2 ffd6 	bl	80002e0 <memchr>
 800d334:	9a04      	ldr	r2, [sp, #16]
 800d336:	b9d8      	cbnz	r0, 800d370 <_vfiprintf_r+0x110>
 800d338:	06d1      	lsls	r1, r2, #27
 800d33a:	bf44      	itt	mi
 800d33c:	2320      	movmi	r3, #32
 800d33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d342:	0713      	lsls	r3, r2, #28
 800d344:	bf44      	itt	mi
 800d346:	232b      	movmi	r3, #43	; 0x2b
 800d348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d34c:	f89a 3000 	ldrb.w	r3, [sl]
 800d350:	2b2a      	cmp	r3, #42	; 0x2a
 800d352:	d015      	beq.n	800d380 <_vfiprintf_r+0x120>
 800d354:	9a07      	ldr	r2, [sp, #28]
 800d356:	4654      	mov	r4, sl
 800d358:	2000      	movs	r0, #0
 800d35a:	f04f 0c0a 	mov.w	ip, #10
 800d35e:	4621      	mov	r1, r4
 800d360:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d364:	3b30      	subs	r3, #48	; 0x30
 800d366:	2b09      	cmp	r3, #9
 800d368:	d94d      	bls.n	800d406 <_vfiprintf_r+0x1a6>
 800d36a:	b1b0      	cbz	r0, 800d39a <_vfiprintf_r+0x13a>
 800d36c:	9207      	str	r2, [sp, #28]
 800d36e:	e014      	b.n	800d39a <_vfiprintf_r+0x13a>
 800d370:	eba0 0308 	sub.w	r3, r0, r8
 800d374:	fa09 f303 	lsl.w	r3, r9, r3
 800d378:	4313      	orrs	r3, r2
 800d37a:	9304      	str	r3, [sp, #16]
 800d37c:	46a2      	mov	sl, r4
 800d37e:	e7d2      	b.n	800d326 <_vfiprintf_r+0xc6>
 800d380:	9b03      	ldr	r3, [sp, #12]
 800d382:	1d19      	adds	r1, r3, #4
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	9103      	str	r1, [sp, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	bfbb      	ittet	lt
 800d38c:	425b      	neglt	r3, r3
 800d38e:	f042 0202 	orrlt.w	r2, r2, #2
 800d392:	9307      	strge	r3, [sp, #28]
 800d394:	9307      	strlt	r3, [sp, #28]
 800d396:	bfb8      	it	lt
 800d398:	9204      	strlt	r2, [sp, #16]
 800d39a:	7823      	ldrb	r3, [r4, #0]
 800d39c:	2b2e      	cmp	r3, #46	; 0x2e
 800d39e:	d10c      	bne.n	800d3ba <_vfiprintf_r+0x15a>
 800d3a0:	7863      	ldrb	r3, [r4, #1]
 800d3a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a4:	d134      	bne.n	800d410 <_vfiprintf_r+0x1b0>
 800d3a6:	9b03      	ldr	r3, [sp, #12]
 800d3a8:	1d1a      	adds	r2, r3, #4
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	9203      	str	r2, [sp, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	bfb8      	it	lt
 800d3b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3b6:	3402      	adds	r4, #2
 800d3b8:	9305      	str	r3, [sp, #20]
 800d3ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d490 <_vfiprintf_r+0x230>
 800d3be:	7821      	ldrb	r1, [r4, #0]
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	4650      	mov	r0, sl
 800d3c4:	f7f2 ff8c 	bl	80002e0 <memchr>
 800d3c8:	b138      	cbz	r0, 800d3da <_vfiprintf_r+0x17a>
 800d3ca:	9b04      	ldr	r3, [sp, #16]
 800d3cc:	eba0 000a 	sub.w	r0, r0, sl
 800d3d0:	2240      	movs	r2, #64	; 0x40
 800d3d2:	4082      	lsls	r2, r0
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	3401      	adds	r4, #1
 800d3d8:	9304      	str	r3, [sp, #16]
 800d3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3de:	4829      	ldr	r0, [pc, #164]	; (800d484 <_vfiprintf_r+0x224>)
 800d3e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3e4:	2206      	movs	r2, #6
 800d3e6:	f7f2 ff7b 	bl	80002e0 <memchr>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	d03f      	beq.n	800d46e <_vfiprintf_r+0x20e>
 800d3ee:	4b26      	ldr	r3, [pc, #152]	; (800d488 <_vfiprintf_r+0x228>)
 800d3f0:	bb1b      	cbnz	r3, 800d43a <_vfiprintf_r+0x1da>
 800d3f2:	9b03      	ldr	r3, [sp, #12]
 800d3f4:	3307      	adds	r3, #7
 800d3f6:	f023 0307 	bic.w	r3, r3, #7
 800d3fa:	3308      	adds	r3, #8
 800d3fc:	9303      	str	r3, [sp, #12]
 800d3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d400:	443b      	add	r3, r7
 800d402:	9309      	str	r3, [sp, #36]	; 0x24
 800d404:	e768      	b.n	800d2d8 <_vfiprintf_r+0x78>
 800d406:	fb0c 3202 	mla	r2, ip, r2, r3
 800d40a:	460c      	mov	r4, r1
 800d40c:	2001      	movs	r0, #1
 800d40e:	e7a6      	b.n	800d35e <_vfiprintf_r+0xfe>
 800d410:	2300      	movs	r3, #0
 800d412:	3401      	adds	r4, #1
 800d414:	9305      	str	r3, [sp, #20]
 800d416:	4619      	mov	r1, r3
 800d418:	f04f 0c0a 	mov.w	ip, #10
 800d41c:	4620      	mov	r0, r4
 800d41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d422:	3a30      	subs	r2, #48	; 0x30
 800d424:	2a09      	cmp	r2, #9
 800d426:	d903      	bls.n	800d430 <_vfiprintf_r+0x1d0>
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d0c6      	beq.n	800d3ba <_vfiprintf_r+0x15a>
 800d42c:	9105      	str	r1, [sp, #20]
 800d42e:	e7c4      	b.n	800d3ba <_vfiprintf_r+0x15a>
 800d430:	fb0c 2101 	mla	r1, ip, r1, r2
 800d434:	4604      	mov	r4, r0
 800d436:	2301      	movs	r3, #1
 800d438:	e7f0      	b.n	800d41c <_vfiprintf_r+0x1bc>
 800d43a:	ab03      	add	r3, sp, #12
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	462a      	mov	r2, r5
 800d440:	4b12      	ldr	r3, [pc, #72]	; (800d48c <_vfiprintf_r+0x22c>)
 800d442:	a904      	add	r1, sp, #16
 800d444:	4630      	mov	r0, r6
 800d446:	f3af 8000 	nop.w
 800d44a:	4607      	mov	r7, r0
 800d44c:	1c78      	adds	r0, r7, #1
 800d44e:	d1d6      	bne.n	800d3fe <_vfiprintf_r+0x19e>
 800d450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d452:	07d9      	lsls	r1, r3, #31
 800d454:	d405      	bmi.n	800d462 <_vfiprintf_r+0x202>
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	059a      	lsls	r2, r3, #22
 800d45a:	d402      	bmi.n	800d462 <_vfiprintf_r+0x202>
 800d45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d45e:	f7ff fc6d 	bl	800cd3c <__retarget_lock_release_recursive>
 800d462:	89ab      	ldrh	r3, [r5, #12]
 800d464:	065b      	lsls	r3, r3, #25
 800d466:	f53f af1d 	bmi.w	800d2a4 <_vfiprintf_r+0x44>
 800d46a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d46c:	e71c      	b.n	800d2a8 <_vfiprintf_r+0x48>
 800d46e:	ab03      	add	r3, sp, #12
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	462a      	mov	r2, r5
 800d474:	4b05      	ldr	r3, [pc, #20]	; (800d48c <_vfiprintf_r+0x22c>)
 800d476:	a904      	add	r1, sp, #16
 800d478:	4630      	mov	r0, r6
 800d47a:	f000 f879 	bl	800d570 <_printf_i>
 800d47e:	e7e4      	b.n	800d44a <_vfiprintf_r+0x1ea>
 800d480:	0800f868 	.word	0x0800f868
 800d484:	0800f872 	.word	0x0800f872
 800d488:	00000000 	.word	0x00000000
 800d48c:	0800d23b 	.word	0x0800d23b
 800d490:	0800f86e 	.word	0x0800f86e

0800d494 <_printf_common>:
 800d494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d498:	4616      	mov	r6, r2
 800d49a:	4699      	mov	r9, r3
 800d49c:	688a      	ldr	r2, [r1, #8]
 800d49e:	690b      	ldr	r3, [r1, #16]
 800d4a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	bfb8      	it	lt
 800d4a8:	4613      	movlt	r3, r2
 800d4aa:	6033      	str	r3, [r6, #0]
 800d4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	b10a      	cbz	r2, 800d4ba <_printf_common+0x26>
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	6033      	str	r3, [r6, #0]
 800d4ba:	6823      	ldr	r3, [r4, #0]
 800d4bc:	0699      	lsls	r1, r3, #26
 800d4be:	bf42      	ittt	mi
 800d4c0:	6833      	ldrmi	r3, [r6, #0]
 800d4c2:	3302      	addmi	r3, #2
 800d4c4:	6033      	strmi	r3, [r6, #0]
 800d4c6:	6825      	ldr	r5, [r4, #0]
 800d4c8:	f015 0506 	ands.w	r5, r5, #6
 800d4cc:	d106      	bne.n	800d4dc <_printf_common+0x48>
 800d4ce:	f104 0a19 	add.w	sl, r4, #25
 800d4d2:	68e3      	ldr	r3, [r4, #12]
 800d4d4:	6832      	ldr	r2, [r6, #0]
 800d4d6:	1a9b      	subs	r3, r3, r2
 800d4d8:	42ab      	cmp	r3, r5
 800d4da:	dc26      	bgt.n	800d52a <_printf_common+0x96>
 800d4dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4e0:	1e13      	subs	r3, r2, #0
 800d4e2:	6822      	ldr	r2, [r4, #0]
 800d4e4:	bf18      	it	ne
 800d4e6:	2301      	movne	r3, #1
 800d4e8:	0692      	lsls	r2, r2, #26
 800d4ea:	d42b      	bmi.n	800d544 <_printf_common+0xb0>
 800d4ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	47c0      	blx	r8
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	d01e      	beq.n	800d538 <_printf_common+0xa4>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	6922      	ldr	r2, [r4, #16]
 800d4fe:	f003 0306 	and.w	r3, r3, #6
 800d502:	2b04      	cmp	r3, #4
 800d504:	bf02      	ittt	eq
 800d506:	68e5      	ldreq	r5, [r4, #12]
 800d508:	6833      	ldreq	r3, [r6, #0]
 800d50a:	1aed      	subeq	r5, r5, r3
 800d50c:	68a3      	ldr	r3, [r4, #8]
 800d50e:	bf0c      	ite	eq
 800d510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d514:	2500      	movne	r5, #0
 800d516:	4293      	cmp	r3, r2
 800d518:	bfc4      	itt	gt
 800d51a:	1a9b      	subgt	r3, r3, r2
 800d51c:	18ed      	addgt	r5, r5, r3
 800d51e:	2600      	movs	r6, #0
 800d520:	341a      	adds	r4, #26
 800d522:	42b5      	cmp	r5, r6
 800d524:	d11a      	bne.n	800d55c <_printf_common+0xc8>
 800d526:	2000      	movs	r0, #0
 800d528:	e008      	b.n	800d53c <_printf_common+0xa8>
 800d52a:	2301      	movs	r3, #1
 800d52c:	4652      	mov	r2, sl
 800d52e:	4649      	mov	r1, r9
 800d530:	4638      	mov	r0, r7
 800d532:	47c0      	blx	r8
 800d534:	3001      	adds	r0, #1
 800d536:	d103      	bne.n	800d540 <_printf_common+0xac>
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d540:	3501      	adds	r5, #1
 800d542:	e7c6      	b.n	800d4d2 <_printf_common+0x3e>
 800d544:	18e1      	adds	r1, r4, r3
 800d546:	1c5a      	adds	r2, r3, #1
 800d548:	2030      	movs	r0, #48	; 0x30
 800d54a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d54e:	4422      	add	r2, r4
 800d550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d558:	3302      	adds	r3, #2
 800d55a:	e7c7      	b.n	800d4ec <_printf_common+0x58>
 800d55c:	2301      	movs	r3, #1
 800d55e:	4622      	mov	r2, r4
 800d560:	4649      	mov	r1, r9
 800d562:	4638      	mov	r0, r7
 800d564:	47c0      	blx	r8
 800d566:	3001      	adds	r0, #1
 800d568:	d0e6      	beq.n	800d538 <_printf_common+0xa4>
 800d56a:	3601      	adds	r6, #1
 800d56c:	e7d9      	b.n	800d522 <_printf_common+0x8e>
	...

0800d570 <_printf_i>:
 800d570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d574:	7e0f      	ldrb	r7, [r1, #24]
 800d576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d578:	2f78      	cmp	r7, #120	; 0x78
 800d57a:	4691      	mov	r9, r2
 800d57c:	4680      	mov	r8, r0
 800d57e:	460c      	mov	r4, r1
 800d580:	469a      	mov	sl, r3
 800d582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d586:	d807      	bhi.n	800d598 <_printf_i+0x28>
 800d588:	2f62      	cmp	r7, #98	; 0x62
 800d58a:	d80a      	bhi.n	800d5a2 <_printf_i+0x32>
 800d58c:	2f00      	cmp	r7, #0
 800d58e:	f000 80d4 	beq.w	800d73a <_printf_i+0x1ca>
 800d592:	2f58      	cmp	r7, #88	; 0x58
 800d594:	f000 80c0 	beq.w	800d718 <_printf_i+0x1a8>
 800d598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d59c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5a0:	e03a      	b.n	800d618 <_printf_i+0xa8>
 800d5a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5a6:	2b15      	cmp	r3, #21
 800d5a8:	d8f6      	bhi.n	800d598 <_printf_i+0x28>
 800d5aa:	a101      	add	r1, pc, #4	; (adr r1, 800d5b0 <_printf_i+0x40>)
 800d5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5b0:	0800d609 	.word	0x0800d609
 800d5b4:	0800d61d 	.word	0x0800d61d
 800d5b8:	0800d599 	.word	0x0800d599
 800d5bc:	0800d599 	.word	0x0800d599
 800d5c0:	0800d599 	.word	0x0800d599
 800d5c4:	0800d599 	.word	0x0800d599
 800d5c8:	0800d61d 	.word	0x0800d61d
 800d5cc:	0800d599 	.word	0x0800d599
 800d5d0:	0800d599 	.word	0x0800d599
 800d5d4:	0800d599 	.word	0x0800d599
 800d5d8:	0800d599 	.word	0x0800d599
 800d5dc:	0800d721 	.word	0x0800d721
 800d5e0:	0800d649 	.word	0x0800d649
 800d5e4:	0800d6db 	.word	0x0800d6db
 800d5e8:	0800d599 	.word	0x0800d599
 800d5ec:	0800d599 	.word	0x0800d599
 800d5f0:	0800d743 	.word	0x0800d743
 800d5f4:	0800d599 	.word	0x0800d599
 800d5f8:	0800d649 	.word	0x0800d649
 800d5fc:	0800d599 	.word	0x0800d599
 800d600:	0800d599 	.word	0x0800d599
 800d604:	0800d6e3 	.word	0x0800d6e3
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	1d1a      	adds	r2, r3, #4
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	602a      	str	r2, [r5, #0]
 800d610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d618:	2301      	movs	r3, #1
 800d61a:	e09f      	b.n	800d75c <_printf_i+0x1ec>
 800d61c:	6820      	ldr	r0, [r4, #0]
 800d61e:	682b      	ldr	r3, [r5, #0]
 800d620:	0607      	lsls	r7, r0, #24
 800d622:	f103 0104 	add.w	r1, r3, #4
 800d626:	6029      	str	r1, [r5, #0]
 800d628:	d501      	bpl.n	800d62e <_printf_i+0xbe>
 800d62a:	681e      	ldr	r6, [r3, #0]
 800d62c:	e003      	b.n	800d636 <_printf_i+0xc6>
 800d62e:	0646      	lsls	r6, r0, #25
 800d630:	d5fb      	bpl.n	800d62a <_printf_i+0xba>
 800d632:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d636:	2e00      	cmp	r6, #0
 800d638:	da03      	bge.n	800d642 <_printf_i+0xd2>
 800d63a:	232d      	movs	r3, #45	; 0x2d
 800d63c:	4276      	negs	r6, r6
 800d63e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d642:	485a      	ldr	r0, [pc, #360]	; (800d7ac <_printf_i+0x23c>)
 800d644:	230a      	movs	r3, #10
 800d646:	e012      	b.n	800d66e <_printf_i+0xfe>
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	6820      	ldr	r0, [r4, #0]
 800d64c:	1d19      	adds	r1, r3, #4
 800d64e:	6029      	str	r1, [r5, #0]
 800d650:	0605      	lsls	r5, r0, #24
 800d652:	d501      	bpl.n	800d658 <_printf_i+0xe8>
 800d654:	681e      	ldr	r6, [r3, #0]
 800d656:	e002      	b.n	800d65e <_printf_i+0xee>
 800d658:	0641      	lsls	r1, r0, #25
 800d65a:	d5fb      	bpl.n	800d654 <_printf_i+0xe4>
 800d65c:	881e      	ldrh	r6, [r3, #0]
 800d65e:	4853      	ldr	r0, [pc, #332]	; (800d7ac <_printf_i+0x23c>)
 800d660:	2f6f      	cmp	r7, #111	; 0x6f
 800d662:	bf0c      	ite	eq
 800d664:	2308      	moveq	r3, #8
 800d666:	230a      	movne	r3, #10
 800d668:	2100      	movs	r1, #0
 800d66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d66e:	6865      	ldr	r5, [r4, #4]
 800d670:	60a5      	str	r5, [r4, #8]
 800d672:	2d00      	cmp	r5, #0
 800d674:	bfa2      	ittt	ge
 800d676:	6821      	ldrge	r1, [r4, #0]
 800d678:	f021 0104 	bicge.w	r1, r1, #4
 800d67c:	6021      	strge	r1, [r4, #0]
 800d67e:	b90e      	cbnz	r6, 800d684 <_printf_i+0x114>
 800d680:	2d00      	cmp	r5, #0
 800d682:	d04b      	beq.n	800d71c <_printf_i+0x1ac>
 800d684:	4615      	mov	r5, r2
 800d686:	fbb6 f1f3 	udiv	r1, r6, r3
 800d68a:	fb03 6711 	mls	r7, r3, r1, r6
 800d68e:	5dc7      	ldrb	r7, [r0, r7]
 800d690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d694:	4637      	mov	r7, r6
 800d696:	42bb      	cmp	r3, r7
 800d698:	460e      	mov	r6, r1
 800d69a:	d9f4      	bls.n	800d686 <_printf_i+0x116>
 800d69c:	2b08      	cmp	r3, #8
 800d69e:	d10b      	bne.n	800d6b8 <_printf_i+0x148>
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	07de      	lsls	r6, r3, #31
 800d6a4:	d508      	bpl.n	800d6b8 <_printf_i+0x148>
 800d6a6:	6923      	ldr	r3, [r4, #16]
 800d6a8:	6861      	ldr	r1, [r4, #4]
 800d6aa:	4299      	cmp	r1, r3
 800d6ac:	bfde      	ittt	le
 800d6ae:	2330      	movle	r3, #48	; 0x30
 800d6b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6b8:	1b52      	subs	r2, r2, r5
 800d6ba:	6122      	str	r2, [r4, #16]
 800d6bc:	f8cd a000 	str.w	sl, [sp]
 800d6c0:	464b      	mov	r3, r9
 800d6c2:	aa03      	add	r2, sp, #12
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	4640      	mov	r0, r8
 800d6c8:	f7ff fee4 	bl	800d494 <_printf_common>
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d14a      	bne.n	800d766 <_printf_i+0x1f6>
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	b004      	add	sp, #16
 800d6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	f043 0320 	orr.w	r3, r3, #32
 800d6e0:	6023      	str	r3, [r4, #0]
 800d6e2:	4833      	ldr	r0, [pc, #204]	; (800d7b0 <_printf_i+0x240>)
 800d6e4:	2778      	movs	r7, #120	; 0x78
 800d6e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	6829      	ldr	r1, [r5, #0]
 800d6ee:	061f      	lsls	r7, r3, #24
 800d6f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6f4:	d402      	bmi.n	800d6fc <_printf_i+0x18c>
 800d6f6:	065f      	lsls	r7, r3, #25
 800d6f8:	bf48      	it	mi
 800d6fa:	b2b6      	uxthmi	r6, r6
 800d6fc:	07df      	lsls	r7, r3, #31
 800d6fe:	bf48      	it	mi
 800d700:	f043 0320 	orrmi.w	r3, r3, #32
 800d704:	6029      	str	r1, [r5, #0]
 800d706:	bf48      	it	mi
 800d708:	6023      	strmi	r3, [r4, #0]
 800d70a:	b91e      	cbnz	r6, 800d714 <_printf_i+0x1a4>
 800d70c:	6823      	ldr	r3, [r4, #0]
 800d70e:	f023 0320 	bic.w	r3, r3, #32
 800d712:	6023      	str	r3, [r4, #0]
 800d714:	2310      	movs	r3, #16
 800d716:	e7a7      	b.n	800d668 <_printf_i+0xf8>
 800d718:	4824      	ldr	r0, [pc, #144]	; (800d7ac <_printf_i+0x23c>)
 800d71a:	e7e4      	b.n	800d6e6 <_printf_i+0x176>
 800d71c:	4615      	mov	r5, r2
 800d71e:	e7bd      	b.n	800d69c <_printf_i+0x12c>
 800d720:	682b      	ldr	r3, [r5, #0]
 800d722:	6826      	ldr	r6, [r4, #0]
 800d724:	6961      	ldr	r1, [r4, #20]
 800d726:	1d18      	adds	r0, r3, #4
 800d728:	6028      	str	r0, [r5, #0]
 800d72a:	0635      	lsls	r5, r6, #24
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	d501      	bpl.n	800d734 <_printf_i+0x1c4>
 800d730:	6019      	str	r1, [r3, #0]
 800d732:	e002      	b.n	800d73a <_printf_i+0x1ca>
 800d734:	0670      	lsls	r0, r6, #25
 800d736:	d5fb      	bpl.n	800d730 <_printf_i+0x1c0>
 800d738:	8019      	strh	r1, [r3, #0]
 800d73a:	2300      	movs	r3, #0
 800d73c:	6123      	str	r3, [r4, #16]
 800d73e:	4615      	mov	r5, r2
 800d740:	e7bc      	b.n	800d6bc <_printf_i+0x14c>
 800d742:	682b      	ldr	r3, [r5, #0]
 800d744:	1d1a      	adds	r2, r3, #4
 800d746:	602a      	str	r2, [r5, #0]
 800d748:	681d      	ldr	r5, [r3, #0]
 800d74a:	6862      	ldr	r2, [r4, #4]
 800d74c:	2100      	movs	r1, #0
 800d74e:	4628      	mov	r0, r5
 800d750:	f7f2 fdc6 	bl	80002e0 <memchr>
 800d754:	b108      	cbz	r0, 800d75a <_printf_i+0x1ea>
 800d756:	1b40      	subs	r0, r0, r5
 800d758:	6060      	str	r0, [r4, #4]
 800d75a:	6863      	ldr	r3, [r4, #4]
 800d75c:	6123      	str	r3, [r4, #16]
 800d75e:	2300      	movs	r3, #0
 800d760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d764:	e7aa      	b.n	800d6bc <_printf_i+0x14c>
 800d766:	6923      	ldr	r3, [r4, #16]
 800d768:	462a      	mov	r2, r5
 800d76a:	4649      	mov	r1, r9
 800d76c:	4640      	mov	r0, r8
 800d76e:	47d0      	blx	sl
 800d770:	3001      	adds	r0, #1
 800d772:	d0ad      	beq.n	800d6d0 <_printf_i+0x160>
 800d774:	6823      	ldr	r3, [r4, #0]
 800d776:	079b      	lsls	r3, r3, #30
 800d778:	d413      	bmi.n	800d7a2 <_printf_i+0x232>
 800d77a:	68e0      	ldr	r0, [r4, #12]
 800d77c:	9b03      	ldr	r3, [sp, #12]
 800d77e:	4298      	cmp	r0, r3
 800d780:	bfb8      	it	lt
 800d782:	4618      	movlt	r0, r3
 800d784:	e7a6      	b.n	800d6d4 <_printf_i+0x164>
 800d786:	2301      	movs	r3, #1
 800d788:	4632      	mov	r2, r6
 800d78a:	4649      	mov	r1, r9
 800d78c:	4640      	mov	r0, r8
 800d78e:	47d0      	blx	sl
 800d790:	3001      	adds	r0, #1
 800d792:	d09d      	beq.n	800d6d0 <_printf_i+0x160>
 800d794:	3501      	adds	r5, #1
 800d796:	68e3      	ldr	r3, [r4, #12]
 800d798:	9903      	ldr	r1, [sp, #12]
 800d79a:	1a5b      	subs	r3, r3, r1
 800d79c:	42ab      	cmp	r3, r5
 800d79e:	dcf2      	bgt.n	800d786 <_printf_i+0x216>
 800d7a0:	e7eb      	b.n	800d77a <_printf_i+0x20a>
 800d7a2:	2500      	movs	r5, #0
 800d7a4:	f104 0619 	add.w	r6, r4, #25
 800d7a8:	e7f5      	b.n	800d796 <_printf_i+0x226>
 800d7aa:	bf00      	nop
 800d7ac:	0800f879 	.word	0x0800f879
 800d7b0:	0800f88a 	.word	0x0800f88a

0800d7b4 <__sflush_r>:
 800d7b4:	898a      	ldrh	r2, [r1, #12]
 800d7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	0710      	lsls	r0, r2, #28
 800d7be:	460c      	mov	r4, r1
 800d7c0:	d458      	bmi.n	800d874 <__sflush_r+0xc0>
 800d7c2:	684b      	ldr	r3, [r1, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	dc05      	bgt.n	800d7d4 <__sflush_r+0x20>
 800d7c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	dc02      	bgt.n	800d7d4 <__sflush_r+0x20>
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7d6:	2e00      	cmp	r6, #0
 800d7d8:	d0f9      	beq.n	800d7ce <__sflush_r+0x1a>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7e0:	682f      	ldr	r7, [r5, #0]
 800d7e2:	6a21      	ldr	r1, [r4, #32]
 800d7e4:	602b      	str	r3, [r5, #0]
 800d7e6:	d032      	beq.n	800d84e <__sflush_r+0x9a>
 800d7e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7ea:	89a3      	ldrh	r3, [r4, #12]
 800d7ec:	075a      	lsls	r2, r3, #29
 800d7ee:	d505      	bpl.n	800d7fc <__sflush_r+0x48>
 800d7f0:	6863      	ldr	r3, [r4, #4]
 800d7f2:	1ac0      	subs	r0, r0, r3
 800d7f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7f6:	b10b      	cbz	r3, 800d7fc <__sflush_r+0x48>
 800d7f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7fa:	1ac0      	subs	r0, r0, r3
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	4602      	mov	r2, r0
 800d800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d802:	6a21      	ldr	r1, [r4, #32]
 800d804:	4628      	mov	r0, r5
 800d806:	47b0      	blx	r6
 800d808:	1c43      	adds	r3, r0, #1
 800d80a:	89a3      	ldrh	r3, [r4, #12]
 800d80c:	d106      	bne.n	800d81c <__sflush_r+0x68>
 800d80e:	6829      	ldr	r1, [r5, #0]
 800d810:	291d      	cmp	r1, #29
 800d812:	d82b      	bhi.n	800d86c <__sflush_r+0xb8>
 800d814:	4a29      	ldr	r2, [pc, #164]	; (800d8bc <__sflush_r+0x108>)
 800d816:	410a      	asrs	r2, r1
 800d818:	07d6      	lsls	r6, r2, #31
 800d81a:	d427      	bmi.n	800d86c <__sflush_r+0xb8>
 800d81c:	2200      	movs	r2, #0
 800d81e:	6062      	str	r2, [r4, #4]
 800d820:	04d9      	lsls	r1, r3, #19
 800d822:	6922      	ldr	r2, [r4, #16]
 800d824:	6022      	str	r2, [r4, #0]
 800d826:	d504      	bpl.n	800d832 <__sflush_r+0x7e>
 800d828:	1c42      	adds	r2, r0, #1
 800d82a:	d101      	bne.n	800d830 <__sflush_r+0x7c>
 800d82c:	682b      	ldr	r3, [r5, #0]
 800d82e:	b903      	cbnz	r3, 800d832 <__sflush_r+0x7e>
 800d830:	6560      	str	r0, [r4, #84]	; 0x54
 800d832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d834:	602f      	str	r7, [r5, #0]
 800d836:	2900      	cmp	r1, #0
 800d838:	d0c9      	beq.n	800d7ce <__sflush_r+0x1a>
 800d83a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d83e:	4299      	cmp	r1, r3
 800d840:	d002      	beq.n	800d848 <__sflush_r+0x94>
 800d842:	4628      	mov	r0, r5
 800d844:	f7ff fa8a 	bl	800cd5c <_free_r>
 800d848:	2000      	movs	r0, #0
 800d84a:	6360      	str	r0, [r4, #52]	; 0x34
 800d84c:	e7c0      	b.n	800d7d0 <__sflush_r+0x1c>
 800d84e:	2301      	movs	r3, #1
 800d850:	4628      	mov	r0, r5
 800d852:	47b0      	blx	r6
 800d854:	1c41      	adds	r1, r0, #1
 800d856:	d1c8      	bne.n	800d7ea <__sflush_r+0x36>
 800d858:	682b      	ldr	r3, [r5, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d0c5      	beq.n	800d7ea <__sflush_r+0x36>
 800d85e:	2b1d      	cmp	r3, #29
 800d860:	d001      	beq.n	800d866 <__sflush_r+0xb2>
 800d862:	2b16      	cmp	r3, #22
 800d864:	d101      	bne.n	800d86a <__sflush_r+0xb6>
 800d866:	602f      	str	r7, [r5, #0]
 800d868:	e7b1      	b.n	800d7ce <__sflush_r+0x1a>
 800d86a:	89a3      	ldrh	r3, [r4, #12]
 800d86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d870:	81a3      	strh	r3, [r4, #12]
 800d872:	e7ad      	b.n	800d7d0 <__sflush_r+0x1c>
 800d874:	690f      	ldr	r7, [r1, #16]
 800d876:	2f00      	cmp	r7, #0
 800d878:	d0a9      	beq.n	800d7ce <__sflush_r+0x1a>
 800d87a:	0793      	lsls	r3, r2, #30
 800d87c:	680e      	ldr	r6, [r1, #0]
 800d87e:	bf08      	it	eq
 800d880:	694b      	ldreq	r3, [r1, #20]
 800d882:	600f      	str	r7, [r1, #0]
 800d884:	bf18      	it	ne
 800d886:	2300      	movne	r3, #0
 800d888:	eba6 0807 	sub.w	r8, r6, r7
 800d88c:	608b      	str	r3, [r1, #8]
 800d88e:	f1b8 0f00 	cmp.w	r8, #0
 800d892:	dd9c      	ble.n	800d7ce <__sflush_r+0x1a>
 800d894:	6a21      	ldr	r1, [r4, #32]
 800d896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d898:	4643      	mov	r3, r8
 800d89a:	463a      	mov	r2, r7
 800d89c:	4628      	mov	r0, r5
 800d89e:	47b0      	blx	r6
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	dc06      	bgt.n	800d8b2 <__sflush_r+0xfe>
 800d8a4:	89a3      	ldrh	r3, [r4, #12]
 800d8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8aa:	81a3      	strh	r3, [r4, #12]
 800d8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b0:	e78e      	b.n	800d7d0 <__sflush_r+0x1c>
 800d8b2:	4407      	add	r7, r0
 800d8b4:	eba8 0800 	sub.w	r8, r8, r0
 800d8b8:	e7e9      	b.n	800d88e <__sflush_r+0xda>
 800d8ba:	bf00      	nop
 800d8bc:	dfbffffe 	.word	0xdfbffffe

0800d8c0 <_fflush_r>:
 800d8c0:	b538      	push	{r3, r4, r5, lr}
 800d8c2:	690b      	ldr	r3, [r1, #16]
 800d8c4:	4605      	mov	r5, r0
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	b913      	cbnz	r3, 800d8d0 <_fflush_r+0x10>
 800d8ca:	2500      	movs	r5, #0
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	bd38      	pop	{r3, r4, r5, pc}
 800d8d0:	b118      	cbz	r0, 800d8da <_fflush_r+0x1a>
 800d8d2:	6a03      	ldr	r3, [r0, #32]
 800d8d4:	b90b      	cbnz	r3, 800d8da <_fflush_r+0x1a>
 800d8d6:	f7ff f85d 	bl	800c994 <__sinit>
 800d8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d0f3      	beq.n	800d8ca <_fflush_r+0xa>
 800d8e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8e4:	07d0      	lsls	r0, r2, #31
 800d8e6:	d404      	bmi.n	800d8f2 <_fflush_r+0x32>
 800d8e8:	0599      	lsls	r1, r3, #22
 800d8ea:	d402      	bmi.n	800d8f2 <_fflush_r+0x32>
 800d8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8ee:	f7ff fa24 	bl	800cd3a <__retarget_lock_acquire_recursive>
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	f7ff ff5d 	bl	800d7b4 <__sflush_r>
 800d8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8fc:	07da      	lsls	r2, r3, #31
 800d8fe:	4605      	mov	r5, r0
 800d900:	d4e4      	bmi.n	800d8cc <_fflush_r+0xc>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	059b      	lsls	r3, r3, #22
 800d906:	d4e1      	bmi.n	800d8cc <_fflush_r+0xc>
 800d908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d90a:	f7ff fa17 	bl	800cd3c <__retarget_lock_release_recursive>
 800d90e:	e7dd      	b.n	800d8cc <_fflush_r+0xc>

0800d910 <__swhatbuf_r>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	460c      	mov	r4, r1
 800d914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d918:	2900      	cmp	r1, #0
 800d91a:	b096      	sub	sp, #88	; 0x58
 800d91c:	4615      	mov	r5, r2
 800d91e:	461e      	mov	r6, r3
 800d920:	da0d      	bge.n	800d93e <__swhatbuf_r+0x2e>
 800d922:	89a3      	ldrh	r3, [r4, #12]
 800d924:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d928:	f04f 0100 	mov.w	r1, #0
 800d92c:	bf0c      	ite	eq
 800d92e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d932:	2340      	movne	r3, #64	; 0x40
 800d934:	2000      	movs	r0, #0
 800d936:	6031      	str	r1, [r6, #0]
 800d938:	602b      	str	r3, [r5, #0]
 800d93a:	b016      	add	sp, #88	; 0x58
 800d93c:	bd70      	pop	{r4, r5, r6, pc}
 800d93e:	466a      	mov	r2, sp
 800d940:	f000 f8f8 	bl	800db34 <_fstat_r>
 800d944:	2800      	cmp	r0, #0
 800d946:	dbec      	blt.n	800d922 <__swhatbuf_r+0x12>
 800d948:	9901      	ldr	r1, [sp, #4]
 800d94a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d94e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d952:	4259      	negs	r1, r3
 800d954:	4159      	adcs	r1, r3
 800d956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d95a:	e7eb      	b.n	800d934 <__swhatbuf_r+0x24>

0800d95c <__smakebuf_r>:
 800d95c:	898b      	ldrh	r3, [r1, #12]
 800d95e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d960:	079d      	lsls	r5, r3, #30
 800d962:	4606      	mov	r6, r0
 800d964:	460c      	mov	r4, r1
 800d966:	d507      	bpl.n	800d978 <__smakebuf_r+0x1c>
 800d968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d96c:	6023      	str	r3, [r4, #0]
 800d96e:	6123      	str	r3, [r4, #16]
 800d970:	2301      	movs	r3, #1
 800d972:	6163      	str	r3, [r4, #20]
 800d974:	b002      	add	sp, #8
 800d976:	bd70      	pop	{r4, r5, r6, pc}
 800d978:	ab01      	add	r3, sp, #4
 800d97a:	466a      	mov	r2, sp
 800d97c:	f7ff ffc8 	bl	800d910 <__swhatbuf_r>
 800d980:	9900      	ldr	r1, [sp, #0]
 800d982:	4605      	mov	r5, r0
 800d984:	4630      	mov	r0, r6
 800d986:	f7ff fa5d 	bl	800ce44 <_malloc_r>
 800d98a:	b948      	cbnz	r0, 800d9a0 <__smakebuf_r+0x44>
 800d98c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d990:	059a      	lsls	r2, r3, #22
 800d992:	d4ef      	bmi.n	800d974 <__smakebuf_r+0x18>
 800d994:	f023 0303 	bic.w	r3, r3, #3
 800d998:	f043 0302 	orr.w	r3, r3, #2
 800d99c:	81a3      	strh	r3, [r4, #12]
 800d99e:	e7e3      	b.n	800d968 <__smakebuf_r+0xc>
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	6020      	str	r0, [r4, #0]
 800d9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	9b00      	ldr	r3, [sp, #0]
 800d9ac:	6163      	str	r3, [r4, #20]
 800d9ae:	9b01      	ldr	r3, [sp, #4]
 800d9b0:	6120      	str	r0, [r4, #16]
 800d9b2:	b15b      	cbz	r3, 800d9cc <__smakebuf_r+0x70>
 800d9b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f000 f8cd 	bl	800db58 <_isatty_r>
 800d9be:	b128      	cbz	r0, 800d9cc <__smakebuf_r+0x70>
 800d9c0:	89a3      	ldrh	r3, [r4, #12]
 800d9c2:	f023 0303 	bic.w	r3, r3, #3
 800d9c6:	f043 0301 	orr.w	r3, r3, #1
 800d9ca:	81a3      	strh	r3, [r4, #12]
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	431d      	orrs	r5, r3
 800d9d0:	81a5      	strh	r5, [r4, #12]
 800d9d2:	e7cf      	b.n	800d974 <__smakebuf_r+0x18>

0800d9d4 <__swbuf_r>:
 800d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d6:	460e      	mov	r6, r1
 800d9d8:	4614      	mov	r4, r2
 800d9da:	4605      	mov	r5, r0
 800d9dc:	b118      	cbz	r0, 800d9e6 <__swbuf_r+0x12>
 800d9de:	6a03      	ldr	r3, [r0, #32]
 800d9e0:	b90b      	cbnz	r3, 800d9e6 <__swbuf_r+0x12>
 800d9e2:	f7fe ffd7 	bl	800c994 <__sinit>
 800d9e6:	69a3      	ldr	r3, [r4, #24]
 800d9e8:	60a3      	str	r3, [r4, #8]
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	071a      	lsls	r2, r3, #28
 800d9ee:	d525      	bpl.n	800da3c <__swbuf_r+0x68>
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	b31b      	cbz	r3, 800da3c <__swbuf_r+0x68>
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	6922      	ldr	r2, [r4, #16]
 800d9f8:	1a98      	subs	r0, r3, r2
 800d9fa:	6963      	ldr	r3, [r4, #20]
 800d9fc:	b2f6      	uxtb	r6, r6
 800d9fe:	4283      	cmp	r3, r0
 800da00:	4637      	mov	r7, r6
 800da02:	dc04      	bgt.n	800da0e <__swbuf_r+0x3a>
 800da04:	4621      	mov	r1, r4
 800da06:	4628      	mov	r0, r5
 800da08:	f7ff ff5a 	bl	800d8c0 <_fflush_r>
 800da0c:	b9e0      	cbnz	r0, 800da48 <__swbuf_r+0x74>
 800da0e:	68a3      	ldr	r3, [r4, #8]
 800da10:	3b01      	subs	r3, #1
 800da12:	60a3      	str	r3, [r4, #8]
 800da14:	6823      	ldr	r3, [r4, #0]
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	6022      	str	r2, [r4, #0]
 800da1a:	701e      	strb	r6, [r3, #0]
 800da1c:	6962      	ldr	r2, [r4, #20]
 800da1e:	1c43      	adds	r3, r0, #1
 800da20:	429a      	cmp	r2, r3
 800da22:	d004      	beq.n	800da2e <__swbuf_r+0x5a>
 800da24:	89a3      	ldrh	r3, [r4, #12]
 800da26:	07db      	lsls	r3, r3, #31
 800da28:	d506      	bpl.n	800da38 <__swbuf_r+0x64>
 800da2a:	2e0a      	cmp	r6, #10
 800da2c:	d104      	bne.n	800da38 <__swbuf_r+0x64>
 800da2e:	4621      	mov	r1, r4
 800da30:	4628      	mov	r0, r5
 800da32:	f7ff ff45 	bl	800d8c0 <_fflush_r>
 800da36:	b938      	cbnz	r0, 800da48 <__swbuf_r+0x74>
 800da38:	4638      	mov	r0, r7
 800da3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da3c:	4621      	mov	r1, r4
 800da3e:	4628      	mov	r0, r5
 800da40:	f000 f806 	bl	800da50 <__swsetup_r>
 800da44:	2800      	cmp	r0, #0
 800da46:	d0d5      	beq.n	800d9f4 <__swbuf_r+0x20>
 800da48:	f04f 37ff 	mov.w	r7, #4294967295
 800da4c:	e7f4      	b.n	800da38 <__swbuf_r+0x64>
	...

0800da50 <__swsetup_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4b2a      	ldr	r3, [pc, #168]	; (800dafc <__swsetup_r+0xac>)
 800da54:	4605      	mov	r5, r0
 800da56:	6818      	ldr	r0, [r3, #0]
 800da58:	460c      	mov	r4, r1
 800da5a:	b118      	cbz	r0, 800da64 <__swsetup_r+0x14>
 800da5c:	6a03      	ldr	r3, [r0, #32]
 800da5e:	b90b      	cbnz	r3, 800da64 <__swsetup_r+0x14>
 800da60:	f7fe ff98 	bl	800c994 <__sinit>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da6a:	0718      	lsls	r0, r3, #28
 800da6c:	d422      	bmi.n	800dab4 <__swsetup_r+0x64>
 800da6e:	06d9      	lsls	r1, r3, #27
 800da70:	d407      	bmi.n	800da82 <__swsetup_r+0x32>
 800da72:	2309      	movs	r3, #9
 800da74:	602b      	str	r3, [r5, #0]
 800da76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	f04f 30ff 	mov.w	r0, #4294967295
 800da80:	e034      	b.n	800daec <__swsetup_r+0x9c>
 800da82:	0758      	lsls	r0, r3, #29
 800da84:	d512      	bpl.n	800daac <__swsetup_r+0x5c>
 800da86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da88:	b141      	cbz	r1, 800da9c <__swsetup_r+0x4c>
 800da8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da8e:	4299      	cmp	r1, r3
 800da90:	d002      	beq.n	800da98 <__swsetup_r+0x48>
 800da92:	4628      	mov	r0, r5
 800da94:	f7ff f962 	bl	800cd5c <_free_r>
 800da98:	2300      	movs	r3, #0
 800da9a:	6363      	str	r3, [r4, #52]	; 0x34
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800daa2:	81a3      	strh	r3, [r4, #12]
 800daa4:	2300      	movs	r3, #0
 800daa6:	6063      	str	r3, [r4, #4]
 800daa8:	6923      	ldr	r3, [r4, #16]
 800daaa:	6023      	str	r3, [r4, #0]
 800daac:	89a3      	ldrh	r3, [r4, #12]
 800daae:	f043 0308 	orr.w	r3, r3, #8
 800dab2:	81a3      	strh	r3, [r4, #12]
 800dab4:	6923      	ldr	r3, [r4, #16]
 800dab6:	b94b      	cbnz	r3, 800dacc <__swsetup_r+0x7c>
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dabe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dac2:	d003      	beq.n	800dacc <__swsetup_r+0x7c>
 800dac4:	4621      	mov	r1, r4
 800dac6:	4628      	mov	r0, r5
 800dac8:	f7ff ff48 	bl	800d95c <__smakebuf_r>
 800dacc:	89a0      	ldrh	r0, [r4, #12]
 800dace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dad2:	f010 0301 	ands.w	r3, r0, #1
 800dad6:	d00a      	beq.n	800daee <__swsetup_r+0x9e>
 800dad8:	2300      	movs	r3, #0
 800dada:	60a3      	str	r3, [r4, #8]
 800dadc:	6963      	ldr	r3, [r4, #20]
 800dade:	425b      	negs	r3, r3
 800dae0:	61a3      	str	r3, [r4, #24]
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	b943      	cbnz	r3, 800daf8 <__swsetup_r+0xa8>
 800dae6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800daea:	d1c4      	bne.n	800da76 <__swsetup_r+0x26>
 800daec:	bd38      	pop	{r3, r4, r5, pc}
 800daee:	0781      	lsls	r1, r0, #30
 800daf0:	bf58      	it	pl
 800daf2:	6963      	ldrpl	r3, [r4, #20]
 800daf4:	60a3      	str	r3, [r4, #8]
 800daf6:	e7f4      	b.n	800dae2 <__swsetup_r+0x92>
 800daf8:	2000      	movs	r0, #0
 800dafa:	e7f7      	b.n	800daec <__swsetup_r+0x9c>
 800dafc:	2400008c 	.word	0x2400008c

0800db00 <memmove>:
 800db00:	4288      	cmp	r0, r1
 800db02:	b510      	push	{r4, lr}
 800db04:	eb01 0402 	add.w	r4, r1, r2
 800db08:	d902      	bls.n	800db10 <memmove+0x10>
 800db0a:	4284      	cmp	r4, r0
 800db0c:	4623      	mov	r3, r4
 800db0e:	d807      	bhi.n	800db20 <memmove+0x20>
 800db10:	1e43      	subs	r3, r0, #1
 800db12:	42a1      	cmp	r1, r4
 800db14:	d008      	beq.n	800db28 <memmove+0x28>
 800db16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db1e:	e7f8      	b.n	800db12 <memmove+0x12>
 800db20:	4402      	add	r2, r0
 800db22:	4601      	mov	r1, r0
 800db24:	428a      	cmp	r2, r1
 800db26:	d100      	bne.n	800db2a <memmove+0x2a>
 800db28:	bd10      	pop	{r4, pc}
 800db2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db32:	e7f7      	b.n	800db24 <memmove+0x24>

0800db34 <_fstat_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	4d07      	ldr	r5, [pc, #28]	; (800db54 <_fstat_r+0x20>)
 800db38:	2300      	movs	r3, #0
 800db3a:	4604      	mov	r4, r0
 800db3c:	4608      	mov	r0, r1
 800db3e:	4611      	mov	r1, r2
 800db40:	602b      	str	r3, [r5, #0]
 800db42:	f7f3 f8cb 	bl	8000cdc <_fstat>
 800db46:	1c43      	adds	r3, r0, #1
 800db48:	d102      	bne.n	800db50 <_fstat_r+0x1c>
 800db4a:	682b      	ldr	r3, [r5, #0]
 800db4c:	b103      	cbz	r3, 800db50 <_fstat_r+0x1c>
 800db4e:	6023      	str	r3, [r4, #0]
 800db50:	bd38      	pop	{r3, r4, r5, pc}
 800db52:	bf00      	nop
 800db54:	24001600 	.word	0x24001600

0800db58 <_isatty_r>:
 800db58:	b538      	push	{r3, r4, r5, lr}
 800db5a:	4d06      	ldr	r5, [pc, #24]	; (800db74 <_isatty_r+0x1c>)
 800db5c:	2300      	movs	r3, #0
 800db5e:	4604      	mov	r4, r0
 800db60:	4608      	mov	r0, r1
 800db62:	602b      	str	r3, [r5, #0]
 800db64:	f7f3 f87c 	bl	8000c60 <_isatty>
 800db68:	1c43      	adds	r3, r0, #1
 800db6a:	d102      	bne.n	800db72 <_isatty_r+0x1a>
 800db6c:	682b      	ldr	r3, [r5, #0]
 800db6e:	b103      	cbz	r3, 800db72 <_isatty_r+0x1a>
 800db70:	6023      	str	r3, [r4, #0]
 800db72:	bd38      	pop	{r3, r4, r5, pc}
 800db74:	24001600 	.word	0x24001600

0800db78 <_sbrk_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	4d06      	ldr	r5, [pc, #24]	; (800db94 <_sbrk_r+0x1c>)
 800db7c:	2300      	movs	r3, #0
 800db7e:	4604      	mov	r4, r0
 800db80:	4608      	mov	r0, r1
 800db82:	602b      	str	r3, [r5, #0]
 800db84:	f7f3 fd7e 	bl	8001684 <_sbrk>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_sbrk_r+0x1a>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_sbrk_r+0x1a>
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	24001600 	.word	0x24001600

0800db98 <_realloc_r>:
 800db98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9c:	4680      	mov	r8, r0
 800db9e:	4614      	mov	r4, r2
 800dba0:	460e      	mov	r6, r1
 800dba2:	b921      	cbnz	r1, 800dbae <_realloc_r+0x16>
 800dba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	4611      	mov	r1, r2
 800dbaa:	f7ff b94b 	b.w	800ce44 <_malloc_r>
 800dbae:	b92a      	cbnz	r2, 800dbbc <_realloc_r+0x24>
 800dbb0:	f7ff f8d4 	bl	800cd5c <_free_r>
 800dbb4:	4625      	mov	r5, r4
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbbc:	f000 f81b 	bl	800dbf6 <_malloc_usable_size_r>
 800dbc0:	4284      	cmp	r4, r0
 800dbc2:	4607      	mov	r7, r0
 800dbc4:	d802      	bhi.n	800dbcc <_realloc_r+0x34>
 800dbc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbca:	d812      	bhi.n	800dbf2 <_realloc_r+0x5a>
 800dbcc:	4621      	mov	r1, r4
 800dbce:	4640      	mov	r0, r8
 800dbd0:	f7ff f938 	bl	800ce44 <_malloc_r>
 800dbd4:	4605      	mov	r5, r0
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d0ed      	beq.n	800dbb6 <_realloc_r+0x1e>
 800dbda:	42bc      	cmp	r4, r7
 800dbdc:	4622      	mov	r2, r4
 800dbde:	4631      	mov	r1, r6
 800dbe0:	bf28      	it	cs
 800dbe2:	463a      	movcs	r2, r7
 800dbe4:	f7ff f8ab 	bl	800cd3e <memcpy>
 800dbe8:	4631      	mov	r1, r6
 800dbea:	4640      	mov	r0, r8
 800dbec:	f7ff f8b6 	bl	800cd5c <_free_r>
 800dbf0:	e7e1      	b.n	800dbb6 <_realloc_r+0x1e>
 800dbf2:	4635      	mov	r5, r6
 800dbf4:	e7df      	b.n	800dbb6 <_realloc_r+0x1e>

0800dbf6 <_malloc_usable_size_r>:
 800dbf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbfa:	1f18      	subs	r0, r3, #4
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	bfbc      	itt	lt
 800dc00:	580b      	ldrlt	r3, [r1, r0]
 800dc02:	18c0      	addlt	r0, r0, r3
 800dc04:	4770      	bx	lr
	...

0800dc08 <_init>:
 800dc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0a:	bf00      	nop
 800dc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0e:	bc08      	pop	{r3}
 800dc10:	469e      	mov	lr, r3
 800dc12:	4770      	bx	lr

0800dc14 <_fini>:
 800dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc16:	bf00      	nop
 800dc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc1a:	bc08      	pop	{r3}
 800dc1c:	469e      	mov	lr, r3
 800dc1e:	4770      	bx	lr
