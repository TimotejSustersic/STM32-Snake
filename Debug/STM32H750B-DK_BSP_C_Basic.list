
STM32H750B-DK_BSP_C_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  0800c874  0800c874  0001c874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d618  0800d618  0001d618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d61c  0800d61c  0001d61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  24000000  0800d620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001564  2400008c  0800d6ac  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240015f0  0800d6ac  000215f0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003143b  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005ca2  00000000  00000000  00051538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000025c0  00000000  00000000  000571e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d77  00000000  00000000  000597a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009f72  00000000  00000000  0005b517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034226  00000000  00000000  00065489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a9126  00000000  00000000  000996af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ac10  00000000  00000000  002427d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000060  00000000  00000000  0024d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c85c 	.word	0x0800c85c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	0800c85c 	.word	0x0800c85c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <gameMain>:
static void resetVariables();
static void addtoSnake(int x, int y, int new);
static void Init_Buttons(void);
static node_t* push(int x, int y);

void gameMain() {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

    Init_Buttons();
 8000384:	f000 fb7e 	bl	8000a84 <Init_Buttons>

    // LTCD setup
    BSP_LCD_GetXSize(0, &x_size);
 8000388:	4925      	ldr	r1, [pc, #148]	; (8000420 <gameMain+0xa0>)
 800038a:	2000      	movs	r0, #0
 800038c:	f002 fb8a 	bl	8002aa4 <BSP_LCD_GetXSize>
    BSP_LCD_GetYSize(0, &y_size);
 8000390:	4924      	ldr	r1, [pc, #144]	; (8000424 <gameMain+0xa4>)
 8000392:	2000      	movs	r0, #0
 8000394:	f002 fba4 	bl	8002ae0 <BSP_LCD_GetYSize>
    
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8000398:	f04f 30ff 	mov.w	r0, #4294967295
 800039c:	f000 fdb6 	bl	8000f0c <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetLayer(0);
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 fd95 	bl	8000ed0 <UTIL_LCD_SetLayer>

    x_grid = x_size / cellSize;
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <gameMain+0xa0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1f      	ldr	r2, [pc, #124]	; (8000428 <gameMain+0xa8>)
 80003ac:	6812      	ldr	r2, [r2, #0]
 80003ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <gameMain+0xac>)
 80003b6:	601a      	str	r2, [r3, #0]
    y_grid = y_size / cellSize;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <gameMain+0xa4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a1a      	ldr	r2, [pc, #104]	; (8000428 <gameMain+0xa8>)
 80003be:	6812      	ldr	r2, [r2, #0]
 80003c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <gameMain+0xb0>)
 80003c8:	601a      	str	r2, [r3, #0]

    x_border = (x_size - (x_grid * cellSize)) / 2; 
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <gameMain+0xa0>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a17      	ldr	r2, [pc, #92]	; (800042c <gameMain+0xac>)
 80003d0:	6812      	ldr	r2, [r2, #0]
 80003d2:	4915      	ldr	r1, [pc, #84]	; (8000428 <gameMain+0xa8>)
 80003d4:	6809      	ldr	r1, [r1, #0]
 80003d6:	fb01 f202 	mul.w	r2, r1, r2
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	085b      	lsrs	r3, r3, #1
 80003de:	461a      	mov	r2, r3
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <gameMain+0xb4>)
 80003e2:	601a      	str	r2, [r3, #0]
    y_border = (y_size - (y_grid * cellSize)) / 2; 
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <gameMain+0xa4>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a11      	ldr	r2, [pc, #68]	; (8000430 <gameMain+0xb0>)
 80003ea:	6812      	ldr	r2, [r2, #0]
 80003ec:	490e      	ldr	r1, [pc, #56]	; (8000428 <gameMain+0xa8>)
 80003ee:	6809      	ldr	r1, [r1, #0]
 80003f0:	fb01 f202 	mul.w	r2, r1, r2
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	085b      	lsrs	r3, r3, #1
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <gameMain+0xb8>)
 80003fc:	601a      	str	r2, [r3, #0]
     * 2. Game Over
    */
    while (1)
    {
        // game
        if (gameStage == 0)
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <gameMain+0xbc>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d102      	bne.n	800040c <gameMain+0x8c>
            gameStart();
 8000406:	f000 f81b 	bl	8000440 <gameStart>
 800040a:	e7f8      	b.n	80003fe <gameMain+0x7e>
        else if (gameStage == 1)
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <gameMain+0xbc>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d102      	bne.n	800041a <gameMain+0x9a>
            game();
 8000414:	f000 f828 	bl	8000468 <game>
 8000418:	e7f1      	b.n	80003fe <gameMain+0x7e>
        else
            gameOver();
 800041a:	f000 f90d 	bl	8000638 <gameOver>
        if (gameStage == 0)
 800041e:	e7ee      	b.n	80003fe <gameMain+0x7e>
 8000420:	240000b0 	.word	0x240000b0
 8000424:	240000b4 	.word	0x240000b4
 8000428:	24000000 	.word	0x24000000
 800042c:	240000bc 	.word	0x240000bc
 8000430:	240000c0 	.word	0x240000c0
 8000434:	240000c4 	.word	0x240000c4
 8000438:	240000c8 	.word	0x240000c8
 800043c:	240000b8 	.word	0x240000b8

08000440 <gameStart>:
    }
    
}

static void gameStart() {
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

    // 1. Draw shit and reset variables
    resetVariables();
 8000444:	f000 fa70 	bl	8000928 <resetVariables>
    DrawCanvas();
 8000448:	f000 f946 	bl	80006d8 <DrawCanvas>

    // 2. wait for user input
    while (!BSP_PB_GetState(BUTTON_USER_PIN)) { }
 800044c:	bf00      	nop
 800044e:	2000      	movs	r0, #0
 8000450:	f001 fd3e 	bl	8001ed0 <BSP_PB_GetState>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f9      	beq.n	800044e <gameStart+0xe>
    
    gameStage = 1;
 800045a:	4b02      	ldr	r3, [pc, #8]	; (8000464 <gameStart+0x24>)
 800045c:	2201      	movs	r2, #1
 800045e:	601a      	str	r2, [r3, #0]
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	240000b8 	.word	0x240000b8

08000468 <game>:

// game logic
static void game() {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0

    DrawGridCell(0, 0, 1);
 800046e:	2201      	movs	r2, #1
 8000470:	2100      	movs	r1, #0
 8000472:	2000      	movs	r0, #0
 8000474:	f000 f97c 	bl	8000770 <DrawGridCell>

    // initial
    BSP_LED_Off(LED_GREEN);
 8000478:	2000      	movs	r0, #0
 800047a:	f001 fc99 	bl	8001db0 <BSP_LED_Off>

    // New Location //
    ////////////////////////////
    int x_new = head->x; 
 800047e:	4b64      	ldr	r3, [pc, #400]	; (8000610 <game+0x1a8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	60fb      	str	r3, [r7, #12]
    int y_new = head->y;
 8000486:	4b62      	ldr	r3, [pc, #392]	; (8000610 <game+0x1a8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	60bb      	str	r3, [r7, #8]
    
    if (HAL_GPIO_ReadPin(GPIOB, BUTTON_LEFT) && smer != RIGHT)
 800048e:	2140      	movs	r1, #64	; 0x40
 8000490:	4860      	ldr	r0, [pc, #384]	; (8000614 <game+0x1ac>)
 8000492:	f005 fd1d 	bl	8005ed0 <HAL_GPIO_ReadPin>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d006      	beq.n	80004aa <game+0x42>
 800049c:	4b5e      	ldr	r3, [pc, #376]	; (8000618 <game+0x1b0>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d002      	beq.n	80004aa <game+0x42>
        smer = LEFT;
 80004a4:	4b5c      	ldr	r3, [pc, #368]	; (8000618 <game+0x1b0>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOB, BUTTON_RIGHT) && smer != LEFT)
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	4859      	ldr	r0, [pc, #356]	; (8000614 <game+0x1ac>)
 80004ae:	f005 fd0f 	bl	8005ed0 <HAL_GPIO_ReadPin>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d006      	beq.n	80004c6 <game+0x5e>
 80004b8:	4b57      	ldr	r3, [pc, #348]	; (8000618 <game+0x1b0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d002      	beq.n	80004c6 <game+0x5e>
        smer = RIGHT;
 80004c0:	4b55      	ldr	r3, [pc, #340]	; (8000618 <game+0x1b0>)
 80004c2:	2203      	movs	r2, #3
 80004c4:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_DOWN) && smer != UP)
 80004c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ca:	4854      	ldr	r0, [pc, #336]	; (800061c <game+0x1b4>)
 80004cc:	f005 fd00 	bl	8005ed0 <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <game+0x7c>
 80004d6:	4b50      	ldr	r3, [pc, #320]	; (8000618 <game+0x1b0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d002      	beq.n	80004e4 <game+0x7c>
        smer = DOWN;
 80004de:	4b4e      	ldr	r3, [pc, #312]	; (8000618 <game+0x1b0>)
 80004e0:	2204      	movs	r2, #4
 80004e2:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_UP) && smer != DOWN)
 80004e4:	2140      	movs	r1, #64	; 0x40
 80004e6:	484d      	ldr	r0, [pc, #308]	; (800061c <game+0x1b4>)
 80004e8:	f005 fcf2 	bl	8005ed0 <HAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d006      	beq.n	8000500 <game+0x98>
 80004f2:	4b49      	ldr	r3, [pc, #292]	; (8000618 <game+0x1b0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	d002      	beq.n	8000500 <game+0x98>
        smer = UP;
 80004fa:	4b47      	ldr	r3, [pc, #284]	; (8000618 <game+0x1b0>)
 80004fc:	2202      	movs	r2, #2
 80004fe:	601a      	str	r2, [r3, #0]
    
    // rabis 4 gumbe
    if (smer == DOWN) 
 8000500:	4b45      	ldr	r3, [pc, #276]	; (8000618 <game+0x1b0>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b04      	cmp	r3, #4
 8000506:	d103      	bne.n	8000510 <game+0xa8>
        y_new++;    
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	3301      	adds	r3, #1
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	e016      	b.n	800053e <game+0xd6>
    else if (smer == RIGHT) 
 8000510:	4b41      	ldr	r3, [pc, #260]	; (8000618 <game+0x1b0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d103      	bne.n	8000520 <game+0xb8>
        x_new++;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	3301      	adds	r3, #1
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	e00e      	b.n	800053e <game+0xd6>
    else if (smer == UP) 
 8000520:	4b3d      	ldr	r3, [pc, #244]	; (8000618 <game+0x1b0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b02      	cmp	r3, #2
 8000526:	d103      	bne.n	8000530 <game+0xc8>
        y_new--;    
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	3b01      	subs	r3, #1
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	e006      	b.n	800053e <game+0xd6>
    else if (smer == LEFT) 
 8000530:	4b39      	ldr	r3, [pc, #228]	; (8000618 <game+0x1b0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d102      	bne.n	800053e <game+0xd6>
        x_new--;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3b01      	subs	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
    ////////////////////////////

    // Colision //
    ////////////////////////////
    node_t* tmpNode = head->next;
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <game+0x1a8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	607b      	str	r3, [r7, #4]
    while (tmpNode != NULL)
 8000546:	e010      	b.n	800056a <game+0x102>
    {
        // if new location would hit the body
        if (x_new == tmpNode->x && y_new == tmpNode->y) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	429a      	cmp	r2, r3
 8000550:	d108      	bne.n	8000564 <game+0xfc>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	68ba      	ldr	r2, [r7, #8]
 8000558:	429a      	cmp	r2, r3
 800055a:	d103      	bne.n	8000564 <game+0xfc>
            gameStage = 0;
 800055c:	4b30      	ldr	r3, [pc, #192]	; (8000620 <game+0x1b8>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
            return;
 8000562:	e052      	b.n	800060a <game+0x1a2>
        }
        
        tmpNode = tmpNode->next;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	607b      	str	r3, [r7, #4]
    while (tmpNode != NULL)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1eb      	bne.n	8000548 <game+0xe0>
    }
    ////////////////////////////

    // naris nov jabuk
    if (x_apple == NULL || y_apple == NULL) {
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <game+0x1bc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d003      	beq.n	8000580 <game+0x118>
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <game+0x1c0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d11f      	bne.n	80005c0 <game+0x158>
        x_apple = rand() % x_grid;
 8000580:	f00b f82e 	bl	800b5e0 <rand>
 8000584:	4602      	mov	r2, r0
 8000586:	4b29      	ldr	r3, [pc, #164]	; (800062c <game+0x1c4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	fb92 f1f3 	sdiv	r1, r2, r3
 800058e:	fb01 f303 	mul.w	r3, r1, r3
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	4a23      	ldr	r2, [pc, #140]	; (8000624 <game+0x1bc>)
 8000596:	6013      	str	r3, [r2, #0]
        y_apple = rand() % y_grid;
 8000598:	f00b f822 	bl	800b5e0 <rand>
 800059c:	4602      	mov	r2, r0
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <game+0x1c8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	fb92 f1f3 	sdiv	r1, r2, r3
 80005a6:	fb01 f303 	mul.w	r3, r1, r3
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <game+0x1c0>)
 80005ae:	6013      	str	r3, [r2, #0]
        DrawGridCell(x_apple, y_apple, 3);
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <game+0x1bc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <game+0x1c0>)
 80005b6:	6811      	ldr	r1, [r2, #0]
 80005b8:	2203      	movs	r2, #3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f8d8 	bl	8000770 <DrawGridCell>
    }

    // Apple //
    ////////////////////////////
    int appleCollision = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
    if (x_new == x_apple && y_new == y_apple) {
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <game+0x1bc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d114      	bne.n	80005f8 <game+0x190>
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <game+0x1c0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d10f      	bne.n	80005f8 <game+0x190>
        appleCollision = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	603b      	str	r3, [r7, #0]
        snakeLength++;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <game+0x1cc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <game+0x1cc>)
 80005e4:	6013      	str	r3, [r2, #0]
        BSP_LED_On(LED_GREEN);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f001 fbc4 	bl	8001d74 <BSP_LED_On>

        x_apple = NULL;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <game+0x1bc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
        y_apple = NULL;
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <game+0x1c0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
    }
    ////////////////////////////

    addtoSnake(x_new, y_new, appleCollision);
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f000 f9ed 	bl	80009dc <addtoSnake>

    HAL_Delay(300);
 8000602:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000606:	f003 f99b 	bl	8003940 <HAL_Delay>
}
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	240000a8 	.word	0x240000a8
 8000614:	58020400 	.word	0x58020400
 8000618:	240000d8 	.word	0x240000d8
 800061c:	58020000 	.word	0x58020000
 8000620:	240000b8 	.word	0x240000b8
 8000624:	240000cc 	.word	0x240000cc
 8000628:	240000d0 	.word	0x240000d0
 800062c:	240000bc 	.word	0x240000bc
 8000630:	240000c0 	.word	0x240000c0
 8000634:	240000d4 	.word	0x240000d4

08000638 <gameOver>:

static void gameOver() {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8

    // Draw Game over and display score
    UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	f000 fd13 	bl	800106c <UTIL_LCD_Clear>

    BSP_LED_Off(LED_GREEN);
 8000646:	2000      	movs	r0, #0
 8000648:	f001 fbb2 	bl	8001db0 <BSP_LED_Off>
    BSP_LED_On(LED_RED);
 800064c:	2001      	movs	r0, #1
 800064e:	f001 fb91 	bl	8001d74 <BSP_LED_On>

    UTIL_LCD_SetFont(&Font16);
 8000652:	481c      	ldr	r0, [pc, #112]	; (80006c4 <gameOver+0x8c>)
 8000654:	f000 fc6e 	bl	8000f34 <UTIL_LCD_SetFont>
    UTIL_LCD_DrawRect(400, 400, 400, 50, UTIL_LCD_COLOR_BLACK);
 8000658:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2332      	movs	r3, #50	; 0x32
 8000660:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000664:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000668:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800066c:	f000 fdf8 	bl	8001260 <UTIL_LCD_DrawRect>

    char go;
    sprintf(go, "Game Over");
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4915      	ldr	r1, [pc, #84]	; (80006c8 <gameOver+0x90>)
 8000674:	4618      	mov	r0, r3
 8000676:	f00b f8b3 	bl	800b7e0 <siprintf>
    UTIL_LCD_DisplayStringAt(450, 450, (uint8_t *)go, CENTER_MODE);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	461a      	mov	r2, r3
 800067e:	2301      	movs	r3, #1
 8000680:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8000684:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000688:	f000 fd3c 	bl	8001104 <UTIL_LCD_DisplayStringAt>
    char sc;
    sprintf(sc, "Score: %d", snakeLength);
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	4618      	mov	r0, r3
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <gameOver+0x94>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	490e      	ldr	r1, [pc, #56]	; (80006d0 <gameOver+0x98>)
 8000698:	f00b f8a2 	bl	800b7e0 <siprintf>
    UTIL_LCD_DisplayStringAt(450, 500, (uint8_t *)sc, CENTER_MODE);
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	461a      	mov	r2, r3
 80006a0:	2301      	movs	r3, #1
 80006a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006a6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80006aa:	f000 fd2b 	bl	8001104 <UTIL_LCD_DisplayStringAt>

    // wait for 5 seconds
    HAL_Delay(5000);
 80006ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80006b2:	f003 f945 	bl	8003940 <HAL_Delay>
    // back to start
    gameStage = 0;
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <gameOver+0x9c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	24000004 	.word	0x24000004
 80006c8:	0800c874 	.word	0x0800c874
 80006cc:	240000d4 	.word	0x240000d4
 80006d0:	0800c880 	.word	0x0800c880
 80006d4:	240000b8 	.word	0x240000b8

080006d8 <DrawCanvas>:

static void DrawCanvas() {    
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b085      	sub	sp, #20
 80006dc:	af02      	add	r7, sp, #8

    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80006de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80006e2:	f000 fcc3 	bl	800106c <UTIL_LCD_Clear>
    // main platform
    UTIL_LCD_DrawRect(x_border, y_border, x_size - 2*x_border, y_size - 2*y_border, UTIL_LCD_COLOR_WHITE);
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <DrawCanvas+0x80>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <DrawCanvas+0x84>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	461c      	mov	r4, r3
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <DrawCanvas+0x88>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <DrawCanvas+0x80>)
 80006f8:	6812      	ldr	r2, [r2, #0]
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	1a99      	subs	r1, r3, r2
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <DrawCanvas+0x8c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <DrawCanvas+0x84>)
 8000704:	6812      	ldr	r2, [r2, #0]
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	f04f 32ff 	mov.w	r2, #4294967295
 800070e:	9200      	str	r2, [sp, #0]
 8000710:	460a      	mov	r2, r1
 8000712:	4621      	mov	r1, r4
 8000714:	f000 fda4 	bl	8001260 <UTIL_LCD_DrawRect>

    // grid
    for (int i = 0; i < x_grid; i++) 
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e012      	b.n	8000744 <DrawCanvas+0x6c>
        for (int j = 0; j < y_grid; j++) 
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	e007      	b.n	8000734 <DrawCanvas+0x5c>
            DrawGridCell(i, j, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	6839      	ldr	r1, [r7, #0]
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 f821 	bl	8000770 <DrawGridCell>
        for (int j = 0; j < y_grid; j++) 
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <DrawCanvas+0x90>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	429a      	cmp	r2, r3
 800073c:	dbf2      	blt.n	8000724 <DrawCanvas+0x4c>
    for (int i = 0; i < x_grid; i++) 
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	3301      	adds	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <DrawCanvas+0x94>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	dbe7      	blt.n	800071e <DrawCanvas+0x46>
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	240000c4 	.word	0x240000c4
 800075c:	240000c8 	.word	0x240000c8
 8000760:	240000b0 	.word	0x240000b0
 8000764:	240000b4 	.word	0x240000b4
 8000768:	240000c0 	.word	0x240000c0
 800076c:	240000bc 	.word	0x240000bc

08000770 <DrawGridCell>:

static void DrawGridCell(int x, int y, int type) {
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af02      	add	r7, sp, #8
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]

    // if we want to draw off grid its an error and game over
    if (
        x >= x_grid || 
 800077c:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <DrawGridCell+0x104>)
 800077e:	681b      	ldr	r3, [r3, #0]
    if (
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	429a      	cmp	r2, r3
 8000784:	da0a      	bge.n	800079c <DrawGridCell+0x2c>
        y >= y_grid ||
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <DrawGridCell+0x108>)
 8000788:	681b      	ldr	r3, [r3, #0]
        x >= x_grid || 
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	429a      	cmp	r2, r3
 800078e:	da05      	bge.n	800079c <DrawGridCell+0x2c>
        y >= y_grid ||
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b00      	cmp	r3, #0
 8000794:	db02      	blt.n	800079c <DrawGridCell+0x2c>
        x < 0 || 
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	2b00      	cmp	r3, #0
 800079a:	da02      	bge.n	80007a2 <DrawGridCell+0x32>
        y < 0           
    ) {
        gameStage = 0;
 800079c:	4b37      	ldr	r3, [pc, #220]	; (800087c <DrawGridCell+0x10c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
    }

    int x_pos = x * cellSize + x_border;
 80007a2:	4b37      	ldr	r3, [pc, #220]	; (8000880 <DrawGridCell+0x110>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	fb03 f202 	mul.w	r2, r3, r2
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <DrawGridCell+0x114>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4413      	add	r3, r2
 80007b2:	617b      	str	r3, [r7, #20]
    int y_pos = y * cellSize + y_border;
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <DrawGridCell+0x110>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	68ba      	ldr	r2, [r7, #8]
 80007ba:	fb03 f202 	mul.w	r2, r3, r2
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <DrawGridCell+0x118>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	613b      	str	r3, [r7, #16]

    // snake Body
    if (type == 1) {
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10d      	bne.n	80007e8 <DrawGridCell+0x78>
        // UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_LIGHTMAGENTA);
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_ST_GREEN_LIGHT);
 80007cc:	6978      	ldr	r0, [r7, #20]
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <DrawGridCell+0x110>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <DrawGridCell+0x110>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	461c      	mov	r4, r3
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <DrawGridCell+0x11c>)
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	4623      	mov	r3, r4
 80007e2:	f000 fd67 	bl	80012b4 <UTIL_LCD_FillRect>
    // empty cell
    else if (type == 0) {
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_BLACK);
        UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, 0xFF070707UL);
    }
}
 80007e6:	e040      	b.n	800086a <DrawGridCell+0xfa>
    else if (type == 2) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d10e      	bne.n	800080c <DrawGridCell+0x9c>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_MAGENTA);
 80007ee:	6978      	ldr	r0, [r7, #20]
 80007f0:	6939      	ldr	r1, [r7, #16]
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <DrawGridCell+0x110>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <DrawGridCell+0x110>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	461c      	mov	r4, r3
 80007fe:	f46f 437f 	mvn.w	r3, #65280	; 0xff00
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	4623      	mov	r3, r4
 8000806:	f000 fd55 	bl	80012b4 <UTIL_LCD_FillRect>
}
 800080a:	e02e      	b.n	800086a <DrawGridCell+0xfa>
    else if (type == 3) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d10d      	bne.n	800082e <DrawGridCell+0xbe>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_DARKRED);
 8000812:	6978      	ldr	r0, [r7, #20]
 8000814:	6939      	ldr	r1, [r7, #16]
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <DrawGridCell+0x110>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <DrawGridCell+0x110>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	461c      	mov	r4, r3
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <DrawGridCell+0x120>)
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4623      	mov	r3, r4
 8000828:	f000 fd44 	bl	80012b4 <UTIL_LCD_FillRect>
}
 800082c:	e01d      	b.n	800086a <DrawGridCell+0xfa>
    else if (type == 0) {
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d11a      	bne.n	800086a <DrawGridCell+0xfa>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_BLACK);
 8000834:	6978      	ldr	r0, [r7, #20]
 8000836:	6939      	ldr	r1, [r7, #16]
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <DrawGridCell+0x110>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <DrawGridCell+0x110>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	461c      	mov	r4, r3
 8000844:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	4623      	mov	r3, r4
 800084c:	f000 fd32 	bl	80012b4 <UTIL_LCD_FillRect>
        UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, 0xFF070707UL);
 8000850:	6978      	ldr	r0, [r7, #20]
 8000852:	6939      	ldr	r1, [r7, #16]
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <DrawGridCell+0x110>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <DrawGridCell+0x110>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	461c      	mov	r4, r3
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <DrawGridCell+0x124>)
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	4623      	mov	r3, r4
 8000866:	f000 fcfb 	bl	8001260 <UTIL_LCD_DrawRect>
}
 800086a:	bf00      	nop
 800086c:	371c      	adds	r7, #28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	bf00      	nop
 8000874:	240000bc 	.word	0x240000bc
 8000878:	240000c0 	.word	0x240000c0
 800087c:	240000b8 	.word	0x240000b8
 8000880:	24000000 	.word	0x24000000
 8000884:	240000c4 	.word	0x240000c4
 8000888:	240000c8 	.word	0x240000c8
 800088c:	ffbbcc01 	.word	0xffbbcc01
 8000890:	ff800000 	.word	0xff800000
 8000894:	ff070707 	.word	0xff070707

08000898 <push>:
//         pressed = HAL_GPIO_ReadPin(GPIO, pin);
            
//     return HAL_GetTick() - startTime;
// }

static node_t* push(int x, int y) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]

    node_t* newNode = (node_t*)malloc(sizeof(node_t));
 80008a2:	2010      	movs	r0, #16
 80008a4:	f00a fdb2 	bl	800b40c <malloc>
 80008a8:	4603      	mov	r3, r0
 80008aa:	60fb      	str	r3, [r7, #12]

    newNode->next = NULL;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]

    if (head == NULL) {
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <push+0x84>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d108      	bne.n	80008cc <push+0x34>
        head = newNode;  
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <push+0x84>)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6013      	str	r3, [r2, #0]
        DrawGridCell(x, y, 2); 
 80008c0:	2202      	movs	r2, #2
 80008c2:	6839      	ldr	r1, [r7, #0]
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff53 	bl	8000770 <DrawGridCell>
 80008ca:	e004      	b.n	80008d6 <push+0x3e>
    } 
    else {
        DrawGridCell(x, y, 1); 
 80008cc:	2201      	movs	r2, #1
 80008ce:	6839      	ldr	r1, [r7, #0]
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff4d 	bl	8000770 <DrawGridCell>
    }

    if (tail == NULL) {
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <push+0x88>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d106      	bne.n	80008ec <push+0x54>
        tail = newNode;
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <push+0x88>)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	6013      	str	r3, [r2, #0]
        newNode->prev = NULL;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	e006      	b.n	80008fa <push+0x62>
    }
    else {
        newNode->prev = tail;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <push+0x88>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	60da      	str	r2, [r3, #12]
        tail = newNode;
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <push+0x88>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6013      	str	r3, [r2, #0]
    }

    newNode->x = x;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]
    newNode->y = y;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	605a      	str	r2, [r3, #4]

    snakeLength++;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <push+0x8c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <push+0x8c>)
 800090e:	6013      	str	r3, [r2, #0]

    return newNode;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	240000a8 	.word	0x240000a8
 8000920:	240000ac 	.word	0x240000ac
 8000924:	240000d4 	.word	0x240000d4

08000928 <resetVariables>:

static void resetVariables() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

    BSP_LED_Off(LED_GREEN);
 800092e:	2000      	movs	r0, #0
 8000930:	f001 fa3e 	bl	8001db0 <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 fa3b 	bl	8001db0 <BSP_LED_Off>

    // pobrisemo kaco ce je prevelika
    while (snakeLength > 3)
 800093a:	e00f      	b.n	800095c <resetVariables+0x34>
    {
        node_t* deletingNode = head;
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <resetVariables+0xa0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	607b      	str	r3, [r7, #4]
        head = head->next;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <resetVariables+0xa0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <resetVariables+0xa0>)
 800094a:	6013      	str	r3, [r2, #0]
        free(deletingNode);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f00a fd65 	bl	800b41c <free>
        snakeLength--;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <resetVariables+0xa4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3b01      	subs	r3, #1
 8000958:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <resetVariables+0xa4>)
 800095a:	6013      	str	r3, [r2, #0]
    while (snakeLength > 3)
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <resetVariables+0xa4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b03      	cmp	r3, #3
 8000962:	dceb      	bgt.n	800093c <resetVariables+0x14>
    }

    // create a snake
    int x = x_grid / 2;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <resetVariables+0xa8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	da00      	bge.n	800096e <resetVariables+0x46>
 800096c:	3301      	adds	r3, #1
 800096e:	105b      	asrs	r3, r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
    int y = y_grid / 2;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <resetVariables+0xac>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	da00      	bge.n	800097c <resetVariables+0x54>
 800097a:	3301      	adds	r3, #1
 800097c:	105b      	asrs	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]

    if (snakeLength == 0)
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <resetVariables+0xa4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d103      	bne.n	8000990 <resetVariables+0x68>
        push(x, y);
 8000988:	68b9      	ldr	r1, [r7, #8]
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f7ff ff84 	bl	8000898 <push>
    if (snakeLength == 1)
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <resetVariables+0xa4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d105      	bne.n	80009a4 <resetVariables+0x7c>
        push(x, y+1);
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	3301      	adds	r3, #1
 800099c:	4619      	mov	r1, r3
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ff7a 	bl	8000898 <push>
    if (snakeLength == 2)
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <resetVariables+0xa4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d105      	bne.n	80009b8 <resetVariables+0x90>
        push(x, y+2);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3302      	adds	r3, #2
 80009b0:	4619      	mov	r1, r3
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f7ff ff70 	bl	8000898 <push>

    smer = LEFT;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <resetVariables+0xb0>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	240000a8 	.word	0x240000a8
 80009cc:	240000d4 	.word	0x240000d4
 80009d0:	240000bc 	.word	0x240000bc
 80009d4:	240000c0 	.word	0x240000c0
 80009d8:	240000d8 	.word	0x240000d8

080009dc <addtoSnake>:

static void addtoSnake(int x, int y, int new) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]

    // dodamo na head
    // v pomnilnik
    node_t* newNode = (node_t*)malloc(sizeof(node_t));
 80009e8:	2010      	movs	r0, #16
 80009ea:	f00a fd0f 	bl	800b40c <malloc>
 80009ee:	4603      	mov	r3, r0
 80009f0:	617b      	str	r3, [r7, #20]
    newNode->x = x;
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	601a      	str	r2, [r3, #0]
    newNode->y = y;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	605a      	str	r2, [r3, #4]

    head->prev = newNode;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <addtoSnake+0xa0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	60da      	str	r2, [r3, #12]
    newNode->next = head;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <addtoSnake+0xa0>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	609a      	str	r2, [r3, #8]
    newNode->prev = NULL;
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
    head = newNode;
 8000a14:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <addtoSnake+0xa0>)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	6013      	str	r3, [r2, #0]

    // na grid
    DrawGridCell(newNode->x, newNode->y, 2); // head
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2202      	movs	r2, #2
 8000a24:	4619      	mov	r1, r3
 8000a26:	f7ff fea3 	bl	8000770 <DrawGridCell>
    DrawGridCell(newNode->next->x, newNode->next->y, 1); // change head color to body color
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2201      	movs	r2, #1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f7ff fe99 	bl	8000770 <DrawGridCell>
    ///////////////////

    ///////////////////
    // brisemo zadnjega ce nismo jabolka pojedl
    if (!new) {
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d117      	bne.n	8000a74 <addtoSnake+0x98>
        
        node_t* deletingNode = tail;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <addtoSnake+0xa4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	613b      	str	r3, [r7, #16]

        tail->prev->next = NULL;    
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <addtoSnake+0xa4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
        tail = tail->prev;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <addtoSnake+0xa4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <addtoSnake+0xa4>)
 8000a5c:	6013      	str	r3, [r2, #0]

        // z grida
        DrawGridCell(deletingNode->x, deletingNode->y, 0);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f7ff fe81 	bl	8000770 <DrawGridCell>
        // s pomnilnika
        free(deletingNode);
 8000a6e:	6938      	ldr	r0, [r7, #16]
 8000a70:	f00a fcd4 	bl	800b41c <free>
    }
}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240000a8 	.word	0x240000a8
 8000a80:	240000ac 	.word	0x240000ac

08000a84 <Init_Buttons>:

static void Init_Buttons(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <Init_Buttons+0x84>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <Init_Buttons+0x84>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <Init_Buttons+0x84>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <Init_Buttons+0x84>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <Init_Buttons+0x84>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <Init_Buttons+0x84>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
   
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]

    GPIO_InitStruct.Pin = BUTTON_UP | BUTTON_DOWN;
 8000ade:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ae2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4808      	ldr	r0, [pc, #32]	; (8000b0c <Init_Buttons+0x88>)
 8000aec:	f005 f840 	bl	8005b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUTTON_LEFT | BUTTON_RIGHT;
 8000af0:	23c0      	movs	r3, #192	; 0xc0
 8000af2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <Init_Buttons+0x8c>)
 8000afc:	f005 f838 	bl	8005b70 <HAL_GPIO_Init>
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	58024400 	.word	0x58024400
 8000b0c:	58020000 	.word	0x58020000
 8000b10:	58020400 	.word	0x58020400

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
  */
  HAL_Init();
 8000b18:	f002 fe80 	bl	800381c <HAL_Init>

  SystemClock_Config();
 8000b1c:	f000 f836 	bl	8000b8c <SystemClock_Config>

  BSP_PB_Init(BUTTON_USER_PIN, BUTTON_MODE_GPIO);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f001 f962 	bl	8001dec <BSP_PB_Init>
  BSP_LED_Init(LED_GREEN);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f001 f8c5 	bl	8001cb8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f001 f8c2 	bl	8001cb8 <BSP_LED_Init>

 	srand(time(NULL));   // Initialization, should only be called once.
 8000b34:	2000      	movs	r0, #0
 8000b36:	f00a febf 	bl	800b8b8 <time>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	4610      	mov	r0, r2
 8000b40:	4619      	mov	r1, r3
 8000b42:	f00a fd1f 	bl	800b584 <srand>
	// HAL_IncTick();

  ////////////////////////////////////////////////////////
  // LTDC INIT
  ////////////////////////////////////////////////////////
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000b46:	2101      	movs	r1, #1
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f001 fdcf 	bl	80026ec <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <main+0x4c>)
 8000b50:	f000 f968 	bl	8000e24 <UTIL_LCD_SetFuncDriver>

  gameMain();
 8000b54:	f7ff fc14 	bl	8000380 <gameMain>

  return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	0800d50c 	.word	0x0800d50c

08000b64 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <BSP_PB_Callback+0x24>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	240000dc 	.word	0x240000dc

08000b8c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09e      	sub	sp, #120	; 0x78
 8000b90:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f006 fbd7 	bl	800734c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b42      	ldr	r3, [pc, #264]	; (8000cac <SystemClock_Config+0x120>)
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	4a41      	ldr	r2, [pc, #260]	; (8000cac <SystemClock_Config+0x120>)
 8000ba8:	f023 0301 	bic.w	r3, r3, #1
 8000bac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bae:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <SystemClock_Config+0x120>)
 8000bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <SystemClock_Config+0x124>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a3c      	ldr	r2, [pc, #240]	; (8000cb0 <SystemClock_Config+0x124>)
 8000bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <SystemClock_Config+0x124>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd0:	bf00      	nop
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <SystemClock_Config+0x124>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bde:	d1f8      	bne.n	8000bd2 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be0:	2301      	movs	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000bfe:	23a0      	movs	r3, #160	; 0xa0
 8000c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c16:	2308      	movs	r3, #8
 8000c18:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f006 fbce 	bl	80073c0 <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000c2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c32:	f000 f841 	bl	8000cb8 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000c36:	233f      	movs	r3, #63	; 0x3f
 8000c38:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c42:	2308      	movs	r3, #8
 8000c44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c46:	2340      	movs	r3, #64	; 0x40
 8000c48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c54:	2340      	movs	r3, #64	; 0x40
 8000c56:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000c58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f007 f808 	bl	8007c74 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000c6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c72:	f000 f821 	bl	8000cb8 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <SystemClock_Config+0x128>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <SystemClock_Config+0x128>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <SystemClock_Config+0x128>)
 8000c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SystemClock_Config+0x128>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <SystemClock_Config+0x128>)
 8000c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 8000ca0:	f002 fe7e 	bl	80039a0 <HAL_EnableCompensationCell>
}
 8000ca4:	bf00      	nop
 8000ca6:	3778      	adds	r7, #120	; 0x78
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58000400 	.word	0x58000400
 8000cb0:	58024800 	.word	0x58024800
 8000cb4:	58024400 	.word	0x58024400

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f001 f857 	bl	8001d74 <BSP_LED_On>
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <Error_Handler+0xe>

08000cc8 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db04      	blt.n	8000ce0 <_isatty+0x18>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	dc01      	bgt.n	8000ce0 <_isatty+0x18>
    return 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e005      	b.n	8000cec <_isatty+0x24>

  errno = EBADF;
 8000ce0:	f00a fe6c 	bl	800b9bc <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2209      	movs	r2, #9
 8000ce8:	601a      	str	r2, [r3, #0]
  return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <_close>:

int _close(int fd) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db04      	blt.n	8000d0c <_close+0x18>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	dc01      	bgt.n	8000d0c <_close+0x18>
    return 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e006      	b.n	8000d1a <_close+0x26>

  errno = EBADF;
 8000d0c:	f00a fe56 	bl	800b9bc <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2209      	movs	r2, #9
 8000d14:	601a      	str	r2, [r3, #0]
  return -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000d2e:	f00a fe45 	bl	800b9bc <__errno>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2209      	movs	r2, #9
 8000d36:	601a      	str	r2, [r3, #0]
  return -1;
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_fstat>:



int _fstat(int fd, struct stat* st) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db08      	blt.n	8000d66 <_fstat+0x22>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	dc05      	bgt.n	8000d66 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d60:	605a      	str	r2, [r3, #4]
    return 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e005      	b.n	8000d72 <_fstat+0x2e>
  }

  errno = EBADF;
 8000d66:	f00a fe29 	bl	800b9bc <__errno>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2209      	movs	r2, #9
 8000d6e:	601a      	str	r2, [r3, #0]
  return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <_read>:


int _read(int fd, char* ptr, int len) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d110      	bne.n	8000db0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <_read+0x4c>)
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	2201      	movs	r2, #1
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	f009 fa51 	bl	800a240 <HAL_UART_Receive>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d101      	bne.n	8000dac <_read+0x30>
      return 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e008      	b.n	8000dbe <_read+0x42>
    else
      return EIO;
 8000dac:	2305      	movs	r3, #5
 8000dae:	e006      	b.n	8000dbe <_read+0x42>
  }
  errno = EBADF;
 8000db0:	f00a fe04 	bl	800b9bc <__errno>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2209      	movs	r2, #9
 8000db8:	601a      	str	r2, [r3, #0]
  return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	240001c0 	.word	0x240001c0

08000dcc <_write>:

int _write(int fd, char* ptr, int len) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d002      	beq.n	8000de4 <_write+0x18>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d111      	bne.n	8000e08 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <_write+0x54>)
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	f009 f997 	bl	800a124 <HAL_UART_Transmit>
 8000df6:	4603      	mov	r3, r0
 8000df8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000dfa:	7dfb      	ldrb	r3, [r7, #23]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <_write+0x38>
      return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	e008      	b.n	8000e16 <_write+0x4a>
    else
      return EIO;
 8000e04:	2305      	movs	r3, #5
 8000e06:	e006      	b.n	8000e16 <_write+0x4a>
  }
  errno = EBADF;
 8000e08:	f00a fdd8 	bl	800b9bc <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2209      	movs	r2, #9
 8000e10:	601a      	str	r2, [r3, #0]
  return -1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	240001c0 	.word	0x240001c0

08000e24 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e32:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	4a20      	ldr	r2, [pc, #128]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e3a:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	4a1e      	ldr	r2, [pc, #120]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e42:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e4a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e52:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e5a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e62:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e6a:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e72:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e78:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e7a:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e82:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <UTIL_LCD_SetFuncDriver+0xa0>)
 8000e96:	4611      	mov	r1, r2
 8000e98:	2000      	movs	r0, #0
 8000e9a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <UTIL_LCD_SetFuncDriver+0xa4>)
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <UTIL_LCD_SetFuncDriver+0x98>)
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <UTIL_LCD_SetFuncDriver+0xa8>)
 8000eae:	4611      	mov	r1, r2
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	4798      	blx	r3
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	24000204 	.word	0x24000204
 8000ec0:	240001c4 	.word	0x240001c4
 8000ec4:	240001d8 	.word	0x240001d8
 8000ec8:	240001dc 	.word	0x240001dc
 8000ecc:	240001e0 	.word	0x240001e0

08000ed0 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <UTIL_LCD_SetLayer+0x34>)
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00c      	beq.n	8000efa <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <UTIL_LCD_SetLayer+0x34>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <UTIL_LCD_SetLayer+0x38>)
 8000ee6:	6912      	ldr	r2, [r2, #16]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4610      	mov	r0, r2
 8000eec:	4798      	blx	r3
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <UTIL_LCD_SetLayer+0x38>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60d3      	str	r3, [r2, #12]
    }
  }
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24000204 	.word	0x24000204
 8000f08:	240001c4 	.word	0x240001c4

08000f0c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <UTIL_LCD_SetBackColor+0x24>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <UTIL_LCD_SetBackColor+0x24>)
 8000f1a:	015b      	lsls	r3, r3, #5
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3304      	adds	r3, #4
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	240001c4 	.word	0x240001c4

08000f34 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <UTIL_LCD_SetFont+0x24>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <UTIL_LCD_SetFont+0x24>)
 8000f42:	015b      	lsls	r3, r3, #5
 8000f44:	4413      	add	r3, r2
 8000f46:	3308      	adds	r3, #8
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	240001c4 	.word	0x240001c4

08000f5c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <UTIL_LCD_FillRGBRect+0x30>)
 8000f6c:	685c      	ldr	r4, [r3, #4]
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <UTIL_LCD_FillRGBRect+0x34>)
 8000f70:	6918      	ldr	r0, [r3, #16]
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	47a0      	blx	r4
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd90      	pop	{r4, r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	24000204 	.word	0x24000204
 8000f90:	240001c4 	.word	0x240001c4

08000f94 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <UTIL_LCD_DrawHLine+0x64>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d118      	bne.n	8000fdc <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <UTIL_LCD_DrawHLine+0x68>)
 8000fac:	689c      	ldr	r4, [r3, #8]
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <UTIL_LCD_DrawHLine+0x64>)
 8000fb0:	6918      	ldr	r0, [r3, #16]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	f003 021f 	and.w	r2, r3, #31
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	0a9b      	lsrs	r3, r3, #10
 8000fbe:	015b      	lsls	r3, r3, #5
 8000fc0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	0cdb      	lsrs	r3, r3, #19
 8000fca:	02db      	lsls	r3, r3, #11
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	68f9      	ldr	r1, [r7, #12]
 8000fd8:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8000fda:	e009      	b.n	8000ff0 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <UTIL_LCD_DrawHLine+0x68>)
 8000fde:	689c      	ldr	r4, [r3, #8]
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <UTIL_LCD_DrawHLine+0x64>)
 8000fe2:	6918      	ldr	r0, [r3, #16]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	68f9      	ldr	r1, [r7, #12]
 8000fee:	47a0      	blx	r4
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	240001c4 	.word	0x240001c4
 8000ffc:	24000204 	.word	0x24000204

08001000 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b087      	sub	sp, #28
 8001004:	af02      	add	r7, sp, #8
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <UTIL_LCD_DrawVLine+0x64>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d118      	bne.n	8001048 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <UTIL_LCD_DrawVLine+0x68>)
 8001018:	68dc      	ldr	r4, [r3, #12]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <UTIL_LCD_DrawVLine+0x64>)
 800101c:	6918      	ldr	r0, [r3, #16]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	f003 021f 	and.w	r2, r3, #31
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	0a9b      	lsrs	r3, r3, #10
 800102a:	015b      	lsls	r3, r3, #5
 800102c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001030:	431a      	orrs	r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	0cdb      	lsrs	r3, r3, #19
 8001036:	02db      	lsls	r3, r3, #11
 8001038:	b29b      	uxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	68f9      	ldr	r1, [r7, #12]
 8001044:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8001046:	e009      	b.n	800105c <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <UTIL_LCD_DrawVLine+0x68>)
 800104a:	68dc      	ldr	r4, [r3, #12]
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <UTIL_LCD_DrawVLine+0x64>)
 800104e:	6918      	ldr	r0, [r3, #16]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	68f9      	ldr	r1, [r7, #12]
 800105a:	47a0      	blx	r4
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	240001c4 	.word	0x240001c4
 8001068:	24000204 	.word	0x24000204

0800106c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af02      	add	r7, sp, #8
 8001072:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <UTIL_LCD_Clear+0x28>)
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <UTIL_LCD_Clear+0x28>)
 800107a:	6999      	ldr	r1, [r3, #24]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	460b      	mov	r3, r1
 8001082:	2100      	movs	r1, #0
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f915 	bl	80012b4 <UTIL_LCD_FillRect>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	240001c4 	.word	0x240001c4

08001098 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	4613      	mov	r3, r2
 80010a4:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <UTIL_LCD_DisplayChar+0x68>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <UTIL_LCD_DisplayChar+0x68>)
 80010ac:	015b      	lsls	r3, r3, #5
 80010ae:	4413      	add	r3, r2
 80010b0:	3308      	adds	r3, #8
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80010ba:	4911      	ldr	r1, [pc, #68]	; (8001100 <UTIL_LCD_DisplayChar+0x68>)
 80010bc:	68c9      	ldr	r1, [r1, #12]
 80010be:	4810      	ldr	r0, [pc, #64]	; (8001100 <UTIL_LCD_DisplayChar+0x68>)
 80010c0:	0149      	lsls	r1, r1, #5
 80010c2:	4401      	add	r1, r0
 80010c4:	3108      	adds	r1, #8
 80010c6:	6809      	ldr	r1, [r1, #0]
 80010c8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80010ca:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <UTIL_LCD_DisplayChar+0x68>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <UTIL_LCD_DisplayChar+0x68>)
 80010d4:	015b      	lsls	r3, r3, #5
 80010d6:	4403      	add	r3, r0
 80010d8:	3308      	adds	r3, #8
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	3307      	adds	r3, #7
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da00      	bge.n	80010e6 <UTIL_LCD_DisplayChar+0x4e>
 80010e4:	3307      	adds	r3, #7
 80010e6:	10db      	asrs	r3, r3, #3
 80010e8:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80010ec:	4413      	add	r3, r2
 80010ee:	461a      	mov	r2, r3
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 f918 	bl	8001328 <DrawChar>
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	240001c4 	.word	0x240001c4

08001104 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001112:	2301      	movs	r3, #1
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001126:	e002      	b.n	800112e <UTIL_LCD_DisplayStringAt+0x2a>
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	3301      	adds	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	61ba      	str	r2, [r7, #24]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f6      	bne.n	8001128 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800113a:	4b48      	ldr	r3, [pc, #288]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	4a47      	ldr	r2, [pc, #284]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 8001140:	68d2      	ldr	r2, [r2, #12]
 8001142:	4946      	ldr	r1, [pc, #280]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 8001144:	0152      	lsls	r2, r2, #5
 8001146:	440a      	add	r2, r1
 8001148:	3208      	adds	r2, #8
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	8892      	ldrh	r2, [r2, #4]
 800114e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001152:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d018      	beq.n	800118c <UTIL_LCD_DisplayStringAt+0x88>
 800115a:	2b03      	cmp	r3, #3
 800115c:	dc2a      	bgt.n	80011b4 <UTIL_LCD_DisplayStringAt+0xb0>
 800115e:	2b01      	cmp	r3, #1
 8001160:	d002      	beq.n	8001168 <UTIL_LCD_DisplayStringAt+0x64>
 8001162:	2b02      	cmp	r3, #2
 8001164:	d015      	beq.n	8001192 <UTIL_LCD_DisplayStringAt+0x8e>
 8001166:	e025      	b.n	80011b4 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	4a3b      	ldr	r2, [pc, #236]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 8001170:	68d2      	ldr	r2, [r2, #12]
 8001172:	493a      	ldr	r1, [pc, #232]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 8001174:	0152      	lsls	r2, r2, #5
 8001176:	440a      	add	r2, r1
 8001178:	3208      	adds	r2, #8
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	8892      	ldrh	r2, [r2, #4]
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	085b      	lsrs	r3, r3, #1
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800118a:	e016      	b.n	80011ba <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001190:	e013      	b.n	80011ba <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	4a30      	ldr	r2, [pc, #192]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 800119a:	68d2      	ldr	r2, [r2, #12]
 800119c:	492f      	ldr	r1, [pc, #188]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 800119e:	0152      	lsls	r2, r2, #5
 80011a0:	440a      	add	r2, r1
 80011a2:	3208      	adds	r2, #8
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	8892      	ldrh	r2, [r2, #4]
 80011a8:	fb03 f202 	mul.w	r2, r3, r2
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80011b2:	e002      	b.n	80011ba <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80011b8:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <UTIL_LCD_DisplayStringAt+0xc4>
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011c6:	d31b      	bcc.n	8001200 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80011cc:	e018      	b.n	8001200 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011d8:	f7ff ff5e 	bl	8001098 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4a1e      	ldr	r2, [pc, #120]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 80011e2:	015b      	lsls	r3, r3, #5
 80011e4:	4413      	add	r3, r2
 80011e6:	3308      	adds	r3, #8
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	889b      	ldrh	r3, [r3, #4]
 80011ec:	461a      	mov	r2, r3
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	4413      	add	r3, r2
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
    i++;
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	3301      	adds	r3, #1
 80011fe:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 8001210:	6959      	ldr	r1, [r3, #20]
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 8001218:	015b      	lsls	r3, r3, #5
 800121a:	4403      	add	r3, r0
 800121c:	3308      	adds	r3, #8
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	889b      	ldrh	r3, [r3, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	fb00 f303 	mul.w	r3, r0, r3
 800122a:	1acb      	subs	r3, r1, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	490b      	ldr	r1, [pc, #44]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 8001230:	68c9      	ldr	r1, [r1, #12]
 8001232:	480a      	ldr	r0, [pc, #40]	; (800125c <UTIL_LCD_DisplayStringAt+0x158>)
 8001234:	0149      	lsls	r1, r1, #5
 8001236:	4401      	add	r1, r0
 8001238:	3108      	adds	r1, #8
 800123a:	6809      	ldr	r1, [r1, #0]
 800123c:	8889      	ldrh	r1, [r1, #4]
 800123e:	428b      	cmp	r3, r1
 8001240:	bf2c      	ite	cs
 8001242:	2301      	movcs	r3, #1
 8001244:	2300      	movcc	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4013      	ands	r3, r2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1be      	bne.n	80011ce <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	240001c4 	.word	0x240001c4

08001260 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff fe8d 	bl	8000f94 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	1e59      	subs	r1, r3, #1
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fe84 	bl	8000f94 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff feb4 	bl	8001000 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	f7ff feab 	bl	8001000 <UTIL_LCD_DrawVLine>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <UTIL_LCD_FillRect+0x6c>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d11a      	bne.n	8001300 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <UTIL_LCD_FillRect+0x70>)
 80012cc:	691c      	ldr	r4, [r3, #16]
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <UTIL_LCD_FillRect+0x6c>)
 80012d0:	6918      	ldr	r0, [r3, #16]
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	f003 021f 	and.w	r2, r3, #31
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	0a9b      	lsrs	r3, r3, #10
 80012de:	015b      	lsls	r3, r3, #5
 80012e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80012e4:	431a      	orrs	r2, r3
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	0cdb      	lsrs	r3, r3, #19
 80012ea:	02db      	lsls	r3, r3, #11
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	68f9      	ldr	r1, [r7, #12]
 80012fc:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80012fe:	e00b      	b.n	8001318 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <UTIL_LCD_FillRect+0x70>)
 8001302:	691c      	ldr	r4, [r3, #16]
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <UTIL_LCD_FillRect+0x6c>)
 8001306:	6918      	ldr	r0, [r3, #16]
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	68f9      	ldr	r1, [r7, #12]
 8001316:	47a0      	blx	r4
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	240001c4 	.word	0x240001c4
 8001324:	24000204 	.word	0x24000204

08001328 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0b2      	sub	sp, #200	; 0xc8
 800132c:	af02      	add	r7, sp, #8
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001340:	4ba5      	ldr	r3, [pc, #660]	; (80015d8 <DrawChar+0x2b0>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	4aa4      	ldr	r2, [pc, #656]	; (80015d8 <DrawChar+0x2b0>)
 8001346:	015b      	lsls	r3, r3, #5
 8001348:	4413      	add	r3, r2
 800134a:	3308      	adds	r3, #8
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	88db      	ldrh	r3, [r3, #6]
 8001350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001354:	4ba0      	ldr	r3, [pc, #640]	; (80015d8 <DrawChar+0x2b0>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a9f      	ldr	r2, [pc, #636]	; (80015d8 <DrawChar+0x2b0>)
 800135a:	015b      	lsls	r3, r3, #5
 800135c:	4413      	add	r3, r2
 800135e:	3308      	adds	r3, #8
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8001368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800136c:	3307      	adds	r3, #7
 800136e:	f023 0207 	bic.w	r2, r3, #7
 8001372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001382:	e11c      	b.n	80015be <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8001384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001388:	3307      	adds	r3, #7
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 800139c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013a0:	3307      	adds	r3, #7
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d002      	beq.n	80013ae <DrawChar+0x86>
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d006      	beq.n	80013ba <DrawChar+0x92>
 80013ac:	e011      	b.n	80013d2 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 80013ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80013b8:	e01d      	b.n	80013f6 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80013ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80013c6:	3201      	adds	r2, #1
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80013d0:	e011      	b.n	80013f6 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80013d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013de:	3301      	adds	r3, #1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	4313      	orrs	r3, r2
 80013e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80013ea:	3202      	adds	r2, #2
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80013f4:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80013f6:	4b78      	ldr	r3, [pc, #480]	; (80015d8 <DrawChar+0x2b0>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <DrawChar+0x2b0>)
 80013fc:	015b      	lsls	r3, r3, #5
 80013fe:	4413      	add	r3, r2
 8001400:	331c      	adds	r3, #28
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b02      	cmp	r3, #2
 8001406:	f040 808c 	bne.w	8001522 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001410:	e074      	b.n	80014fc <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001412:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800141a:	1ad2      	subs	r2, r2, r3
 800141c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001420:	4413      	add	r3, r2
 8001422:	3b01      	subs	r3, #1
 8001424:	2201      	movs	r2, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	461a      	mov	r2, r3
 800142c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d02d      	beq.n	8001492 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8001436:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <DrawChar+0x2b0>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a67      	ldr	r2, [pc, #412]	; (80015d8 <DrawChar+0x2b0>)
 800143c:	015b      	lsls	r3, r3, #5
 800143e:	4413      	add	r3, r2
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	08db      	lsrs	r3, r3, #3
 8001444:	b29b      	uxth	r3, r3
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <DrawChar+0x2b0>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4961      	ldr	r1, [pc, #388]	; (80015d8 <DrawChar+0x2b0>)
 8001452:	015b      	lsls	r3, r3, #5
 8001454:	440b      	add	r3, r1
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0a9b      	lsrs	r3, r3, #10
 800145a:	b29b      	uxth	r3, r3
 800145c:	015b      	lsls	r3, r3, #5
 800145e:	b29b      	uxth	r3, r3
 8001460:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001464:	b29b      	uxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b5b      	ldr	r3, [pc, #364]	; (80015d8 <DrawChar+0x2b0>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	495a      	ldr	r1, [pc, #360]	; (80015d8 <DrawChar+0x2b0>)
 8001470:	015b      	lsls	r3, r3, #5
 8001472:	440b      	add	r3, r1
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0cdb      	lsrs	r3, r3, #19
 8001478:	b29b      	uxth	r3, r3
 800147a:	02db      	lsls	r3, r3, #11
 800147c:	b29b      	uxth	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	b29a      	uxth	r2, r3
 8001482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	33c0      	adds	r3, #192	; 0xc0
 800148a:	443b      	add	r3, r7
 800148c:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8001490:	e02f      	b.n	80014f2 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <DrawChar+0x2b0>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <DrawChar+0x2b0>)
 8001498:	015b      	lsls	r3, r3, #5
 800149a:	4413      	add	r3, r2
 800149c:	3304      	adds	r3, #4
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <DrawChar+0x2b0>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	494a      	ldr	r1, [pc, #296]	; (80015d8 <DrawChar+0x2b0>)
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	440b      	add	r3, r1
 80014b4:	3304      	adds	r3, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0a9b      	lsrs	r3, r3, #10
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	015b      	lsls	r3, r3, #5
 80014be:	b29b      	uxth	r3, r3
 80014c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <DrawChar+0x2b0>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	4942      	ldr	r1, [pc, #264]	; (80015d8 <DrawChar+0x2b0>)
 80014d0:	015b      	lsls	r3, r3, #5
 80014d2:	440b      	add	r3, r1
 80014d4:	3304      	adds	r3, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0cdb      	lsrs	r3, r3, #19
 80014da:	b29b      	uxth	r3, r3
 80014dc:	02db      	lsls	r3, r3, #11
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	33c0      	adds	r3, #192	; 0xc0
 80014ec:	443b      	add	r3, r7
 80014ee:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 80014f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80014f6:	3301      	adds	r3, #1
 80014f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001504:	429a      	cmp	r2, r3
 8001506:	d384      	bcc.n	8001412 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	1c4b      	adds	r3, r1, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001512:	2301      	movs	r3, #1
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff fd1e 	bl	8000f5c <UTIL_LCD_FillRGBRect>
 8001520:	e048      	b.n	80015b4 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001528:	e032      	b.n	8001590 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 800152a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800152e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001532:	1ad2      	subs	r2, r2, r3
 8001534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001538:	4413      	add	r3, r2
 800153a:	3b01      	subs	r3, #1
 800153c:	2201      	movs	r2, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	461a      	mov	r2, r3
 8001544:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00d      	beq.n	800156a <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <DrawChar+0x2b0>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <DrawChar+0x2b0>)
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	4413      	add	r3, r2
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	33c0      	adds	r3, #192	; 0xc0
 8001562:	443b      	add	r3, r7
 8001564:	f843 2cac 	str.w	r2, [r3, #-172]
 8001568:	e00d      	b.n	8001586 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <DrawChar+0x2b0>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <DrawChar+0x2b0>)
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	4413      	add	r3, r2
 8001574:	3304      	adds	r3, #4
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	33c0      	adds	r3, #192	; 0xc0
 8001580:	443b      	add	r3, r7
 8001582:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8001586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800158a:	3301      	adds	r3, #1
 800158c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001590:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001598:	429a      	cmp	r2, r3
 800159a:	d3c6      	bcc.n	800152a <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	1c4b      	adds	r3, r1, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	f107 0214 	add.w	r2, r7, #20
 80015a6:	2301      	movs	r3, #1
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f7ff fcd4 	bl	8000f5c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80015b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015b8:	3301      	adds	r3, #1
 80015ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80015be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015c6:	429a      	cmp	r2, r3
 80015c8:	f4ff aedc 	bcc.w	8001384 <DrawChar+0x5c>
    }
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	37c0      	adds	r7, #192	; 0xc0
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	240001c4 	.word	0x240001c4

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_MspInit+0x74>)
 80015e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_MspInit+0x74>)
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_MspInit+0x74>)
 80015f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	210f      	movs	r1, #15
 8001604:	f06f 0001 	mvn.w	r0, #1
 8001608:	f002 fab5 	bl	8003b76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_MspInit+0x74>)
 800160e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_MspInit+0x74>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_MspInit+0x74>)
 800161e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800162a:	2308      	movs	r3, #8
 800162c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	4619      	mov	r1, r3
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <HAL_MspInit+0x78>)
 8001642:	f004 fa95 	bl	8005b70 <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	58024400 	.word	0x58024400
 8001654:	58021000 	.word	0x58021000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f002 f93a 	bl	8003900 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800168c:	f009 fe30 	bl	800b2f0 <xTaskGetSchedulerState>
 8001690:	4603      	mov	r3, r0
 8001692:	2b01      	cmp	r3, #1
 8001694:	d001      	beq.n	800169a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001696:	f009 fe97 	bl	800b3c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}

0800169e <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 fc2a 	bl	8001efc <BSP_PB_IRQHandler>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM3_IRQHandler+0x10>)
 80016b2:	f008 fb2d 	bl	8009d10 <HAL_TIM_IRQHandler>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	24000174 	.word	0x24000174

080016c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <USART3_IRQHandler+0x10>)
 80016c6:	f008 fe83 	bl	800a3d0 <HAL_UART_IRQHandler>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	240000e0 	.word	0x240000e0

080016d4 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 fc29 	bl	8001f30 <BSP_AUDIO_OUT_IRQHandler>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <DMA2_Stream4_IRQHandler+0x14>)
 80016ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 ffda 	bl	80046a8 <HAL_DMA_IRQHandler>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	240002e4 	.word	0x240002e4

080016fc <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8001700:	2130      	movs	r1, #48	; 0x30
 8001702:	2001      	movs	r0, #1
 8001704:	f000 fc28 	bl	8001f58 <BSP_AUDIO_IN_IRQHandler>

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8001710:	2000      	movs	r0, #0
 8001712:	f001 ff6f 	bl	80035f4 <BSP_SDRAM_IRQHandler>

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}

0800171a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  return 1;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_kill>:

int _kill(int pid, int sig)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001734:	f00a f942 	bl	800b9bc <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	2216      	movs	r2, #22
 800173c:	601a      	str	r2, [r3, #0]
  return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_exit>:

void _exit (int status)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001752:	f04f 31ff 	mov.w	r1, #4294967295
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffe7 	bl	800172a <_kill>
  while (1) {}    /* Make sure we hang here */
 800175c:	e7fe      	b.n	800175c <_exit+0x12>
	...

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001790:	f00a f914 	bl	800b9bc <__errno>
 8001794:	4603      	mov	r3, r0
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	e009      	b.n	80017b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <_sbrk+0x64>)
 80017b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	24080000 	.word	0x24080000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	24000230 	.word	0x24000230
 80017c8:	240015f0 	.word	0x240015f0

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017d0:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <SystemInit+0xe4>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a36      	ldr	r2, [pc, #216]	; (80018b0 <SystemInit+0xe4>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <SystemInit+0xe8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	2b06      	cmp	r3, #6
 80017ea:	d807      	bhi.n	80017fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ec:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <SystemInit+0xe8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 030f 	bic.w	r3, r3, #15
 80017f4:	4a2f      	ldr	r2, [pc, #188]	; (80018b4 <SystemInit+0xe8>)
 80017f6:	f043 0307 	orr.w	r3, r3, #7
 80017fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017fc:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <SystemInit+0xec>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a2d      	ldr	r2, [pc, #180]	; (80018b8 <SystemInit+0xec>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001808:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <SystemInit+0xec>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <SystemInit+0xec>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4929      	ldr	r1, [pc, #164]	; (80018b8 <SystemInit+0xec>)
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <SystemInit+0xf0>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <SystemInit+0xe8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <SystemInit+0xe8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 030f 	bic.w	r3, r3, #15
 800182e:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <SystemInit+0xe8>)
 8001830:	f043 0307 	orr.w	r3, r3, #7
 8001834:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <SystemInit+0xec>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <SystemInit+0xec>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <SystemInit+0xec>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <SystemInit+0xec>)
 800184a:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <SystemInit+0xf4>)
 800184c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <SystemInit+0xec>)
 8001850:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <SystemInit+0xf8>)
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <SystemInit+0xec>)
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <SystemInit+0xfc>)
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <SystemInit+0xec>)
 800185c:	2200      	movs	r2, #0
 800185e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <SystemInit+0xec>)
 8001862:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <SystemInit+0xfc>)
 8001864:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <SystemInit+0xec>)
 8001868:	2200      	movs	r2, #0
 800186a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <SystemInit+0xec>)
 800186e:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <SystemInit+0xfc>)
 8001870:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <SystemInit+0xec>)
 8001874:	2200      	movs	r2, #0
 8001876:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <SystemInit+0xec>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <SystemInit+0xec>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001882:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <SystemInit+0xec>)
 8001886:	2200      	movs	r2, #0
 8001888:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <SystemInit+0x100>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <SystemInit+0x104>)
 8001890:	4013      	ands	r3, r2
 8001892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001896:	d202      	bcs.n	800189e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <SystemInit+0x108>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <SystemInit+0x10c>)
 80018a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00
 80018b4:	52002000 	.word	0x52002000
 80018b8:	58024400 	.word	0x58024400
 80018bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80018c0:	02020200 	.word	0x02020200
 80018c4:	01ff0000 	.word	0x01ff0000
 80018c8:	01010280 	.word	0x01010280
 80018cc:	5c001000 	.word	0x5c001000
 80018d0:	ffff0000 	.word	0xffff0000
 80018d4:	51008108 	.word	0x51008108
 80018d8:	52004000 	.word	0x52004000

080018dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001914 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018e0:	f7ff ff74 	bl	80017cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018e6:	490d      	ldr	r1, [pc, #52]	; (800191c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018fc:	4c0a      	ldr	r4, [pc, #40]	; (8001928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800190a:	f00a f85d 	bl	800b9c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190e:	f7ff f901 	bl	8000b14 <main>
  bx  lr
 8001912:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001914:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001918:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800191c:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8001920:	0800d620 	.word	0x0800d620
  ldr r2, =_sbss
 8001924:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8001928:	240015f0 	.word	0x240015f0

0800192c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC3_IRQHandler>
	...

08001930 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d103      	bne.n	8001948 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e02c      	b.n	80019a2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	891a      	ldrh	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <FT5336_RegisterBusIO+0x7c>)
 800197c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <FT5336_RegisterBusIO+0x80>)
 8001982:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4798      	blx	r3
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	e002      	b.n	80019a2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	080019d5 	.word	0x080019d5
 80019b0:	08001a09 	.word	0x08001a09

080019b4 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3318      	adds	r3, #24
 80019c2:	6839      	ldr	r1, [r7, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f850 	bl	8001a6a <ft5336_chip_id>
 80019ca:	4603      	mov	r3, r0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	460b      	mov	r3, r1
 80019e2:	72fb      	strb	r3, [r7, #11]
 80019e4:	4613      	mov	r3, r2
 80019e6:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	691c      	ldr	r4, [r3, #16]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	8918      	ldrh	r0, [r3, #8]
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	b299      	uxth	r1, r3
 80019f8:	893b      	ldrh	r3, [r7, #8]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	47a0      	blx	r4
 80019fe:	4603      	mov	r3, r0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}

08001a08 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	461a      	mov	r2, r3
 8001a14:	460b      	mov	r3, r1
 8001a16:	72fb      	strb	r3, [r7, #11]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	68dc      	ldr	r4, [r3, #12]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	8918      	ldrh	r0, [r3, #8]
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	b299      	uxth	r1, r3
 8001a2c:	893b      	ldrh	r3, [r7, #8]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	47a0      	blx	r4
 8001a32:	4603      	mov	r3, r0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	461a      	mov	r2, r3
 8001a48:	460b      	mov	r3, r1
 8001a4a:	72fb      	strb	r3, [r7, #11]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685c      	ldr	r4, [r3, #4]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6898      	ldr	r0, [r3, #8]
 8001a58:	893b      	ldrh	r3, [r7, #8]
 8001a5a:	7af9      	ldrb	r1, [r7, #11]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	47a0      	blx	r4
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}

08001a6a <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8001a74:	2301      	movs	r3, #1
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	21a8      	movs	r1, #168	; 0xa8
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffde 	bl	8001a3c <ft5336_read_reg>
 8001a80:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d107      	bne.n	8001a98 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8001a98:	68fb      	ldr	r3, [r7, #12]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f831 	bl	8001b20 <MT48LC4M32B2_ClockEnable>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d128      	bne.n	8001b16 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f000 f8e1 	bl	8001c8c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f849 	bl	8001b68 <MT48LC4M32B2_Precharge>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11c      	bne.n	8001b16 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f896 	bl	8001c18 <MT48LC4M32B2_RefreshMode>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d111      	bne.n	8001b16 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f85b 	bl	8001bb0 <MT48LC4M32B2_ModeRegConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10a      	bne.n	8001b16 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4619      	mov	r1, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8ac 	bl	8001c64 <MT48LC4M32B2_RefreshRate>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MT48LC4M32B2_ClockEnable+0x44>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001b30:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <MT48LC4M32B2_ClockEnable+0x44>)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <MT48LC4M32B2_ClockEnable+0x44>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MT48LC4M32B2_ClockEnable+0x44>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b46:	4907      	ldr	r1, [pc, #28]	; (8001b64 <MT48LC4M32B2_ClockEnable+0x44>)
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f007 ffbd 	bl	8009ac8 <HAL_SDRAM_SendCommand>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
 8001b58:	e000      	b.n	8001b5c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001b5a:	2300      	movs	r3, #0
  }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	24000234 	.word	0x24000234

08001b68 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MT48LC4M32B2_Precharge+0x44>)
 8001b74:	2202      	movs	r2, #2
 8001b76:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <MT48LC4M32B2_Precharge+0x44>)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MT48LC4M32B2_Precharge+0x44>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MT48LC4M32B2_Precharge+0x44>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8e:	4907      	ldr	r1, [pc, #28]	; (8001bac <MT48LC4M32B2_Precharge+0x44>)
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f007 ff99 	bl	8009ac8 <HAL_SDRAM_SendCommand>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	e000      	b.n	8001ba4 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001ba2:	2300      	movs	r3, #0
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	24000234 	.word	0x24000234

08001bb0 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001bc2:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8001bc8:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8001bce:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001bda:	2204      	movs	r2, #4
 8001bdc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001be4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001bec:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf6:	4907      	ldr	r1, [pc, #28]	; (8001c14 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f007 ff65 	bl	8009ac8 <HAL_SDRAM_SendCommand>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	e000      	b.n	8001c0c <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001c0a:	2300      	movs	r3, #0
  }
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	24000234 	.word	0x24000234

08001c18 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <MT48LC4M32B2_RefreshMode+0x48>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8001c2a:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <MT48LC4M32B2_RefreshMode+0x48>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MT48LC4M32B2_RefreshMode+0x48>)
 8001c32:	2208      	movs	r2, #8
 8001c34:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <MT48LC4M32B2_RefreshMode+0x48>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <MT48LC4M32B2_RefreshMode+0x48>)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f007 ff40 	bl	8009ac8 <HAL_SDRAM_SendCommand>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e000      	b.n	8001c56 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001c54:	2300      	movs	r3, #0
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	24000234 	.word	0x24000234

08001c64 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f007 ff5e 	bl	8009b32 <HAL_SDRAM_ProgramRefreshRate>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	e000      	b.n	8001c84 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001c82:	2300      	movs	r3, #0
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8001c94:	f001 fe48 	bl	8003928 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001c9a:	bf00      	nop
 8001c9c:	f001 fe44 	bl	8003928 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10f      	bne.n	8001cec <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <BSP_LED_Init+0xb0>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	4a25      	ldr	r2, [pc, #148]	; (8001d68 <BSP_LED_Init+0xb0>)
 8001cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <BSP_LED_Init+0xb0>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	e015      	b.n	8001d18 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10f      	bne.n	8001d12 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <BSP_LED_Init+0xb0>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <BSP_LED_Init+0xb0>)
 8001cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d02:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <BSP_LED_Init+0xb0>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	e002      	b.n	8001d18 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d12:	f06f 0301 	mvn.w	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <BSP_LED_Init+0xb4>)
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <BSP_LED_Init+0xb8>)
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	f107 0210 	add.w	r2, r7, #16
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 ff17 	bl	8005b70 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <BSP_LED_Init+0xb8>)
 8001d46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <BSP_LED_Init+0xb4>)
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2201      	movs	r2, #1
 8001d56:	4619      	mov	r1, r3
 8001d58:	f004 f8d2 	bl	8005f00 <HAL_GPIO_WritePin>
  return ret;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	0800d47c 	.word	0x0800d47c
 8001d70:	24000014 	.word	0x24000014

08001d74 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <BSP_LED_On+0x34>)
 8001d86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <BSP_LED_On+0x38>)
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	f004 f8b2 	bl	8005f00 <HAL_GPIO_WritePin>
  return ret;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	24000014 	.word	0x24000014
 8001dac:	0800d47c 	.word	0x0800d47c

08001db0 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <BSP_LED_Off+0x34>)
 8001dc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <BSP_LED_Off+0x38>)
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f004 f894 	bl	8005f00 <HAL_GPIO_WritePin>
  return ret;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	24000014 	.word	0x24000014
 8001de8:	0800d47c 	.word	0x0800d47c

08001dec <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	460a      	mov	r2, r1
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001dfc:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <BSP_PB_Init+0xcc>)
 8001dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e02:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <BSP_PB_Init+0xcc>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <BSP_PB_Init+0xcc>)
 8001e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001e20:	2302      	movs	r3, #2
 8001e22:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001e28:	79bb      	ldrb	r3, [r7, #6]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10c      	bne.n	8001e48 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <BSP_PB_Init+0xd0>)
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	f107 020c 	add.w	r2, r7, #12
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fe95 	bl	8005b70 <HAL_GPIO_Init>
 8001e46:	e031      	b.n	8001eac <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001e48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e4c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <BSP_PB_Init+0xd0>)
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	f107 020c 	add.w	r2, r7, #12
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 fe87 	bl	8005b70 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <BSP_PB_Init+0xd4>)
 8001e68:	441a      	add	r2, r3
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4915      	ldr	r1, [pc, #84]	; (8001ec4 <BSP_PB_Init+0xd8>)
 8001e6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f003 fe36 	bl	8005ae6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <BSP_PB_Init+0xd4>)
 8001e80:	1898      	adds	r0, r3, r2
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <BSP_PB_Init+0xdc>)
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f003 fe0b 	bl	8005aa8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e92:	2028      	movs	r0, #40	; 0x28
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <BSP_PB_Init+0xe0>)
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f001 fe69 	bl	8003b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001ea4:	2328      	movs	r3, #40	; 0x28
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fe7f 	bl	8003baa <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	2400001c 	.word	0x2400001c
 8001ec0:	24000244 	.word	0x24000244
 8001ec4:	0800d484 	.word	0x0800d484
 8001ec8:	24000020 	.word	0x24000020
 8001ecc:	24000024 	.word	0x24000024

08001ed0 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <BSP_PB_GetState+0x28>)
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fff1 	bl	8005ed0 <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	2400001c 	.word	0x2400001c

08001efc <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <BSP_PB_IRQHandler+0x20>)
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fdfe 	bl	8005b10 <HAL_EXTI_IRQHandler>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	24000244 	.word	0x24000244

08001f20 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7fe fe1d 	bl	8000b64 <BSP_PB_Callback>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8001f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fbaf 	bl	80046a8 <HAL_DMA_IRQHandler>
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2400024c 	.word	0x2400024c

08001f58 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b30      	cmp	r3, #48	; 0x30
 8001f66:	d002      	beq.n	8001f6e <BSP_AUDIO_IN_IRQHandler+0x16>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8001f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fb97 	bl	80046a8 <HAL_DMA_IRQHandler>
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	240002e4 	.word	0x240002e4

08001f88 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <BSP_I2C4_Init+0x64>)
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <BSP_I2C4_Init+0x68>)
 8001f96:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <BSP_I2C4_Init+0x6c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d11f      	bne.n	8001fe0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <BSP_I2C4_Init+0x6c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <BSP_I2C4_Init+0x6c>)
 8001fa8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8001faa:	4810      	ldr	r0, [pc, #64]	; (8001fec <BSP_I2C4_Init+0x64>)
 8001fac:	f004 f976 	bl	800629c <HAL_I2C_GetState>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d114      	bne.n	8001fe0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8001fb6:	480d      	ldr	r0, [pc, #52]	; (8001fec <BSP_I2C4_Init+0x64>)
 8001fb8:	f000 fb06 	bl	80025c8 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8001fbc:	f006 f9ba 	bl	8008334 <HAL_RCC_GetPCLK2Freq>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <BSP_I2C4_Init+0x70>)
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f889 	bl	80020dc <I2C_GetTiming>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4807      	ldr	r0, [pc, #28]	; (8001fec <BSP_I2C4_Init+0x64>)
 8001fd0:	f000 f814 	bl	8001ffc <MX_I2C4_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001fda:	f06f 0307 	mvn.w	r3, #7
 8001fde:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	24000d84 	.word	0x24000d84
 8001ff0:	58001c00 	.word	0x58001c00
 8001ff4:	2400037c 	.word	0x2400037c
 8001ff8:	000186a0 	.word	0x000186a0

08001ffc <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f003 ff7a 	bl	8005f34 <HAL_I2C_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	e014      	b.n	8002076 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f004 fba0 	bl	8006798 <HAL_I2CEx_ConfigAnalogFilter>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e008      	b.n	8002076 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002064:	2100      	movs	r1, #0
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f004 fbe1 	bl	800682e <HAL_I2CEx_ConfigDigitalFilter>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af02      	add	r7, sp, #8
 8002086:	60ba      	str	r2, [r7, #8]
 8002088:	461a      	mov	r2, r3
 800208a:	4603      	mov	r3, r0
 800208c:	81fb      	strh	r3, [r7, #14]
 800208e:	460b      	mov	r3, r1
 8002090:	81bb      	strh	r3, [r7, #12]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002096:	89b9      	ldrh	r1, [r7, #12]
 8002098:	89f8      	ldrh	r0, [r7, #14]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f000 fafd 	bl	80026a0 <I2C4_ReadReg>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e00c      	b.n	80020cc <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <BSP_I2C4_ReadReg+0x58>)
 80020b4:	f004 f900 	bl	80062b8 <HAL_I2C_GetError>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d103      	bne.n	80020c6 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80020be:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e002      	b.n	80020cc <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80020c6:	f06f 0303 	mvn.w	r3, #3
 80020ca:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80020cc:	697b      	ldr	r3, [r7, #20]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	24000d84 	.word	0x24000d84

080020dc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d06b      	beq.n	80021c8 <I2C_GetTiming+0xec>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d068      	beq.n	80021c8 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	e060      	b.n	80021be <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80020fc:	4a35      	ldr	r2, [pc, #212]	; (80021d4 <I2C_GetTiming+0xf8>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3304      	adds	r3, #4
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d352      	bcc.n	80021b8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002112:	4a30      	ldr	r2, [pc, #192]	; (80021d4 <I2C_GetTiming+0xf8>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3308      	adds	r3, #8
 8002120:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d847      	bhi.n	80021b8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002128:	6939      	ldr	r1, [r7, #16]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f856 	bl	80021dc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002130:	6939      	ldr	r1, [r7, #16]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f940 	bl	80023b8 <I2C_Compute_SCLL_SCLH>
 8002138:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b7f      	cmp	r3, #127	; 0x7f
 800213e:	d842      	bhi.n	80021c6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002140:	4925      	ldr	r1, [pc, #148]	; (80021d8 <I2C_GetTiming+0xfc>)
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002152:	4821      	ldr	r0, [pc, #132]	; (80021d8 <I2C_GetTiming+0xfc>)
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4403      	add	r3, r0
 8002160:	3304      	adds	r3, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	051b      	lsls	r3, r3, #20
 8002166:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800216a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800216c:	481a      	ldr	r0, [pc, #104]	; (80021d8 <I2C_GetTiming+0xfc>)
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4403      	add	r3, r0
 800217a:	3308      	adds	r3, #8
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	041b      	lsls	r3, r3, #16
 8002180:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002184:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002186:	4814      	ldr	r0, [pc, #80]	; (80021d8 <I2C_GetTiming+0xfc>)
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4403      	add	r3, r0
 8002194:	330c      	adds	r3, #12
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800219c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800219e:	480e      	ldr	r0, [pc, #56]	; (80021d8 <I2C_GetTiming+0xfc>)
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4403      	add	r3, r0
 80021ac:	3310      	adds	r3, #16
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80021b2:	430b      	orrs	r3, r1
 80021b4:	617b      	str	r3, [r7, #20]
        }
        break;
 80021b6:	e006      	b.n	80021c6 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	3301      	adds	r3, #1
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d99b      	bls.n	80020fc <I2C_GetTiming+0x20>
 80021c4:	e000      	b.n	80021c8 <I2C_GetTiming+0xec>
        break;
 80021c6:	bf00      	nop
      }
    }
  }

  return ret;
 80021c8:	697b      	ldr	r3, [r7, #20]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	0800d488 	.word	0x0800d488
 80021d8:	24000380 	.word	0x24000380

080021dc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80021dc:	b480      	push	{r7}
 80021de:	b08f      	sub	sp, #60	; 0x3c
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80021e6:	2310      	movs	r3, #16
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	085a      	lsrs	r2, r3, #1
 80021ee:	4b6e      	ldr	r3, [pc, #440]	; (80023a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80021f0:	4413      	add	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f8:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80021fa:	2332      	movs	r3, #50	; 0x32
 80021fc:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80021fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002202:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002204:	4a69      	ldr	r2, [pc, #420]	; (80023ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	3324      	adds	r3, #36	; 0x24
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	4a65      	ldr	r2, [pc, #404]	; (80023ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	330c      	adds	r3, #12
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002228:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800222a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800222c:	495f      	ldr	r1, [pc, #380]	; (80023ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	202c      	movs	r0, #44	; 0x2c
 8002232:	fb00 f303 	mul.w	r3, r0, r3
 8002236:	440b      	add	r3, r1
 8002238:	3328      	adds	r3, #40	; 0x28
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3303      	adds	r3, #3
 800223e:	69f9      	ldr	r1, [r7, #28]
 8002240:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3310      	adds	r3, #16
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	4a54      	ldr	r2, [pc, #336]	; (80023ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3320      	adds	r3, #32
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800226c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800226e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002270:	494e      	ldr	r1, [pc, #312]	; (80023ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	202c      	movs	r0, #44	; 0x2c
 8002276:	fb00 f303 	mul.w	r3, r0, r3
 800227a:	440b      	add	r3, r1
 800227c:	3328      	adds	r3, #40	; 0x28
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3304      	adds	r3, #4
 8002282:	69f9      	ldr	r1, [r7, #28]
 8002284:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800228c:	4a47      	ldr	r2, [pc, #284]	; (80023ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	212c      	movs	r1, #44	; 0x2c
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	3320      	adds	r3, #32
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	4a43      	ldr	r2, [pc, #268]	; (80023ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3314      	adds	r3, #20
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4403      	add	r3, r0
 80022b0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	dc01      	bgt.n	80022bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	dc01      	bgt.n	80022c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ca:	e062      	b.n	8002392 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
 80022d0:	e059      	b.n	8002386 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	3301      	adds	r3, #1
 80022d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d8:	3201      	adds	r2, #1
 80022da:	fb03 f202 	mul.w	r2, r3, r2
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d348      	bcc.n	8002380 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
 80022f2:	e042      	b.n	800237a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	3301      	adds	r3, #1
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	fb03 f202 	mul.w	r2, r3, r2
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	429a      	cmp	r2, r3
 800230c:	d332      	bcc.n	8002374 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	d82e      	bhi.n	8002374 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231a:	429a      	cmp	r2, r3
 800231c:	d02a      	beq.n	8002374 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4924      	ldr	r1, [pc, #144]	; (80023b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002330:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	491f      	ldr	r1, [pc, #124]	; (80023b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3304      	adds	r3, #4
 8002344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002346:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4919      	ldr	r1, [pc, #100]	; (80023b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	3308      	adds	r3, #8
 800235a:	6a3a      	ldr	r2, [r7, #32]
 800235c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	4a11      	ldr	r2, [pc, #68]	; (80023b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800236a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b7f      	cmp	r3, #127	; 0x7f
 8002372:	d812      	bhi.n	800239a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	3301      	adds	r3, #1
 8002378:	623b      	str	r3, [r7, #32]
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	2b0f      	cmp	r3, #15
 800237e:	d9b9      	bls.n	80022f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	3301      	adds	r3, #1
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	2b0f      	cmp	r3, #15
 800238a:	d9a2      	bls.n	80022d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	3301      	adds	r3, #1
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d999      	bls.n	80022cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002398:	e000      	b.n	800239c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800239a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800239c:	373c      	adds	r7, #60	; 0x3c
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	3b9aca00 	.word	0x3b9aca00
 80023ac:	0800d488 	.word	0x0800d488
 80023b0:	24000d80 	.word	0x24000d80
 80023b4:	24000380 	.word	0x24000380

080023b8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b093      	sub	sp, #76	; 0x4c
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	085a      	lsrs	r2, r3, #1
 80023cc:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <I2C_Compute_SCLL_SCLH+0x200>)
 80023ce:	4413      	add	r3, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80023d8:	4a78      	ldr	r2, [pc, #480]	; (80025bc <I2C_Compute_SCLL_SCLH+0x204>)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	085a      	lsrs	r2, r3, #1
 80023e8:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <I2C_Compute_SCLL_SCLH+0x200>)
 80023ea:	4413      	add	r3, r2
 80023ec:	4973      	ldr	r1, [pc, #460]	; (80025bc <I2C_Compute_SCLL_SCLH+0x204>)
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	202c      	movs	r0, #44	; 0x2c
 80023f2:	fb00 f202 	mul.w	r2, r0, r2
 80023f6:	440a      	add	r2, r1
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002400:	2332      	movs	r3, #50	; 0x32
 8002402:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002404:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <I2C_Compute_SCLL_SCLH+0x204>)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3328      	adds	r3, #40	; 0x28
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800241c:	4a67      	ldr	r2, [pc, #412]	; (80025bc <I2C_Compute_SCLL_SCLH+0x204>)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3304      	adds	r3, #4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a62      	ldr	r2, [pc, #392]	; (80025b8 <I2C_Compute_SCLL_SCLH+0x200>)
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002434:	4a61      	ldr	r2, [pc, #388]	; (80025bc <I2C_Compute_SCLL_SCLH+0x204>)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	3308      	adds	r3, #8
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a5c      	ldr	r2, [pc, #368]	; (80025b8 <I2C_Compute_SCLL_SCLH+0x200>)
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002450:	2300      	movs	r3, #0
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	e0a3      	b.n	800259e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8002456:	495a      	ldr	r1, [pc, #360]	; (80025c0 <I2C_Compute_SCLL_SCLH+0x208>)
 8002458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002470:	2300      	movs	r3, #0
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002474:	e08c      	b.n	8002590 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	441a      	add	r2, r3
 800247c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247e:	3301      	adds	r3, #1
 8002480:	6979      	ldr	r1, [r7, #20]
 8002482:	fb03 f101 	mul.w	r1, r3, r1
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	440b      	add	r3, r1
 800248c:	4413      	add	r3, r2
 800248e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002490:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <I2C_Compute_SCLL_SCLH+0x204>)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	3318      	adds	r3, #24
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d971      	bls.n	800258a <I2C_Compute_SCLL_SCLH+0x1d2>
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	1ad2      	subs	r2, r2, r3
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d268      	bcs.n	800258a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80024bc:	e062      	b.n	8002584 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80024be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	441a      	add	r2, r3
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	3301      	adds	r3, #1
 80024c8:	6979      	ldr	r1, [r7, #20]
 80024ca:	fb03 f101 	mul.w	r1, r3, r1
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	4413      	add	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	441a      	add	r2, r3
 80024de:	4937      	ldr	r1, [pc, #220]	; (80025bc <I2C_Compute_SCLL_SCLH+0x204>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	202c      	movs	r0, #44	; 0x2c
 80024e4:	fb00 f303 	mul.w	r3, r0, r3
 80024e8:	440b      	add	r3, r1
 80024ea:	3320      	adds	r3, #32
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	441a      	add	r2, r3
 80024f0:	4932      	ldr	r1, [pc, #200]	; (80025bc <I2C_Compute_SCLL_SCLH+0x204>)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	202c      	movs	r0, #44	; 0x2c
 80024f6:	fb00 f303 	mul.w	r3, r0, r3
 80024fa:	440b      	add	r3, r1
 80024fc:	3324      	adds	r3, #36	; 0x24
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4413      	add	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	429a      	cmp	r2, r3
 800250a:	d338      	bcc.n	800257e <I2C_Compute_SCLL_SCLH+0x1c6>
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	429a      	cmp	r2, r3
 8002512:	d834      	bhi.n	800257e <I2C_Compute_SCLL_SCLH+0x1c6>
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <I2C_Compute_SCLL_SCLH+0x204>)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	331c      	adds	r3, #28
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	429a      	cmp	r2, r3
 8002528:	d329      	bcc.n	800257e <I2C_Compute_SCLL_SCLH+0x1c6>
 800252a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	429a      	cmp	r2, r3
 8002530:	d225      	bcs.n	800257e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	2b00      	cmp	r3, #0
 800253e:	da02      	bge.n	8002546 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	425b      	negs	r3, r3
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800254a:	429a      	cmp	r2, r3
 800254c:	d917      	bls.n	800257e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8002552:	491b      	ldr	r1, [pc, #108]	; (80025c0 <I2C_Compute_SCLL_SCLH+0x208>)
 8002554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3310      	adds	r3, #16
 8002562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002564:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8002566:	4916      	ldr	r1, [pc, #88]	; (80025c0 <I2C_Compute_SCLL_SCLH+0x208>)
 8002568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	330c      	adds	r3, #12
 8002576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002578:	601a      	str	r2, [r3, #0]
              ret = count;
 800257a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	3301      	adds	r3, #1
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	d999      	bls.n	80024be <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800258a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258c:	3301      	adds	r3, #1
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002592:	2bff      	cmp	r3, #255	; 0xff
 8002594:	f67f af6f 	bls.w	8002476 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	3301      	adds	r3, #1
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <I2C_Compute_SCLL_SCLH+0x20c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025a4:	429a      	cmp	r2, r3
 80025a6:	f4ff af56 	bcc.w	8002456 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	374c      	adds	r7, #76	; 0x4c
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	3b9aca00 	.word	0x3b9aca00
 80025bc:	0800d488 	.word	0x0800d488
 80025c0:	24000380 	.word	0x24000380
 80025c4:	24000d80 	.word	0x24000d80

080025c8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80025d0:	4b31      	ldr	r3, [pc, #196]	; (8002698 <I2C4_MspInit+0xd0>)
 80025d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d6:	4a30      	ldr	r2, [pc, #192]	; (8002698 <I2C4_MspInit+0xd0>)
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e0:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <I2C4_MspInit+0xd0>)
 80025e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80025ee:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <I2C4_MspInit+0xd0>)
 80025f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025f4:	4a28      	ldr	r2, [pc, #160]	; (8002698 <I2C4_MspInit+0xd0>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <I2C4_MspInit+0xd0>)
 8002600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800260c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002610:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002612:	2312      	movs	r3, #18
 8002614:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800261a:	2302      	movs	r3, #2
 800261c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800261e:	2304      	movs	r3, #4
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	481c      	ldr	r0, [pc, #112]	; (800269c <I2C4_MspInit+0xd4>)
 800262a:	f003 faa1 	bl	8005b70 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800262e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002632:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002634:	2312      	movs	r3, #18
 8002636:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800263c:	2302      	movs	r3, #2
 800263e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002640:	2304      	movs	r3, #4
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	4814      	ldr	r0, [pc, #80]	; (800269c <I2C4_MspInit+0xd4>)
 800264c:	f003 fa90 	bl	8005b70 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <I2C4_MspInit+0xd0>)
 8002652:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002656:	4a10      	ldr	r2, [pc, #64]	; (8002698 <I2C4_MspInit+0xd0>)
 8002658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <I2C4_MspInit+0xd0>)
 8002662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <I2C4_MspInit+0xd0>)
 8002670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002674:	4a08      	ldr	r2, [pc, #32]	; (8002698 <I2C4_MspInit+0xd0>)
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <I2C4_MspInit+0xd0>)
 8002680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <I2C4_MspInit+0xd0>)
 8002686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800268a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800268e:	bf00      	nop
 8002690:	3728      	adds	r7, #40	; 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	58024400 	.word	0x58024400
 800269c:	58020c00 	.word	0x58020c00

080026a0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af04      	add	r7, sp, #16
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	4603      	mov	r3, r0
 80026aa:	81fb      	strh	r3, [r7, #14]
 80026ac:	460b      	mov	r3, r1
 80026ae:	81bb      	strh	r3, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80026b4:	8978      	ldrh	r0, [r7, #10]
 80026b6:	89ba      	ldrh	r2, [r7, #12]
 80026b8:	89f9      	ldrh	r1, [r7, #14]
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	9302      	str	r3, [sp, #8]
 80026c0:	8b3b      	ldrh	r3, [r7, #24]
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4603      	mov	r3, r0
 80026ca:	4807      	ldr	r0, [pc, #28]	; (80026e8 <I2C4_ReadReg+0x48>)
 80026cc:	f003 fccc 	bl	8006068 <HAL_I2C_Mem_Read>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e001      	b.n	80026de <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80026da:	f06f 0307 	mvn.w	r3, #7
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	24000d84 	.word	0x24000d84

080026ec <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80026f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002700:	2200      	movs	r2, #0
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f805 	bl	8002714 <BSP_LCD_InitEx>
 800270a:	4603      	mov	r3, r0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b09e      	sub	sp, #120	; 0x78
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002722:	2300      	movs	r3, #0
 8002724:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d808      	bhi.n	8002742 <BSP_LCD_InitEx+0x2e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <BSP_LCD_InitEx+0x2e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d006      	beq.n	800274a <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002742:	f06f 0301 	mvn.w	r3, #1
 8002746:	677b      	str	r3, [r7, #116]	; 0x74
 8002748:	e0a8      	b.n	800289c <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d109      	bne.n	8002764 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8002750:	2302      	movs	r3, #2
 8002752:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 8002754:	4a54      	ldr	r2, [pc, #336]	; (80028a8 <BSP_LCD_InitEx+0x194>)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015b      	lsls	r3, r3, #5
 800275a:	4413      	add	r3, r2
 800275c:	3310      	adds	r3, #16
 800275e:	2202      	movs	r2, #2
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e008      	b.n	8002776 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8002764:	2300      	movs	r3, #0
 8002766:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8002768:	4a4f      	ldr	r2, [pc, #316]	; (80028a8 <BSP_LCD_InitEx+0x194>)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	015b      	lsls	r3, r3, #5
 800276e:	4413      	add	r3, r2
 8002770:	3310      	adds	r3, #16
 8002772:	2204      	movs	r2, #4
 8002774:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8002776:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <BSP_LCD_InitEx+0x194>)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	015b      	lsls	r3, r3, #5
 800277c:	4413      	add	r3, r2
 800277e:	330c      	adds	r3, #12
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8002784:	4a48      	ldr	r2, [pc, #288]	; (80028a8 <BSP_LCD_InitEx+0x194>)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	015b      	lsls	r3, r3, #5
 800278a:	4413      	add	r3, r2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8002790:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <BSP_LCD_InitEx+0x194>)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015b      	lsls	r3, r3, #5
 8002796:	4413      	add	r3, r2
 8002798:	3304      	adds	r3, #4
 800279a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800279e:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80027a0:	4b42      	ldr	r3, [pc, #264]	; (80028ac <BSP_LCD_InitEx+0x198>)
 80027a2:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <BSP_LCD_InitEx+0x19c>)
 80027a4:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80027a6:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <BSP_LCD_InitEx+0x1a0>)
 80027a8:	4a43      	ldr	r2, [pc, #268]	; (80028b8 <BSP_LCD_InitEx+0x1a4>)
 80027aa:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 80027ac:	483f      	ldr	r0, [pc, #252]	; (80028ac <BSP_LCD_InitEx+0x198>)
 80027ae:	f000 fd1b 	bl	80031e8 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 80027b2:	4840      	ldr	r0, [pc, #256]	; (80028b4 <BSP_LCD_InitEx+0x1a0>)
 80027b4:	f000 fde4 	bl	8003380 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 80027b8:	4b40      	ldr	r3, [pc, #256]	; (80028bc <BSP_LCD_InitEx+0x1a8>)
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 80027bc:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <BSP_LCD_InitEx+0x1ac>)
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 80027c0:	2370      	movs	r3, #112	; 0x70
 80027c2:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 80027c4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80027c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f8ae 	bl	8001930 <FT5336_RegisterBusIO>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	da03      	bge.n	80027e2 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80027da:	f06f 0304 	mvn.w	r3, #4
 80027de:	677b      	str	r3, [r7, #116]	; 0x74
 80027e0:	e02b      	b.n	800283a <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 80027e2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80027e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f8e1 	bl	80019b4 <FT5336_ReadID>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da03      	bge.n	8002800 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80027f8:	f06f 0304 	mvn.w	r3, #4
 80027fc:	677b      	str	r3, [r7, #116]	; 0x74
 80027fe:	e01c      	b.n	800283a <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8002800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002802:	2b51      	cmp	r3, #81	; 0x51
 8002804:	d003      	beq.n	800280e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002806:	f06f 0306 	mvn.w	r3, #6
 800280a:	677b      	str	r3, [r7, #116]	; 0x74
 800280c:	e015      	b.n	800283a <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800280e:	4827      	ldr	r0, [pc, #156]	; (80028ac <BSP_LCD_InitEx+0x198>)
 8002810:	f000 f8e8 	bl	80029e4 <MX_LTDC_ClockConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800281a:	f06f 0303 	mvn.w	r3, #3
 800281e:	677b      	str	r3, [r7, #116]	; 0x74
 8002820:	e00b      	b.n	800283a <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8002822:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002826:	6839      	ldr	r1, [r7, #0]
 8002828:	4820      	ldr	r0, [pc, #128]	; (80028ac <BSP_LCD_InitEx+0x198>)
 800282a:	f000 f84d 	bl	80028c8 <MX_LTDC_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002834:	f06f 0303 	mvn.w	r3, #3
 8002838:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 800283a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283c:	2b00      	cmp	r3, #0
 800283e:	d12d      	bne.n	800289c <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8002840:	2000      	movs	r0, #0
 8002842:	f000 fe2f 	bl	80034a4 <BSP_SDRAM_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 800284c:	f06f 0303 	mvn.w	r3, #3
 8002850:	e025      	b.n	800289e <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 800285e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002862:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 8002864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8002868:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	461a      	mov	r2, r3
 8002874:	2100      	movs	r1, #0
 8002876:	480d      	ldr	r0, [pc, #52]	; (80028ac <BSP_LCD_InitEx+0x198>)
 8002878:	f000 f872 	bl	8002960 <MX_LTDC_ConfigLayer>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8002882:	f06f 0303 	mvn.w	r3, #3
 8002886:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 8002888:	480e      	ldr	r0, [pc, #56]	; (80028c4 <BSP_LCD_InitEx+0x1b0>)
 800288a:	f000 fde1 	bl	8003450 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 800288e:	4a06      	ldr	r2, [pc, #24]	; (80028a8 <BSP_LCD_InitEx+0x194>)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	015b      	lsls	r3, r3, #5
 8002894:	4413      	add	r3, r2
 8002896:	3318      	adds	r3, #24
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 800289c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3778      	adds	r7, #120	; 0x78
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	24000f34 	.word	0x24000f34
 80028ac:	24000e8c 	.word	0x24000e8c
 80028b0:	50001000 	.word	0x50001000
 80028b4:	24000e24 	.word	0x24000e24
 80028b8:	52001000 	.word	0x52001000
 80028bc:	08001f89 	.word	0x08001f89
 80028c0:	08002081 	.word	0x08002081
 80028c4:	24000dd8 	.word	0x24000dd8

080028c8 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <MX_LTDC_Init+0x94>)
 80028d8:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2228      	movs	r2, #40	; 0x28
 80028f6:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	222a      	movs	r2, #42	; 0x2a
 80028fc:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2209      	movs	r2, #9
 8002916:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	220b      	movs	r2, #11
 800291c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f103 020b 	add.w	r2, r3, #11
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f103 020d 	add.w	r2, r3, #13
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	22ff      	movs	r2, #255	; 0xff
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	22ff      	movs	r2, #255	; 0xff
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	22ff      	movs	r2, #255	; 0xff
 8002946:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f003 ffbc 	bl	80068c8 <HAL_LTDC_Init>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	50001000 	.word	0x50001000

08002960 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b092      	sub	sp, #72	; 0x48
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 800298a:	23ff      	movs	r3, #255	; 0xff
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002992:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002998:	2307      	movs	r3, #7
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	4619      	mov	r1, r3
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f004 f851 	bl	8006a7c <HAL_LTDC_ConfigLayer>
 80029da:	4603      	mov	r3, r0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3748      	adds	r7, #72	; 0x48
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b0b2      	sub	sp, #200	; 0xc8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 80029ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 80029f8:	2305      	movs	r3, #5
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 80029fc:	23a0      	movs	r3, #160	; 0xa0
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002a04:	2302      	movs	r3, #2
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002a08:	2353      	movs	r3, #83	; 0x53
 8002a0a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002a14:	f107 0308 	add.w	r3, r7, #8
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f005 fca1 	bl	8008360 <HAL_RCCEx_PeriphCLKConfig>
 8002a1e:	4603      	mov	r3, r0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	37c8      	adds	r7, #200	; 0xc8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a3c:	f06f 0301 	mvn.w	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e007      	b.n	8002a54 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002a44:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <BSP_LCD_GetPixelFormat+0x3c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	015b      	lsls	r3, r3, #5
 8002a4a:	4413      	add	r3, r2
 8002a4c:	330c      	adds	r3, #12
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	24000f34 	.word	0x24000f34

08002a68 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a7c:	f06f 0301 	mvn.w	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e006      	b.n	8002a92 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8002a84:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <BSP_LCD_SetActiveLayer+0x38>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	015b      	lsls	r3, r3, #5
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3308      	adds	r3, #8
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	24000f34 	.word	0x24000f34

08002aa4 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ab8:	f06f 0301 	mvn.w	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e006      	b.n	8002ace <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002ac0:	4a06      	ldr	r2, [pc, #24]	; (8002adc <BSP_LCD_GetXSize+0x38>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	015b      	lsls	r3, r3, #5
 8002ac6:	4413      	add	r3, r2
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002ace:	68fb      	ldr	r3, [r7, #12]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	24000f34 	.word	0x24000f34

08002ae0 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002af4:	f06f 0301 	mvn.w	r3, #1
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	e007      	b.n	8002b0c <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <BSP_LCD_GetYSize+0x3c>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	015b      	lsls	r3, r3, #5
 8002b02:	4413      	add	r3, r2
 8002b04:	3304      	adds	r3, #4
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	24000f34 	.word	0x24000f34

08002b20 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08e      	sub	sp, #56	; 0x38
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	330a      	adds	r3, #10
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	330b      	adds	r3, #11
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	441a      	add	r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	441a      	add	r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	330d      	adds	r3, #13
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	4413      	add	r3, r2
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	3312      	adds	r3, #18
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	3313      	adds	r3, #19
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	441a      	add	r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	3314      	adds	r3, #20
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	441a      	add	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	3315      	adds	r3, #21
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	4413      	add	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	3316      	adds	r3, #22
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	3317      	adds	r3, #23
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	441a      	add	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	3318      	adds	r3, #24
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	441a      	add	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	3319      	adds	r3, #25
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	331c      	adds	r3, #28
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	331d      	adds	r3, #29
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	4413      	add	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8002bbe:	4a37      	ldr	r2, [pc, #220]	; (8002c9c <BSP_LCD_DrawBitmap+0x17c>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	015b      	lsls	r3, r3, #5
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3308      	adds	r3, #8
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a35      	ldr	r2, [pc, #212]	; (8002ca0 <BSP_LCD_DrawBitmap+0x180>)
 8002bcc:	2134      	movs	r1, #52	; 0x34
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	335c      	adds	r3, #92	; 0x5c
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4930      	ldr	r1, [pc, #192]	; (8002c9c <BSP_LCD_DrawBitmap+0x17c>)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	015b      	lsls	r3, r3, #5
 8002bde:	440b      	add	r3, r1
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	fb03 f101 	mul.w	r1, r3, r1
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	440b      	add	r3, r1
 8002bec:	482b      	ldr	r0, [pc, #172]	; (8002c9c <BSP_LCD_DrawBitmap+0x17c>)
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	0149      	lsls	r1, r1, #5
 8002bf2:	4401      	add	r1, r0
 8002bf4:	3110      	adds	r1, #16
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	3b20      	subs	r3, #32
 8002c04:	2b07      	cmp	r3, #7
 8002c06:	d802      	bhi.n	8002c0e <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0c:	e008      	b.n	8002c20 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	3b10      	subs	r3, #16
 8002c12:	2b07      	cmp	r3, #7
 8002c14:	d802      	bhi.n	8002c1c <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002c16:	2302      	movs	r3, #2
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1a:	e001      	b.n	8002c20 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	08d2      	lsrs	r2, r2, #3
 8002c2e:	fb03 f202 	mul.w	r2, r3, r2
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	4413      	add	r3, r2
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c40:	e023      	b.n	8002c8a <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6a39      	ldr	r1, [r7, #32]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fa77 	bl	8003140 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <BSP_LCD_DrawBitmap+0x17c>)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	015b      	lsls	r3, r3, #5
 8002c58:	4413      	add	r3, r2
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	490f      	ldr	r1, [pc, #60]	; (8002c9c <BSP_LCD_DrawBitmap+0x17c>)
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	0152      	lsls	r2, r2, #5
 8002c62:	440a      	add	r2, r1
 8002c64:	3210      	adds	r2, #16
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6e:	4413      	add	r3, r2
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	08db      	lsrs	r3, r3, #3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	425b      	negs	r3, r3
 8002c7e:	6a3a      	ldr	r2, [r7, #32]
 8002c80:	4413      	add	r3, r2
 8002c82:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	3301      	adds	r3, #1
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d3d7      	bcc.n	8002c42 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8002c92:	69fb      	ldr	r3, [r7, #28]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3730      	adds	r7, #48	; 0x30
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	24000f34 	.word	0x24000f34
 8002ca0:	24000e8c 	.word	0x24000e8c

08002ca4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	e032      	b.n	8002d22 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e028      	b.n	8002d14 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	3303      	adds	r3, #3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	18d1      	adds	r1, r2, r3
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	441a      	add	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f95e 	bl	8002fb8 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	; (8002d34 <BSP_LCD_FillRGBRect+0x90>)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	015b      	lsls	r3, r3, #5
 8002d02:	4413      	add	r3, r2
 8002d04:	3310      	adds	r3, #16
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d3d2      	bcc.n	8002cc2 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d3c8      	bcc.n	8002cbc <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	24000f34 	.word	0x24000f34

08002d38 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002d46:	4a21      	ldr	r2, [pc, #132]	; (8002dcc <BSP_LCD_DrawHLine+0x94>)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	015b      	lsls	r3, r3, #5
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3308      	adds	r3, #8
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <BSP_LCD_DrawHLine+0x98>)
 8002d54:	2134      	movs	r1, #52	; 0x34
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	335c      	adds	r3, #92	; 0x5c
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	491a      	ldr	r1, [pc, #104]	; (8002dcc <BSP_LCD_DrawHLine+0x94>)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015b      	lsls	r3, r3, #5
 8002d66:	440b      	add	r3, r1
 8002d68:	3310      	adds	r3, #16
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4817      	ldr	r0, [pc, #92]	; (8002dcc <BSP_LCD_DrawHLine+0x94>)
 8002d6e:	68f9      	ldr	r1, [r7, #12]
 8002d70:	0149      	lsls	r1, r1, #5
 8002d72:	4401      	add	r1, r0
 8002d74:	6809      	ldr	r1, [r1, #0]
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	fb01 f000 	mul.w	r0, r1, r0
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	4401      	add	r1, r0
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	441a      	add	r2, r3
 8002d8e:	490f      	ldr	r1, [pc, #60]	; (8002dcc <BSP_LCD_DrawHLine+0x94>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	015b      	lsls	r3, r3, #5
 8002d94:	440b      	add	r3, r1
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d907      	bls.n	8002dac <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <BSP_LCD_DrawHLine+0x94>)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015b      	lsls	r3, r3, #5
 8002da2:	4413      	add	r3, r2
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002dac:	6979      	ldr	r1, [r7, #20]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	2300      	movs	r3, #0
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2301      	movs	r3, #1
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f956 	bl	800306c <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	24000f34 	.word	0x24000f34
 8002dd0:	24000e8c 	.word	0x24000e8c

08002dd4 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002de2:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <BSP_LCD_DrawVLine+0xa0>)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015b      	lsls	r3, r3, #5
 8002de8:	4413      	add	r3, r2
 8002dea:	3308      	adds	r3, #8
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <BSP_LCD_DrawVLine+0xa4>)
 8002df0:	2134      	movs	r1, #52	; 0x34
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	335c      	adds	r3, #92	; 0x5c
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	491d      	ldr	r1, [pc, #116]	; (8002e74 <BSP_LCD_DrawVLine+0xa0>)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	015b      	lsls	r3, r3, #5
 8002e02:	440b      	add	r3, r1
 8002e04:	3310      	adds	r3, #16
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	481a      	ldr	r0, [pc, #104]	; (8002e74 <BSP_LCD_DrawVLine+0xa0>)
 8002e0a:	68f9      	ldr	r1, [r7, #12]
 8002e0c:	0149      	lsls	r1, r1, #5
 8002e0e:	4401      	add	r1, r0
 8002e10:	6809      	ldr	r1, [r1, #0]
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	fb01 f000 	mul.w	r0, r1, r0
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	4401      	add	r1, r0
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	441a      	add	r2, r3
 8002e2a:	4912      	ldr	r1, [pc, #72]	; (8002e74 <BSP_LCD_DrawVLine+0xa0>)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	015b      	lsls	r3, r3, #5
 8002e30:	440b      	add	r3, r1
 8002e32:	3304      	adds	r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d908      	bls.n	8002e4c <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8002e3a:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <BSP_LCD_DrawVLine+0xa0>)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015b      	lsls	r3, r3, #5
 8002e40:	4413      	add	r3, r2
 8002e42:	3304      	adds	r3, #4
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002e4c:	6979      	ldr	r1, [r7, #20]
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <BSP_LCD_DrawVLine+0xa0>)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	015b      	lsls	r3, r3, #5
 8002e54:	4413      	add	r3, r2
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	6a3a      	ldr	r2, [r7, #32]
 8002e5c:	9201      	str	r2, [sp, #4]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2201      	movs	r2, #1
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f901 	bl	800306c <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	24000f34 	.word	0x24000f34
 8002e78:	24000e8c 	.word	0x24000e8c

08002e7c <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002e8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <BSP_LCD_FillRect+0x7c>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	015b      	lsls	r3, r3, #5
 8002e90:	4413      	add	r3, r2
 8002e92:	3308      	adds	r3, #8
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a19      	ldr	r2, [pc, #100]	; (8002efc <BSP_LCD_FillRect+0x80>)
 8002e98:	2134      	movs	r1, #52	; 0x34
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	335c      	adds	r3, #92	; 0x5c
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4914      	ldr	r1, [pc, #80]	; (8002ef8 <BSP_LCD_FillRect+0x7c>)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	015b      	lsls	r3, r3, #5
 8002eaa:	440b      	add	r3, r1
 8002eac:	3310      	adds	r3, #16
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4811      	ldr	r0, [pc, #68]	; (8002ef8 <BSP_LCD_FillRect+0x7c>)
 8002eb2:	68f9      	ldr	r1, [r7, #12]
 8002eb4:	0149      	lsls	r1, r1, #5
 8002eb6:	4401      	add	r1, r0
 8002eb8:	6809      	ldr	r1, [r1, #0]
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	fb01 f000 	mul.w	r0, r1, r0
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	4401      	add	r1, r0
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8002ecc:	6979      	ldr	r1, [r7, #20]
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <BSP_LCD_FillRect+0x7c>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	015b      	lsls	r3, r3, #5
 8002ed4:	4413      	add	r3, r2
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ede:	9201      	str	r2, [sp, #4]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f8c0 	bl	800306c <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	24000f34 	.word	0x24000f34
 8002efc:	24000e8c 	.word	0x24000e8c

08002f00 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <BSP_LCD_ReadPixel+0xb0>)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	015b      	lsls	r3, r3, #5
 8002f14:	4413      	add	r3, r2
 8002f16:	3308      	adds	r3, #8
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <BSP_LCD_ReadPixel+0xb4>)
 8002f1c:	2134      	movs	r1, #52	; 0x34
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3348      	adds	r3, #72	; 0x48
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d11c      	bne.n	8002f66 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002f2c:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <BSP_LCD_ReadPixel+0xb0>)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	015b      	lsls	r3, r3, #5
 8002f32:	4413      	add	r3, r2
 8002f34:	3308      	adds	r3, #8
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <BSP_LCD_ReadPixel+0xb4>)
 8002f3a:	2134      	movs	r1, #52	; 0x34
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	335c      	adds	r3, #92	; 0x5c
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	491a      	ldr	r1, [pc, #104]	; (8002fb0 <BSP_LCD_ReadPixel+0xb0>)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	015b      	lsls	r3, r3, #5
 8002f4c:	440b      	add	r3, r1
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	fb03 f101 	mul.w	r1, r3, r1
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	440b      	add	r3, r1
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e01d      	b.n	8002fa2 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <BSP_LCD_ReadPixel+0xb0>)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015b      	lsls	r3, r3, #5
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3308      	adds	r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <BSP_LCD_ReadPixel+0xb4>)
 8002f74:	2134      	movs	r1, #52	; 0x34
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	335c      	adds	r3, #92	; 0x5c
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	490b      	ldr	r1, [pc, #44]	; (8002fb0 <BSP_LCD_ReadPixel+0xb0>)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	015b      	lsls	r3, r3, #5
 8002f86:	440b      	add	r3, r1
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	fb03 f101 	mul.w	r1, r3, r1
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	440b      	add	r3, r1
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	24000f34 	.word	0x24000f34
 8002fb4:	24000e8c 	.word	0x24000e8c

08002fb8 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <BSP_LCD_WritePixel+0xac>)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	015b      	lsls	r3, r3, #5
 8002fcc:	4413      	add	r3, r2
 8002fce:	3308      	adds	r3, #8
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a25      	ldr	r2, [pc, #148]	; (8003068 <BSP_LCD_WritePixel+0xb0>)
 8002fd4:	2134      	movs	r1, #52	; 0x34
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3348      	adds	r3, #72	; 0x48
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d11c      	bne.n	800301e <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <BSP_LCD_WritePixel+0xac>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	015b      	lsls	r3, r3, #5
 8002fea:	4413      	add	r3, r2
 8002fec:	3308      	adds	r3, #8
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <BSP_LCD_WritePixel+0xb0>)
 8002ff2:	2134      	movs	r1, #52	; 0x34
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	335c      	adds	r3, #92	; 0x5c
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4919      	ldr	r1, [pc, #100]	; (8003064 <BSP_LCD_WritePixel+0xac>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015b      	lsls	r3, r3, #5
 8003004:	440b      	add	r3, r1
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	fb03 f101 	mul.w	r1, r3, r1
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	440b      	add	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	461a      	mov	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	e01b      	b.n	8003056 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <BSP_LCD_WritePixel+0xac>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	015b      	lsls	r3, r3, #5
 8003024:	4413      	add	r3, r2
 8003026:	3308      	adds	r3, #8
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a0f      	ldr	r2, [pc, #60]	; (8003068 <BSP_LCD_WritePixel+0xb0>)
 800302c:	2134      	movs	r1, #52	; 0x34
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	335c      	adds	r3, #92	; 0x5c
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	490a      	ldr	r1, [pc, #40]	; (8003064 <BSP_LCD_WritePixel+0xac>)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	015b      	lsls	r3, r3, #5
 800303e:	440b      	add	r3, r1
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	fb03 f101 	mul.w	r1, r3, r1
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	440b      	add	r3, r1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	b292      	uxth	r2, r2
 8003054:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	24000f34 	.word	0x24000f34
 8003068:	24000e8c 	.word	0x24000e8c

0800306c <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 800307e:	4a2d      	ldr	r2, [pc, #180]	; (8003134 <LL_FillBuffer+0xc8>)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	015b      	lsls	r3, r3, #5
 8003084:	4413      	add	r3, r2
 8003086:	330c      	adds	r3, #12
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d129      	bne.n	80030e2 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800308e:	2302      	movs	r3, #2
 8003090:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	0adb      	lsrs	r3, r3, #11
 8003096:	f003 021f 	and.w	r2, r3, #31
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	4413      	add	r3, r2
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	3317      	adds	r3, #23
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	0419      	lsls	r1, r3, #16
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b2:	4613      	mov	r3, r2
 80030b4:	01db      	lsls	r3, r3, #7
 80030b6:	4413      	add	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	3321      	adds	r3, #33	; 0x21
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	4319      	orrs	r1, r3
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	f003 021f 	and.w	r2, r3, #31
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	4413      	add	r3, r2
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	3317      	adds	r3, #23
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	430b      	orrs	r3, r1
 80030da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030de:	613b      	str	r3, [r7, #16]
    break;
 80030e0:	e002      	b.n	80030e8 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
    break;
 80030e6:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <LL_FillBuffer+0xcc>)
 80030ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80030ee:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <LL_FillBuffer+0xcc>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80030f6:	4a10      	ldr	r2, [pc, #64]	; (8003138 <LL_FillBuffer+0xcc>)
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <LL_FillBuffer+0xcc>)
 80030fe:	4a0f      	ldr	r2, [pc, #60]	; (800313c <LL_FillBuffer+0xd0>)
 8003100:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003102:	480d      	ldr	r0, [pc, #52]	; (8003138 <LL_FillBuffer+0xcc>)
 8003104:	f002 f9fa 	bl	80054fc <HAL_DMA2D_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10e      	bne.n	800312c <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6939      	ldr	r1, [r7, #16]
 8003118:	4807      	ldr	r0, [pc, #28]	; (8003138 <LL_FillBuffer+0xcc>)
 800311a:	f002 fa5d 	bl	80055d8 <HAL_DMA2D_Start>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003124:	2132      	movs	r1, #50	; 0x32
 8003126:	4804      	ldr	r0, [pc, #16]	; (8003138 <LL_FillBuffer+0xcc>)
 8003128:	f002 fa81 	bl	800562e <HAL_DMA2D_PollForTransfer>
    }
  }
}
 800312c:	bf00      	nop
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	24000f34 	.word	0x24000f34
 8003138:	24000e24 	.word	0x24000e24
 800313c:	52001000 	.word	0x52001000

08003140 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 800314e:	4a23      	ldr	r2, [pc, #140]	; (80031dc <LL_ConvertLineToRGB+0x9c>)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	015b      	lsls	r3, r3, #5
 8003154:	4413      	add	r3, r2
 8003156:	330c      	adds	r3, #12
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d102      	bne.n	8003164 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800315e:	2302      	movs	r3, #2
 8003160:	617b      	str	r3, [r7, #20]
    break;
 8003162:	e002      	b.n	800316a <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
    break;
 8003168:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 800316c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003170:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003172:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 8003180:	2200      	movs	r2, #0
 8003182:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003184:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 8003186:	22ff      	movs	r2, #255	; 0xff
 8003188:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800318a:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8003190:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 8003198:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <LL_ConvertLineToRGB+0xa4>)
 800319a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800319c:	4810      	ldr	r0, [pc, #64]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 800319e:	f002 f9ad 	bl	80054fc <HAL_DMA2D_Init>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d115      	bne.n	80031d4 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80031a8:	2101      	movs	r1, #1
 80031aa:	480d      	ldr	r0, [pc, #52]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 80031ac:	f002 fb28 	bl	8005800 <HAL_DMA2D_ConfigLayer>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10e      	bne.n	80031d4 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	2301      	movs	r3, #1
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	4807      	ldr	r0, [pc, #28]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 80031c2:	f002 fa09 	bl	80055d8 <HAL_DMA2D_Start>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80031cc:	2132      	movs	r1, #50	; 0x32
 80031ce:	4804      	ldr	r0, [pc, #16]	; (80031e0 <LL_ConvertLineToRGB+0xa0>)
 80031d0:	f002 fa2d 	bl	800562e <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	24000f34 	.word	0x24000f34
 80031e0:	24000e24 	.word	0x24000e24
 80031e4:	52001000 	.word	0x52001000

080031e8 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	; 0x38
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a5b      	ldr	r2, [pc, #364]	; (8003364 <LTDC_MspInit+0x17c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	f040 80b0 	bne.w	800335c <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80031fc:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <LTDC_MspInit+0x180>)
 80031fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003202:	4a59      	ldr	r2, [pc, #356]	; (8003368 <LTDC_MspInit+0x180>)
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800320c:	4b56      	ldr	r3, [pc, #344]	; (8003368 <LTDC_MspInit+0x180>)
 800320e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800321a:	4b53      	ldr	r3, [pc, #332]	; (8003368 <LTDC_MspInit+0x180>)
 800321c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003220:	4a51      	ldr	r2, [pc, #324]	; (8003368 <LTDC_MspInit+0x180>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800322a:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <LTDC_MspInit+0x180>)
 800322c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <LTDC_MspInit+0x180>)
 800323a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800323e:	4a4a      	ldr	r2, [pc, #296]	; (8003368 <LTDC_MspInit+0x180>)
 8003240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <LTDC_MspInit+0x180>)
 800324a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800324e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003256:	4b44      	ldr	r3, [pc, #272]	; (8003368 <LTDC_MspInit+0x180>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325c:	4a42      	ldr	r2, [pc, #264]	; (8003368 <LTDC_MspInit+0x180>)
 800325e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003266:	4b40      	ldr	r3, [pc, #256]	; (8003368 <LTDC_MspInit+0x180>)
 8003268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003274:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <LTDC_MspInit+0x180>)
 8003276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327a:	4a3b      	ldr	r2, [pc, #236]	; (8003368 <LTDC_MspInit+0x180>)
 800327c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003284:	4b38      	ldr	r3, [pc, #224]	; (8003368 <LTDC_MspInit+0x180>)
 8003286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003292:	4b35      	ldr	r3, [pc, #212]	; (8003368 <LTDC_MspInit+0x180>)
 8003294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003298:	4a33      	ldr	r2, [pc, #204]	; (8003368 <LTDC_MspInit+0x180>)
 800329a:	f043 0308 	orr.w	r3, r3, #8
 800329e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <LTDC_MspInit+0x180>)
 80032a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 80032b0:	f24d 2303 	movw	r3, #53763	; 0xd203
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80032be:	2302      	movs	r3, #2
 80032c0:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032c2:	230e      	movs	r3, #14
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80032c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ca:	4619      	mov	r1, r3
 80032cc:	4827      	ldr	r0, [pc, #156]	; (800336c <LTDC_MspInit+0x184>)
 80032ce:	f002 fc4f 	bl	8005b70 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 80032d2:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032d8:	230e      	movs	r3, #14
 80032da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80032dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e0:	4619      	mov	r1, r3
 80032e2:	4823      	ldr	r0, [pc, #140]	; (8003370 <LTDC_MspInit+0x188>)
 80032e4:	f002 fc44 	bl	8005b70 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80032e8:	23ff      	movs	r3, #255	; 0xff
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80032ec:	230e      	movs	r3, #14
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80032f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f4:	4619      	mov	r1, r3
 80032f6:	481f      	ldr	r0, [pc, #124]	; (8003374 <LTDC_MspInit+0x18c>)
 80032f8:	f002 fc3a 	bl	8005b70 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 80032fc:	f240 2302 	movw	r3, #514	; 0x202
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800330a:	2302      	movs	r3, #2
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800330e:	230e      	movs	r3, #14
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003316:	4619      	mov	r1, r3
 8003318:	4817      	ldr	r0, [pc, #92]	; (8003378 <LTDC_MspInit+0x190>)
 800331a:	f002 fc29 	bl	8005b70 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 800331e:	2380      	movs	r3, #128	; 0x80
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003322:	2301      	movs	r3, #1
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332a:	4619      	mov	r1, r3
 800332c:	4813      	ldr	r0, [pc, #76]	; (800337c <LTDC_MspInit+0x194>)
 800332e:	f002 fc1f 	bl	8005b70 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8003332:	2201      	movs	r2, #1
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	4811      	ldr	r0, [pc, #68]	; (800337c <LTDC_MspInit+0x194>)
 8003338:	f002 fde2 	bl	8005f00 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <LTDC_MspInit+0x180>)
 800333e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <LTDC_MspInit+0x180>)
 8003344:	f043 0308 	orr.w	r3, r3, #8
 8003348:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <LTDC_MspInit+0x180>)
 800334e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <LTDC_MspInit+0x180>)
 8003354:	f023 0308 	bic.w	r3, r3, #8
 8003358:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 800335c:	bf00      	nop
 800335e:	3738      	adds	r7, #56	; 0x38
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	50001000 	.word	0x50001000
 8003368:	58024400 	.word	0x58024400
 800336c:	58022000 	.word	0x58022000
 8003370:	58022400 	.word	0x58022400
 8003374:	58022800 	.word	0x58022800
 8003378:	58021c00 	.word	0x58021c00
 800337c:	58020c00 	.word	0x58020c00

08003380 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <DMA2D_MspInit+0x54>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d11a      	bne.n	80033c8 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <DMA2D_MspInit+0x58>)
 8003394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003398:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <DMA2D_MspInit+0x58>)
 800339a:	f043 0310 	orr.w	r3, r3, #16
 800339e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <DMA2D_MspInit+0x58>)
 80033a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <DMA2D_MspInit+0x58>)
 80033b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <DMA2D_MspInit+0x58>)
 80033b6:	f043 0310 	orr.w	r3, r3, #16
 80033ba:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <DMA2D_MspInit+0x58>)
 80033be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c0:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <DMA2D_MspInit+0x58>)
 80033c2:	f023 0310 	bic.w	r3, r3, #16
 80033c6:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	52001000 	.word	0x52001000
 80033d8:	58024400 	.word	0x58024400

080033dc <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <TIMx_PWM_MspInit+0x6c>)
 80033e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <TIMx_PWM_MspInit+0x6c>)
 80033ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <TIMx_PWM_MspInit+0x6c>)
 80033f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <TIMx_PWM_MspInit+0x6c>)
 8003404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003408:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <TIMx_PWM_MspInit+0x6c>)
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <TIMx_PWM_MspInit+0x6c>)
 8003414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003428:	2301      	movs	r3, #1
 800342a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 800342c:	2303      	movs	r3, #3
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8003430:	2301      	movs	r3, #1
 8003432:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	4619      	mov	r1, r3
 800343a:	4804      	ldr	r0, [pc, #16]	; (800344c <TIMx_PWM_MspInit+0x70>)
 800343c:	f002 fb98 	bl	8005b70 <HAL_GPIO_Init>
}
 8003440:	bf00      	nop
 8003442:	3728      	adds	r7, #40	; 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	58024400 	.word	0x58024400
 800344c:	58022800 	.word	0x58022800

08003450 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <TIMx_PWM_Init+0x50>)
 800345c:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f006 fbe6 	bl	8009c30 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ffb9 	bl	80033dc <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2204      	movs	r2, #4
 800346e:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003476:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f006 fb76 	bl	8009b82 <HAL_TIM_PWM_Init>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40010400 	.word	0x40010400

080034a4 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80034b6:	f06f 0301 	mvn.w	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e044      	b.n	8003548 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2234      	movs	r2, #52	; 0x34
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	4a23      	ldr	r2, [pc, #140]	; (8003554 <BSP_SDRAM_Init+0xb0>)
 80034c8:	4413      	add	r3, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f8a8 	bl	8003620 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2234      	movs	r2, #52	; 0x34
 80034d4:	fb02 f303 	mul.w	r3, r2, r3
 80034d8:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <BSP_SDRAM_Init+0xb0>)
 80034da:	4413      	add	r3, r2
 80034dc:	2210      	movs	r2, #16
 80034de:	2104      	movs	r1, #4
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f83b 	bl	800355c <MX_SDRAM_BANK2_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 80034ec:	f04f 33ff 	mov.w	r3, #4294967295
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e029      	b.n	8003548 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <BSP_SDRAM_Init+0xb4>)
 80034f6:	2208      	movs	r2, #8
 80034f8:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 80034fa:	4b17      	ldr	r3, [pc, #92]	; (8003558 <BSP_SDRAM_Init+0xb4>)
 80034fc:	2203      	movs	r2, #3
 80034fe:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <BSP_SDRAM_Init+0xb4>)
 8003502:	f240 6203 	movw	r2, #1539	; 0x603
 8003506:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <BSP_SDRAM_Init+0xb4>)
 800350a:	2200      	movs	r2, #0
 800350c:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <BSP_SDRAM_Init+0xb4>)
 8003510:	2200      	movs	r2, #0
 8003512:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8003514:	4b10      	ldr	r3, [pc, #64]	; (8003558 <BSP_SDRAM_Init+0xb4>)
 8003516:	2230      	movs	r2, #48	; 0x30
 8003518:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <BSP_SDRAM_Init+0xb4>)
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <BSP_SDRAM_Init+0xb4>)
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2234      	movs	r2, #52	; 0x34
 800352c:	fb02 f303 	mul.w	r3, r2, r3
 8003530:	4a08      	ldr	r2, [pc, #32]	; (8003554 <BSP_SDRAM_Init+0xb0>)
 8003532:	4413      	add	r3, r2
 8003534:	4908      	ldr	r1, [pc, #32]	; (8003558 <BSP_SDRAM_Init+0xb4>)
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fab3 	bl	8001aa2 <MT48LC4M32B2_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8003542:	f06f 0304 	mvn.w	r3, #4
 8003546:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8003548:	68fb      	ldr	r3, [r7, #12]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	24000f54 	.word	0x24000f54
 8003558:	24000f88 	.word	0x24000f88

0800355c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <MX_SDRAM_BANK2_Init+0x90>)
 800356a:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <MX_SDRAM_BANK2_Init+0x94>)
 800356c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003586:	4b19      	ldr	r3, [pc, #100]	; (80035ec <MX_SDRAM_BANK2_Init+0x90>)
 8003588:	2240      	movs	r2, #64	; 0x40
 800358a:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003592:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 80035b0:	2302      	movs	r3, #2
 80035b2:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80035b4:	2307      	movs	r3, #7
 80035b6:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 80035b8:	2304      	movs	r3, #4
 80035ba:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 80035bc:	2307      	movs	r3, #7
 80035be:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 80035c0:	2302      	movs	r3, #2
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 80035c4:	2302      	movs	r3, #2
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 80035c8:	2302      	movs	r3, #2
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4619      	mov	r1, r3
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f006 fa32 	bl	8009a3c <HAL_SDRAM_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3730      	adds	r7, #48	; 0x30
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	24000f54 	.word	0x24000f54
 80035f0:	52004140 	.word	0x52004140

080035f4 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 80035fc:	4a07      	ldr	r2, [pc, #28]	; (800361c <BSP_SDRAM_IRQHandler+0x28>)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2134      	movs	r1, #52	; 0x34
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3330      	adds	r3, #48	; 0x30
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f003 fcb1 	bl	8006f74 <HAL_MDMA_IRQHandler>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	24000f54 	.word	0x24000f54

08003620 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08e      	sub	sp, #56	; 0x38
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003628:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 800362a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800362e:	4a72      	ldr	r2, [pc, #456]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 8003630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003634:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003638:	4b6f      	ldr	r3, [pc, #444]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 800363a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800363e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8003646:	4b6c      	ldr	r3, [pc, #432]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 8003648:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800364c:	4a6a      	ldr	r2, [pc, #424]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003656:	4b68      	ldr	r3, [pc, #416]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 8003658:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003664:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 8003666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800366a:	4a63      	ldr	r2, [pc, #396]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003674:	4b60      	ldr	r3, [pc, #384]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 8003676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003682:	4b5d      	ldr	r3, [pc, #372]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 8003684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003688:	4a5b      	ldr	r2, [pc, #364]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 800368a:	f043 0310 	orr.w	r3, r3, #16
 800368e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003692:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 8003694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036a0:	4b55      	ldr	r3, [pc, #340]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 80036a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a6:	4a54      	ldr	r2, [pc, #336]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 80036a8:	f043 0320 	orr.w	r3, r3, #32
 80036ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b0:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 80036b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80036be:	4b4e      	ldr	r3, [pc, #312]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 80036c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c4:	4a4c      	ldr	r2, [pc, #304]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 80036c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ce:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 80036d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036dc:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 80036de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e2:	4a45      	ldr	r2, [pc, #276]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 80036e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ec:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <SDRAM_MspInit+0x1d8>)
 80036ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80036fe:	2301      	movs	r3, #1
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003702:	2303      	movs	r3, #3
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003706:	230c      	movs	r3, #12
 8003708:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800370a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003714:	4619      	mov	r1, r3
 8003716:	4839      	ldr	r0, [pc, #228]	; (80037fc <SDRAM_MspInit+0x1dc>)
 8003718:	f002 fa2a 	bl	8005b70 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800371c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003726:	4619      	mov	r1, r3
 8003728:	4835      	ldr	r0, [pc, #212]	; (8003800 <SDRAM_MspInit+0x1e0>)
 800372a:	f002 fa21 	bl	8005b70 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800372e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003738:	4619      	mov	r1, r3
 800373a:	4832      	ldr	r0, [pc, #200]	; (8003804 <SDRAM_MspInit+0x1e4>)
 800373c:	f002 fa18 	bl	8005b70 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8003740:	f248 1333 	movw	r3, #33075	; 0x8133
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800374a:	4619      	mov	r1, r3
 800374c:	482e      	ldr	r0, [pc, #184]	; (8003808 <SDRAM_MspInit+0x1e8>)
 800374e:	f002 fa0f 	bl	8005b70 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8003752:	23e0      	movs	r3, #224	; 0xe0
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800375a:	4619      	mov	r1, r3
 800375c:	482b      	ldr	r0, [pc, #172]	; (800380c <SDRAM_MspInit+0x1ec>)
 800375e:	f002 fa07 	bl	8005b70 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8003762:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <SDRAM_MspInit+0x1f0>)
 8003764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003768:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800376a:	4b29      	ldr	r3, [pc, #164]	; (8003810 <SDRAM_MspInit+0x1f0>)
 800376c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003770:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8003772:	4b27      	ldr	r3, [pc, #156]	; (8003810 <SDRAM_MspInit+0x1f0>)
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <SDRAM_MspInit+0x1f0>)
 800377a:	2200      	movs	r2, #0
 800377c:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800377e:	4b24      	ldr	r3, [pc, #144]	; (8003810 <SDRAM_MspInit+0x1f0>)
 8003780:	f240 2202 	movw	r2, #514	; 0x202
 8003784:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8003786:	4b22      	ldr	r3, [pc, #136]	; (8003810 <SDRAM_MspInit+0x1f0>)
 8003788:	f640 0208 	movw	r2, #2056	; 0x808
 800378c:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <SDRAM_MspInit+0x1f0>)
 8003790:	2220      	movs	r2, #32
 8003792:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <SDRAM_MspInit+0x1f0>)
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <SDRAM_MspInit+0x1f0>)
 800379c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80037a2:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80037a8:	4b19      	ldr	r3, [pc, #100]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037bc:	2200      	movs	r2, #0
 80037be:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80037c0:	4b13      	ldr	r3, [pc, #76]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <SDRAM_MspInit+0x1f4>)
 80037c4:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80037c6:	4b14      	ldr	r3, [pc, #80]	; (8003818 <SDRAM_MspInit+0x1f8>)
 80037c8:	4a11      	ldr	r2, [pc, #68]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037ce:	4a12      	ldr	r2, [pc, #72]	; (8003818 <SDRAM_MspInit+0x1f8>)
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 80037d2:	480f      	ldr	r0, [pc, #60]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037d4:	f003 fb76 	bl	8006ec4 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 80037d8:	480d      	ldr	r0, [pc, #52]	; (8003810 <SDRAM_MspInit+0x1f0>)
 80037da:	f003 fb27 	bl	8006e2c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	210f      	movs	r1, #15
 80037e2:	207a      	movs	r0, #122	; 0x7a
 80037e4:	f000 f9c7 	bl	8003b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80037e8:	207a      	movs	r0, #122	; 0x7a
 80037ea:	f000 f9de 	bl	8003baa <HAL_NVIC_EnableIRQ>
}
 80037ee:	bf00      	nop
 80037f0:	3738      	adds	r7, #56	; 0x38
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	58024400 	.word	0x58024400
 80037fc:	58020c00 	.word	0x58020c00
 8003800:	58021000 	.word	0x58021000
 8003804:	58021400 	.word	0x58021400
 8003808:	58021800 	.word	0x58021800
 800380c:	58021c00 	.word	0x58021c00
 8003810:	24000fa8 	.word	0x24000fa8
 8003814:	52000040 	.word	0x52000040
 8003818:	24000f54 	.word	0x24000f54

0800381c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003822:	2003      	movs	r0, #3
 8003824:	f000 f99c 	bl	8003b60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003828:	f004 fbda 	bl	8007fe0 <HAL_RCC_GetSysClockFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <HAL_Init+0x68>)
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	4913      	ldr	r1, [pc, #76]	; (8003888 <HAL_Init+0x6c>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
 8003844:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_Init+0x68>)
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	4a0e      	ldr	r2, [pc, #56]	; (8003888 <HAL_Init+0x6c>)
 8003850:	5cd3      	ldrb	r3, [r2, r3]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
 800385c:	4a0b      	ldr	r2, [pc, #44]	; (800388c <HAL_Init+0x70>)
 800385e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <HAL_Init+0x74>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003866:	200f      	movs	r0, #15
 8003868:	f000 f814 	bl	8003894 <HAL_InitTick>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e002      	b.n	800387c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003876:	f7fd feb1 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	58024400 	.word	0x58024400
 8003888:	0800d46c 	.word	0x0800d46c
 800388c:	24000010 	.word	0x24000010
 8003890:	2400000c 	.word	0x2400000c

08003894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <HAL_InitTick+0x60>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e021      	b.n	80038ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80038a8:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <HAL_InitTick+0x64>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_InitTick+0x60>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4619      	mov	r1, r3
 80038b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f981 	bl	8003bc6 <HAL_SYSTICK_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00e      	b.n	80038ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	d80a      	bhi.n	80038ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d4:	2200      	movs	r2, #0
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f000 f94b 	bl	8003b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e0:	4a06      	ldr	r2, [pc, #24]	; (80038fc <HAL_InitTick+0x68>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2400002c 	.word	0x2400002c
 80038f8:	2400000c 	.word	0x2400000c
 80038fc:	24000028 	.word	0x24000028

08003900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_IncTick+0x20>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_IncTick+0x24>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4413      	add	r3, r2
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <HAL_IncTick+0x24>)
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	2400002c 	.word	0x2400002c
 8003924:	24001014 	.word	0x24001014

08003928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return uwTick;
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_GetTick+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	24001014 	.word	0x24001014

08003940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003948:	f7ff ffee 	bl	8003928 <HAL_GetTick>
 800394c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d005      	beq.n	8003966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_Delay+0x44>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003966:	bf00      	nop
 8003968:	f7ff ffde 	bl	8003928 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	429a      	cmp	r2, r3
 8003976:	d8f7      	bhi.n	8003968 <HAL_Delay+0x28>
  {
  }
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	2400002c 	.word	0x2400002c

08003988 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_GetREVID+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	0c1b      	lsrs	r3, r3, #16
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	5c001000 	.word	0x5c001000

080039a0 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_EnableCompensationCell+0x1c>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <HAL_EnableCompensationCell+0x1c>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6213      	str	r3, [r2, #32]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	58000400 	.word	0x58000400

080039c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <__NVIC_SetPriorityGrouping+0x40>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039dc:	4013      	ands	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <__NVIC_SetPriorityGrouping+0x44>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ee:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <__NVIC_SetPriorityGrouping+0x40>)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	60d3      	str	r3, [r2, #12]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000ed00 	.word	0xe000ed00
 8003a04:	05fa0000 	.word	0x05fa0000

08003a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <__NVIC_GetPriorityGrouping+0x18>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	f003 0307 	and.w	r3, r3, #7
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	db0b      	blt.n	8003a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	f003 021f 	and.w	r2, r3, #31
 8003a3c:	4907      	ldr	r1, [pc, #28]	; (8003a5c <__NVIC_EnableIRQ+0x38>)
 8003a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	2001      	movs	r0, #1
 8003a46:	fa00 f202 	lsl.w	r2, r0, r2
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	e000e100 	.word	0xe000e100

08003a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	6039      	str	r1, [r7, #0]
 8003a6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	db0a      	blt.n	8003a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	490c      	ldr	r1, [pc, #48]	; (8003aac <__NVIC_SetPriority+0x4c>)
 8003a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a7e:	0112      	lsls	r2, r2, #4
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	440b      	add	r3, r1
 8003a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a88:	e00a      	b.n	8003aa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4908      	ldr	r1, [pc, #32]	; (8003ab0 <__NVIC_SetPriority+0x50>)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	3b04      	subs	r3, #4
 8003a98:	0112      	lsls	r2, r2, #4
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	761a      	strb	r2, [r3, #24]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000e100 	.word	0xe000e100
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f1c3 0307 	rsb	r3, r3, #7
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	bf28      	it	cs
 8003ad2:	2304      	movcs	r3, #4
 8003ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2b06      	cmp	r3, #6
 8003adc:	d902      	bls.n	8003ae4 <NVIC_EncodePriority+0x30>
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3b03      	subs	r3, #3
 8003ae2:	e000      	b.n	8003ae6 <NVIC_EncodePriority+0x32>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43da      	mvns	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	401a      	ands	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003afc:	f04f 31ff 	mov.w	r1, #4294967295
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	fa01 f303 	lsl.w	r3, r1, r3
 8003b06:	43d9      	mvns	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b0c:	4313      	orrs	r3, r2
         );
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3724      	adds	r7, #36	; 0x24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b2c:	d301      	bcc.n	8003b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e00f      	b.n	8003b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <SysTick_Config+0x40>)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3a:	210f      	movs	r1, #15
 8003b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b40:	f7ff ff8e 	bl	8003a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <SysTick_Config+0x40>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4a:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <SysTick_Config+0x40>)
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	e000e010 	.word	0xe000e010

08003b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff29 	bl	80039c0 <__NVIC_SetPriorityGrouping>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b84:	f7ff ff40 	bl	8003a08 <__NVIC_GetPriorityGrouping>
 8003b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	6978      	ldr	r0, [r7, #20]
 8003b90:	f7ff ff90 	bl	8003ab4 <NVIC_EncodePriority>
 8003b94:	4602      	mov	r2, r0
 8003b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ff5f 	bl	8003a60 <__NVIC_SetPriority>
}
 8003ba2:	bf00      	nop
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ff33 	bl	8003a24 <__NVIC_EnableIRQ>
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ffa4 	bl	8003b1c <SysTick_Config>
 8003bd4:	4603      	mov	r3, r0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003be8:	f7ff fe9e 	bl	8003928 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e2dc      	b.n	80041b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d008      	beq.n	8003c16 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e2cd      	b.n	80041b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a76      	ldr	r2, [pc, #472]	; (8003df4 <HAL_DMA_Abort+0x214>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d04a      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a74      	ldr	r2, [pc, #464]	; (8003df8 <HAL_DMA_Abort+0x218>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d045      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a73      	ldr	r2, [pc, #460]	; (8003dfc <HAL_DMA_Abort+0x21c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d040      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a71      	ldr	r2, [pc, #452]	; (8003e00 <HAL_DMA_Abort+0x220>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d03b      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a70      	ldr	r2, [pc, #448]	; (8003e04 <HAL_DMA_Abort+0x224>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d036      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a6e      	ldr	r2, [pc, #440]	; (8003e08 <HAL_DMA_Abort+0x228>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d031      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6d      	ldr	r2, [pc, #436]	; (8003e0c <HAL_DMA_Abort+0x22c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d02c      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a6b      	ldr	r2, [pc, #428]	; (8003e10 <HAL_DMA_Abort+0x230>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d027      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6a      	ldr	r2, [pc, #424]	; (8003e14 <HAL_DMA_Abort+0x234>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d022      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a68      	ldr	r2, [pc, #416]	; (8003e18 <HAL_DMA_Abort+0x238>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01d      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a67      	ldr	r2, [pc, #412]	; (8003e1c <HAL_DMA_Abort+0x23c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d018      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a65      	ldr	r2, [pc, #404]	; (8003e20 <HAL_DMA_Abort+0x240>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a64      	ldr	r2, [pc, #400]	; (8003e24 <HAL_DMA_Abort+0x244>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a62      	ldr	r2, [pc, #392]	; (8003e28 <HAL_DMA_Abort+0x248>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a61      	ldr	r2, [pc, #388]	; (8003e2c <HAL_DMA_Abort+0x24c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_DMA_Abort+0xd6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5f      	ldr	r2, [pc, #380]	; (8003e30 <HAL_DMA_Abort+0x250>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_DMA_Abort+0xda>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_DMA_Abort+0xdc>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d013      	beq.n	8003ce8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 021e 	bic.w	r2, r2, #30
 8003cce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cde:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e00a      	b.n	8003cfe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 020e 	bic.w	r2, r2, #14
 8003cf6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3c      	ldr	r2, [pc, #240]	; (8003df4 <HAL_DMA_Abort+0x214>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d072      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3a      	ldr	r2, [pc, #232]	; (8003df8 <HAL_DMA_Abort+0x218>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d06d      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a39      	ldr	r2, [pc, #228]	; (8003dfc <HAL_DMA_Abort+0x21c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d068      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a37      	ldr	r2, [pc, #220]	; (8003e00 <HAL_DMA_Abort+0x220>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d063      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a36      	ldr	r2, [pc, #216]	; (8003e04 <HAL_DMA_Abort+0x224>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d05e      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a34      	ldr	r2, [pc, #208]	; (8003e08 <HAL_DMA_Abort+0x228>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d059      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a33      	ldr	r2, [pc, #204]	; (8003e0c <HAL_DMA_Abort+0x22c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d054      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a31      	ldr	r2, [pc, #196]	; (8003e10 <HAL_DMA_Abort+0x230>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d04f      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a30      	ldr	r2, [pc, #192]	; (8003e14 <HAL_DMA_Abort+0x234>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d04a      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <HAL_DMA_Abort+0x238>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d045      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <HAL_DMA_Abort+0x23c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d040      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_DMA_Abort+0x240>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d03b      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <HAL_DMA_Abort+0x244>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d036      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_DMA_Abort+0x248>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d031      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <HAL_DMA_Abort+0x24c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d02c      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_DMA_Abort+0x250>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d027      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <HAL_DMA_Abort+0x254>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_DMA_Abort+0x258>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01d      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_DMA_Abort+0x25c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d018      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_DMA_Abort+0x260>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_DMA_Abort+0x264>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_DMA_Abort+0x268>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d009      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_DMA_Abort+0x26c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_DMA_Abort+0x20e>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_DMA_Abort+0x270>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d132      	bne.n	8003e54 <HAL_DMA_Abort+0x274>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e031      	b.n	8003e56 <HAL_DMA_Abort+0x276>
 8003df2:	bf00      	nop
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8
 8003e34:	58025408 	.word	0x58025408
 8003e38:	5802541c 	.word	0x5802541c
 8003e3c:	58025430 	.word	0x58025430
 8003e40:	58025444 	.word	0x58025444
 8003e44:	58025458 	.word	0x58025458
 8003e48:	5802546c 	.word	0x5802546c
 8003e4c:	58025480 	.word	0x58025480
 8003e50:	58025494 	.word	0x58025494
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e68:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6d      	ldr	r2, [pc, #436]	; (8004024 <HAL_DMA_Abort+0x444>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d04a      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6b      	ldr	r2, [pc, #428]	; (8004028 <HAL_DMA_Abort+0x448>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d045      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a6a      	ldr	r2, [pc, #424]	; (800402c <HAL_DMA_Abort+0x44c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d040      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a68      	ldr	r2, [pc, #416]	; (8004030 <HAL_DMA_Abort+0x450>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d03b      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a67      	ldr	r2, [pc, #412]	; (8004034 <HAL_DMA_Abort+0x454>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d036      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a65      	ldr	r2, [pc, #404]	; (8004038 <HAL_DMA_Abort+0x458>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d031      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a64      	ldr	r2, [pc, #400]	; (800403c <HAL_DMA_Abort+0x45c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d02c      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a62      	ldr	r2, [pc, #392]	; (8004040 <HAL_DMA_Abort+0x460>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d027      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a61      	ldr	r2, [pc, #388]	; (8004044 <HAL_DMA_Abort+0x464>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d022      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a5f      	ldr	r2, [pc, #380]	; (8004048 <HAL_DMA_Abort+0x468>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01d      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a5e      	ldr	r2, [pc, #376]	; (800404c <HAL_DMA_Abort+0x46c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d018      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5c      	ldr	r2, [pc, #368]	; (8004050 <HAL_DMA_Abort+0x470>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a5b      	ldr	r2, [pc, #364]	; (8004054 <HAL_DMA_Abort+0x474>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a59      	ldr	r2, [pc, #356]	; (8004058 <HAL_DMA_Abort+0x478>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_DMA_Abort+0x47c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_DMA_Abort+0x32a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a56      	ldr	r2, [pc, #344]	; (8004060 <HAL_DMA_Abort+0x480>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <HAL_DMA_Abort+0x33c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e007      	b.n	8003f2c <HAL_DMA_Abort+0x34c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f2c:	e013      	b.n	8003f56 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f2e:	f7ff fcfb 	bl	8003928 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d90c      	bls.n	8003f56 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2203      	movs	r2, #3
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e12d      	b.n	80041b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a2f      	ldr	r2, [pc, #188]	; (8004024 <HAL_DMA_Abort+0x444>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d04a      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2d      	ldr	r2, [pc, #180]	; (8004028 <HAL_DMA_Abort+0x448>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d045      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2c      	ldr	r2, [pc, #176]	; (800402c <HAL_DMA_Abort+0x44c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d040      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2a      	ldr	r2, [pc, #168]	; (8004030 <HAL_DMA_Abort+0x450>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d03b      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a29      	ldr	r2, [pc, #164]	; (8004034 <HAL_DMA_Abort+0x454>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d036      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a27      	ldr	r2, [pc, #156]	; (8004038 <HAL_DMA_Abort+0x458>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d031      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a26      	ldr	r2, [pc, #152]	; (800403c <HAL_DMA_Abort+0x45c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d02c      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a24      	ldr	r2, [pc, #144]	; (8004040 <HAL_DMA_Abort+0x460>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d027      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a23      	ldr	r2, [pc, #140]	; (8004044 <HAL_DMA_Abort+0x464>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d022      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a21      	ldr	r2, [pc, #132]	; (8004048 <HAL_DMA_Abort+0x468>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a20      	ldr	r2, [pc, #128]	; (800404c <HAL_DMA_Abort+0x46c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d018      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <HAL_DMA_Abort+0x470>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <HAL_DMA_Abort+0x474>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_DMA_Abort+0x478>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1a      	ldr	r2, [pc, #104]	; (800405c <HAL_DMA_Abort+0x47c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_DMA_Abort+0x422>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a18      	ldr	r2, [pc, #96]	; (8004060 <HAL_DMA_Abort+0x480>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d101      	bne.n	8004006 <HAL_DMA_Abort+0x426>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_DMA_Abort+0x428>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02b      	beq.n	8004064 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	223f      	movs	r2, #63	; 0x3f
 800401c:	409a      	lsls	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	e02a      	b.n	800407a <HAL_DMA_Abort+0x49a>
 8004024:	40020010 	.word	0x40020010
 8004028:	40020028 	.word	0x40020028
 800402c:	40020040 	.word	0x40020040
 8004030:	40020058 	.word	0x40020058
 8004034:	40020070 	.word	0x40020070
 8004038:	40020088 	.word	0x40020088
 800403c:	400200a0 	.word	0x400200a0
 8004040:	400200b8 	.word	0x400200b8
 8004044:	40020410 	.word	0x40020410
 8004048:	40020428 	.word	0x40020428
 800404c:	40020440 	.word	0x40020440
 8004050:	40020458 	.word	0x40020458
 8004054:	40020470 	.word	0x40020470
 8004058:	40020488 	.word	0x40020488
 800405c:	400204a0 	.word	0x400204a0
 8004060:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	2201      	movs	r2, #1
 8004074:	409a      	lsls	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a4f      	ldr	r2, [pc, #316]	; (80041bc <HAL_DMA_Abort+0x5dc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d072      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a4d      	ldr	r2, [pc, #308]	; (80041c0 <HAL_DMA_Abort+0x5e0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d06d      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a4c      	ldr	r2, [pc, #304]	; (80041c4 <HAL_DMA_Abort+0x5e4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d068      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a4a      	ldr	r2, [pc, #296]	; (80041c8 <HAL_DMA_Abort+0x5e8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d063      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a49      	ldr	r2, [pc, #292]	; (80041cc <HAL_DMA_Abort+0x5ec>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d05e      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a47      	ldr	r2, [pc, #284]	; (80041d0 <HAL_DMA_Abort+0x5f0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d059      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a46      	ldr	r2, [pc, #280]	; (80041d4 <HAL_DMA_Abort+0x5f4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d054      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a44      	ldr	r2, [pc, #272]	; (80041d8 <HAL_DMA_Abort+0x5f8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d04f      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a43      	ldr	r2, [pc, #268]	; (80041dc <HAL_DMA_Abort+0x5fc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04a      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a41      	ldr	r2, [pc, #260]	; (80041e0 <HAL_DMA_Abort+0x600>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d045      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a40      	ldr	r2, [pc, #256]	; (80041e4 <HAL_DMA_Abort+0x604>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d040      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3e      	ldr	r2, [pc, #248]	; (80041e8 <HAL_DMA_Abort+0x608>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d03b      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a3d      	ldr	r2, [pc, #244]	; (80041ec <HAL_DMA_Abort+0x60c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d036      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3b      	ldr	r2, [pc, #236]	; (80041f0 <HAL_DMA_Abort+0x610>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d031      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3a      	ldr	r2, [pc, #232]	; (80041f4 <HAL_DMA_Abort+0x614>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02c      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a38      	ldr	r2, [pc, #224]	; (80041f8 <HAL_DMA_Abort+0x618>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a37      	ldr	r2, [pc, #220]	; (80041fc <HAL_DMA_Abort+0x61c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a35      	ldr	r2, [pc, #212]	; (8004200 <HAL_DMA_Abort+0x620>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a34      	ldr	r2, [pc, #208]	; (8004204 <HAL_DMA_Abort+0x624>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a32      	ldr	r2, [pc, #200]	; (8004208 <HAL_DMA_Abort+0x628>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a31      	ldr	r2, [pc, #196]	; (800420c <HAL_DMA_Abort+0x62c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2f      	ldr	r2, [pc, #188]	; (8004210 <HAL_DMA_Abort+0x630>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2e      	ldr	r2, [pc, #184]	; (8004214 <HAL_DMA_Abort+0x634>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_DMA_Abort+0x58a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <HAL_DMA_Abort+0x638>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_DMA_Abort+0x58e>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_DMA_Abort+0x590>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d015      	beq.n	80041a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800417c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004194:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800419e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40020010 	.word	0x40020010
 80041c0:	40020028 	.word	0x40020028
 80041c4:	40020040 	.word	0x40020040
 80041c8:	40020058 	.word	0x40020058
 80041cc:	40020070 	.word	0x40020070
 80041d0:	40020088 	.word	0x40020088
 80041d4:	400200a0 	.word	0x400200a0
 80041d8:	400200b8 	.word	0x400200b8
 80041dc:	40020410 	.word	0x40020410
 80041e0:	40020428 	.word	0x40020428
 80041e4:	40020440 	.word	0x40020440
 80041e8:	40020458 	.word	0x40020458
 80041ec:	40020470 	.word	0x40020470
 80041f0:	40020488 	.word	0x40020488
 80041f4:	400204a0 	.word	0x400204a0
 80041f8:	400204b8 	.word	0x400204b8
 80041fc:	58025408 	.word	0x58025408
 8004200:	5802541c 	.word	0x5802541c
 8004204:	58025430 	.word	0x58025430
 8004208:	58025444 	.word	0x58025444
 800420c:	58025458 	.word	0x58025458
 8004210:	5802546c 	.word	0x5802546c
 8004214:	58025480 	.word	0x58025480
 8004218:	58025494 	.word	0x58025494

0800421c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e237      	b.n	800469e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d004      	beq.n	8004244 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e22c      	b.n	800469e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a5c      	ldr	r2, [pc, #368]	; (80043bc <HAL_DMA_Abort_IT+0x1a0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04a      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a5b      	ldr	r2, [pc, #364]	; (80043c0 <HAL_DMA_Abort_IT+0x1a4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d045      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a59      	ldr	r2, [pc, #356]	; (80043c4 <HAL_DMA_Abort_IT+0x1a8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d040      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_DMA_Abort_IT+0x1ac>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d03b      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a56      	ldr	r2, [pc, #344]	; (80043cc <HAL_DMA_Abort_IT+0x1b0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d036      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a55      	ldr	r2, [pc, #340]	; (80043d0 <HAL_DMA_Abort_IT+0x1b4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d031      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a53      	ldr	r2, [pc, #332]	; (80043d4 <HAL_DMA_Abort_IT+0x1b8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d02c      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <HAL_DMA_Abort_IT+0x1bc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d027      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a50      	ldr	r2, [pc, #320]	; (80043dc <HAL_DMA_Abort_IT+0x1c0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d022      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a4f      	ldr	r2, [pc, #316]	; (80043e0 <HAL_DMA_Abort_IT+0x1c4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d01d      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a4d      	ldr	r2, [pc, #308]	; (80043e4 <HAL_DMA_Abort_IT+0x1c8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d018      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a4c      	ldr	r2, [pc, #304]	; (80043e8 <HAL_DMA_Abort_IT+0x1cc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a4a      	ldr	r2, [pc, #296]	; (80043ec <HAL_DMA_Abort_IT+0x1d0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00e      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a49      	ldr	r2, [pc, #292]	; (80043f0 <HAL_DMA_Abort_IT+0x1d4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a47      	ldr	r2, [pc, #284]	; (80043f4 <HAL_DMA_Abort_IT+0x1d8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_DMA_Abort_IT+0xc8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a46      	ldr	r2, [pc, #280]	; (80043f8 <HAL_DMA_Abort_IT+0x1dc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_DMA_Abort_IT+0xcc>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_DMA_Abort_IT+0xce>
 80042e8:	2300      	movs	r3, #0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8086 	beq.w	80043fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2204      	movs	r2, #4
 80042f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2f      	ldr	r2, [pc, #188]	; (80043bc <HAL_DMA_Abort_IT+0x1a0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d04a      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2e      	ldr	r2, [pc, #184]	; (80043c0 <HAL_DMA_Abort_IT+0x1a4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d045      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <HAL_DMA_Abort_IT+0x1a8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d040      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2b      	ldr	r2, [pc, #172]	; (80043c8 <HAL_DMA_Abort_IT+0x1ac>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d03b      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a29      	ldr	r2, [pc, #164]	; (80043cc <HAL_DMA_Abort_IT+0x1b0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d036      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a28      	ldr	r2, [pc, #160]	; (80043d0 <HAL_DMA_Abort_IT+0x1b4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d031      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <HAL_DMA_Abort_IT+0x1b8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d02c      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a25      	ldr	r2, [pc, #148]	; (80043d8 <HAL_DMA_Abort_IT+0x1bc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d027      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a23      	ldr	r2, [pc, #140]	; (80043dc <HAL_DMA_Abort_IT+0x1c0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d022      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <HAL_DMA_Abort_IT+0x1c4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01d      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a20      	ldr	r2, [pc, #128]	; (80043e4 <HAL_DMA_Abort_IT+0x1c8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d018      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <HAL_DMA_Abort_IT+0x1cc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <HAL_DMA_Abort_IT+0x1d0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1c      	ldr	r2, [pc, #112]	; (80043f0 <HAL_DMA_Abort_IT+0x1d4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <HAL_DMA_Abort_IT+0x1d8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_DMA_Abort_IT+0x17c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a19      	ldr	r2, [pc, #100]	; (80043f8 <HAL_DMA_Abort_IT+0x1dc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d108      	bne.n	80043aa <HAL_DMA_Abort_IT+0x18e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e178      	b.n	800469c <HAL_DMA_Abort_IT+0x480>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e16f      	b.n	800469c <HAL_DMA_Abort_IT+0x480>
 80043bc:	40020010 	.word	0x40020010
 80043c0:	40020028 	.word	0x40020028
 80043c4:	40020040 	.word	0x40020040
 80043c8:	40020058 	.word	0x40020058
 80043cc:	40020070 	.word	0x40020070
 80043d0:	40020088 	.word	0x40020088
 80043d4:	400200a0 	.word	0x400200a0
 80043d8:	400200b8 	.word	0x400200b8
 80043dc:	40020410 	.word	0x40020410
 80043e0:	40020428 	.word	0x40020428
 80043e4:	40020440 	.word	0x40020440
 80043e8:	40020458 	.word	0x40020458
 80043ec:	40020470 	.word	0x40020470
 80043f0:	40020488 	.word	0x40020488
 80043f4:	400204a0 	.word	0x400204a0
 80043f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 020e 	bic.w	r2, r2, #14
 800440a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6c      	ldr	r2, [pc, #432]	; (80045c4 <HAL_DMA_Abort_IT+0x3a8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d04a      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6b      	ldr	r2, [pc, #428]	; (80045c8 <HAL_DMA_Abort_IT+0x3ac>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d045      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a69      	ldr	r2, [pc, #420]	; (80045cc <HAL_DMA_Abort_IT+0x3b0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d040      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a68      	ldr	r2, [pc, #416]	; (80045d0 <HAL_DMA_Abort_IT+0x3b4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d03b      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a66      	ldr	r2, [pc, #408]	; (80045d4 <HAL_DMA_Abort_IT+0x3b8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d036      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a65      	ldr	r2, [pc, #404]	; (80045d8 <HAL_DMA_Abort_IT+0x3bc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d031      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a63      	ldr	r2, [pc, #396]	; (80045dc <HAL_DMA_Abort_IT+0x3c0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d02c      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a62      	ldr	r2, [pc, #392]	; (80045e0 <HAL_DMA_Abort_IT+0x3c4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d027      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a60      	ldr	r2, [pc, #384]	; (80045e4 <HAL_DMA_Abort_IT+0x3c8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d022      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a5f      	ldr	r2, [pc, #380]	; (80045e8 <HAL_DMA_Abort_IT+0x3cc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d01d      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a5d      	ldr	r2, [pc, #372]	; (80045ec <HAL_DMA_Abort_IT+0x3d0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d018      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a5c      	ldr	r2, [pc, #368]	; (80045f0 <HAL_DMA_Abort_IT+0x3d4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d013      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a5a      	ldr	r2, [pc, #360]	; (80045f4 <HAL_DMA_Abort_IT+0x3d8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00e      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a59      	ldr	r2, [pc, #356]	; (80045f8 <HAL_DMA_Abort_IT+0x3dc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a57      	ldr	r2, [pc, #348]	; (80045fc <HAL_DMA_Abort_IT+0x3e0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_DMA_Abort_IT+0x290>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a56      	ldr	r2, [pc, #344]	; (8004600 <HAL_DMA_Abort_IT+0x3e4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <HAL_DMA_Abort_IT+0x2a2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e007      	b.n	80044ce <HAL_DMA_Abort_IT+0x2b2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <HAL_DMA_Abort_IT+0x3a8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d072      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a3a      	ldr	r2, [pc, #232]	; (80045c8 <HAL_DMA_Abort_IT+0x3ac>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d06d      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a39      	ldr	r2, [pc, #228]	; (80045cc <HAL_DMA_Abort_IT+0x3b0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d068      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a37      	ldr	r2, [pc, #220]	; (80045d0 <HAL_DMA_Abort_IT+0x3b4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d063      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a36      	ldr	r2, [pc, #216]	; (80045d4 <HAL_DMA_Abort_IT+0x3b8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d05e      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a34      	ldr	r2, [pc, #208]	; (80045d8 <HAL_DMA_Abort_IT+0x3bc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d059      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a33      	ldr	r2, [pc, #204]	; (80045dc <HAL_DMA_Abort_IT+0x3c0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d054      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a31      	ldr	r2, [pc, #196]	; (80045e0 <HAL_DMA_Abort_IT+0x3c4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d04f      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a30      	ldr	r2, [pc, #192]	; (80045e4 <HAL_DMA_Abort_IT+0x3c8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d04a      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2e      	ldr	r2, [pc, #184]	; (80045e8 <HAL_DMA_Abort_IT+0x3cc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d045      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2d      	ldr	r2, [pc, #180]	; (80045ec <HAL_DMA_Abort_IT+0x3d0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d040      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2b      	ldr	r2, [pc, #172]	; (80045f0 <HAL_DMA_Abort_IT+0x3d4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d03b      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <HAL_DMA_Abort_IT+0x3d8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d036      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <HAL_DMA_Abort_IT+0x3dc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d031      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a27      	ldr	r2, [pc, #156]	; (80045fc <HAL_DMA_Abort_IT+0x3e0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d02c      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a25      	ldr	r2, [pc, #148]	; (8004600 <HAL_DMA_Abort_IT+0x3e4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d027      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a24      	ldr	r2, [pc, #144]	; (8004604 <HAL_DMA_Abort_IT+0x3e8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d022      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a22      	ldr	r2, [pc, #136]	; (8004608 <HAL_DMA_Abort_IT+0x3ec>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01d      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a21      	ldr	r2, [pc, #132]	; (800460c <HAL_DMA_Abort_IT+0x3f0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d018      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_DMA_Abort_IT+0x3f4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <HAL_DMA_Abort_IT+0x3f8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00e      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <HAL_DMA_Abort_IT+0x3fc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1b      	ldr	r2, [pc, #108]	; (800461c <HAL_DMA_Abort_IT+0x400>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_DMA_Abort_IT+0x3a2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <HAL_DMA_Abort_IT+0x404>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d132      	bne.n	8004624 <HAL_DMA_Abort_IT+0x408>
 80045be:	2301      	movs	r3, #1
 80045c0:	e031      	b.n	8004626 <HAL_DMA_Abort_IT+0x40a>
 80045c2:	bf00      	nop
 80045c4:	40020010 	.word	0x40020010
 80045c8:	40020028 	.word	0x40020028
 80045cc:	40020040 	.word	0x40020040
 80045d0:	40020058 	.word	0x40020058
 80045d4:	40020070 	.word	0x40020070
 80045d8:	40020088 	.word	0x40020088
 80045dc:	400200a0 	.word	0x400200a0
 80045e0:	400200b8 	.word	0x400200b8
 80045e4:	40020410 	.word	0x40020410
 80045e8:	40020428 	.word	0x40020428
 80045ec:	40020440 	.word	0x40020440
 80045f0:	40020458 	.word	0x40020458
 80045f4:	40020470 	.word	0x40020470
 80045f8:	40020488 	.word	0x40020488
 80045fc:	400204a0 	.word	0x400204a0
 8004600:	400204b8 	.word	0x400204b8
 8004604:	58025408 	.word	0x58025408
 8004608:	5802541c 	.word	0x5802541c
 800460c:	58025430 	.word	0x58025430
 8004610:	58025444 	.word	0x58025444
 8004614:	58025458 	.word	0x58025458
 8004618:	5802546c 	.word	0x5802546c
 800461c:	58025480 	.word	0x58025480
 8004620:	58025494 	.word	0x58025494
 8004624:	2300      	movs	r3, #0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d028      	beq.n	800467c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004638:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2201      	movs	r2, #1
 800464a:	409a      	lsls	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004658:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004670:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800467a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop

080046a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046b4:	4b67      	ldr	r3, [pc, #412]	; (8004854 <HAL_DMA_IRQHandler+0x1ac>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a67      	ldr	r2, [pc, #412]	; (8004858 <HAL_DMA_IRQHandler+0x1b0>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	0a9b      	lsrs	r3, r3, #10
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5f      	ldr	r2, [pc, #380]	; (800485c <HAL_DMA_IRQHandler+0x1b4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d04a      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5d      	ldr	r2, [pc, #372]	; (8004860 <HAL_DMA_IRQHandler+0x1b8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d045      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5c      	ldr	r2, [pc, #368]	; (8004864 <HAL_DMA_IRQHandler+0x1bc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d040      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5a      	ldr	r2, [pc, #360]	; (8004868 <HAL_DMA_IRQHandler+0x1c0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d03b      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a59      	ldr	r2, [pc, #356]	; (800486c <HAL_DMA_IRQHandler+0x1c4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d036      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a57      	ldr	r2, [pc, #348]	; (8004870 <HAL_DMA_IRQHandler+0x1c8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d031      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a56      	ldr	r2, [pc, #344]	; (8004874 <HAL_DMA_IRQHandler+0x1cc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d02c      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a54      	ldr	r2, [pc, #336]	; (8004878 <HAL_DMA_IRQHandler+0x1d0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d027      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a53      	ldr	r2, [pc, #332]	; (800487c <HAL_DMA_IRQHandler+0x1d4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d022      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a51      	ldr	r2, [pc, #324]	; (8004880 <HAL_DMA_IRQHandler+0x1d8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01d      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a50      	ldr	r2, [pc, #320]	; (8004884 <HAL_DMA_IRQHandler+0x1dc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d018      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a4e      	ldr	r2, [pc, #312]	; (8004888 <HAL_DMA_IRQHandler+0x1e0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4d      	ldr	r2, [pc, #308]	; (800488c <HAL_DMA_IRQHandler+0x1e4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00e      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a4b      	ldr	r2, [pc, #300]	; (8004890 <HAL_DMA_IRQHandler+0x1e8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a4a      	ldr	r2, [pc, #296]	; (8004894 <HAL_DMA_IRQHandler+0x1ec>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_DMA_IRQHandler+0xd2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a48      	ldr	r2, [pc, #288]	; (8004898 <HAL_DMA_IRQHandler+0x1f0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d101      	bne.n	800477e <HAL_DMA_IRQHandler+0xd6>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <HAL_DMA_IRQHandler+0xd8>
 800477e:	2300      	movs	r3, #0
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 842b 	beq.w	8004fdc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2208      	movs	r2, #8
 8004790:	409a      	lsls	r2, r3
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80a2 	beq.w	80048e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2e      	ldr	r2, [pc, #184]	; (800485c <HAL_DMA_IRQHandler+0x1b4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d04a      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2d      	ldr	r2, [pc, #180]	; (8004860 <HAL_DMA_IRQHandler+0x1b8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d045      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <HAL_DMA_IRQHandler+0x1bc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d040      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <HAL_DMA_IRQHandler+0x1c0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d03b      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a28      	ldr	r2, [pc, #160]	; (800486c <HAL_DMA_IRQHandler+0x1c4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d036      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a27      	ldr	r2, [pc, #156]	; (8004870 <HAL_DMA_IRQHandler+0x1c8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d031      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a25      	ldr	r2, [pc, #148]	; (8004874 <HAL_DMA_IRQHandler+0x1cc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d02c      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a24      	ldr	r2, [pc, #144]	; (8004878 <HAL_DMA_IRQHandler+0x1d0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d027      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a22      	ldr	r2, [pc, #136]	; (800487c <HAL_DMA_IRQHandler+0x1d4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a21      	ldr	r2, [pc, #132]	; (8004880 <HAL_DMA_IRQHandler+0x1d8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d01d      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <HAL_DMA_IRQHandler+0x1dc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <HAL_DMA_IRQHandler+0x1e0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1c      	ldr	r2, [pc, #112]	; (800488c <HAL_DMA_IRQHandler+0x1e4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <HAL_DMA_IRQHandler+0x1e8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a19      	ldr	r2, [pc, #100]	; (8004894 <HAL_DMA_IRQHandler+0x1ec>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_DMA_IRQHandler+0x194>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_DMA_IRQHandler+0x1f0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d12f      	bne.n	800489c <HAL_DMA_IRQHandler+0x1f4>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	e02e      	b.n	80048b0 <HAL_DMA_IRQHandler+0x208>
 8004852:	bf00      	nop
 8004854:	2400000c 	.word	0x2400000c
 8004858:	1b4e81b5 	.word	0x1b4e81b5
 800485c:	40020010 	.word	0x40020010
 8004860:	40020028 	.word	0x40020028
 8004864:	40020040 	.word	0x40020040
 8004868:	40020058 	.word	0x40020058
 800486c:	40020070 	.word	0x40020070
 8004870:	40020088 	.word	0x40020088
 8004874:	400200a0 	.word	0x400200a0
 8004878:	400200b8 	.word	0x400200b8
 800487c:	40020410 	.word	0x40020410
 8004880:	40020428 	.word	0x40020428
 8004884:	40020440 	.word	0x40020440
 8004888:	40020458 	.word	0x40020458
 800488c:	40020470 	.word	0x40020470
 8004890:	40020488 	.word	0x40020488
 8004894:	400204a0 	.word	0x400204a0
 8004898:	400204b8 	.word	0x400204b8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d015      	beq.n	80048e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0204 	bic.w	r2, r2, #4
 80048c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	2208      	movs	r2, #8
 80048ce:	409a      	lsls	r2, r3
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	fa22 f303 	lsr.w	r3, r2, r3
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d06e      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a69      	ldr	r2, [pc, #420]	; (8004aa0 <HAL_DMA_IRQHandler+0x3f8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d04a      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a67      	ldr	r2, [pc, #412]	; (8004aa4 <HAL_DMA_IRQHandler+0x3fc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d045      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a66      	ldr	r2, [pc, #408]	; (8004aa8 <HAL_DMA_IRQHandler+0x400>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d040      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a64      	ldr	r2, [pc, #400]	; (8004aac <HAL_DMA_IRQHandler+0x404>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d03b      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <HAL_DMA_IRQHandler+0x408>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d036      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a61      	ldr	r2, [pc, #388]	; (8004ab4 <HAL_DMA_IRQHandler+0x40c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d031      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a60      	ldr	r2, [pc, #384]	; (8004ab8 <HAL_DMA_IRQHandler+0x410>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d02c      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a5e      	ldr	r2, [pc, #376]	; (8004abc <HAL_DMA_IRQHandler+0x414>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d027      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a5d      	ldr	r2, [pc, #372]	; (8004ac0 <HAL_DMA_IRQHandler+0x418>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a5b      	ldr	r2, [pc, #364]	; (8004ac4 <HAL_DMA_IRQHandler+0x41c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01d      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a5a      	ldr	r2, [pc, #360]	; (8004ac8 <HAL_DMA_IRQHandler+0x420>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a58      	ldr	r2, [pc, #352]	; (8004acc <HAL_DMA_IRQHandler+0x424>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a57      	ldr	r2, [pc, #348]	; (8004ad0 <HAL_DMA_IRQHandler+0x428>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a55      	ldr	r2, [pc, #340]	; (8004ad4 <HAL_DMA_IRQHandler+0x42c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a54      	ldr	r2, [pc, #336]	; (8004ad8 <HAL_DMA_IRQHandler+0x430>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_DMA_IRQHandler+0x2ee>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a52      	ldr	r2, [pc, #328]	; (8004adc <HAL_DMA_IRQHandler+0x434>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10a      	bne.n	80049ac <HAL_DMA_IRQHandler+0x304>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e003      	b.n	80049b4 <HAL_DMA_IRQHandler+0x30c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00d      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	2201      	movs	r2, #1
 80049c2:	409a      	lsls	r2, r3
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	f043 0202 	orr.w	r2, r3, #2
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	2204      	movs	r2, #4
 80049de:	409a      	lsls	r2, r3
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 808f 	beq.w	8004b08 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <HAL_DMA_IRQHandler+0x3f8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d04a      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a2a      	ldr	r2, [pc, #168]	; (8004aa4 <HAL_DMA_IRQHandler+0x3fc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d045      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a29      	ldr	r2, [pc, #164]	; (8004aa8 <HAL_DMA_IRQHandler+0x400>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d040      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a27      	ldr	r2, [pc, #156]	; (8004aac <HAL_DMA_IRQHandler+0x404>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d03b      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <HAL_DMA_IRQHandler+0x408>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d036      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <HAL_DMA_IRQHandler+0x40c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d031      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a23      	ldr	r2, [pc, #140]	; (8004ab8 <HAL_DMA_IRQHandler+0x410>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d02c      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a21      	ldr	r2, [pc, #132]	; (8004abc <HAL_DMA_IRQHandler+0x414>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d027      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <HAL_DMA_IRQHandler+0x418>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <HAL_DMA_IRQHandler+0x41c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01d      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <HAL_DMA_IRQHandler+0x420>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <HAL_DMA_IRQHandler+0x424>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <HAL_DMA_IRQHandler+0x428>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_DMA_IRQHandler+0x42c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <HAL_DMA_IRQHandler+0x430>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_DMA_IRQHandler+0x3e2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a15      	ldr	r2, [pc, #84]	; (8004adc <HAL_DMA_IRQHandler+0x434>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d12a      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0x438>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	e023      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x440>
 8004aa0:	40020010 	.word	0x40020010
 8004aa4:	40020028 	.word	0x40020028
 8004aa8:	40020040 	.word	0x40020040
 8004aac:	40020058 	.word	0x40020058
 8004ab0:	40020070 	.word	0x40020070
 8004ab4:	40020088 	.word	0x40020088
 8004ab8:	400200a0 	.word	0x400200a0
 8004abc:	400200b8 	.word	0x400200b8
 8004ac0:	40020410 	.word	0x40020410
 8004ac4:	40020428 	.word	0x40020428
 8004ac8:	40020440 	.word	0x40020440
 8004acc:	40020458 	.word	0x40020458
 8004ad0:	40020470 	.word	0x40020470
 8004ad4:	40020488 	.word	0x40020488
 8004ad8:	400204a0 	.word	0x400204a0
 8004adc:	400204b8 	.word	0x400204b8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	2204      	movs	r2, #4
 8004af6:	409a      	lsls	r2, r3
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	f043 0204 	orr.w	r2, r3, #4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	2210      	movs	r2, #16
 8004b12:	409a      	lsls	r2, r3
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80a6 	beq.w	8004c6a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a85      	ldr	r2, [pc, #532]	; (8004d38 <HAL_DMA_IRQHandler+0x690>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d04a      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a83      	ldr	r2, [pc, #524]	; (8004d3c <HAL_DMA_IRQHandler+0x694>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d045      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a82      	ldr	r2, [pc, #520]	; (8004d40 <HAL_DMA_IRQHandler+0x698>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d040      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a80      	ldr	r2, [pc, #512]	; (8004d44 <HAL_DMA_IRQHandler+0x69c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d03b      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a7f      	ldr	r2, [pc, #508]	; (8004d48 <HAL_DMA_IRQHandler+0x6a0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d036      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a7d      	ldr	r2, [pc, #500]	; (8004d4c <HAL_DMA_IRQHandler+0x6a4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d031      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7c      	ldr	r2, [pc, #496]	; (8004d50 <HAL_DMA_IRQHandler+0x6a8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d02c      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a7a      	ldr	r2, [pc, #488]	; (8004d54 <HAL_DMA_IRQHandler+0x6ac>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d027      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a79      	ldr	r2, [pc, #484]	; (8004d58 <HAL_DMA_IRQHandler+0x6b0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a77      	ldr	r2, [pc, #476]	; (8004d5c <HAL_DMA_IRQHandler+0x6b4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a76      	ldr	r2, [pc, #472]	; (8004d60 <HAL_DMA_IRQHandler+0x6b8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a74      	ldr	r2, [pc, #464]	; (8004d64 <HAL_DMA_IRQHandler+0x6bc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a73      	ldr	r2, [pc, #460]	; (8004d68 <HAL_DMA_IRQHandler+0x6c0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a71      	ldr	r2, [pc, #452]	; (8004d6c <HAL_DMA_IRQHandler+0x6c4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a70      	ldr	r2, [pc, #448]	; (8004d70 <HAL_DMA_IRQHandler+0x6c8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x516>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a6e      	ldr	r2, [pc, #440]	; (8004d74 <HAL_DMA_IRQHandler+0x6cc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d10a      	bne.n	8004bd4 <HAL_DMA_IRQHandler+0x52c>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e009      	b.n	8004be8 <HAL_DMA_IRQHandler+0x540>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf14      	ite	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	2300      	moveq	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d03e      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d024      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	4798      	blx	r3
 8004c28:	e01f      	b.n	8004c6a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01b      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4798      	blx	r3
 8004c3a:	e016      	b.n	8004c6a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d107      	bne.n	8004c5a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0208 	bic.w	r2, r2, #8
 8004c58:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	2220      	movs	r2, #32
 8004c74:	409a      	lsls	r2, r3
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8110 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <HAL_DMA_IRQHandler+0x690>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d04a      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a2b      	ldr	r2, [pc, #172]	; (8004d3c <HAL_DMA_IRQHandler+0x694>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d045      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a29      	ldr	r2, [pc, #164]	; (8004d40 <HAL_DMA_IRQHandler+0x698>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d040      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a28      	ldr	r2, [pc, #160]	; (8004d44 <HAL_DMA_IRQHandler+0x69c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d03b      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <HAL_DMA_IRQHandler+0x6a0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d036      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <HAL_DMA_IRQHandler+0x6a4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d031      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a23      	ldr	r2, [pc, #140]	; (8004d50 <HAL_DMA_IRQHandler+0x6a8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d02c      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <HAL_DMA_IRQHandler+0x6ac>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d027      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a20      	ldr	r2, [pc, #128]	; (8004d58 <HAL_DMA_IRQHandler+0x6b0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d022      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <HAL_DMA_IRQHandler+0x6b4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d01d      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <HAL_DMA_IRQHandler+0x6b8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d018      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_DMA_IRQHandler+0x6bc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d013      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1a      	ldr	r2, [pc, #104]	; (8004d68 <HAL_DMA_IRQHandler+0x6c0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00e      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <HAL_DMA_IRQHandler+0x6c4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d009      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <HAL_DMA_IRQHandler+0x6c8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x678>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <HAL_DMA_IRQHandler+0x6cc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d12b      	bne.n	8004d78 <HAL_DMA_IRQHandler+0x6d0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bf14      	ite	ne
 8004d2e:	2301      	movne	r3, #1
 8004d30:	2300      	moveq	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e02a      	b.n	8004d8c <HAL_DMA_IRQHandler+0x6e4>
 8004d36:	bf00      	nop
 8004d38:	40020010 	.word	0x40020010
 8004d3c:	40020028 	.word	0x40020028
 8004d40:	40020040 	.word	0x40020040
 8004d44:	40020058 	.word	0x40020058
 8004d48:	40020070 	.word	0x40020070
 8004d4c:	40020088 	.word	0x40020088
 8004d50:	400200a0 	.word	0x400200a0
 8004d54:	400200b8 	.word	0x400200b8
 8004d58:	40020410 	.word	0x40020410
 8004d5c:	40020428 	.word	0x40020428
 8004d60:	40020440 	.word	0x40020440
 8004d64:	40020458 	.word	0x40020458
 8004d68:	40020470 	.word	0x40020470
 8004d6c:	40020488 	.word	0x40020488
 8004d70:	400204a0 	.word	0x400204a0
 8004d74:	400204b8 	.word	0x400204b8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8087 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d139      	bne.n	8004e22 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0216 	bic.w	r2, r2, #22
 8004dbc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dcc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <HAL_DMA_IRQHandler+0x736>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0208 	bic.w	r2, r2, #8
 8004dec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	223f      	movs	r2, #63	; 0x3f
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 834a 	beq.w	80054ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
          }
          return;
 8004e20:	e344      	b.n	80054ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d018      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d02c      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
 8004e4e:	e027      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d023      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
 8004e60:	e01e      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10f      	bne.n	8004e90 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0210 	bic.w	r2, r2, #16
 8004e7e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8306 	beq.w	80054b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 8088 	beq.w	8004fc8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2204      	movs	r2, #4
 8004ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a7a      	ldr	r2, [pc, #488]	; (80050b0 <HAL_DMA_IRQHandler+0xa08>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d04a      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a79      	ldr	r2, [pc, #484]	; (80050b4 <HAL_DMA_IRQHandler+0xa0c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d045      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a77      	ldr	r2, [pc, #476]	; (80050b8 <HAL_DMA_IRQHandler+0xa10>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d040      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a76      	ldr	r2, [pc, #472]	; (80050bc <HAL_DMA_IRQHandler+0xa14>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d03b      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a74      	ldr	r2, [pc, #464]	; (80050c0 <HAL_DMA_IRQHandler+0xa18>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d036      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a73      	ldr	r2, [pc, #460]	; (80050c4 <HAL_DMA_IRQHandler+0xa1c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d031      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a71      	ldr	r2, [pc, #452]	; (80050c8 <HAL_DMA_IRQHandler+0xa20>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02c      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a70      	ldr	r2, [pc, #448]	; (80050cc <HAL_DMA_IRQHandler+0xa24>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d027      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a6e      	ldr	r2, [pc, #440]	; (80050d0 <HAL_DMA_IRQHandler+0xa28>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d022      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6d      	ldr	r2, [pc, #436]	; (80050d4 <HAL_DMA_IRQHandler+0xa2c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d01d      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a6b      	ldr	r2, [pc, #428]	; (80050d8 <HAL_DMA_IRQHandler+0xa30>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d018      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a6a      	ldr	r2, [pc, #424]	; (80050dc <HAL_DMA_IRQHandler+0xa34>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d013      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a68      	ldr	r2, [pc, #416]	; (80050e0 <HAL_DMA_IRQHandler+0xa38>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00e      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a67      	ldr	r2, [pc, #412]	; (80050e4 <HAL_DMA_IRQHandler+0xa3c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a65      	ldr	r2, [pc, #404]	; (80050e8 <HAL_DMA_IRQHandler+0xa40>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x8b8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a64      	ldr	r2, [pc, #400]	; (80050ec <HAL_DMA_IRQHandler+0xa44>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d108      	bne.n	8004f72 <HAL_DMA_IRQHandler+0x8ca>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e007      	b.n	8004f82 <HAL_DMA_IRQHandler+0x8da>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3301      	adds	r3, #1
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d307      	bcc.n	8004f9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1f2      	bne.n	8004f82 <HAL_DMA_IRQHandler+0x8da>
 8004f9c:	e000      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004f9e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004fb6:	e003      	b.n	8004fc0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8272 	beq.w	80054b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4798      	blx	r3
 8004fda:	e26c      	b.n	80054b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a43      	ldr	r2, [pc, #268]	; (80050f0 <HAL_DMA_IRQHandler+0xa48>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d022      	beq.n	800502c <HAL_DMA_IRQHandler+0x984>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a42      	ldr	r2, [pc, #264]	; (80050f4 <HAL_DMA_IRQHandler+0xa4c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d01d      	beq.n	800502c <HAL_DMA_IRQHandler+0x984>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a40      	ldr	r2, [pc, #256]	; (80050f8 <HAL_DMA_IRQHandler+0xa50>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_DMA_IRQHandler+0x984>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a3f      	ldr	r2, [pc, #252]	; (80050fc <HAL_DMA_IRQHandler+0xa54>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_DMA_IRQHandler+0x984>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a3d      	ldr	r2, [pc, #244]	; (8005100 <HAL_DMA_IRQHandler+0xa58>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_DMA_IRQHandler+0x984>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a3c      	ldr	r2, [pc, #240]	; (8005104 <HAL_DMA_IRQHandler+0xa5c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_DMA_IRQHandler+0x984>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a3a      	ldr	r2, [pc, #232]	; (8005108 <HAL_DMA_IRQHandler+0xa60>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_DMA_IRQHandler+0x984>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a39      	ldr	r2, [pc, #228]	; (800510c <HAL_DMA_IRQHandler+0xa64>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_DMA_IRQHandler+0x988>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_DMA_IRQHandler+0x98a>
 8005030:	2300      	movs	r3, #0
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 823f 	beq.w	80054b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	2204      	movs	r2, #4
 800504a:	409a      	lsls	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80cd 	beq.w	80051f0 <HAL_DMA_IRQHandler+0xb48>
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80c7 	beq.w	80051f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2204      	movs	r2, #4
 800506c:	409a      	lsls	r2, r3
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d049      	beq.n	8005110 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8210 	beq.w	80054b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005098:	e20a      	b.n	80054b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8206 	beq.w	80054b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050ac:	e200      	b.n	80054b0 <HAL_DMA_IRQHandler+0xe08>
 80050ae:	bf00      	nop
 80050b0:	40020010 	.word	0x40020010
 80050b4:	40020028 	.word	0x40020028
 80050b8:	40020040 	.word	0x40020040
 80050bc:	40020058 	.word	0x40020058
 80050c0:	40020070 	.word	0x40020070
 80050c4:	40020088 	.word	0x40020088
 80050c8:	400200a0 	.word	0x400200a0
 80050cc:	400200b8 	.word	0x400200b8
 80050d0:	40020410 	.word	0x40020410
 80050d4:	40020428 	.word	0x40020428
 80050d8:	40020440 	.word	0x40020440
 80050dc:	40020458 	.word	0x40020458
 80050e0:	40020470 	.word	0x40020470
 80050e4:	40020488 	.word	0x40020488
 80050e8:	400204a0 	.word	0x400204a0
 80050ec:	400204b8 	.word	0x400204b8
 80050f0:	58025408 	.word	0x58025408
 80050f4:	5802541c 	.word	0x5802541c
 80050f8:	58025430 	.word	0x58025430
 80050fc:	58025444 	.word	0x58025444
 8005100:	58025458 	.word	0x58025458
 8005104:	5802546c 	.word	0x5802546c
 8005108:	58025480 	.word	0x58025480
 800510c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d160      	bne.n	80051dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a7f      	ldr	r2, [pc, #508]	; (800531c <HAL_DMA_IRQHandler+0xc74>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d04a      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a7d      	ldr	r2, [pc, #500]	; (8005320 <HAL_DMA_IRQHandler+0xc78>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d045      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a7c      	ldr	r2, [pc, #496]	; (8005324 <HAL_DMA_IRQHandler+0xc7c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d040      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a7a      	ldr	r2, [pc, #488]	; (8005328 <HAL_DMA_IRQHandler+0xc80>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d03b      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a79      	ldr	r2, [pc, #484]	; (800532c <HAL_DMA_IRQHandler+0xc84>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d036      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a77      	ldr	r2, [pc, #476]	; (8005330 <HAL_DMA_IRQHandler+0xc88>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d031      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a76      	ldr	r2, [pc, #472]	; (8005334 <HAL_DMA_IRQHandler+0xc8c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d02c      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a74      	ldr	r2, [pc, #464]	; (8005338 <HAL_DMA_IRQHandler+0xc90>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d027      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a73      	ldr	r2, [pc, #460]	; (800533c <HAL_DMA_IRQHandler+0xc94>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a71      	ldr	r2, [pc, #452]	; (8005340 <HAL_DMA_IRQHandler+0xc98>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a70      	ldr	r2, [pc, #448]	; (8005344 <HAL_DMA_IRQHandler+0xc9c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a6e      	ldr	r2, [pc, #440]	; (8005348 <HAL_DMA_IRQHandler+0xca0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a6d      	ldr	r2, [pc, #436]	; (800534c <HAL_DMA_IRQHandler+0xca4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a6b      	ldr	r2, [pc, #428]	; (8005350 <HAL_DMA_IRQHandler+0xca8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a6a      	ldr	r2, [pc, #424]	; (8005354 <HAL_DMA_IRQHandler+0xcac>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_DMA_IRQHandler+0xb12>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a68      	ldr	r2, [pc, #416]	; (8005358 <HAL_DMA_IRQHandler+0xcb0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <HAL_DMA_IRQHandler+0xb24>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0208 	bic.w	r2, r2, #8
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e007      	b.n	80051dc <HAL_DMA_IRQHandler+0xb34>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0204 	bic.w	r2, r2, #4
 80051da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8165 	beq.w	80054b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051ee:	e15f      	b.n	80054b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	2202      	movs	r2, #2
 80051fa:	409a      	lsls	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80c5 	beq.w	8005390 <HAL_DMA_IRQHandler+0xce8>
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80bf 	beq.w	8005390 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	2202      	movs	r2, #2
 800521c:	409a      	lsls	r2, r3
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d018      	beq.n	800525e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 813a 	beq.w	80054b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005248:	e134      	b.n	80054b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8130 	beq.w	80054b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800525c:	e12a      	b.n	80054b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 8089 	bne.w	800537c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2b      	ldr	r2, [pc, #172]	; (800531c <HAL_DMA_IRQHandler+0xc74>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d04a      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a29      	ldr	r2, [pc, #164]	; (8005320 <HAL_DMA_IRQHandler+0xc78>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d045      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a28      	ldr	r2, [pc, #160]	; (8005324 <HAL_DMA_IRQHandler+0xc7c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d040      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a26      	ldr	r2, [pc, #152]	; (8005328 <HAL_DMA_IRQHandler+0xc80>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d03b      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a25      	ldr	r2, [pc, #148]	; (800532c <HAL_DMA_IRQHandler+0xc84>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d036      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a23      	ldr	r2, [pc, #140]	; (8005330 <HAL_DMA_IRQHandler+0xc88>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d031      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a22      	ldr	r2, [pc, #136]	; (8005334 <HAL_DMA_IRQHandler+0xc8c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d02c      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a20      	ldr	r2, [pc, #128]	; (8005338 <HAL_DMA_IRQHandler+0xc90>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d027      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1f      	ldr	r2, [pc, #124]	; (800533c <HAL_DMA_IRQHandler+0xc94>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d022      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <HAL_DMA_IRQHandler+0xc98>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <HAL_DMA_IRQHandler+0xc9c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1a      	ldr	r2, [pc, #104]	; (8005348 <HAL_DMA_IRQHandler+0xca0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a19      	ldr	r2, [pc, #100]	; (800534c <HAL_DMA_IRQHandler+0xca4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a17      	ldr	r2, [pc, #92]	; (8005350 <HAL_DMA_IRQHandler+0xca8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a16      	ldr	r2, [pc, #88]	; (8005354 <HAL_DMA_IRQHandler+0xcac>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_DMA_IRQHandler+0xc62>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <HAL_DMA_IRQHandler+0xcb0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d128      	bne.n	800535c <HAL_DMA_IRQHandler+0xcb4>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0214 	bic.w	r2, r2, #20
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e027      	b.n	800536c <HAL_DMA_IRQHandler+0xcc4>
 800531c:	40020010 	.word	0x40020010
 8005320:	40020028 	.word	0x40020028
 8005324:	40020040 	.word	0x40020040
 8005328:	40020058 	.word	0x40020058
 800532c:	40020070 	.word	0x40020070
 8005330:	40020088 	.word	0x40020088
 8005334:	400200a0 	.word	0x400200a0
 8005338:	400200b8 	.word	0x400200b8
 800533c:	40020410 	.word	0x40020410
 8005340:	40020428 	.word	0x40020428
 8005344:	40020440 	.word	0x40020440
 8005348:	40020458 	.word	0x40020458
 800534c:	40020470 	.word	0x40020470
 8005350:	40020488 	.word	0x40020488
 8005354:	400204a0 	.word	0x400204a0
 8005358:	400204b8 	.word	0x400204b8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 020a 	bic.w	r2, r2, #10
 800536a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8097 	beq.w	80054b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800538e:	e091      	b.n	80054b4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	2208      	movs	r2, #8
 800539a:	409a      	lsls	r2, r3
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8088 	beq.w	80054b6 <HAL_DMA_IRQHandler+0xe0e>
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8082 	beq.w	80054b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a41      	ldr	r2, [pc, #260]	; (80054bc <HAL_DMA_IRQHandler+0xe14>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d04a      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a3f      	ldr	r2, [pc, #252]	; (80054c0 <HAL_DMA_IRQHandler+0xe18>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d045      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3e      	ldr	r2, [pc, #248]	; (80054c4 <HAL_DMA_IRQHandler+0xe1c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d040      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a3c      	ldr	r2, [pc, #240]	; (80054c8 <HAL_DMA_IRQHandler+0xe20>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d03b      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a3b      	ldr	r2, [pc, #236]	; (80054cc <HAL_DMA_IRQHandler+0xe24>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d036      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a39      	ldr	r2, [pc, #228]	; (80054d0 <HAL_DMA_IRQHandler+0xe28>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d031      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a38      	ldr	r2, [pc, #224]	; (80054d4 <HAL_DMA_IRQHandler+0xe2c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d02c      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a36      	ldr	r2, [pc, #216]	; (80054d8 <HAL_DMA_IRQHandler+0xe30>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d027      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a35      	ldr	r2, [pc, #212]	; (80054dc <HAL_DMA_IRQHandler+0xe34>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a33      	ldr	r2, [pc, #204]	; (80054e0 <HAL_DMA_IRQHandler+0xe38>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a32      	ldr	r2, [pc, #200]	; (80054e4 <HAL_DMA_IRQHandler+0xe3c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a30      	ldr	r2, [pc, #192]	; (80054e8 <HAL_DMA_IRQHandler+0xe40>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a2f      	ldr	r2, [pc, #188]	; (80054ec <HAL_DMA_IRQHandler+0xe44>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2d      	ldr	r2, [pc, #180]	; (80054f0 <HAL_DMA_IRQHandler+0xe48>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2c      	ldr	r2, [pc, #176]	; (80054f4 <HAL_DMA_IRQHandler+0xe4c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_DMA_IRQHandler+0xdaa>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2a      	ldr	r2, [pc, #168]	; (80054f8 <HAL_DMA_IRQHandler+0xe50>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d108      	bne.n	8005464 <HAL_DMA_IRQHandler+0xdbc>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 021c 	bic.w	r2, r2, #28
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e007      	b.n	8005474 <HAL_DMA_IRQHandler+0xdcc>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 020e 	bic.w	r2, r2, #14
 8005472:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	2201      	movs	r2, #1
 800547e:	409a      	lsls	r2, r3
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
 80054aa:	e004      	b.n	80054b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80054ac:	bf00      	nop
 80054ae:	e002      	b.n	80054b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054b6:	3728      	adds	r7, #40	; 0x28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40020010 	.word	0x40020010
 80054c0:	40020028 	.word	0x40020028
 80054c4:	40020040 	.word	0x40020040
 80054c8:	40020058 	.word	0x40020058
 80054cc:	40020070 	.word	0x40020070
 80054d0:	40020088 	.word	0x40020088
 80054d4:	400200a0 	.word	0x400200a0
 80054d8:	400200b8 	.word	0x400200b8
 80054dc:	40020410 	.word	0x40020410
 80054e0:	40020428 	.word	0x40020428
 80054e4:	40020440 	.word	0x40020440
 80054e8:	40020458 	.word	0x40020458
 80054ec:	40020470 	.word	0x40020470
 80054f0:	40020488 	.word	0x40020488
 80054f4:	400204a0 	.word	0x400204a0
 80054f8:	400204b8 	.word	0x400204b8

080054fc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e04f      	b.n	80055ae <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f84e 	bl	80055c4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_DMA2D_Init+0xbc>)
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6851      	ldr	r1, [r2, #4]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	69d2      	ldr	r2, [r2, #28]
 8005542:	4311      	orrs	r1, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	430b      	orrs	r3, r1
 800554a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005552:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <HAL_DMA2D_Init+0xc0>)
 8005554:	4013      	ands	r3, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6891      	ldr	r1, [r2, #8]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6992      	ldr	r2, [r2, #24]
 800555e:	4311      	orrs	r1, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	430b      	orrs	r3, r1
 8005566:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <HAL_DMA2D_Init+0xc4>)
 8005570:	4013      	ands	r3, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68d1      	ldr	r1, [r2, #12]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6812      	ldr	r2, [r2, #0]
 800557a:	430b      	orrs	r3, r1
 800557c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	051a      	lsls	r2, r3, #20
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	055b      	lsls	r3, r3, #21
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	fff8ffbf 	.word	0xfff8ffbf
 80055bc:	fffffef8 	.word	0xfffffef8
 80055c0:	ffff0000 	.word	0xffff0000

080055c4 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_DMA2D_Start+0x1c>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e018      	b.n	8005626 <HAL_DMA2D_Start+0x4e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f9a4 	bl	800595c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d056      	beq.n	80056f8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800564a:	f7fe f96d 	bl	8003928 <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005650:	e04b      	b.n	80056ea <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005660:	2b00      	cmp	r3, #0
 8005662:	d023      	beq.n	80056ac <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005672:	f043 0202 	orr.w	r2, r3, #2
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005688:	f043 0201 	orr.w	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2221      	movs	r2, #33	; 0x21
 8005696:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2204      	movs	r2, #4
 800569c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0a5      	b.n	80057f8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d01a      	beq.n	80056ea <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056b4:	f7fe f938 	bl	8003928 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <HAL_DMA2D_PollForTransfer+0x9c>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ce:	f043 0220 	orr.w	r2, r3, #32
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2203      	movs	r2, #3
 80056da:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e086      	b.n	80057f8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0ac      	beq.n	8005652 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d061      	beq.n	80057de <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800571a:	f7fe f905 	bl	8003928 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005720:	e056      	b.n	80057d0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005730:	2b00      	cmp	r3, #0
 8005732:	d02e      	beq.n	8005792 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005742:	f043 0204 	orr.w	r2, r3, #4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005758:	f043 0202 	orr.w	r2, r3, #2
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576e:	f043 0201 	orr.w	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2229      	movs	r2, #41	; 0x29
 800577c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2204      	movs	r2, #4
 8005782:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e032      	b.n	80057f8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d01a      	beq.n	80057d0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800579a:	f7fe f8c5 	bl	8003928 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d302      	bcc.n	80057b0 <HAL_DMA2D_PollForTransfer+0x182>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10f      	bne.n	80057d0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b4:	f043 0220 	orr.w	r2, r3, #32
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2203      	movs	r2, #3
 80057c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e013      	b.n	80057f8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f003 0310 	and.w	r3, r3, #16
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0a1      	beq.n	8005722 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2212      	movs	r2, #18
 80057e4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_DMA2D_ConfigLayer+0x24>
 8005820:	2302      	movs	r3, #2
 8005822:	e092      	b.n	800594a <HAL_DMA2D_ConfigLayer+0x14a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	3328      	adds	r3, #40	; 0x28
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4413      	add	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005858:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005864:	4b3c      	ldr	r3, [pc, #240]	; (8005958 <HAL_DMA2D_ConfigLayer+0x158>)
 8005866:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b0a      	cmp	r3, #10
 800586e:	d003      	beq.n	8005878 <HAL_DMA2D_ConfigLayer+0x78>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b09      	cmp	r3, #9
 8005876:	d107      	bne.n	8005888 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	e005      	b.n	8005894 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d120      	bne.n	80058dc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	43db      	mvns	r3, r3
 80058a4:	ea02 0103 	and.w	r1, r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b0a      	cmp	r3, #10
 80058c2:	d003      	beq.n	80058cc <HAL_DMA2D_ConfigLayer+0xcc>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b09      	cmp	r3, #9
 80058ca:	d135      	bne.n	8005938 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80058d8:	629a      	str	r2, [r3, #40]	; 0x28
 80058da:	e02d      	b.n	8005938 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2b0b      	cmp	r3, #11
 80058e2:	d109      	bne.n	80058f8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	049b      	lsls	r3, r3, #18
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80058f6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	43db      	mvns	r3, r3
 8005902:	ea02 0103 	and.w	r1, r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	430a      	orrs	r2, r1
 800590e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b0a      	cmp	r3, #10
 8005920:	d003      	beq.n	800592a <HAL_DMA2D_ConfigLayer+0x12a>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b09      	cmp	r3, #9
 8005928:	d106      	bne.n	8005938 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005936:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	ff33000f 	.word	0xff33000f

0800595c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800595c:	b480      	push	{r7}
 800595e:	b08b      	sub	sp, #44	; 0x2c
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005970:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	041a      	lsls	r2, r3, #16
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	431a      	orrs	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005994:	d174      	bne.n	8005a80 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800599c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059a4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059ac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
 80059cc:	e053      	b.n	8005a76 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d106      	bne.n	80059e4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	4313      	orrs	r3, r2
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
 80059e2:	e048      	b.n	8005a76 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d111      	bne.n	8005a10 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	0cdb      	lsrs	r3, r3, #19
 80059f0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	0a9b      	lsrs	r3, r3, #10
 80059f6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	08db      	lsrs	r3, r3, #3
 80059fc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	02db      	lsls	r3, r3, #11
 8005a06:	4313      	orrs	r3, r2
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0e:	e032      	b.n	8005a76 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d117      	bne.n	8005a48 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	0fdb      	lsrs	r3, r3, #31
 8005a1c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	0cdb      	lsrs	r3, r3, #19
 8005a22:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	0adb      	lsrs	r3, r3, #11
 8005a28:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	08db      	lsrs	r3, r3, #3
 8005a2e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	029b      	lsls	r3, r3, #10
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	03db      	lsls	r3, r3, #15
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	e016      	b.n	8005a76 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	0f1b      	lsrs	r3, r3, #28
 8005a4c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	0d1b      	lsrs	r3, r3, #20
 8005a52:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	0b1b      	lsrs	r3, r3, #12
 8005a58:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	011a      	lsls	r2, r3, #4
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	031b      	lsls	r3, r3, #12
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005a7e:	e00d      	b.n	8005a9c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a88:	d104      	bne.n	8005a94 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	615a      	str	r2, [r3, #20]
}
 8005a92:	e003      	b.n	8005a9c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	60da      	str	r2, [r3, #12]
}
 8005a9c:	bf00      	nop
 8005a9e:	372c      	adds	r7, #44	; 0x2c
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e00a      	b.n	8005ada <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005ac4:	7afb      	ldrb	r3, [r7, #11]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	605a      	str	r2, [r3, #4]
      break;
 8005ad0:	e002      	b.n	8005ad8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad6:	bf00      	nop
  }

  return status;
 8005ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e003      	b.n	8005b02 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	011a      	lsls	r2, r3, #4
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <HAL_EXTI_IRQHandler+0x5c>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4013      	ands	r3, r2
 8005b46:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4798      	blx	r3
    }
  }
}
 8005b62:	bf00      	nop
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	58000088 	.word	0x58000088

08005b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b089      	sub	sp, #36	; 0x24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b7e:	4b89      	ldr	r3, [pc, #548]	; (8005da4 <HAL_GPIO_Init+0x234>)
 8005b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b82:	e194      	b.n	8005eae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	2101      	movs	r1, #1
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b90:	4013      	ands	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8186 	beq.w	8005ea8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d005      	beq.n	8005bb4 <HAL_GPIO_Init+0x44>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d130      	bne.n	8005c16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bea:	2201      	movs	r2, #1
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0201 	and.w	r2, r3, #1
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d017      	beq.n	8005c52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d123      	bne.n	8005ca6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	08da      	lsrs	r2, r3, #3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3208      	adds	r2, #8
 8005c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	220f      	movs	r2, #15
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	08da      	lsrs	r2, r3, #3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3208      	adds	r2, #8
 8005ca0:	69b9      	ldr	r1, [r7, #24]
 8005ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f003 0203 	and.w	r2, r3, #3
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80e0 	beq.w	8005ea8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ce8:	4b2f      	ldr	r3, [pc, #188]	; (8005da8 <HAL_GPIO_Init+0x238>)
 8005cea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cee:	4a2e      	ldr	r2, [pc, #184]	; (8005da8 <HAL_GPIO_Init+0x238>)
 8005cf0:	f043 0302 	orr.w	r3, r3, #2
 8005cf4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005cf8:	4b2b      	ldr	r3, [pc, #172]	; (8005da8 <HAL_GPIO_Init+0x238>)
 8005cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d06:	4a29      	ldr	r2, [pc, #164]	; (8005dac <HAL_GPIO_Init+0x23c>)
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	220f      	movs	r2, #15
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43db      	mvns	r3, r3
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	4013      	ands	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a20      	ldr	r2, [pc, #128]	; (8005db0 <HAL_GPIO_Init+0x240>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d052      	beq.n	8005dd8 <HAL_GPIO_Init+0x268>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1f      	ldr	r2, [pc, #124]	; (8005db4 <HAL_GPIO_Init+0x244>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d031      	beq.n	8005d9e <HAL_GPIO_Init+0x22e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1e      	ldr	r2, [pc, #120]	; (8005db8 <HAL_GPIO_Init+0x248>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d02b      	beq.n	8005d9a <HAL_GPIO_Init+0x22a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1d      	ldr	r2, [pc, #116]	; (8005dbc <HAL_GPIO_Init+0x24c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d025      	beq.n	8005d96 <HAL_GPIO_Init+0x226>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a1c      	ldr	r2, [pc, #112]	; (8005dc0 <HAL_GPIO_Init+0x250>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d01f      	beq.n	8005d92 <HAL_GPIO_Init+0x222>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a1b      	ldr	r2, [pc, #108]	; (8005dc4 <HAL_GPIO_Init+0x254>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d019      	beq.n	8005d8e <HAL_GPIO_Init+0x21e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <HAL_GPIO_Init+0x258>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_GPIO_Init+0x21a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a19      	ldr	r2, [pc, #100]	; (8005dcc <HAL_GPIO_Init+0x25c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00d      	beq.n	8005d86 <HAL_GPIO_Init+0x216>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a18      	ldr	r2, [pc, #96]	; (8005dd0 <HAL_GPIO_Init+0x260>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d007      	beq.n	8005d82 <HAL_GPIO_Init+0x212>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_GPIO_Init+0x264>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <HAL_GPIO_Init+0x20e>
 8005d7a:	2309      	movs	r3, #9
 8005d7c:	e02d      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005d7e:	230a      	movs	r3, #10
 8005d80:	e02b      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005d82:	2308      	movs	r3, #8
 8005d84:	e029      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005d86:	2307      	movs	r3, #7
 8005d88:	e027      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005d8a:	2306      	movs	r3, #6
 8005d8c:	e025      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005d8e:	2305      	movs	r3, #5
 8005d90:	e023      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005d92:	2304      	movs	r3, #4
 8005d94:	e021      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005d96:	2303      	movs	r3, #3
 8005d98:	e01f      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e01d      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e01b      	b.n	8005dda <HAL_GPIO_Init+0x26a>
 8005da2:	bf00      	nop
 8005da4:	58000080 	.word	0x58000080
 8005da8:	58024400 	.word	0x58024400
 8005dac:	58000400 	.word	0x58000400
 8005db0:	58020000 	.word	0x58020000
 8005db4:	58020400 	.word	0x58020400
 8005db8:	58020800 	.word	0x58020800
 8005dbc:	58020c00 	.word	0x58020c00
 8005dc0:	58021000 	.word	0x58021000
 8005dc4:	58021400 	.word	0x58021400
 8005dc8:	58021800 	.word	0x58021800
 8005dcc:	58021c00 	.word	0x58021c00
 8005dd0:	58022000 	.word	0x58022000
 8005dd4:	58022400 	.word	0x58022400
 8005dd8:	2300      	movs	r3, #0
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	f002 0203 	and.w	r2, r2, #3
 8005de0:	0092      	lsls	r2, r2, #2
 8005de2:	4093      	lsls	r3, r2
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dea:	4938      	ldr	r1, [pc, #224]	; (8005ecc <HAL_GPIO_Init+0x35c>)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	3302      	adds	r3, #2
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	43db      	mvns	r3, r3
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	4013      	ands	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4013      	ands	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	43db      	mvns	r3, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f47f ae63 	bne.w	8005b84 <HAL_GPIO_Init+0x14>
  }
}
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	3724      	adds	r7, #36	; 0x24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	58000400 	.word	0x58000400

08005ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	887b      	ldrh	r3, [r7, #2]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	73fb      	strb	r3, [r7, #15]
 8005eec:	e001      	b.n	8005ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	807b      	strh	r3, [r7, #2]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f10:	787b      	ldrb	r3, [r7, #1]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f16:	887a      	ldrh	r2, [r7, #2]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f1c:	e003      	b.n	8005f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f1e:	887b      	ldrh	r3, [r7, #2]
 8005f20:	041a      	lsls	r2, r3, #16
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	619a      	str	r2, [r3, #24]
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e07f      	b.n	8006046 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f87a 	bl	8006054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	; 0x24
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d107      	bne.n	8005fae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005faa:	609a      	str	r2, [r3, #8]
 8005fac:	e006      	b.n	8005fbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d104      	bne.n	8005fce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6859      	ldr	r1, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <HAL_I2C_Init+0x11c>)
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69d9      	ldr	r1, [r3, #28]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	02008000 	.word	0x02008000

08006054 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	4608      	mov	r0, r1
 8006072:	4611      	mov	r1, r2
 8006074:	461a      	mov	r2, r3
 8006076:	4603      	mov	r3, r0
 8006078:	817b      	strh	r3, [r7, #10]
 800607a:	460b      	mov	r3, r1
 800607c:	813b      	strh	r3, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b20      	cmp	r3, #32
 800608c:	f040 80fd 	bne.w	800628a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_I2C_Mem_Read+0x34>
 8006096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	d105      	bne.n	80060a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e0f1      	b.n	800628c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_I2C_Mem_Read+0x4e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e0ea      	b.n	800628c <HAL_I2C_Mem_Read+0x224>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060be:	f7fd fc33 	bl	8003928 <HAL_GetTick>
 80060c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2319      	movs	r3, #25
 80060ca:	2201      	movs	r2, #1
 80060cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 f975 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e0d5      	b.n	800628c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2222      	movs	r2, #34	; 0x22
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2240      	movs	r2, #64	; 0x40
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a3a      	ldr	r2, [r7, #32]
 80060fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006100:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006108:	88f8      	ldrh	r0, [r7, #6]
 800610a:	893a      	ldrh	r2, [r7, #8]
 800610c:	8979      	ldrh	r1, [r7, #10]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4603      	mov	r3, r0
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f8d9 	bl	80062d0 <I2C_RequestMemoryRead>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e0ad      	b.n	800628c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	2bff      	cmp	r3, #255	; 0xff
 8006138:	d90e      	bls.n	8006158 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	22ff      	movs	r2, #255	; 0xff
 800613e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006144:	b2da      	uxtb	r2, r3
 8006146:	8979      	ldrh	r1, [r7, #10]
 8006148:	4b52      	ldr	r3, [pc, #328]	; (8006294 <HAL_I2C_Mem_Read+0x22c>)
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 faef 	bl	8006734 <I2C_TransferConfig>
 8006156:	e00f      	b.n	8006178 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006166:	b2da      	uxtb	r2, r3
 8006168:	8979      	ldrh	r1, [r7, #10]
 800616a:	4b4a      	ldr	r3, [pc, #296]	; (8006294 <HAL_I2C_Mem_Read+0x22c>)
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fade 	bl	8006734 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	2200      	movs	r2, #0
 8006180:	2104      	movs	r1, #4
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f91c 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e07c      	b.n	800628c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d034      	beq.n	8006238 <HAL_I2C_Mem_Read+0x1d0>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d130      	bne.n	8006238 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	; 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f8ed 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e04d      	b.n	800628c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2bff      	cmp	r3, #255	; 0xff
 80061f8:	d90e      	bls.n	8006218 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	22ff      	movs	r2, #255	; 0xff
 80061fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006204:	b2da      	uxtb	r2, r3
 8006206:	8979      	ldrh	r1, [r7, #10]
 8006208:	2300      	movs	r3, #0
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fa8f 	bl	8006734 <I2C_TransferConfig>
 8006216:	e00f      	b.n	8006238 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006226:	b2da      	uxtb	r2, r3
 8006228:	8979      	ldrh	r1, [r7, #10]
 800622a:	2300      	movs	r3, #0
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fa7e 	bl	8006734 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d19a      	bne.n	8006178 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f950 	bl	80064ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e01a      	b.n	800628c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2220      	movs	r2, #32
 800625c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6859      	ldr	r1, [r3, #4]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <HAL_I2C_Mem_Read+0x230>)
 800626a:	400b      	ands	r3, r1
 800626c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e000      	b.n	800628c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800628a:	2302      	movs	r3, #2
  }
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	80002400 	.word	0x80002400
 8006298:	fe00e800 	.word	0xfe00e800

0800629c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062aa:	b2db      	uxtb	r3, r3
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	4608      	mov	r0, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	461a      	mov	r2, r3
 80062de:	4603      	mov	r3, r0
 80062e0:	817b      	strh	r3, [r7, #10]
 80062e2:	460b      	mov	r3, r1
 80062e4:	813b      	strh	r3, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	8979      	ldrh	r1, [r7, #10]
 80062f0:	4b20      	ldr	r3, [pc, #128]	; (8006374 <I2C_RequestMemoryRead+0xa4>)
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fa1c 	bl	8006734 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	69b9      	ldr	r1, [r7, #24]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f8ac 	bl	800645e <I2C_WaitOnTXISFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e02c      	b.n	800636a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d105      	bne.n	8006322 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006316:	893b      	ldrh	r3, [r7, #8]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	629a      	str	r2, [r3, #40]	; 0x28
 8006320:	e015      	b.n	800634e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006322:	893b      	ldrh	r3, [r7, #8]
 8006324:	0a1b      	lsrs	r3, r3, #8
 8006326:	b29b      	uxth	r3, r3
 8006328:	b2da      	uxtb	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	69b9      	ldr	r1, [r7, #24]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f892 	bl	800645e <I2C_WaitOnTXISFlagUntilTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e012      	b.n	800636a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006344:	893b      	ldrh	r3, [r7, #8]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2200      	movs	r2, #0
 8006356:	2140      	movs	r1, #64	; 0x40
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f831 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	80002000 	.word	0x80002000

08006378 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d103      	bne.n	8006396 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2200      	movs	r2, #0
 8006394:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d007      	beq.n	80063b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	619a      	str	r2, [r3, #24]
  }
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063d0:	e031      	b.n	8006436 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d02d      	beq.n	8006436 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fd faa5 	bl	8003928 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d122      	bne.n	8006436 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4013      	ands	r3, r2
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	bf0c      	ite	eq
 8006400:	2301      	moveq	r3, #1
 8006402:	2300      	movne	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	429a      	cmp	r2, r3
 800640c:	d113      	bne.n	8006436 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006412:	f043 0220 	orr.w	r2, r3, #32
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e00f      	b.n	8006456 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699a      	ldr	r2, [r3, #24]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4013      	ands	r3, r2
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	429a      	cmp	r2, r3
 8006444:	bf0c      	ite	eq
 8006446:	2301      	moveq	r3, #1
 8006448:	2300      	movne	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	429a      	cmp	r2, r3
 8006452:	d0be      	beq.n	80063d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800646a:	e033      	b.n	80064d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f87f 	bl	8006574 <I2C_IsErrorOccurred>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e031      	b.n	80064e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	d025      	beq.n	80064d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006488:	f7fd fa4e 	bl	8003928 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	429a      	cmp	r2, r3
 8006496:	d302      	bcc.n	800649e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d11a      	bne.n	80064d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d013      	beq.n	80064d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b0:	f043 0220 	orr.w	r2, r3, #32
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e007      	b.n	80064e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d1c4      	bne.n	800646c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064f8:	e02f      	b.n	800655a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f838 	bl	8006574 <I2C_IsErrorOccurred>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e02d      	b.n	800656a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650e:	f7fd fa0b 	bl	8003928 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	429a      	cmp	r2, r3
 800651c:	d302      	bcc.n	8006524 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d11a      	bne.n	800655a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b20      	cmp	r3, #32
 8006530:	d013      	beq.n	800655a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006536:	f043 0220 	orr.w	r2, r3, #32
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e007      	b.n	800656a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b20      	cmp	r3, #32
 8006566:	d1c8      	bne.n	80064fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	d068      	beq.n	8006672 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2210      	movs	r2, #16
 80065a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065a8:	e049      	b.n	800663e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d045      	beq.n	800663e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065b2:	f7fd f9b9 	bl	8003928 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d302      	bcc.n	80065c8 <I2C_IsErrorOccurred+0x54>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d13a      	bne.n	800663e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ea:	d121      	bne.n	8006630 <I2C_IsErrorOccurred+0xbc>
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f2:	d01d      	beq.n	8006630 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065f4:	7cfb      	ldrb	r3, [r7, #19]
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d01a      	beq.n	8006630 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006608:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800660a:	f7fd f98d 	bl	8003928 <HAL_GetTick>
 800660e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006610:	e00e      	b.n	8006630 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006612:	f7fd f989 	bl	8003928 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b19      	cmp	r3, #25
 800661e:	d907      	bls.n	8006630 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	f043 0320 	orr.w	r3, r3, #32
 8006626:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800662e:	e006      	b.n	800663e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b20      	cmp	r3, #32
 800663c:	d1e9      	bne.n	8006612 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f003 0320 	and.w	r3, r3, #32
 8006648:	2b20      	cmp	r3, #32
 800664a:	d003      	beq.n	8006654 <I2C_IsErrorOccurred+0xe0>
 800664c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0aa      	beq.n	80065aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006658:	2b00      	cmp	r3, #0
 800665a:	d103      	bne.n	8006664 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2220      	movs	r2, #32
 8006662:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	f043 0304 	orr.w	r3, r3, #4
 800666a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006694:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	f043 0308 	orr.w	r3, r3, #8
 80066ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	f043 0302 	orr.w	r3, r3, #2
 80066ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80066e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01c      	beq.n	8006722 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff fe45 	bl	8006378 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <I2C_IsErrorOccurred+0x1bc>)
 80066fa:	400b      	ands	r3, r1
 80066fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	431a      	orrs	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006726:	4618      	mov	r0, r3
 8006728:	3728      	adds	r7, #40	; 0x28
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	fe00e800 	.word	0xfe00e800

08006734 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	817b      	strh	r3, [r7, #10]
 8006742:	4613      	mov	r3, r2
 8006744:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006746:	897b      	ldrh	r3, [r7, #10]
 8006748:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800674c:	7a7b      	ldrb	r3, [r7, #9]
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006754:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	4313      	orrs	r3, r2
 800675e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006762:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	0d5b      	lsrs	r3, r3, #21
 800676e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006772:	4b08      	ldr	r3, [pc, #32]	; (8006794 <I2C_TransferConfig+0x60>)
 8006774:	430b      	orrs	r3, r1
 8006776:	43db      	mvns	r3, r3
 8006778:	ea02 0103 	and.w	r1, r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	03ff63ff 	.word	0x03ff63ff

08006798 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d138      	bne.n	8006820 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e032      	b.n	8006822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2224      	movs	r2, #36	; 0x24
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6819      	ldr	r1, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	e000      	b.n	8006822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006820:	2302      	movs	r3, #2
  }
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b20      	cmp	r3, #32
 8006842:	d139      	bne.n	80068b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800684e:	2302      	movs	r3, #2
 8006850:	e033      	b.n	80068ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2224      	movs	r2, #36	; 0x24
 800685e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0201 	bic.w	r2, r2, #1
 8006870:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006880:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e000      	b.n	80068ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068b8:	2302      	movs	r3, #2
  }
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e0bf      	b.n	8006a5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f8ba 	bl	8006a68 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800690a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6999      	ldr	r1, [r3, #24]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006920:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6899      	ldr	r1, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b4a      	ldr	r3, [pc, #296]	; (8006a64 <HAL_LTDC_Init+0x19c>)
 800693c:	400b      	ands	r3, r1
 800693e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	041b      	lsls	r3, r3, #16
 8006946:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6899      	ldr	r1, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68d9      	ldr	r1, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b3e      	ldr	r3, [pc, #248]	; (8006a64 <HAL_LTDC_Init+0x19c>)
 800696a:	400b      	ands	r3, r1
 800696c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68d9      	ldr	r1, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6919      	ldr	r1, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b33      	ldr	r3, [pc, #204]	; (8006a64 <HAL_LTDC_Init+0x19c>)
 8006998:	400b      	ands	r3, r1
 800699a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	041b      	lsls	r3, r3, #16
 80069a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6919      	ldr	r1, [r3, #16]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6959      	ldr	r1, [r3, #20]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4b27      	ldr	r3, [pc, #156]	; (8006a64 <HAL_LTDC_Init+0x19c>)
 80069c6:	400b      	ands	r3, r1
 80069c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6959      	ldr	r1, [r3, #20]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0206 	orr.w	r2, r2, #6
 8006a36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0201 	orr.w	r2, r2, #1
 8006a46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	f000f800 	.word	0xf000f800

08006a68 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a7c:	b5b0      	push	{r4, r5, r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_LTDC_ConfigLayer+0x1a>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e02c      	b.n	8006af0 <HAL_LTDC_ConfigLayer+0x74>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2134      	movs	r1, #52	; 0x34
 8006aac:	fb01 f303 	mul.w	r3, r1, r3
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4614      	mov	r4, r2
 8006aba:	461d      	mov	r5, r3
 8006abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 f811 	bl	8006af8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2201      	movs	r2, #1
 8006adc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bdb0      	pop	{r4, r5, r7, pc}

08006af8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b089      	sub	sp, #36	; 0x24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b14:	4413      	add	r3, r2
 8006b16:	041b      	lsls	r3, r3, #16
 8006b18:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	01db      	lsls	r3, r3, #7
 8006b24:	4413      	add	r3, r2
 8006b26:	3384      	adds	r3, #132	; 0x84
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	6812      	ldr	r2, [r2, #0]
 8006b2e:	4611      	mov	r1, r2
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	01d2      	lsls	r2, r2, #7
 8006b34:	440a      	add	r2, r1
 8006b36:	3284      	adds	r2, #132	; 0x84
 8006b38:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006b3c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	0c1b      	lsrs	r3, r3, #16
 8006b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b4e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b50:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4619      	mov	r1, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	01db      	lsls	r3, r3, #7
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3384      	adds	r3, #132	; 0x84
 8006b60:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006b66:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b76:	4413      	add	r3, r2
 8006b78:	041b      	lsls	r3, r3, #16
 8006b7a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	01db      	lsls	r3, r3, #7
 8006b86:	4413      	add	r3, r2
 8006b88:	3384      	adds	r3, #132	; 0x84
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	4611      	mov	r1, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	01d2      	lsls	r2, r2, #7
 8006b96:	440a      	add	r2, r1
 8006b98:	3284      	adds	r2, #132	; 0x84
 8006b9a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006b9e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bae:	4413      	add	r3, r2
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	01db      	lsls	r3, r3, #7
 8006bbc:	440b      	add	r3, r1
 8006bbe:	3384      	adds	r3, #132	; 0x84
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	01db      	lsls	r3, r3, #7
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3384      	adds	r3, #132	; 0x84
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	4611      	mov	r1, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	01d2      	lsls	r2, r2, #7
 8006be2:	440a      	add	r2, r1
 8006be4:	3284      	adds	r2, #132	; 0x84
 8006be6:	f023 0307 	bic.w	r3, r3, #7
 8006bea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	01db      	lsls	r3, r3, #7
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3384      	adds	r3, #132	; 0x84
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	061b      	lsls	r3, r3, #24
 8006c1c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	01db      	lsls	r3, r3, #7
 8006c28:	4413      	add	r3, r2
 8006c2a:	3384      	adds	r3, #132	; 0x84
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	01db      	lsls	r3, r3, #7
 8006c38:	4413      	add	r3, r2
 8006c3a:	3384      	adds	r3, #132	; 0x84
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c48:	461a      	mov	r2, r3
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	01db      	lsls	r3, r3, #7
 8006c5c:	440b      	add	r3, r1
 8006c5e:	3384      	adds	r3, #132	; 0x84
 8006c60:	4619      	mov	r1, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	01db      	lsls	r3, r3, #7
 8006c72:	4413      	add	r3, r2
 8006c74:	3384      	adds	r3, #132	; 0x84
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	01d2      	lsls	r2, r2, #7
 8006c82:	440a      	add	r2, r1
 8006c84:	3284      	adds	r2, #132	; 0x84
 8006c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c8a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	01db      	lsls	r3, r3, #7
 8006c96:	4413      	add	r3, r2
 8006c98:	3384      	adds	r3, #132	; 0x84
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	01db      	lsls	r3, r3, #7
 8006cac:	4413      	add	r3, r2
 8006cae:	3384      	adds	r3, #132	; 0x84
 8006cb0:	69da      	ldr	r2, [r3, #28]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	01db      	lsls	r3, r3, #7
 8006cbc:	440b      	add	r3, r1
 8006cbe:	3384      	adds	r3, #132	; 0x84
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4b58      	ldr	r3, [pc, #352]	; (8006e24 <LTDC_SetConfig+0x32c>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	68f9      	ldr	r1, [r7, #12]
 8006cd2:	6809      	ldr	r1, [r1, #0]
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	01c9      	lsls	r1, r1, #7
 8006cda:	4401      	add	r1, r0
 8006cdc:	3184      	adds	r1, #132	; 0x84
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	01db      	lsls	r3, r3, #7
 8006cec:	4413      	add	r3, r2
 8006cee:	3384      	adds	r3, #132	; 0x84
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	01db      	lsls	r3, r3, #7
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3384      	adds	r3, #132	; 0x84
 8006d00:	461a      	mov	r2, r3
 8006d02:	2300      	movs	r3, #0
 8006d04:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	01db      	lsls	r3, r3, #7
 8006d10:	4413      	add	r3, r2
 8006d12:	3384      	adds	r3, #132	; 0x84
 8006d14:	461a      	mov	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006d24:	2304      	movs	r3, #4
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	e01b      	b.n	8006d62 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d102      	bne.n	8006d38 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006d32:	2303      	movs	r3, #3
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	e014      	b.n	8006d62 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d00b      	beq.n	8006d58 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d007      	beq.n	8006d58 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d003      	beq.n	8006d58 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d54:	2b07      	cmp	r3, #7
 8006d56:	d102      	bne.n	8006d5e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	e001      	b.n	8006d62 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	01db      	lsls	r3, r3, #7
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3384      	adds	r3, #132	; 0x84
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	4611      	mov	r1, r2
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	01d2      	lsls	r2, r2, #7
 8006d7c:	440a      	add	r2, r1
 8006d7e:	3284      	adds	r2, #132	; 0x84
 8006d80:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006d84:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	fb02 f303 	mul.w	r3, r2, r3
 8006d90:	041a      	lsls	r2, r3, #16
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6859      	ldr	r1, [r3, #4]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	1acb      	subs	r3, r1, r3
 8006d9c:	69f9      	ldr	r1, [r7, #28]
 8006d9e:	fb01 f303 	mul.w	r3, r1, r3
 8006da2:	3307      	adds	r3, #7
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	6809      	ldr	r1, [r1, #0]
 8006da8:	4608      	mov	r0, r1
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	01c9      	lsls	r1, r1, #7
 8006dae:	4401      	add	r1, r0
 8006db0:	3184      	adds	r1, #132	; 0x84
 8006db2:	4313      	orrs	r3, r2
 8006db4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	01db      	lsls	r3, r3, #7
 8006dc0:	4413      	add	r3, r2
 8006dc2:	3384      	adds	r3, #132	; 0x84
 8006dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	01db      	lsls	r3, r3, #7
 8006dd0:	440b      	add	r3, r1
 8006dd2:	3384      	adds	r3, #132	; 0x84
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <LTDC_SetConfig+0x330>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	01db      	lsls	r3, r3, #7
 8006de6:	4413      	add	r3, r2
 8006de8:	3384      	adds	r3, #132	; 0x84
 8006dea:	461a      	mov	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	01db      	lsls	r3, r3, #7
 8006dfc:	4413      	add	r3, r2
 8006dfe:	3384      	adds	r3, #132	; 0x84
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	6812      	ldr	r2, [r2, #0]
 8006e06:	4611      	mov	r1, r2
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	01d2      	lsls	r2, r2, #7
 8006e0c:	440a      	add	r2, r1
 8006e0e:	3284      	adds	r2, #132	; 0x84
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	6013      	str	r3, [r2, #0]
}
 8006e16:	bf00      	nop
 8006e18:	3724      	adds	r7, #36	; 0x24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	fffff8f8 	.word	0xfffff8f8
 8006e28:	fffff800 	.word	0xfffff800

08006e2c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e34:	f7fc fd78 	bl	8003928 <HAL_GetTick>
 8006e38:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e03b      	b.n	8006ebc <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0201 	bic.w	r2, r2, #1
 8006e62:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006e64:	e00f      	b.n	8006e86 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006e66:	f7fc fd5f 	bl	8003928 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	d908      	bls.n	8006e86 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2240      	movs	r2, #64	; 0x40
 8006e78:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e01a      	b.n	8006ebc <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e8      	bne.n	8006e66 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f9c1 	bl	800721c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e048      	b.n	8006f68 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2200      	movs	r2, #0
 8006eec:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2200      	movs	r2, #0
 8006f14:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2200      	movs	r2, #0
 8006f24:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	221f      	movs	r2, #31
 8006f3c:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f80:	4b91      	ldr	r3, [pc, #580]	; (80071c8 <HAL_MDMA_IRQHandler+0x254>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a91      	ldr	r2, [pc, #580]	; (80071cc <HAL_MDMA_IRQHandler+0x258>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	0a9b      	lsrs	r3, r3, #10
 8006f8c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	4b8e      	ldr	r3, [pc, #568]	; (80071d0 <HAL_MDMA_IRQHandler+0x25c>)
 8006f96:	4413      	add	r3, r2
 8006f98:	099b      	lsrs	r3, r3, #6
 8006f9a:	f003 031f 	and.w	r3, r3, #31
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8006fa6:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 812d 	beq.w	8007210 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d054      	beq.n	800706e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d04d      	beq.n	800706e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0202 	bic.w	r2, r2, #2
 8006fe0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d106      	bne.n	8007002 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff8:	f043 0201 	orr.w	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	669a      	str	r2, [r3, #104]	; 0x68
 8007000:	e005      	b.n	800700e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007006:	f043 0202 	orr.w	r2, r3, #2
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800701c:	f043 0204 	orr.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007032:	f043 0208 	orr.w	r2, r3, #8
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007048:	f043 0210 	orr.w	r2, r3, #16
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007056:	2b00      	cmp	r3, #0
 8007058:	d005      	beq.n	8007066 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800705e:	f043 0220 	orr.w	r2, r3, #32
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2201      	movs	r2, #1
 800706c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b00      	cmp	r3, #0
 800707a:	d012      	beq.n	80070a2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2210      	movs	r2, #16
 8007090:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d012      	beq.n	80070d6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2208      	movs	r2, #8
 80070c4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d012      	beq.n	800710a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2204      	movs	r2, #4
 80070f8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d039      	beq.n	800718c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	d032      	beq.n	800718c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8007134:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b04      	cmp	r3, #4
 8007140:	d110      	bne.n	8007164 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007156:	2b00      	cmp	r3, #0
 8007158:	d05c      	beq.n	8007214 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
        }
        return;
 8007162:	e057      	b.n	8007214 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2202      	movs	r2, #2
 800716a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007190:	2b00      	cmp	r3, #0
 8007192:	d040      	beq.n	8007216 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2204      	movs	r2, #4
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d30d      	bcc.n	80071d4 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f2      	bne.n	80071ac <HAL_MDMA_IRQHandler+0x238>
 80071c6:	e006      	b.n	80071d6 <HAL_MDMA_IRQHandler+0x262>
 80071c8:	2400000c 	.word	0x2400000c
 80071cc:	1b4e81b5 	.word	0x1b4e81b5
 80071d0:	adffffc0 	.word	0xadffffc0
        break;
 80071d4:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2203      	movs	r2, #3
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071f4:	e003      	b.n	80071fe <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
 800720e:	e002      	b.n	8007216 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8007210:	bf00      	nop
 8007212:	e000      	b.n	8007216 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8007214:	bf00      	nop
    }
  }
}
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68d9      	ldr	r1, [r3, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007242:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800724e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800725a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007260:	3b01      	subs	r3, #1
 8007262:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8007264:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007270:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007272:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727c:	d107      	bne.n	800728e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800728c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729a:	2b00      	cmp	r3, #0
 800729c:	da11      	bge.n	80072c2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695a      	ldr	r2, [r3, #20]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80072ac:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b2:	425b      	negs	r3, r3
 80072b4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	b292      	uxth	r2, r2
 80072be:	621a      	str	r2, [r3, #32]
 80072c0:	e006      	b.n	80072d0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	b292      	uxth	r2, r2
 80072ce:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da15      	bge.n	8007304 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695a      	ldr	r2, [r3, #20]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80072e6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	425b      	negs	r3, r3
 80072ee:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6a19      	ldr	r1, [r3, #32]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	041a      	lsls	r2, r3, #16
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	621a      	str	r2, [r3, #32]
 8007302:	e009      	b.n	8007318 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6a19      	ldr	r1, [r3, #32]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	041a      	lsls	r2, r3, #16
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007320:	d006      	beq.n	8007330 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	629a      	str	r2, [r3, #40]	; 0x28
 800732e:	e003      	b.n	8007338 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2200      	movs	r2, #0
 8007336:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007354:	4b19      	ldr	r3, [pc, #100]	; (80073bc <HAL_PWREx_ConfigSupply+0x70>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b04      	cmp	r3, #4
 800735e:	d00a      	beq.n	8007376 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007360:	4b16      	ldr	r3, [pc, #88]	; (80073bc <HAL_PWREx_ConfigSupply+0x70>)
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	429a      	cmp	r2, r3
 800736c:	d001      	beq.n	8007372 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e01f      	b.n	80073b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e01d      	b.n	80073b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <HAL_PWREx_ConfigSupply+0x70>)
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f023 0207 	bic.w	r2, r3, #7
 800737e:	490f      	ldr	r1, [pc, #60]	; (80073bc <HAL_PWREx_ConfigSupply+0x70>)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4313      	orrs	r3, r2
 8007384:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007386:	f7fc facf 	bl	8003928 <HAL_GetTick>
 800738a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800738c:	e009      	b.n	80073a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800738e:	f7fc facb 	bl	8003928 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739c:	d901      	bls.n	80073a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e007      	b.n	80073b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073a2:	4b06      	ldr	r3, [pc, #24]	; (80073bc <HAL_PWREx_ConfigSupply+0x70>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ae:	d1ee      	bne.n	800738e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	58024800 	.word	0x58024800

080073c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d102      	bne.n	80073d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f000 bc48 	b.w	8007c64 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8088 	beq.w	80074f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073e2:	4b99      	ldr	r3, [pc, #612]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073ec:	4b96      	ldr	r3, [pc, #600]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d007      	beq.n	8007408 <HAL_RCC_OscConfig+0x48>
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	2b18      	cmp	r3, #24
 80073fc:	d111      	bne.n	8007422 <HAL_RCC_OscConfig+0x62>
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d10c      	bne.n	8007422 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007408:	4b8f      	ldr	r3, [pc, #572]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d06d      	beq.n	80074f0 <HAL_RCC_OscConfig+0x130>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d169      	bne.n	80074f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f000 bc21 	b.w	8007c64 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800742a:	d106      	bne.n	800743a <HAL_RCC_OscConfig+0x7a>
 800742c:	4b86      	ldr	r3, [pc, #536]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a85      	ldr	r2, [pc, #532]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	e02e      	b.n	8007498 <HAL_RCC_OscConfig+0xd8>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10c      	bne.n	800745c <HAL_RCC_OscConfig+0x9c>
 8007442:	4b81      	ldr	r3, [pc, #516]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a80      	ldr	r2, [pc, #512]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	4b7e      	ldr	r3, [pc, #504]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a7d      	ldr	r2, [pc, #500]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	e01d      	b.n	8007498 <HAL_RCC_OscConfig+0xd8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007464:	d10c      	bne.n	8007480 <HAL_RCC_OscConfig+0xc0>
 8007466:	4b78      	ldr	r3, [pc, #480]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a77      	ldr	r2, [pc, #476]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 800746c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	4b75      	ldr	r3, [pc, #468]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a74      	ldr	r2, [pc, #464]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	e00b      	b.n	8007498 <HAL_RCC_OscConfig+0xd8>
 8007480:	4b71      	ldr	r3, [pc, #452]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a70      	ldr	r2, [pc, #448]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	4b6e      	ldr	r3, [pc, #440]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a6d      	ldr	r2, [pc, #436]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d013      	beq.n	80074c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a0:	f7fc fa42 	bl	8003928 <HAL_GetTick>
 80074a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074a8:	f7fc fa3e 	bl	8003928 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b64      	cmp	r3, #100	; 0x64
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e3d4      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074ba:	4b63      	ldr	r3, [pc, #396]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0f0      	beq.n	80074a8 <HAL_RCC_OscConfig+0xe8>
 80074c6:	e014      	b.n	80074f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c8:	f7fc fa2e 	bl	8003928 <HAL_GetTick>
 80074cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074d0:	f7fc fa2a 	bl	8003928 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b64      	cmp	r3, #100	; 0x64
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e3c0      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074e2:	4b59      	ldr	r3, [pc, #356]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f0      	bne.n	80074d0 <HAL_RCC_OscConfig+0x110>
 80074ee:	e000      	b.n	80074f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 80ca 	beq.w	8007694 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007500:	4b51      	ldr	r3, [pc, #324]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007508:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800750a:	4b4f      	ldr	r3, [pc, #316]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d007      	beq.n	8007526 <HAL_RCC_OscConfig+0x166>
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	2b18      	cmp	r3, #24
 800751a:	d156      	bne.n	80075ca <HAL_RCC_OscConfig+0x20a>
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d151      	bne.n	80075ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007526:	4b48      	ldr	r3, [pc, #288]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <HAL_RCC_OscConfig+0x17e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e392      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800753e:	4b42      	ldr	r3, [pc, #264]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f023 0219 	bic.w	r2, r3, #25
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	493f      	ldr	r1, [pc, #252]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 800754c:	4313      	orrs	r3, r2
 800754e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007550:	f7fc f9ea 	bl	8003928 <HAL_GetTick>
 8007554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007558:	f7fc f9e6 	bl	8003928 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e37c      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800756a:	4b37      	ldr	r3, [pc, #220]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007576:	f7fc fa07 	bl	8003988 <HAL_GetREVID>
 800757a:	4603      	mov	r3, r0
 800757c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007580:	4293      	cmp	r3, r2
 8007582:	d817      	bhi.n	80075b4 <HAL_RCC_OscConfig+0x1f4>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d108      	bne.n	800759e <HAL_RCC_OscConfig+0x1de>
 800758c:	4b2e      	ldr	r3, [pc, #184]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007594:	4a2c      	ldr	r2, [pc, #176]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800759c:	e07a      	b.n	8007694 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800759e:	4b2a      	ldr	r3, [pc, #168]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	031b      	lsls	r3, r3, #12
 80075ac:	4926      	ldr	r1, [pc, #152]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075b2:	e06f      	b.n	8007694 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075b4:	4b24      	ldr	r3, [pc, #144]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	061b      	lsls	r3, r3, #24
 80075c2:	4921      	ldr	r1, [pc, #132]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075c8:	e064      	b.n	8007694 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d047      	beq.n	8007662 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80075d2:	4b1d      	ldr	r3, [pc, #116]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f023 0219 	bic.w	r2, r3, #25
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	491a      	ldr	r1, [pc, #104]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e4:	f7fc f9a0 	bl	8003928 <HAL_GetTick>
 80075e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ec:	f7fc f99c 	bl	8003928 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e332      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075fe:	4b12      	ldr	r3, [pc, #72]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0304 	and.w	r3, r3, #4
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800760a:	f7fc f9bd 	bl	8003988 <HAL_GetREVID>
 800760e:	4603      	mov	r3, r0
 8007610:	f241 0203 	movw	r2, #4099	; 0x1003
 8007614:	4293      	cmp	r3, r2
 8007616:	d819      	bhi.n	800764c <HAL_RCC_OscConfig+0x28c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d108      	bne.n	8007632 <HAL_RCC_OscConfig+0x272>
 8007620:	4b09      	ldr	r3, [pc, #36]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007628:	4a07      	ldr	r2, [pc, #28]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 800762a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800762e:	6053      	str	r3, [r2, #4]
 8007630:	e030      	b.n	8007694 <HAL_RCC_OscConfig+0x2d4>
 8007632:	4b05      	ldr	r3, [pc, #20]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	031b      	lsls	r3, r3, #12
 8007640:	4901      	ldr	r1, [pc, #4]	; (8007648 <HAL_RCC_OscConfig+0x288>)
 8007642:	4313      	orrs	r3, r2
 8007644:	604b      	str	r3, [r1, #4]
 8007646:	e025      	b.n	8007694 <HAL_RCC_OscConfig+0x2d4>
 8007648:	58024400 	.word	0x58024400
 800764c:	4b9a      	ldr	r3, [pc, #616]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	061b      	lsls	r3, r3, #24
 800765a:	4997      	ldr	r1, [pc, #604]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800765c:	4313      	orrs	r3, r2
 800765e:	604b      	str	r3, [r1, #4]
 8007660:	e018      	b.n	8007694 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007662:	4b95      	ldr	r3, [pc, #596]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a94      	ldr	r2, [pc, #592]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007668:	f023 0301 	bic.w	r3, r3, #1
 800766c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766e:	f7fc f95b 	bl	8003928 <HAL_GetTick>
 8007672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007674:	e008      	b.n	8007688 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007676:	f7fc f957 	bl	8003928 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e2ed      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007688:	4b8b      	ldr	r3, [pc, #556]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1f0      	bne.n	8007676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0310 	and.w	r3, r3, #16
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 80a9 	beq.w	80077f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076a2:	4b85      	ldr	r3, [pc, #532]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076ac:	4b82      	ldr	r3, [pc, #520]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d007      	beq.n	80076c8 <HAL_RCC_OscConfig+0x308>
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	2b18      	cmp	r3, #24
 80076bc:	d13a      	bne.n	8007734 <HAL_RCC_OscConfig+0x374>
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d135      	bne.n	8007734 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076c8:	4b7b      	ldr	r3, [pc, #492]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <HAL_RCC_OscConfig+0x320>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	2b80      	cmp	r3, #128	; 0x80
 80076da:	d001      	beq.n	80076e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e2c1      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076e0:	f7fc f952 	bl	8003988 <HAL_GetREVID>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d817      	bhi.n	800771e <HAL_RCC_OscConfig+0x35e>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	2b20      	cmp	r3, #32
 80076f4:	d108      	bne.n	8007708 <HAL_RCC_OscConfig+0x348>
 80076f6:	4b70      	ldr	r3, [pc, #448]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80076fe:	4a6e      	ldr	r2, [pc, #440]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007704:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007706:	e075      	b.n	80077f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007708:	4b6b      	ldr	r3, [pc, #428]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	069b      	lsls	r3, r3, #26
 8007716:	4968      	ldr	r1, [pc, #416]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007718:	4313      	orrs	r3, r2
 800771a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800771c:	e06a      	b.n	80077f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800771e:	4b66      	ldr	r3, [pc, #408]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	061b      	lsls	r3, r3, #24
 800772c:	4962      	ldr	r1, [pc, #392]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800772e:	4313      	orrs	r3, r2
 8007730:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007732:	e05f      	b.n	80077f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d042      	beq.n	80077c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800773c:	4b5e      	ldr	r3, [pc, #376]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a5d      	ldr	r2, [pc, #372]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007748:	f7fc f8ee 	bl	8003928 <HAL_GetTick>
 800774c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800774e:	e008      	b.n	8007762 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007750:	f7fc f8ea 	bl	8003928 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d901      	bls.n	8007762 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e280      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007762:	4b55      	ldr	r3, [pc, #340]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0f0      	beq.n	8007750 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800776e:	f7fc f90b 	bl	8003988 <HAL_GetREVID>
 8007772:	4603      	mov	r3, r0
 8007774:	f241 0203 	movw	r2, #4099	; 0x1003
 8007778:	4293      	cmp	r3, r2
 800777a:	d817      	bhi.n	80077ac <HAL_RCC_OscConfig+0x3ec>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	2b20      	cmp	r3, #32
 8007782:	d108      	bne.n	8007796 <HAL_RCC_OscConfig+0x3d6>
 8007784:	4b4c      	ldr	r3, [pc, #304]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800778c:	4a4a      	ldr	r2, [pc, #296]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800778e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007792:	6053      	str	r3, [r2, #4]
 8007794:	e02e      	b.n	80077f4 <HAL_RCC_OscConfig+0x434>
 8007796:	4b48      	ldr	r3, [pc, #288]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	069b      	lsls	r3, r3, #26
 80077a4:	4944      	ldr	r1, [pc, #272]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	604b      	str	r3, [r1, #4]
 80077aa:	e023      	b.n	80077f4 <HAL_RCC_OscConfig+0x434>
 80077ac:	4b42      	ldr	r3, [pc, #264]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	061b      	lsls	r3, r3, #24
 80077ba:	493f      	ldr	r1, [pc, #252]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	60cb      	str	r3, [r1, #12]
 80077c0:	e018      	b.n	80077f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077c2:	4b3d      	ldr	r3, [pc, #244]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a3c      	ldr	r2, [pc, #240]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80077c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ce:	f7fc f8ab 	bl	8003928 <HAL_GetTick>
 80077d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077d4:	e008      	b.n	80077e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80077d6:	f7fc f8a7 	bl	8003928 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e23d      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077e8:	4b33      	ldr	r3, [pc, #204]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1f0      	bne.n	80077d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d036      	beq.n	800786e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d019      	beq.n	800783c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007808:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800780a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780c:	4a2a      	ldr	r2, [pc, #168]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007814:	f7fc f888 	bl	8003928 <HAL_GetTick>
 8007818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800781c:	f7fc f884 	bl	8003928 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e21a      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800782e:	4b22      	ldr	r3, [pc, #136]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0f0      	beq.n	800781c <HAL_RCC_OscConfig+0x45c>
 800783a:	e018      	b.n	800786e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800783c:	4b1e      	ldr	r3, [pc, #120]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 800783e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007840:	4a1d      	ldr	r2, [pc, #116]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007842:	f023 0301 	bic.w	r3, r3, #1
 8007846:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007848:	f7fc f86e 	bl	8003928 <HAL_GetTick>
 800784c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007850:	f7fc f86a 	bl	8003928 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e200      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007862:	4b15      	ldr	r3, [pc, #84]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d039      	beq.n	80078ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d01c      	beq.n	80078bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007882:	4b0d      	ldr	r3, [pc, #52]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a0c      	ldr	r2, [pc, #48]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 8007888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800788c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800788e:	f7fc f84b 	bl	8003928 <HAL_GetTick>
 8007892:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007894:	e008      	b.n	80078a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007896:	f7fc f847 	bl	8003928 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e1dd      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078a8:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <HAL_RCC_OscConfig+0x4f8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0f0      	beq.n	8007896 <HAL_RCC_OscConfig+0x4d6>
 80078b4:	e01b      	b.n	80078ee <HAL_RCC_OscConfig+0x52e>
 80078b6:	bf00      	nop
 80078b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078bc:	4b9b      	ldr	r3, [pc, #620]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a9a      	ldr	r2, [pc, #616]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 80078c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078c8:	f7fc f82e 	bl	8003928 <HAL_GetTick>
 80078cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078ce:	e008      	b.n	80078e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078d0:	f7fc f82a 	bl	8003928 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e1c0      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078e2:	4b92      	ldr	r3, [pc, #584]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1f0      	bne.n	80078d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 8081 	beq.w	80079fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078fc:	4b8c      	ldr	r3, [pc, #560]	; (8007b30 <HAL_RCC_OscConfig+0x770>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a8b      	ldr	r2, [pc, #556]	; (8007b30 <HAL_RCC_OscConfig+0x770>)
 8007902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007908:	f7fc f80e 	bl	8003928 <HAL_GetTick>
 800790c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007910:	f7fc f80a 	bl	8003928 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b64      	cmp	r3, #100	; 0x64
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e1a0      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007922:	4b83      	ldr	r3, [pc, #524]	; (8007b30 <HAL_RCC_OscConfig+0x770>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f0      	beq.n	8007910 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d106      	bne.n	8007944 <HAL_RCC_OscConfig+0x584>
 8007936:	4b7d      	ldr	r3, [pc, #500]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	4a7c      	ldr	r2, [pc, #496]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 800793c:	f043 0301 	orr.w	r3, r3, #1
 8007940:	6713      	str	r3, [r2, #112]	; 0x70
 8007942:	e02d      	b.n	80079a0 <HAL_RCC_OscConfig+0x5e0>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10c      	bne.n	8007966 <HAL_RCC_OscConfig+0x5a6>
 800794c:	4b77      	ldr	r3, [pc, #476]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	4a76      	ldr	r2, [pc, #472]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007952:	f023 0301 	bic.w	r3, r3, #1
 8007956:	6713      	str	r3, [r2, #112]	; 0x70
 8007958:	4b74      	ldr	r3, [pc, #464]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 800795a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795c:	4a73      	ldr	r2, [pc, #460]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 800795e:	f023 0304 	bic.w	r3, r3, #4
 8007962:	6713      	str	r3, [r2, #112]	; 0x70
 8007964:	e01c      	b.n	80079a0 <HAL_RCC_OscConfig+0x5e0>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	2b05      	cmp	r3, #5
 800796c:	d10c      	bne.n	8007988 <HAL_RCC_OscConfig+0x5c8>
 800796e:	4b6f      	ldr	r3, [pc, #444]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007972:	4a6e      	ldr	r2, [pc, #440]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007974:	f043 0304 	orr.w	r3, r3, #4
 8007978:	6713      	str	r3, [r2, #112]	; 0x70
 800797a:	4b6c      	ldr	r3, [pc, #432]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	4a6b      	ldr	r2, [pc, #428]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007980:	f043 0301 	orr.w	r3, r3, #1
 8007984:	6713      	str	r3, [r2, #112]	; 0x70
 8007986:	e00b      	b.n	80079a0 <HAL_RCC_OscConfig+0x5e0>
 8007988:	4b68      	ldr	r3, [pc, #416]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798c:	4a67      	ldr	r2, [pc, #412]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 800798e:	f023 0301 	bic.w	r3, r3, #1
 8007992:	6713      	str	r3, [r2, #112]	; 0x70
 8007994:	4b65      	ldr	r3, [pc, #404]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007998:	4a64      	ldr	r2, [pc, #400]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 800799a:	f023 0304 	bic.w	r3, r3, #4
 800799e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d015      	beq.n	80079d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a8:	f7fb ffbe 	bl	8003928 <HAL_GetTick>
 80079ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079ae:	e00a      	b.n	80079c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b0:	f7fb ffba 	bl	8003928 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80079be:	4293      	cmp	r3, r2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e14e      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079c6:	4b59      	ldr	r3, [pc, #356]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0ee      	beq.n	80079b0 <HAL_RCC_OscConfig+0x5f0>
 80079d2:	e014      	b.n	80079fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d4:	f7fb ffa8 	bl	8003928 <HAL_GetTick>
 80079d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079da:	e00a      	b.n	80079f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079dc:	f7fb ffa4 	bl	8003928 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e138      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079f2:	4b4e      	ldr	r3, [pc, #312]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1ee      	bne.n	80079dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 812d 	beq.w	8007c62 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a08:	4b48      	ldr	r3, [pc, #288]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a10:	2b18      	cmp	r3, #24
 8007a12:	f000 80bd 	beq.w	8007b90 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	f040 809e 	bne.w	8007b5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a20:	4b42      	ldr	r3, [pc, #264]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a41      	ldr	r2, [pc, #260]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a2c:	f7fb ff7c 	bl	8003928 <HAL_GetTick>
 8007a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a34:	f7fb ff78 	bl	8003928 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e10e      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a46:	4b39      	ldr	r3, [pc, #228]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f0      	bne.n	8007a34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a52:	4b36      	ldr	r3, [pc, #216]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a56:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <HAL_RCC_OscConfig+0x774>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a62:	0112      	lsls	r2, r2, #4
 8007a64:	430a      	orrs	r2, r1
 8007a66:	4931      	ldr	r1, [pc, #196]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	628b      	str	r3, [r1, #40]	; 0x28
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	3b01      	subs	r3, #1
 8007a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	025b      	lsls	r3, r3, #9
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	431a      	orrs	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	3b01      	subs	r3, #1
 8007a88:	041b      	lsls	r3, r3, #16
 8007a8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a94:	3b01      	subs	r3, #1
 8007a96:	061b      	lsls	r3, r3, #24
 8007a98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a9c:	4923      	ldr	r1, [pc, #140]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007aa2:	4b22      	ldr	r3, [pc, #136]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa6:	4a21      	ldr	r2, [pc, #132]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007aa8:	f023 0301 	bic.w	r3, r3, #1
 8007aac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007aae:	4b1f      	ldr	r3, [pc, #124]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ab2:	4b21      	ldr	r3, [pc, #132]	; (8007b38 <HAL_RCC_OscConfig+0x778>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007aba:	00d2      	lsls	r2, r2, #3
 8007abc:	491b      	ldr	r1, [pc, #108]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ac2:	4b1a      	ldr	r3, [pc, #104]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	f023 020c 	bic.w	r2, r3, #12
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	4917      	ldr	r1, [pc, #92]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ad4:	4b15      	ldr	r3, [pc, #84]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	f023 0202 	bic.w	r2, r3, #2
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae0:	4912      	ldr	r1, [pc, #72]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ae6:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af2:	4b0e      	ldr	r3, [pc, #56]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	4a0d      	ldr	r2, [pc, #52]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007afe:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b02:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007b0a:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	4a07      	ldr	r2, [pc, #28]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007b10:	f043 0301 	orr.w	r3, r3, #1
 8007b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a04      	ldr	r2, [pc, #16]	; (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007b1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b22:	f7fb ff01 	bl	8003928 <HAL_GetTick>
 8007b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b28:	e011      	b.n	8007b4e <HAL_RCC_OscConfig+0x78e>
 8007b2a:	bf00      	nop
 8007b2c:	58024400 	.word	0x58024400
 8007b30:	58024800 	.word	0x58024800
 8007b34:	fffffc0c 	.word	0xfffffc0c
 8007b38:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b3c:	f7fb fef4 	bl	8003928 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e08a      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b4e:	4b47      	ldr	r3, [pc, #284]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f0      	beq.n	8007b3c <HAL_RCC_OscConfig+0x77c>
 8007b5a:	e082      	b.n	8007c62 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b5c:	4b43      	ldr	r3, [pc, #268]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a42      	ldr	r2, [pc, #264]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b68:	f7fb fede 	bl	8003928 <HAL_GetTick>
 8007b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b70:	f7fb feda 	bl	8003928 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e070      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b82:	4b3a      	ldr	r3, [pc, #232]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f0      	bne.n	8007b70 <HAL_RCC_OscConfig+0x7b0>
 8007b8e:	e068      	b.n	8007c62 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007b90:	4b36      	ldr	r3, [pc, #216]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b96:	4b35      	ldr	r3, [pc, #212]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d031      	beq.n	8007c08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f003 0203 	and.w	r2, r3, #3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d12a      	bne.n	8007c08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	091b      	lsrs	r3, r3, #4
 8007bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d122      	bne.n	8007c08 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d11a      	bne.n	8007c08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	0a5b      	lsrs	r3, r3, #9
 8007bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bde:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d111      	bne.n	8007c08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d108      	bne.n	8007c08 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	0e1b      	lsrs	r3, r3, #24
 8007bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d001      	beq.n	8007c0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e02b      	b.n	8007c64 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007c0c:	4b17      	ldr	r3, [pc, #92]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c10:	08db      	lsrs	r3, r3, #3
 8007c12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c16:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d01f      	beq.n	8007c62 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007c22:	4b12      	ldr	r3, [pc, #72]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	4a11      	ldr	r2, [pc, #68]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c2e:	f7fb fe7b 	bl	8003928 <HAL_GetTick>
 8007c32:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007c34:	bf00      	nop
 8007c36:	f7fb fe77 	bl	8003928 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d0f9      	beq.n	8007c36 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c42:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c46:	4b0a      	ldr	r3, [pc, #40]	; (8007c70 <HAL_RCC_OscConfig+0x8b0>)
 8007c48:	4013      	ands	r3, r2
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c4e:	00d2      	lsls	r2, r2, #3
 8007c50:	4906      	ldr	r1, [pc, #24]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007c56:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	4a04      	ldr	r2, [pc, #16]	; (8007c6c <HAL_RCC_OscConfig+0x8ac>)
 8007c5c:	f043 0301 	orr.w	r3, r3, #1
 8007c60:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3730      	adds	r7, #48	; 0x30
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	58024400 	.word	0x58024400
 8007c70:	ffff0007 	.word	0xffff0007

08007c74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e19c      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c88:	4b8a      	ldr	r3, [pc, #552]	; (8007eb4 <HAL_RCC_ClockConfig+0x240>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d910      	bls.n	8007cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c96:	4b87      	ldr	r3, [pc, #540]	; (8007eb4 <HAL_RCC_ClockConfig+0x240>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f023 020f 	bic.w	r2, r3, #15
 8007c9e:	4985      	ldr	r1, [pc, #532]	; (8007eb4 <HAL_RCC_ClockConfig+0x240>)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ca6:	4b83      	ldr	r3, [pc, #524]	; (8007eb4 <HAL_RCC_ClockConfig+0x240>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d001      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e184      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d010      	beq.n	8007ce6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	4b7b      	ldr	r3, [pc, #492]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d908      	bls.n	8007ce6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cd4:	4b78      	ldr	r3, [pc, #480]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	4975      	ldr	r1, [pc, #468]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0308 	and.w	r3, r3, #8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d010      	beq.n	8007d14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695a      	ldr	r2, [r3, #20]
 8007cf6:	4b70      	ldr	r3, [pc, #448]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d908      	bls.n	8007d14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d02:	4b6d      	ldr	r3, [pc, #436]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	496a      	ldr	r1, [pc, #424]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d010      	beq.n	8007d42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	699a      	ldr	r2, [r3, #24]
 8007d24:	4b64      	ldr	r3, [pc, #400]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d908      	bls.n	8007d42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d30:	4b61      	ldr	r3, [pc, #388]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	495e      	ldr	r1, [pc, #376]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d010      	beq.n	8007d70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69da      	ldr	r2, [r3, #28]
 8007d52:	4b59      	ldr	r3, [pc, #356]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d908      	bls.n	8007d70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d5e:	4b56      	ldr	r3, [pc, #344]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	4953      	ldr	r1, [pc, #332]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d010      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	4b4d      	ldr	r3, [pc, #308]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d908      	bls.n	8007d9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d8c:	4b4a      	ldr	r3, [pc, #296]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	f023 020f 	bic.w	r2, r3, #15
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	4947      	ldr	r1, [pc, #284]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d055      	beq.n	8007e56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007daa:	4b43      	ldr	r3, [pc, #268]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	4940      	ldr	r1, [pc, #256]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007db8:	4313      	orrs	r3, r2
 8007dba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d107      	bne.n	8007dd4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dc4:	4b3c      	ldr	r3, [pc, #240]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d121      	bne.n	8007e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e0f6      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d107      	bne.n	8007dec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ddc:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d115      	bne.n	8007e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e0ea      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d107      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007df4:	4b30      	ldr	r3, [pc, #192]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d109      	bne.n	8007e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e0de      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e04:	4b2c      	ldr	r3, [pc, #176]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e0d6      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e14:	4b28      	ldr	r3, [pc, #160]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f023 0207 	bic.w	r2, r3, #7
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4925      	ldr	r1, [pc, #148]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e26:	f7fb fd7f 	bl	8003928 <HAL_GetTick>
 8007e2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e2c:	e00a      	b.n	8007e44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e2e:	f7fb fd7b 	bl	8003928 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e0be      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e44:	4b1c      	ldr	r3, [pc, #112]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d1eb      	bne.n	8007e2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d010      	beq.n	8007e84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f003 030f 	and.w	r3, r3, #15
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d208      	bcs.n	8007e84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e72:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	f023 020f 	bic.w	r2, r3, #15
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	490e      	ldr	r1, [pc, #56]	; (8007eb8 <HAL_RCC_ClockConfig+0x244>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e84:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <HAL_RCC_ClockConfig+0x240>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 030f 	and.w	r3, r3, #15
 8007e8c:	683a      	ldr	r2, [r7, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d214      	bcs.n	8007ebc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e92:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <HAL_RCC_ClockConfig+0x240>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f023 020f 	bic.w	r2, r3, #15
 8007e9a:	4906      	ldr	r1, [pc, #24]	; (8007eb4 <HAL_RCC_ClockConfig+0x240>)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ea2:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <HAL_RCC_ClockConfig+0x240>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d005      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e086      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x34e>
 8007eb4:	52002000 	.word	0x52002000
 8007eb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d010      	beq.n	8007eea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	4b3f      	ldr	r3, [pc, #252]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d208      	bcs.n	8007eea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ed8:	4b3c      	ldr	r3, [pc, #240]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	4939      	ldr	r1, [pc, #228]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0308 	and.w	r3, r3, #8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d010      	beq.n	8007f18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	695a      	ldr	r2, [r3, #20]
 8007efa:	4b34      	ldr	r3, [pc, #208]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d208      	bcs.n	8007f18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f06:	4b31      	ldr	r3, [pc, #196]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	492e      	ldr	r1, [pc, #184]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0310 	and.w	r3, r3, #16
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d010      	beq.n	8007f46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	699a      	ldr	r2, [r3, #24]
 8007f28:	4b28      	ldr	r3, [pc, #160]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d208      	bcs.n	8007f46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f34:	4b25      	ldr	r3, [pc, #148]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	4922      	ldr	r1, [pc, #136]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d010      	beq.n	8007f74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69da      	ldr	r2, [r3, #28]
 8007f56:	4b1d      	ldr	r3, [pc, #116]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d208      	bcs.n	8007f74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f62:	4b1a      	ldr	r3, [pc, #104]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	4917      	ldr	r1, [pc, #92]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f74:	f000 f834 	bl	8007fe0 <HAL_RCC_GetSysClockFreq>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	4b14      	ldr	r3, [pc, #80]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	0a1b      	lsrs	r3, r3, #8
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	4912      	ldr	r1, [pc, #72]	; (8007fd0 <HAL_RCC_ClockConfig+0x35c>)
 8007f86:	5ccb      	ldrb	r3, [r1, r3]
 8007f88:	f003 031f 	and.w	r3, r3, #31
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f92:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <HAL_RCC_ClockConfig+0x358>)
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	4a0d      	ldr	r2, [pc, #52]	; (8007fd0 <HAL_RCC_ClockConfig+0x35c>)
 8007f9c:	5cd3      	ldrb	r3, [r2, r3]
 8007f9e:	f003 031f 	and.w	r3, r3, #31
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa8:	4a0a      	ldr	r2, [pc, #40]	; (8007fd4 <HAL_RCC_ClockConfig+0x360>)
 8007faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007fac:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <HAL_RCC_ClockConfig+0x364>)
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	; (8007fdc <HAL_RCC_ClockConfig+0x368>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fb fc6c 	bl	8003894 <HAL_InitTick>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	58024400 	.word	0x58024400
 8007fd0:	0800d46c 	.word	0x0800d46c
 8007fd4:	24000010 	.word	0x24000010
 8007fd8:	2400000c 	.word	0x2400000c
 8007fdc:	24000028 	.word	0x24000028

08007fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b089      	sub	sp, #36	; 0x24
 8007fe4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fe6:	4bb3      	ldr	r3, [pc, #716]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fee:	2b18      	cmp	r3, #24
 8007ff0:	f200 8155 	bhi.w	800829e <HAL_RCC_GetSysClockFreq+0x2be>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	08008061 	.word	0x08008061
 8008000:	0800829f 	.word	0x0800829f
 8008004:	0800829f 	.word	0x0800829f
 8008008:	0800829f 	.word	0x0800829f
 800800c:	0800829f 	.word	0x0800829f
 8008010:	0800829f 	.word	0x0800829f
 8008014:	0800829f 	.word	0x0800829f
 8008018:	0800829f 	.word	0x0800829f
 800801c:	08008087 	.word	0x08008087
 8008020:	0800829f 	.word	0x0800829f
 8008024:	0800829f 	.word	0x0800829f
 8008028:	0800829f 	.word	0x0800829f
 800802c:	0800829f 	.word	0x0800829f
 8008030:	0800829f 	.word	0x0800829f
 8008034:	0800829f 	.word	0x0800829f
 8008038:	0800829f 	.word	0x0800829f
 800803c:	0800808d 	.word	0x0800808d
 8008040:	0800829f 	.word	0x0800829f
 8008044:	0800829f 	.word	0x0800829f
 8008048:	0800829f 	.word	0x0800829f
 800804c:	0800829f 	.word	0x0800829f
 8008050:	0800829f 	.word	0x0800829f
 8008054:	0800829f 	.word	0x0800829f
 8008058:	0800829f 	.word	0x0800829f
 800805c:	08008093 	.word	0x08008093
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008060:	4b94      	ldr	r3, [pc, #592]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0320 	and.w	r3, r3, #32
 8008068:	2b00      	cmp	r3, #0
 800806a:	d009      	beq.n	8008080 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800806c:	4b91      	ldr	r3, [pc, #580]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	08db      	lsrs	r3, r3, #3
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	4a90      	ldr	r2, [pc, #576]	; (80082b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008078:	fa22 f303 	lsr.w	r3, r2, r3
 800807c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800807e:	e111      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008080:	4b8d      	ldr	r3, [pc, #564]	; (80082b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008082:	61bb      	str	r3, [r7, #24]
      break;
 8008084:	e10e      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008086:	4b8d      	ldr	r3, [pc, #564]	; (80082bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008088:	61bb      	str	r3, [r7, #24]
      break;
 800808a:	e10b      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800808c:	4b8c      	ldr	r3, [pc, #560]	; (80082c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800808e:	61bb      	str	r3, [r7, #24]
      break;
 8008090:	e108      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008092:	4b88      	ldr	r3, [pc, #544]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800809c:	4b85      	ldr	r3, [pc, #532]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800809e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a0:	091b      	lsrs	r3, r3, #4
 80080a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80080a8:	4b82      	ldr	r3, [pc, #520]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80080b2:	4b80      	ldr	r3, [pc, #512]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b6:	08db      	lsrs	r3, r3, #3
 80080b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	fb02 f303 	mul.w	r3, r2, r3
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80e1 	beq.w	8008298 <HAL_RCC_GetSysClockFreq+0x2b8>
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	f000 8083 	beq.w	80081e4 <HAL_RCC_GetSysClockFreq+0x204>
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	f200 80a1 	bhi.w	8008228 <HAL_RCC_GetSysClockFreq+0x248>
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <HAL_RCC_GetSysClockFreq+0x114>
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d056      	beq.n	80081a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80080f2:	e099      	b.n	8008228 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080f4:	4b6f      	ldr	r3, [pc, #444]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d02d      	beq.n	800815c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008100:	4b6c      	ldr	r3, [pc, #432]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	08db      	lsrs	r3, r3, #3
 8008106:	f003 0303 	and.w	r3, r3, #3
 800810a:	4a6b      	ldr	r2, [pc, #428]	; (80082b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800810c:	fa22 f303 	lsr.w	r3, r2, r3
 8008110:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812a:	4b62      	ldr	r3, [pc, #392]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813a:	ed97 6a02 	vldr	s12, [r7, #8]
 800813e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80082c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800814e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008156:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800815a:	e087      	b.n	800826c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	eddf 6a58 	vldr	s13, [pc, #352]	; 80082c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800816a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816e:	4b51      	ldr	r3, [pc, #324]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008182:	eddf 5a50 	vldr	s11, [pc, #320]	; 80082c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800819e:	e065      	b.n	800826c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80082cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80081ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b2:	4b40      	ldr	r3, [pc, #256]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80082c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80081e2:	e043      	b.n	800826c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80082d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80081f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f6:	4b2f      	ldr	r3, [pc, #188]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008206:	ed97 6a02 	vldr	s12, [r7, #8]
 800820a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80082c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800820e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800821a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008226:	e021      	b.n	800826c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008232:	eddf 6a26 	vldr	s13, [pc, #152]	; 80082cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823a:	4b1e      	ldr	r3, [pc, #120]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824a:	ed97 6a02 	vldr	s12, [r7, #8]
 800824e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80082c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800825e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800826a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800826c:	4b11      	ldr	r3, [pc, #68]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	0a5b      	lsrs	r3, r3, #9
 8008272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008276:	3301      	adds	r3, #1
 8008278:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008284:	edd7 6a07 	vldr	s13, [r7, #28]
 8008288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800828c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008290:	ee17 3a90 	vmov	r3, s15
 8008294:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008296:	e005      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	61bb      	str	r3, [r7, #24]
      break;
 800829c:	e002      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800829e:	4b07      	ldr	r3, [pc, #28]	; (80082bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082a0:	61bb      	str	r3, [r7, #24]
      break;
 80082a2:	bf00      	nop
  }

  return sysclockfreq;
 80082a4:	69bb      	ldr	r3, [r7, #24]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3724      	adds	r7, #36	; 0x24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	58024400 	.word	0x58024400
 80082b8:	03d09000 	.word	0x03d09000
 80082bc:	003d0900 	.word	0x003d0900
 80082c0:	017d7840 	.word	0x017d7840
 80082c4:	46000000 	.word	0x46000000
 80082c8:	4c742400 	.word	0x4c742400
 80082cc:	4a742400 	.word	0x4a742400
 80082d0:	4bbebc20 	.word	0x4bbebc20

080082d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80082da:	f7ff fe81 	bl	8007fe0 <HAL_RCC_GetSysClockFreq>
 80082de:	4602      	mov	r2, r0
 80082e0:	4b10      	ldr	r3, [pc, #64]	; (8008324 <HAL_RCC_GetHCLKFreq+0x50>)
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	0a1b      	lsrs	r3, r3, #8
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	490f      	ldr	r1, [pc, #60]	; (8008328 <HAL_RCC_GetHCLKFreq+0x54>)
 80082ec:	5ccb      	ldrb	r3, [r1, r3]
 80082ee:	f003 031f 	and.w	r3, r3, #31
 80082f2:	fa22 f303 	lsr.w	r3, r2, r3
 80082f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082f8:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <HAL_RCC_GetHCLKFreq+0x50>)
 80082fa:	699b      	ldr	r3, [r3, #24]
 80082fc:	f003 030f 	and.w	r3, r3, #15
 8008300:	4a09      	ldr	r2, [pc, #36]	; (8008328 <HAL_RCC_GetHCLKFreq+0x54>)
 8008302:	5cd3      	ldrb	r3, [r2, r3]
 8008304:	f003 031f 	and.w	r3, r3, #31
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	fa22 f303 	lsr.w	r3, r2, r3
 800830e:	4a07      	ldr	r2, [pc, #28]	; (800832c <HAL_RCC_GetHCLKFreq+0x58>)
 8008310:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008312:	4a07      	ldr	r2, [pc, #28]	; (8008330 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008318:	4b04      	ldr	r3, [pc, #16]	; (800832c <HAL_RCC_GetHCLKFreq+0x58>)
 800831a:	681b      	ldr	r3, [r3, #0]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	58024400 	.word	0x58024400
 8008328:	0800d46c 	.word	0x0800d46c
 800832c:	24000010 	.word	0x24000010
 8008330:	2400000c 	.word	0x2400000c

08008334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008338:	f7ff ffcc 	bl	80082d4 <HAL_RCC_GetHCLKFreq>
 800833c:	4602      	mov	r2, r0
 800833e:	4b06      	ldr	r3, [pc, #24]	; (8008358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	0a1b      	lsrs	r3, r3, #8
 8008344:	f003 0307 	and.w	r3, r3, #7
 8008348:	4904      	ldr	r1, [pc, #16]	; (800835c <HAL_RCC_GetPCLK2Freq+0x28>)
 800834a:	5ccb      	ldrb	r3, [r1, r3]
 800834c:	f003 031f 	and.w	r3, r3, #31
 8008350:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008354:	4618      	mov	r0, r3
 8008356:	bd80      	pop	{r7, pc}
 8008358:	58024400 	.word	0x58024400
 800835c:	0800d46c 	.word	0x0800d46c

08008360 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008364:	b0ca      	sub	sp, #296	; 0x128
 8008366:	af00      	add	r7, sp, #0
 8008368:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800836c:	2300      	movs	r3, #0
 800836e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008372:	2300      	movs	r3, #0
 8008374:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008384:	2500      	movs	r5, #0
 8008386:	ea54 0305 	orrs.w	r3, r4, r5
 800838a:	d049      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800838c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008392:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008396:	d02f      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800839c:	d828      	bhi.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800839e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083a2:	d01a      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80083a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083a8:	d822      	bhi.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80083ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083b2:	d007      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80083b4:	e01c      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b6:	4bb8      	ldr	r3, [pc, #736]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	4ab7      	ldr	r2, [pc, #732]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80083c2:	e01a      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c8:	3308      	adds	r3, #8
 80083ca:	2102      	movs	r1, #2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 f9d1 	bl	8009774 <RCCEx_PLL2_Config>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80083d8:	e00f      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083de:	3328      	adds	r3, #40	; 0x28
 80083e0:	2102      	movs	r1, #2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 fa78 	bl	80098d8 <RCCEx_PLL3_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80083ee:	e004      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083f6:	e000      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80083f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10a      	bne.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008402:	4ba5      	ldr	r3, [pc, #660]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008406:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800840a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008410:	4aa1      	ldr	r2, [pc, #644]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008412:	430b      	orrs	r3, r1
 8008414:	6513      	str	r3, [r2, #80]	; 0x50
 8008416:	e003      	b.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800841c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800842c:	f04f 0900 	mov.w	r9, #0
 8008430:	ea58 0309 	orrs.w	r3, r8, r9
 8008434:	d047      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800843a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843c:	2b04      	cmp	r3, #4
 800843e:	d82a      	bhi.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008440:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	0800845d 	.word	0x0800845d
 800844c:	0800846b 	.word	0x0800846b
 8008450:	08008481 	.word	0x08008481
 8008454:	0800849f 	.word	0x0800849f
 8008458:	0800849f 	.word	0x0800849f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800845c:	4b8e      	ldr	r3, [pc, #568]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	4a8d      	ldr	r2, [pc, #564]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008468:	e01a      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800846a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846e:	3308      	adds	r3, #8
 8008470:	2100      	movs	r1, #0
 8008472:	4618      	mov	r0, r3
 8008474:	f001 f97e 	bl	8009774 <RCCEx_PLL2_Config>
 8008478:	4603      	mov	r3, r0
 800847a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800847e:	e00f      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008484:	3328      	adds	r3, #40	; 0x28
 8008486:	2100      	movs	r1, #0
 8008488:	4618      	mov	r0, r3
 800848a:	f001 fa25 	bl	80098d8 <RCCEx_PLL3_Config>
 800848e:	4603      	mov	r3, r0
 8008490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008494:	e004      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800849c:	e000      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800849e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084a8:	4b7b      	ldr	r3, [pc, #492]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ac:	f023 0107 	bic.w	r1, r3, #7
 80084b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b6:	4a78      	ldr	r2, [pc, #480]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084b8:	430b      	orrs	r3, r1
 80084ba:	6513      	str	r3, [r2, #80]	; 0x50
 80084bc:	e003      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80084c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80084d2:	f04f 0b00 	mov.w	fp, #0
 80084d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80084da:	d04c      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80084dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e6:	d030      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80084e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ec:	d829      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80084ee:	2bc0      	cmp	r3, #192	; 0xc0
 80084f0:	d02d      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80084f2:	2bc0      	cmp	r3, #192	; 0xc0
 80084f4:	d825      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d018      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80084fa:	2b80      	cmp	r3, #128	; 0x80
 80084fc:	d821      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d002      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008502:	2b40      	cmp	r3, #64	; 0x40
 8008504:	d007      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008506:	e01c      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008508:	4b63      	ldr	r3, [pc, #396]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	4a62      	ldr	r2, [pc, #392]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800850e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008514:	e01c      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851a:	3308      	adds	r3, #8
 800851c:	2100      	movs	r1, #0
 800851e:	4618      	mov	r0, r3
 8008520:	f001 f928 	bl	8009774 <RCCEx_PLL2_Config>
 8008524:	4603      	mov	r3, r0
 8008526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800852a:	e011      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008530:	3328      	adds	r3, #40	; 0x28
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f001 f9cf 	bl	80098d8 <RCCEx_PLL3_Config>
 800853a:	4603      	mov	r3, r0
 800853c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008540:	e006      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008548:	e002      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800854a:	bf00      	nop
 800854c:	e000      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800854e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008558:	4b4f      	ldr	r3, [pc, #316]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800855a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008566:	4a4c      	ldr	r2, [pc, #304]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008568:	430b      	orrs	r3, r1
 800856a:	6513      	str	r3, [r2, #80]	; 0x50
 800856c:	e003      	b.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008572:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008582:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008586:	2300      	movs	r3, #0
 8008588:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800858c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008590:	460b      	mov	r3, r1
 8008592:	4313      	orrs	r3, r2
 8008594:	d053      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800859e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085a2:	d035      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80085a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085a8:	d82e      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80085aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085ae:	d031      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80085b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085b4:	d828      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80085b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ba:	d01a      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80085bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085c0:	d822      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80085c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ca:	d007      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80085cc:	e01c      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085ce:	4b32      	ldr	r3, [pc, #200]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	4a31      	ldr	r2, [pc, #196]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085da:	e01c      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e0:	3308      	adds	r3, #8
 80085e2:	2100      	movs	r1, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 f8c5 	bl	8009774 <RCCEx_PLL2_Config>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80085f0:	e011      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f6:	3328      	adds	r3, #40	; 0x28
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 f96c 	bl	80098d8 <RCCEx_PLL3_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008606:	e006      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800860e:	e002      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008610:	bf00      	nop
 8008612:	e000      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800861e:	4b1e      	ldr	r3, [pc, #120]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008622:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800862e:	4a1a      	ldr	r2, [pc, #104]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008630:	430b      	orrs	r3, r1
 8008632:	6593      	str	r3, [r2, #88]	; 0x58
 8008634:	e003      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800863a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800864a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800864e:	2300      	movs	r3, #0
 8008650:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008654:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008658:	460b      	mov	r3, r1
 800865a:	4313      	orrs	r3, r2
 800865c:	d056      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800865e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800866a:	d038      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800866c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008670:	d831      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008672:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008676:	d034      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008678:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800867c:	d82b      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800867e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008682:	d01d      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008688:	d825      	bhi.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d006      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800868e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008692:	d00a      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008694:	e01f      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008696:	bf00      	nop
 8008698:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800869c:	4ba2      	ldr	r3, [pc, #648]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	4aa1      	ldr	r2, [pc, #644]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086a8:	e01c      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ae:	3308      	adds	r3, #8
 80086b0:	2100      	movs	r1, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	f001 f85e 	bl	8009774 <RCCEx_PLL2_Config>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80086be:	e011      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c4:	3328      	adds	r3, #40	; 0x28
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 f905 	bl	80098d8 <RCCEx_PLL3_Config>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086d4:	e006      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086dc:	e002      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80086de:	bf00      	nop
 80086e0:	e000      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80086e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10b      	bne.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80086ec:	4b8e      	ldr	r3, [pc, #568]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80086f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086fc:	4a8a      	ldr	r2, [pc, #552]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086fe:	430b      	orrs	r3, r1
 8008700:	6593      	str	r3, [r2, #88]	; 0x58
 8008702:	e003      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800871c:	2300      	movs	r3, #0
 800871e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008722:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008726:	460b      	mov	r3, r1
 8008728:	4313      	orrs	r3, r2
 800872a:	d03a      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800872c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008732:	2b30      	cmp	r3, #48	; 0x30
 8008734:	d01f      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008736:	2b30      	cmp	r3, #48	; 0x30
 8008738:	d819      	bhi.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800873a:	2b20      	cmp	r3, #32
 800873c:	d00c      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800873e:	2b20      	cmp	r3, #32
 8008740:	d815      	bhi.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d019      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008746:	2b10      	cmp	r3, #16
 8008748:	d111      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800874a:	4b77      	ldr	r3, [pc, #476]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	4a76      	ldr	r2, [pc, #472]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008756:	e011      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875c:	3308      	adds	r3, #8
 800875e:	2102      	movs	r1, #2
 8008760:	4618      	mov	r0, r3
 8008762:	f001 f807 	bl	8009774 <RCCEx_PLL2_Config>
 8008766:	4603      	mov	r3, r0
 8008768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800876c:	e006      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008774:	e002      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008776:	bf00      	nop
 8008778:	e000      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800877a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800877c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008784:	4b68      	ldr	r3, [pc, #416]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008788:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800878c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008792:	4a65      	ldr	r2, [pc, #404]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008794:	430b      	orrs	r3, r1
 8008796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008798:	e003      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800879e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80087a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80087ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80087b2:	2300      	movs	r3, #0
 80087b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80087b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80087bc:	460b      	mov	r3, r1
 80087be:	4313      	orrs	r3, r2
 80087c0:	d051      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80087c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087cc:	d035      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80087ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087d2:	d82e      	bhi.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80087d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087d8:	d031      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80087da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087de:	d828      	bhi.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80087e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087e4:	d01a      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80087e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ea:	d822      	bhi.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80087f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f4:	d007      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80087f6:	e01c      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087f8:	4b4b      	ldr	r3, [pc, #300]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	4a4a      	ldr	r2, [pc, #296]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008804:	e01c      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880a:	3308      	adds	r3, #8
 800880c:	2100      	movs	r1, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f000 ffb0 	bl	8009774 <RCCEx_PLL2_Config>
 8008814:	4603      	mov	r3, r0
 8008816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800881a:	e011      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800881c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008820:	3328      	adds	r3, #40	; 0x28
 8008822:	2100      	movs	r1, #0
 8008824:	4618      	mov	r0, r3
 8008826:	f001 f857 	bl	80098d8 <RCCEx_PLL3_Config>
 800882a:	4603      	mov	r3, r0
 800882c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008830:	e006      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008838:	e002      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800883a:	bf00      	nop
 800883c:	e000      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800883e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008848:	4b37      	ldr	r3, [pc, #220]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800884a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800884c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008856:	4a34      	ldr	r2, [pc, #208]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008858:	430b      	orrs	r3, r1
 800885a:	6513      	str	r3, [r2, #80]	; 0x50
 800885c:	e003      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800885e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008876:	2300      	movs	r3, #0
 8008878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800887c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008880:	460b      	mov	r3, r1
 8008882:	4313      	orrs	r3, r2
 8008884:	d056      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800888c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008890:	d033      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008896:	d82c      	bhi.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800889c:	d02f      	beq.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800889e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088a2:	d826      	bhi.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80088a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088a8:	d02b      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80088aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088ae:	d820      	bhi.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80088b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088b4:	d012      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80088b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ba:	d81a      	bhi.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d022      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80088c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c4:	d115      	bne.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ca:	3308      	adds	r3, #8
 80088cc:	2101      	movs	r1, #1
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 ff50 	bl	8009774 <RCCEx_PLL2_Config>
 80088d4:	4603      	mov	r3, r0
 80088d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80088da:	e015      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e0:	3328      	adds	r3, #40	; 0x28
 80088e2:	2101      	movs	r1, #1
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fff7 	bl	80098d8 <RCCEx_PLL3_Config>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80088f0:	e00a      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088f8:	e006      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80088fa:	bf00      	nop
 80088fc:	e004      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80088fe:	bf00      	nop
 8008900:	e002      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008902:	bf00      	nop
 8008904:	e000      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10d      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008910:	4b05      	ldr	r3, [pc, #20]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008914:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800891c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800891e:	4a02      	ldr	r2, [pc, #8]	; (8008928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008920:	430b      	orrs	r3, r1
 8008922:	6513      	str	r3, [r2, #80]	; 0x50
 8008924:	e006      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008926:	bf00      	nop
 8008928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008944:	2300      	movs	r3, #0
 8008946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800894a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800894e:	460b      	mov	r3, r1
 8008950:	4313      	orrs	r3, r2
 8008952:	d055      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800895c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008960:	d033      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008966:	d82c      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896c:	d02f      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800896e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008972:	d826      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008974:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008978:	d02b      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800897a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800897e:	d820      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008984:	d012      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898a:	d81a      	bhi.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d022      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008994:	d115      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800899a:	3308      	adds	r3, #8
 800899c:	2101      	movs	r1, #1
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 fee8 	bl	8009774 <RCCEx_PLL2_Config>
 80089a4:	4603      	mov	r3, r0
 80089a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80089aa:	e015      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b0:	3328      	adds	r3, #40	; 0x28
 80089b2:	2101      	movs	r1, #1
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 ff8f 	bl	80098d8 <RCCEx_PLL3_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80089c0:	e00a      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089c8:	e006      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80089ca:	bf00      	nop
 80089cc:	e004      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80089ce:	bf00      	nop
 80089d0:	e002      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80089d2:	bf00      	nop
 80089d4:	e000      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80089d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80089e0:	4ba3      	ldr	r3, [pc, #652]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089f0:	4a9f      	ldr	r2, [pc, #636]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089f2:	430b      	orrs	r3, r1
 80089f4:	6593      	str	r3, [r2, #88]	; 0x58
 80089f6:	e003      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a10:	2300      	movs	r3, #0
 8008a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	d037      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a2a:	d00e      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a30:	d816      	bhi.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d018      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a3a:	d111      	bne.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a3c:	4b8c      	ldr	r3, [pc, #560]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	4a8b      	ldr	r2, [pc, #556]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a48:	e00f      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4e:	3308      	adds	r3, #8
 8008a50:	2101      	movs	r1, #1
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fe8e 	bl	8009774 <RCCEx_PLL2_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a5e:	e004      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a66:	e000      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a72:	4b7f      	ldr	r3, [pc, #508]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a80:	4a7b      	ldr	r2, [pc, #492]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a82:	430b      	orrs	r3, r1
 8008a84:	6513      	str	r3, [r2, #80]	; 0x50
 8008a86:	e003      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008aa6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4313      	orrs	r3, r2
 8008aae:	d039      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d81c      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008aba:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008afd 	.word	0x08008afd
 8008ac4:	08008ad1 	.word	0x08008ad1
 8008ac8:	08008adf 	.word	0x08008adf
 8008acc:	08008afd 	.word	0x08008afd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad0:	4b67      	ldr	r3, [pc, #412]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	4a66      	ldr	r2, [pc, #408]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008adc:	e00f      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	2102      	movs	r1, #2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fe44 	bl	8009774 <RCCEx_PLL2_Config>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008af2:	e004      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008afa:	e000      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10a      	bne.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b06:	4b5a      	ldr	r3, [pc, #360]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b0a:	f023 0103 	bic.w	r1, r3, #3
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b14:	4a56      	ldr	r2, [pc, #344]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b16:	430b      	orrs	r3, r1
 8008b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b1a:	e003      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b34:	2300      	movs	r3, #0
 8008b36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4313      	orrs	r3, r2
 8008b42:	f000 809f 	beq.w	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b46:	4b4b      	ldr	r3, [pc, #300]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a4a      	ldr	r2, [pc, #296]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b52:	f7fa fee9 	bl	8003928 <HAL_GetTick>
 8008b56:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b5a:	e00b      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b5c:	f7fa fee4 	bl	8003928 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	2b64      	cmp	r3, #100	; 0x64
 8008b6a:	d903      	bls.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b72:	e005      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b74:	4b3f      	ldr	r3, [pc, #252]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0ed      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d179      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b88:	4b39      	ldr	r3, [pc, #228]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b94:	4053      	eors	r3, r2
 8008b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d015      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b9e:	4b34      	ldr	r3, [pc, #208]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ba6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008baa:	4b31      	ldr	r3, [pc, #196]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bae:	4a30      	ldr	r2, [pc, #192]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bb4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008bb6:	4b2e      	ldr	r3, [pc, #184]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bba:	4a2d      	ldr	r2, [pc, #180]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bc0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008bc2:	4a2b      	ldr	r2, [pc, #172]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008bc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd6:	d118      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd8:	f7fa fea6 	bl	8003928 <HAL_GetTick>
 8008bdc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008be0:	e00d      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008be2:	f7fa fea1 	bl	8003928 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008bec:	1ad2      	subs	r2, r2, r3
 8008bee:	f241 3388 	movw	r3, #5000	; 0x1388
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d903      	bls.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008bfc:	e005      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bfe:	4b1c      	ldr	r3, [pc, #112]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0eb      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d129      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c22:	d10e      	bne.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008c24:	4b12      	ldr	r3, [pc, #72]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c34:	091a      	lsrs	r2, r3, #4
 8008c36:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008c38:	4013      	ands	r3, r2
 8008c3a:	4a0d      	ldr	r2, [pc, #52]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c3c:	430b      	orrs	r3, r1
 8008c3e:	6113      	str	r3, [r2, #16]
 8008c40:	e005      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008c42:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	4a0a      	ldr	r2, [pc, #40]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c4c:	6113      	str	r3, [r2, #16]
 8008c4e:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c5e:	4a04      	ldr	r2, [pc, #16]	; (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6713      	str	r3, [r2, #112]	; 0x70
 8008c64:	e00e      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008c6e:	e009      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008c70:	58024400 	.word	0x58024400
 8008c74:	58024800 	.word	0x58024800
 8008c78:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	f002 0301 	and.w	r3, r2, #1
 8008c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c94:	2300      	movs	r3, #0
 8008c96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	f000 8089 	beq.w	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cac:	2b28      	cmp	r3, #40	; 0x28
 8008cae:	d86b      	bhi.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008cb0:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb6:	bf00      	nop
 8008cb8:	08008d91 	.word	0x08008d91
 8008cbc:	08008d89 	.word	0x08008d89
 8008cc0:	08008d89 	.word	0x08008d89
 8008cc4:	08008d89 	.word	0x08008d89
 8008cc8:	08008d89 	.word	0x08008d89
 8008ccc:	08008d89 	.word	0x08008d89
 8008cd0:	08008d89 	.word	0x08008d89
 8008cd4:	08008d89 	.word	0x08008d89
 8008cd8:	08008d5d 	.word	0x08008d5d
 8008cdc:	08008d89 	.word	0x08008d89
 8008ce0:	08008d89 	.word	0x08008d89
 8008ce4:	08008d89 	.word	0x08008d89
 8008ce8:	08008d89 	.word	0x08008d89
 8008cec:	08008d89 	.word	0x08008d89
 8008cf0:	08008d89 	.word	0x08008d89
 8008cf4:	08008d89 	.word	0x08008d89
 8008cf8:	08008d73 	.word	0x08008d73
 8008cfc:	08008d89 	.word	0x08008d89
 8008d00:	08008d89 	.word	0x08008d89
 8008d04:	08008d89 	.word	0x08008d89
 8008d08:	08008d89 	.word	0x08008d89
 8008d0c:	08008d89 	.word	0x08008d89
 8008d10:	08008d89 	.word	0x08008d89
 8008d14:	08008d89 	.word	0x08008d89
 8008d18:	08008d91 	.word	0x08008d91
 8008d1c:	08008d89 	.word	0x08008d89
 8008d20:	08008d89 	.word	0x08008d89
 8008d24:	08008d89 	.word	0x08008d89
 8008d28:	08008d89 	.word	0x08008d89
 8008d2c:	08008d89 	.word	0x08008d89
 8008d30:	08008d89 	.word	0x08008d89
 8008d34:	08008d89 	.word	0x08008d89
 8008d38:	08008d91 	.word	0x08008d91
 8008d3c:	08008d89 	.word	0x08008d89
 8008d40:	08008d89 	.word	0x08008d89
 8008d44:	08008d89 	.word	0x08008d89
 8008d48:	08008d89 	.word	0x08008d89
 8008d4c:	08008d89 	.word	0x08008d89
 8008d50:	08008d89 	.word	0x08008d89
 8008d54:	08008d89 	.word	0x08008d89
 8008d58:	08008d91 	.word	0x08008d91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d60:	3308      	adds	r3, #8
 8008d62:	2101      	movs	r1, #1
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fd05 	bl	8009774 <RCCEx_PLL2_Config>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008d70:	e00f      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d76:	3328      	adds	r3, #40	; 0x28
 8008d78:	2101      	movs	r1, #1
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 fdac 	bl	80098d8 <RCCEx_PLL3_Config>
 8008d80:	4603      	mov	r3, r0
 8008d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008d86:	e004      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d8e:	e000      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d9a:	4bbf      	ldr	r3, [pc, #764]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da8:	4abb      	ldr	r2, [pc, #748]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008daa:	430b      	orrs	r3, r1
 8008dac:	6553      	str	r3, [r2, #84]	; 0x54
 8008dae:	e003      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	f002 0302 	and.w	r3, r2, #2
 8008dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008dce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	d041      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dde:	2b05      	cmp	r3, #5
 8008de0:	d824      	bhi.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008e35 	.word	0x08008e35
 8008dec:	08008e01 	.word	0x08008e01
 8008df0:	08008e17 	.word	0x08008e17
 8008df4:	08008e35 	.word	0x08008e35
 8008df8:	08008e35 	.word	0x08008e35
 8008dfc:	08008e35 	.word	0x08008e35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e04:	3308      	adds	r3, #8
 8008e06:	2101      	movs	r1, #1
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fcb3 	bl	8009774 <RCCEx_PLL2_Config>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e14:	e00f      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e1a:	3328      	adds	r3, #40	; 0x28
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fd5a 	bl	80098d8 <RCCEx_PLL3_Config>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e2a:	e004      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e32:	e000      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e3e:	4b96      	ldr	r3, [pc, #600]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e42:	f023 0107 	bic.w	r1, r3, #7
 8008e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e4c:	4a92      	ldr	r2, [pc, #584]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e4e:	430b      	orrs	r3, r1
 8008e50:	6553      	str	r3, [r2, #84]	; 0x54
 8008e52:	e003      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f002 0304 	and.w	r3, r2, #4
 8008e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	d044      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e84:	2b05      	cmp	r3, #5
 8008e86:	d825      	bhi.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008e88:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008edd 	.word	0x08008edd
 8008e94:	08008ea9 	.word	0x08008ea9
 8008e98:	08008ebf 	.word	0x08008ebf
 8008e9c:	08008edd 	.word	0x08008edd
 8008ea0:	08008edd 	.word	0x08008edd
 8008ea4:	08008edd 	.word	0x08008edd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eac:	3308      	adds	r3, #8
 8008eae:	2101      	movs	r1, #1
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fc5f 	bl	8009774 <RCCEx_PLL2_Config>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ebc:	e00f      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec2:	3328      	adds	r3, #40	; 0x28
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fd06 	bl	80098d8 <RCCEx_PLL3_Config>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ed2:	e004      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008eda:	e000      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ee6:	4b6c      	ldr	r3, [pc, #432]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eea:	f023 0107 	bic.w	r1, r3, #7
 8008eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ef6:	4a68      	ldr	r2, [pc, #416]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6593      	str	r3, [r2, #88]	; 0x58
 8008efc:	e003      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0e:	f002 0320 	and.w	r3, r2, #32
 8008f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f20:	460b      	mov	r3, r1
 8008f22:	4313      	orrs	r3, r2
 8008f24:	d055      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f32:	d033      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f38:	d82c      	bhi.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3e:	d02f      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f44:	d826      	bhi.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f4a:	d02b      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008f4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f50:	d820      	bhi.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f56:	d012      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f5c:	d81a      	bhi.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d022      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f66:	d115      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fbff 	bl	8009774 <RCCEx_PLL2_Config>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f7c:	e015      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f82:	3328      	adds	r3, #40	; 0x28
 8008f84:	2102      	movs	r1, #2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fca6 	bl	80098d8 <RCCEx_PLL3_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f92:	e00a      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f9a:	e006      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008f9c:	bf00      	nop
 8008f9e:	e004      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008fa0:	bf00      	nop
 8008fa2:	e002      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008fa4:	bf00      	nop
 8008fa6:	e000      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10b      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fb2:	4b39      	ldr	r3, [pc, #228]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc2:	4a35      	ldr	r2, [pc, #212]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	6553      	str	r3, [r2, #84]	; 0x54
 8008fc8:	e003      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008fe8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	d058      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ffa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ffe:	d033      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009000:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009004:	d82c      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800900a:	d02f      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800900c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009010:	d826      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009016:	d02b      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009018:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800901c:	d820      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800901e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009022:	d012      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009028:	d81a      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d022      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800902e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009032:	d115      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009038:	3308      	adds	r3, #8
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fb99 	bl	8009774 <RCCEx_PLL2_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009048:	e015      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904e:	3328      	adds	r3, #40	; 0x28
 8009050:	2102      	movs	r1, #2
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fc40 	bl	80098d8 <RCCEx_PLL3_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800905e:	e00a      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009066:	e006      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009068:	bf00      	nop
 800906a:	e004      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800906c:	bf00      	nop
 800906e:	e002      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009070:	bf00      	nop
 8009072:	e000      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10e      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800907e:	4b06      	ldr	r3, [pc, #24]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009082:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800908e:	4a02      	ldr	r2, [pc, #8]	; (8009098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009090:	430b      	orrs	r3, r1
 8009092:	6593      	str	r3, [r2, #88]	; 0x58
 8009094:	e006      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009096:	bf00      	nop
 8009098:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80090a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80090b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090b4:	2300      	movs	r3, #0
 80090b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80090be:	460b      	mov	r3, r1
 80090c0:	4313      	orrs	r3, r2
 80090c2:	d055      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80090c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80090d0:	d033      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80090d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80090d6:	d82c      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80090d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090dc:	d02f      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80090de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090e2:	d826      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80090e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80090e8:	d02b      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80090ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80090ee:	d820      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80090f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090f4:	d012      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80090f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090fa:	d81a      	bhi.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d022      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009104:	d115      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910a:	3308      	adds	r3, #8
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fb30 	bl	8009774 <RCCEx_PLL2_Config>
 8009114:	4603      	mov	r3, r0
 8009116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800911a:	e015      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800911c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009120:	3328      	adds	r3, #40	; 0x28
 8009122:	2102      	movs	r1, #2
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fbd7 	bl	80098d8 <RCCEx_PLL3_Config>
 800912a:	4603      	mov	r3, r0
 800912c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009130:	e00a      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009138:	e006      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800913a:	bf00      	nop
 800913c:	e004      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800913e:	bf00      	nop
 8009140:	e002      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10b      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009150:	4ba1      	ldr	r3, [pc, #644]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009154:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800915c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009160:	4a9d      	ldr	r2, [pc, #628]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009162:	430b      	orrs	r3, r1
 8009164:	6593      	str	r3, [r2, #88]	; 0x58
 8009166:	e003      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800916c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f002 0308 	and.w	r3, r2, #8
 800917c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009180:	2300      	movs	r3, #0
 8009182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009186:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800918a:	460b      	mov	r3, r1
 800918c:	4313      	orrs	r3, r2
 800918e:	d01e      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800919c:	d10c      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a2:	3328      	adds	r3, #40	; 0x28
 80091a4:	2102      	movs	r1, #2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fb96 	bl	80098d8 <RCCEx_PLL3_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80091b8:	4b87      	ldr	r3, [pc, #540]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c8:	4a83      	ldr	r2, [pc, #524]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091ca:	430b      	orrs	r3, r1
 80091cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80091ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	f002 0310 	and.w	r3, r2, #16
 80091da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091de:	2300      	movs	r3, #0
 80091e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80091e8:	460b      	mov	r3, r1
 80091ea:	4313      	orrs	r3, r2
 80091ec:	d01e      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091fa:	d10c      	bne.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009200:	3328      	adds	r3, #40	; 0x28
 8009202:	2102      	movs	r1, #2
 8009204:	4618      	mov	r0, r3
 8009206:	f000 fb67 	bl	80098d8 <RCCEx_PLL3_Config>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009216:	4b70      	ldr	r3, [pc, #448]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009226:	4a6c      	ldr	r2, [pc, #432]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009228:	430b      	orrs	r3, r1
 800922a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800922c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800923c:	2300      	movs	r3, #0
 800923e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009242:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009246:	460b      	mov	r3, r1
 8009248:	4313      	orrs	r3, r2
 800924a:	d03e      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800924c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009258:	d022      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800925a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800925e:	d81b      	bhi.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009268:	d00b      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800926a:	e015      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800926c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009270:	3308      	adds	r3, #8
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fa7d 	bl	8009774 <RCCEx_PLL2_Config>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009280:	e00f      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009286:	3328      	adds	r3, #40	; 0x28
 8009288:	2102      	movs	r1, #2
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fb24 	bl	80098d8 <RCCEx_PLL3_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009296:	e004      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800929e:	e000      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80092a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10b      	bne.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092aa:	4b4b      	ldr	r3, [pc, #300]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80092b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092ba:	4a47      	ldr	r2, [pc, #284]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092bc:	430b      	orrs	r3, r1
 80092be:	6593      	str	r3, [r2, #88]	; 0x58
 80092c0:	e003      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80092d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80092d8:	2300      	movs	r3, #0
 80092da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80092e0:	460b      	mov	r3, r1
 80092e2:	4313      	orrs	r3, r2
 80092e4:	d03b      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80092e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092f2:	d01f      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80092f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092f8:	d818      	bhi.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80092fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092fe:	d003      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009304:	d007      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009306:	e011      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009308:	4b33      	ldr	r3, [pc, #204]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	4a32      	ldr	r2, [pc, #200]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800930e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009314:	e00f      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800931a:	3328      	adds	r3, #40	; 0x28
 800931c:	2101      	movs	r1, #1
 800931e:	4618      	mov	r0, r3
 8009320:	f000 fada 	bl	80098d8 <RCCEx_PLL3_Config>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800932a:	e004      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009332:	e000      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10b      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800933e:	4b26      	ldr	r3, [pc, #152]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009342:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800934e:	4a22      	ldr	r2, [pc, #136]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009350:	430b      	orrs	r3, r1
 8009352:	6553      	str	r3, [r2, #84]	; 0x54
 8009354:	e003      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800935a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800935e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800936a:	673b      	str	r3, [r7, #112]	; 0x70
 800936c:	2300      	movs	r3, #0
 800936e:	677b      	str	r3, [r7, #116]	; 0x74
 8009370:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009374:	460b      	mov	r3, r1
 8009376:	4313      	orrs	r3, r2
 8009378:	d034      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800937e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009380:	2b00      	cmp	r3, #0
 8009382:	d003      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009388:	d007      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800938a:	e011      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800938c:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	4a11      	ldr	r2, [pc, #68]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009398:	e00e      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800939a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800939e:	3308      	adds	r3, #8
 80093a0:	2102      	movs	r1, #2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f9e6 	bl	8009774 <RCCEx_PLL2_Config>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80093ae:	e003      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10d      	bne.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80093c0:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ce:	4a02      	ldr	r2, [pc, #8]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093d0:	430b      	orrs	r3, r1
 80093d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093d4:	e006      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80093d6:	bf00      	nop
 80093d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80093f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80093f2:	2300      	movs	r3, #0
 80093f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80093fa:	460b      	mov	r3, r1
 80093fc:	4313      	orrs	r3, r2
 80093fe:	d00c      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009404:	3328      	adds	r3, #40	; 0x28
 8009406:	2102      	movs	r1, #2
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fa65 	bl	80098d8 <RCCEx_PLL3_Config>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800941a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009426:	663b      	str	r3, [r7, #96]	; 0x60
 8009428:	2300      	movs	r3, #0
 800942a:	667b      	str	r3, [r7, #100]	; 0x64
 800942c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009430:	460b      	mov	r3, r1
 8009432:	4313      	orrs	r3, r2
 8009434:	d038      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800943a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800943e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009442:	d018      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009448:	d811      	bhi.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800944a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800944e:	d014      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009454:	d80b      	bhi.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009456:	2b00      	cmp	r3, #0
 8009458:	d011      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800945a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945e:	d106      	bne.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009460:	4bc3      	ldr	r3, [pc, #780]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	4ac2      	ldr	r2, [pc, #776]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800946a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800946c:	e008      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009474:	e004      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009476:	bf00      	nop
 8009478:	e002      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800947a:	bf00      	nop
 800947c:	e000      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800947e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10b      	bne.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009488:	4bb9      	ldr	r3, [pc, #740]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800948a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009498:	4ab5      	ldr	r2, [pc, #724]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800949a:	430b      	orrs	r3, r1
 800949c:	6553      	str	r3, [r2, #84]	; 0x54
 800949e:	e003      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80094b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80094b6:	2300      	movs	r3, #0
 80094b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80094be:	460b      	mov	r3, r1
 80094c0:	4313      	orrs	r3, r2
 80094c2:	d009      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094c4:	4baa      	ldr	r3, [pc, #680]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80094cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094d2:	4aa7      	ldr	r2, [pc, #668]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094d4:	430b      	orrs	r3, r1
 80094d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80094d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80094e4:	653b      	str	r3, [r7, #80]	; 0x50
 80094e6:	2300      	movs	r3, #0
 80094e8:	657b      	str	r3, [r7, #84]	; 0x54
 80094ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80094ee:	460b      	mov	r3, r1
 80094f0:	4313      	orrs	r3, r2
 80094f2:	d00a      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80094f4:	4b9e      	ldr	r3, [pc, #632]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80094fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009500:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009504:	4a9a      	ldr	r2, [pc, #616]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009506:	430b      	orrs	r3, r1
 8009508:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800950a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009516:	64bb      	str	r3, [r7, #72]	; 0x48
 8009518:	2300      	movs	r3, #0
 800951a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800951c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009520:	460b      	mov	r3, r1
 8009522:	4313      	orrs	r3, r2
 8009524:	d009      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009526:	4b92      	ldr	r3, [pc, #584]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800952e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009534:	4a8e      	ldr	r2, [pc, #568]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009536:	430b      	orrs	r3, r1
 8009538:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009546:	643b      	str	r3, [r7, #64]	; 0x40
 8009548:	2300      	movs	r3, #0
 800954a:	647b      	str	r3, [r7, #68]	; 0x44
 800954c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009550:	460b      	mov	r3, r1
 8009552:	4313      	orrs	r3, r2
 8009554:	d00e      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009556:	4b86      	ldr	r3, [pc, #536]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	4a85      	ldr	r2, [pc, #532]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800955c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009560:	6113      	str	r3, [r2, #16]
 8009562:	4b83      	ldr	r3, [pc, #524]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009564:	6919      	ldr	r1, [r3, #16]
 8009566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800956a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800956e:	4a80      	ldr	r2, [pc, #512]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009570:	430b      	orrs	r3, r1
 8009572:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009580:	63bb      	str	r3, [r7, #56]	; 0x38
 8009582:	2300      	movs	r3, #0
 8009584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009586:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800958a:	460b      	mov	r3, r1
 800958c:	4313      	orrs	r3, r2
 800958e:	d009      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009590:	4b77      	ldr	r3, [pc, #476]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009594:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800959e:	4a74      	ldr	r2, [pc, #464]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095a0:	430b      	orrs	r3, r1
 80095a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80095b0:	633b      	str	r3, [r7, #48]	; 0x30
 80095b2:	2300      	movs	r3, #0
 80095b4:	637b      	str	r3, [r7, #52]	; 0x34
 80095b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80095ba:	460b      	mov	r3, r1
 80095bc:	4313      	orrs	r3, r2
 80095be:	d00a      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095c0:	4b6b      	ldr	r3, [pc, #428]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80095c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095d0:	4a67      	ldr	r2, [pc, #412]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095d2:	430b      	orrs	r3, r1
 80095d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80095d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	2100      	movs	r1, #0
 80095e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80095ec:	460b      	mov	r3, r1
 80095ee:	4313      	orrs	r3, r2
 80095f0:	d011      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f6:	3308      	adds	r3, #8
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 f8ba 	bl	8009774 <RCCEx_PLL2_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	2100      	movs	r1, #0
 8009620:	6239      	str	r1, [r7, #32]
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	627b      	str	r3, [r7, #36]	; 0x24
 8009628:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800962c:	460b      	mov	r3, r1
 800962e:	4313      	orrs	r3, r2
 8009630:	d011      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009636:	3308      	adds	r3, #8
 8009638:	2101      	movs	r1, #1
 800963a:	4618      	mov	r0, r3
 800963c:	f000 f89a 	bl	8009774 <RCCEx_PLL2_Config>
 8009640:	4603      	mov	r3, r0
 8009642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	2100      	movs	r1, #0
 8009660:	61b9      	str	r1, [r7, #24]
 8009662:	f003 0304 	and.w	r3, r3, #4
 8009666:	61fb      	str	r3, [r7, #28]
 8009668:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800966c:	460b      	mov	r3, r1
 800966e:	4313      	orrs	r3, r2
 8009670:	d011      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009676:	3308      	adds	r3, #8
 8009678:	2102      	movs	r1, #2
 800967a:	4618      	mov	r0, r3
 800967c:	f000 f87a 	bl	8009774 <RCCEx_PLL2_Config>
 8009680:	4603      	mov	r3, r0
 8009682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	2100      	movs	r1, #0
 80096a0:	6139      	str	r1, [r7, #16]
 80096a2:	f003 0308 	and.w	r3, r3, #8
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80096ac:	460b      	mov	r3, r1
 80096ae:	4313      	orrs	r3, r2
 80096b0:	d011      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b6:	3328      	adds	r3, #40	; 0x28
 80096b8:	2100      	movs	r1, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f90c 	bl	80098d8 <RCCEx_PLL3_Config>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80096c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	2100      	movs	r1, #0
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	f003 0310 	and.w	r3, r3, #16
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80096ec:	460b      	mov	r3, r1
 80096ee:	4313      	orrs	r3, r2
 80096f0:	d011      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f6:	3328      	adds	r3, #40	; 0x28
 80096f8:	2101      	movs	r1, #1
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 f8ec 	bl	80098d8 <RCCEx_PLL3_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	2100      	movs	r1, #0
 8009720:	6039      	str	r1, [r7, #0]
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	607b      	str	r3, [r7, #4]
 8009728:	e9d7 1200 	ldrd	r1, r2, [r7]
 800972c:	460b      	mov	r3, r1
 800972e:	4313      	orrs	r3, r2
 8009730:	d011      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009736:	3328      	adds	r3, #40	; 0x28
 8009738:	2102      	movs	r1, #2
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f8cc 	bl	80098d8 <RCCEx_PLL3_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009756:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	e000      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
}
 8009764:	4618      	mov	r0, r3
 8009766:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800976a:	46bd      	mov	sp, r7
 800976c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009770:	58024400 	.word	0x58024400

08009774 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009782:	4b53      	ldr	r3, [pc, #332]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	2b03      	cmp	r3, #3
 800978c:	d101      	bne.n	8009792 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e099      	b.n	80098c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009792:	4b4f      	ldr	r3, [pc, #316]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a4e      	ldr	r2, [pc, #312]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009798:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800979c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800979e:	f7fa f8c3 	bl	8003928 <HAL_GetTick>
 80097a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097a4:	e008      	b.n	80097b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097a6:	f7fa f8bf 	bl	8003928 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d901      	bls.n	80097b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e086      	b.n	80098c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097b8:	4b45      	ldr	r3, [pc, #276]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1f0      	bne.n	80097a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097c4:	4b42      	ldr	r3, [pc, #264]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	031b      	lsls	r3, r3, #12
 80097d2:	493f      	ldr	r1, [pc, #252]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	628b      	str	r3, [r1, #40]	; 0x28
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	3b01      	subs	r3, #1
 80097de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	025b      	lsls	r3, r3, #9
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	431a      	orrs	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	041b      	lsls	r3, r3, #16
 80097f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097fa:	431a      	orrs	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	3b01      	subs	r3, #1
 8009802:	061b      	lsls	r3, r3, #24
 8009804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009808:	4931      	ldr	r1, [pc, #196]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 800980a:	4313      	orrs	r3, r2
 800980c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800980e:	4b30      	ldr	r3, [pc, #192]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	492d      	ldr	r1, [pc, #180]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 800981c:	4313      	orrs	r3, r2
 800981e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009820:	4b2b      	ldr	r3, [pc, #172]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	f023 0220 	bic.w	r2, r3, #32
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	4928      	ldr	r1, [pc, #160]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 800982e:	4313      	orrs	r3, r2
 8009830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009832:	4b27      	ldr	r3, [pc, #156]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009836:	4a26      	ldr	r2, [pc, #152]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009838:	f023 0310 	bic.w	r3, r3, #16
 800983c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800983e:	4b24      	ldr	r3, [pc, #144]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009842:	4b24      	ldr	r3, [pc, #144]	; (80098d4 <RCCEx_PLL2_Config+0x160>)
 8009844:	4013      	ands	r3, r2
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	69d2      	ldr	r2, [r2, #28]
 800984a:	00d2      	lsls	r2, r2, #3
 800984c:	4920      	ldr	r1, [pc, #128]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 800984e:	4313      	orrs	r3, r2
 8009850:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009852:	4b1f      	ldr	r3, [pc, #124]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	4a1e      	ldr	r2, [pc, #120]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009858:	f043 0310 	orr.w	r3, r3, #16
 800985c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d106      	bne.n	8009872 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009864:	4b1a      	ldr	r3, [pc, #104]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	4a19      	ldr	r2, [pc, #100]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 800986a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800986e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009870:	e00f      	b.n	8009892 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d106      	bne.n	8009886 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009878:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	4a14      	ldr	r2, [pc, #80]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 800987e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009884:	e005      	b.n	8009892 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009886:	4b12      	ldr	r3, [pc, #72]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	4a11      	ldr	r2, [pc, #68]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 800988c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009892:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a0e      	ldr	r2, [pc, #56]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 8009898:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800989c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800989e:	f7fa f843 	bl	8003928 <HAL_GetTick>
 80098a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098a4:	e008      	b.n	80098b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098a6:	f7fa f83f 	bl	8003928 <HAL_GetTick>
 80098aa:	4602      	mov	r2, r0
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d901      	bls.n	80098b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e006      	b.n	80098c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <RCCEx_PLL2_Config+0x15c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d0f0      	beq.n	80098a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	58024400 	.word	0x58024400
 80098d4:	ffff0007 	.word	0xffff0007

080098d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098e6:	4b53      	ldr	r3, [pc, #332]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d101      	bne.n	80098f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e099      	b.n	8009a2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80098f6:	4b4f      	ldr	r3, [pc, #316]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a4e      	ldr	r2, [pc, #312]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80098fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009902:	f7fa f811 	bl	8003928 <HAL_GetTick>
 8009906:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009908:	e008      	b.n	800991c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800990a:	f7fa f80d 	bl	8003928 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	2b02      	cmp	r3, #2
 8009916:	d901      	bls.n	800991c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e086      	b.n	8009a2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800991c:	4b45      	ldr	r3, [pc, #276]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1f0      	bne.n	800990a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009928:	4b42      	ldr	r3, [pc, #264]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 800992a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	051b      	lsls	r3, r3, #20
 8009936:	493f      	ldr	r1, [pc, #252]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 8009938:	4313      	orrs	r3, r2
 800993a:	628b      	str	r3, [r1, #40]	; 0x28
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	3b01      	subs	r3, #1
 8009942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	3b01      	subs	r3, #1
 800994c:	025b      	lsls	r3, r3, #9
 800994e:	b29b      	uxth	r3, r3
 8009950:	431a      	orrs	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	3b01      	subs	r3, #1
 8009958:	041b      	lsls	r3, r3, #16
 800995a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800995e:	431a      	orrs	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	3b01      	subs	r3, #1
 8009966:	061b      	lsls	r3, r3, #24
 8009968:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800996c:	4931      	ldr	r1, [pc, #196]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 800996e:	4313      	orrs	r3, r2
 8009970:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009972:	4b30      	ldr	r3, [pc, #192]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	492d      	ldr	r1, [pc, #180]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 8009980:	4313      	orrs	r3, r2
 8009982:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009984:	4b2b      	ldr	r3, [pc, #172]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	4928      	ldr	r1, [pc, #160]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 8009992:	4313      	orrs	r3, r2
 8009994:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009996:	4b27      	ldr	r3, [pc, #156]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 8009998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999a:	4a26      	ldr	r2, [pc, #152]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 800999c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099a2:	4b24      	ldr	r3, [pc, #144]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099a6:	4b24      	ldr	r3, [pc, #144]	; (8009a38 <RCCEx_PLL3_Config+0x160>)
 80099a8:	4013      	ands	r3, r2
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	69d2      	ldr	r2, [r2, #28]
 80099ae:	00d2      	lsls	r2, r2, #3
 80099b0:	4920      	ldr	r1, [pc, #128]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099b6:	4b1f      	ldr	r3, [pc, #124]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	4a1e      	ldr	r2, [pc, #120]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d106      	bne.n	80099d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099c8:	4b1a      	ldr	r3, [pc, #104]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	4a19      	ldr	r2, [pc, #100]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099d4:	e00f      	b.n	80099f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d106      	bne.n	80099ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099dc:	4b15      	ldr	r3, [pc, #84]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e0:	4a14      	ldr	r2, [pc, #80]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099e8:	e005      	b.n	80099f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80099ea:	4b12      	ldr	r3, [pc, #72]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	4a11      	ldr	r2, [pc, #68]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80099f6:	4b0f      	ldr	r3, [pc, #60]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a0e      	ldr	r2, [pc, #56]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 80099fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a02:	f7f9 ff91 	bl	8003928 <HAL_GetTick>
 8009a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a08:	e008      	b.n	8009a1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a0a:	f7f9 ff8d 	bl	8003928 <HAL_GetTick>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d901      	bls.n	8009a1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	e006      	b.n	8009a2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a1c:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <RCCEx_PLL3_Config+0x15c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d0f0      	beq.n	8009a0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	58024400 	.word	0x58024400
 8009a38:	ffff0007 	.word	0xffff0007

08009a3c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e02b      	b.n	8009aa8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d106      	bne.n	8009a6a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f825 	bl	8009ab4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f001 f9af 	bl	800ade0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	f001 fa03 	bl	800ae98 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009a92:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <HAL_SDRAM_Init+0x74>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a06      	ldr	r2, [pc, #24]	; (8009ab0 <HAL_SDRAM_Init+0x74>)
 8009a98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a9c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	52004000 	.word	0x52004000

08009ab4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ada:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d101      	bne.n	8009ae6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e021      	b.n	8009b2a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d002      	beq.n	8009af2 <HAL_SDRAM_SendCommand+0x2a>
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	2b05      	cmp	r3, #5
 8009af0:	d118      	bne.n	8009b24 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2202      	movs	r2, #2
 8009af6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 fa32 	bl	800af6c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d104      	bne.n	8009b1a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2205      	movs	r2, #5
 8009b14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009b18:	e006      	b.n	8009b28 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009b22:	e001      	b.n	8009b28 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e000      	b.n	8009b2a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b082      	sub	sp, #8
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d101      	bne.n	8009b4c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e016      	b.n	8009b7a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d10f      	bne.n	8009b78 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 fa24 	bl	800afb4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	e000      	b.n	8009b7a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e049      	b.n	8009c28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f89d 	bl	8009ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f000 f9f7 	bl	8009fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2201      	movs	r2, #1
 8009bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6a1a      	ldr	r2, [r3, #32]
 8009c46:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10f      	bne.n	8009c70 <HAL_TIM_PWM_DeInit+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6a1a      	ldr	r2, [r3, #32]
 8009c56:	f240 4344 	movw	r3, #1092	; 0x444
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d107      	bne.n	8009c70 <HAL_TIM_PWM_DeInit+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 0201 	bic.w	r2, r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f843 	bl	8009cfc <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d122      	bne.n	8009d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f003 0302 	and.w	r3, r3, #2
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d11b      	bne.n	8009d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f06f 0202 	mvn.w	r2, #2
 8009d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	f003 0303 	and.w	r3, r3, #3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f90f 	bl	8009f76 <HAL_TIM_IC_CaptureCallback>
 8009d58:	e005      	b.n	8009d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f901 	bl	8009f62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f912 	bl	8009f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	f003 0304 	and.w	r3, r3, #4
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	d122      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	f003 0304 	and.w	r3, r3, #4
 8009d84:	2b04      	cmp	r3, #4
 8009d86:	d11b      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f06f 0204 	mvn.w	r2, #4
 8009d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2202      	movs	r2, #2
 8009d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f8e5 	bl	8009f76 <HAL_TIM_IC_CaptureCallback>
 8009dac:	e005      	b.n	8009dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f8d7 	bl	8009f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f8e8 	bl	8009f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	f003 0308 	and.w	r3, r3, #8
 8009dca:	2b08      	cmp	r3, #8
 8009dcc:	d122      	bne.n	8009e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f003 0308 	and.w	r3, r3, #8
 8009dd8:	2b08      	cmp	r3, #8
 8009dda:	d11b      	bne.n	8009e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f06f 0208 	mvn.w	r2, #8
 8009de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2204      	movs	r2, #4
 8009dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f8bb 	bl	8009f76 <HAL_TIM_IC_CaptureCallback>
 8009e00:	e005      	b.n	8009e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f8ad 	bl	8009f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f8be 	bl	8009f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	f003 0310 	and.w	r3, r3, #16
 8009e1e:	2b10      	cmp	r3, #16
 8009e20:	d122      	bne.n	8009e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	f003 0310 	and.w	r3, r3, #16
 8009e2c:	2b10      	cmp	r3, #16
 8009e2e:	d11b      	bne.n	8009e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f06f 0210 	mvn.w	r2, #16
 8009e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2208      	movs	r2, #8
 8009e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f891 	bl	8009f76 <HAL_TIM_IC_CaptureCallback>
 8009e54:	e005      	b.n	8009e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f883 	bl	8009f62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f894 	bl	8009f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d10e      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d107      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f06f 0201 	mvn.w	r2, #1
 8009e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f85d 	bl	8009f4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9e:	2b80      	cmp	r3, #128	; 0x80
 8009ea0:	d10e      	bne.n	8009ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eac:	2b80      	cmp	r3, #128	; 0x80
 8009eae:	d107      	bne.n	8009ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f91e 	bl	800a0fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ece:	d10e      	bne.n	8009eee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eda:	2b80      	cmp	r3, #128	; 0x80
 8009edc:	d107      	bne.n	8009eee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f911 	bl	800a110 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef8:	2b40      	cmp	r3, #64	; 0x40
 8009efa:	d10e      	bne.n	8009f1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f06:	2b40      	cmp	r3, #64	; 0x40
 8009f08:	d107      	bne.n	8009f1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f842 	bl	8009f9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b20      	cmp	r3, #32
 8009f26:	d10e      	bne.n	8009f46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f003 0320 	and.w	r3, r3, #32
 8009f32:	2b20      	cmp	r3, #32
 8009f34:	d107      	bne.n	8009f46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f06f 0220 	mvn.w	r2, #32
 8009f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f8d1 	bl	800a0e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b083      	sub	sp, #12
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f6a:	bf00      	nop
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b083      	sub	sp, #12
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f7e:	bf00      	nop
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b083      	sub	sp, #12
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f92:	bf00      	nop
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fa6:	bf00      	nop
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
	...

08009fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a40      	ldr	r2, [pc, #256]	; (800a0c8 <TIM_Base_SetConfig+0x114>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d013      	beq.n	8009ff4 <TIM_Base_SetConfig+0x40>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd2:	d00f      	beq.n	8009ff4 <TIM_Base_SetConfig+0x40>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a3d      	ldr	r2, [pc, #244]	; (800a0cc <TIM_Base_SetConfig+0x118>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d00b      	beq.n	8009ff4 <TIM_Base_SetConfig+0x40>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a3c      	ldr	r2, [pc, #240]	; (800a0d0 <TIM_Base_SetConfig+0x11c>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d007      	beq.n	8009ff4 <TIM_Base_SetConfig+0x40>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a3b      	ldr	r2, [pc, #236]	; (800a0d4 <TIM_Base_SetConfig+0x120>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d003      	beq.n	8009ff4 <TIM_Base_SetConfig+0x40>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a3a      	ldr	r2, [pc, #232]	; (800a0d8 <TIM_Base_SetConfig+0x124>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d108      	bne.n	800a006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	4313      	orrs	r3, r2
 800a004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a2f      	ldr	r2, [pc, #188]	; (800a0c8 <TIM_Base_SetConfig+0x114>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d01f      	beq.n	800a04e <TIM_Base_SetConfig+0x9a>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a014:	d01b      	beq.n	800a04e <TIM_Base_SetConfig+0x9a>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a2c      	ldr	r2, [pc, #176]	; (800a0cc <TIM_Base_SetConfig+0x118>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d017      	beq.n	800a04e <TIM_Base_SetConfig+0x9a>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a2b      	ldr	r2, [pc, #172]	; (800a0d0 <TIM_Base_SetConfig+0x11c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d013      	beq.n	800a04e <TIM_Base_SetConfig+0x9a>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a2a      	ldr	r2, [pc, #168]	; (800a0d4 <TIM_Base_SetConfig+0x120>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00f      	beq.n	800a04e <TIM_Base_SetConfig+0x9a>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a29      	ldr	r2, [pc, #164]	; (800a0d8 <TIM_Base_SetConfig+0x124>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d00b      	beq.n	800a04e <TIM_Base_SetConfig+0x9a>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a28      	ldr	r2, [pc, #160]	; (800a0dc <TIM_Base_SetConfig+0x128>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d007      	beq.n	800a04e <TIM_Base_SetConfig+0x9a>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a27      	ldr	r2, [pc, #156]	; (800a0e0 <TIM_Base_SetConfig+0x12c>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d003      	beq.n	800a04e <TIM_Base_SetConfig+0x9a>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a26      	ldr	r2, [pc, #152]	; (800a0e4 <TIM_Base_SetConfig+0x130>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d108      	bne.n	800a060 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a10      	ldr	r2, [pc, #64]	; (800a0c8 <TIM_Base_SetConfig+0x114>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d00f      	beq.n	800a0ac <TIM_Base_SetConfig+0xf8>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a12      	ldr	r2, [pc, #72]	; (800a0d8 <TIM_Base_SetConfig+0x124>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d00b      	beq.n	800a0ac <TIM_Base_SetConfig+0xf8>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a11      	ldr	r2, [pc, #68]	; (800a0dc <TIM_Base_SetConfig+0x128>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d007      	beq.n	800a0ac <TIM_Base_SetConfig+0xf8>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a10      	ldr	r2, [pc, #64]	; (800a0e0 <TIM_Base_SetConfig+0x12c>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d003      	beq.n	800a0ac <TIM_Base_SetConfig+0xf8>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a0f      	ldr	r2, [pc, #60]	; (800a0e4 <TIM_Base_SetConfig+0x130>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d103      	bne.n	800a0b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	691a      	ldr	r2, [r3, #16]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	615a      	str	r2, [r3, #20]
}
 800a0ba:	bf00      	nop
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	40010000 	.word	0x40010000
 800a0cc:	40000400 	.word	0x40000400
 800a0d0:	40000800 	.word	0x40000800
 800a0d4:	40000c00 	.word	0x40000c00
 800a0d8:	40010400 	.word	0x40010400
 800a0dc:	40014000 	.word	0x40014000
 800a0e0:	40014400 	.word	0x40014400
 800a0e4:	40014800 	.word	0x40014800

0800a0e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08a      	sub	sp, #40	; 0x28
 800a128:	af02      	add	r7, sp, #8
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	603b      	str	r3, [r7, #0]
 800a130:	4613      	mov	r3, r2
 800a132:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a13a:	2b20      	cmp	r3, #32
 800a13c:	d17b      	bne.n	800a236 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <HAL_UART_Transmit+0x26>
 800a144:	88fb      	ldrh	r3, [r7, #6]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e074      	b.n	800a238 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2221      	movs	r2, #33	; 0x21
 800a15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a15e:	f7f9 fbe3 	bl	8003928 <HAL_GetTick>
 800a162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	88fa      	ldrh	r2, [r7, #6]
 800a168:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	88fa      	ldrh	r2, [r7, #6]
 800a170:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a17c:	d108      	bne.n	800a190 <HAL_UART_Transmit+0x6c>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d104      	bne.n	800a190 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	e003      	b.n	800a198 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a198:	e030      	b.n	800a1fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2180      	movs	r1, #128	; 0x80
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 fced 	bl	800ab84 <UART_WaitOnFlagUntilTimeout>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e03d      	b.n	800a238 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10b      	bne.n	800a1da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	3302      	adds	r3, #2
 800a1d6:	61bb      	str	r3, [r7, #24]
 800a1d8:	e007      	b.n	800a1ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	781a      	ldrb	r2, [r3, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a202:	b29b      	uxth	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1c8      	bne.n	800a19a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2200      	movs	r2, #0
 800a210:	2140      	movs	r1, #64	; 0x40
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 fcb6 	bl	800ab84 <UART_WaitOnFlagUntilTimeout>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2220      	movs	r2, #32
 800a222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e006      	b.n	800a238 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2220      	movs	r2, #32
 800a22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	e000      	b.n	800a238 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a236:	2302      	movs	r3, #2
  }
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af02      	add	r7, sp, #8
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	4613      	mov	r3, r2
 800a24e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a256:	2b20      	cmp	r3, #32
 800a258:	f040 80b5 	bne.w	800a3c6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <HAL_UART_Receive+0x28>
 800a262:	88fb      	ldrh	r3, [r7, #6]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e0ad      	b.n	800a3c8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2222      	movs	r2, #34	; 0x22
 800a278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a282:	f7f9 fb51 	bl	8003928 <HAL_GetTick>
 800a286:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	88fa      	ldrh	r2, [r7, #6]
 800a28c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	88fa      	ldrh	r2, [r7, #6]
 800a294:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2a0:	d10e      	bne.n	800a2c0 <HAL_UART_Receive+0x80>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d105      	bne.n	800a2b6 <HAL_UART_Receive+0x76>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a2b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a2b4:	e02d      	b.n	800a312 <HAL_UART_Receive+0xd2>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	22ff      	movs	r2, #255	; 0xff
 800a2ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a2be:	e028      	b.n	800a312 <HAL_UART_Receive+0xd2>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10d      	bne.n	800a2e4 <HAL_UART_Receive+0xa4>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d104      	bne.n	800a2da <HAL_UART_Receive+0x9a>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	22ff      	movs	r2, #255	; 0xff
 800a2d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a2d8:	e01b      	b.n	800a312 <HAL_UART_Receive+0xd2>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	227f      	movs	r2, #127	; 0x7f
 800a2de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a2e2:	e016      	b.n	800a312 <HAL_UART_Receive+0xd2>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2ec:	d10d      	bne.n	800a30a <HAL_UART_Receive+0xca>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d104      	bne.n	800a300 <HAL_UART_Receive+0xc0>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	227f      	movs	r2, #127	; 0x7f
 800a2fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a2fe:	e008      	b.n	800a312 <HAL_UART_Receive+0xd2>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	223f      	movs	r2, #63	; 0x3f
 800a304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a308:	e003      	b.n	800a312 <HAL_UART_Receive+0xd2>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a318:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a322:	d108      	bne.n	800a336 <HAL_UART_Receive+0xf6>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d104      	bne.n	800a336 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a32c:	2300      	movs	r3, #0
 800a32e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	61bb      	str	r3, [r7, #24]
 800a334:	e003      	b.n	800a33e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a33e:	e036      	b.n	800a3ae <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	2200      	movs	r2, #0
 800a348:	2120      	movs	r1, #32
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 fc1a 	bl	800ab84 <UART_WaitOnFlagUntilTimeout>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2220      	movs	r2, #32
 800a35a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e032      	b.n	800a3c8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10c      	bne.n	800a382 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	b29a      	uxth	r2, r3
 800a370:	8a7b      	ldrh	r3, [r7, #18]
 800a372:	4013      	ands	r3, r2
 800a374:	b29a      	uxth	r2, r3
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	3302      	adds	r3, #2
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	e00c      	b.n	800a39c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	8a7b      	ldrh	r3, [r7, #18]
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	4013      	ands	r3, r2
 800a390:	b2da      	uxtb	r2, r3
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	3301      	adds	r3, #1
 800a39a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1c2      	bne.n	800a340 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e000      	b.n	800a3c8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800a3c6:	2302      	movs	r3, #2
  }
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3720      	adds	r7, #32
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b0ba      	sub	sp, #232	; 0xe8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a3f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a3fa:	f640 030f 	movw	r3, #2063	; 0x80f
 800a3fe:	4013      	ands	r3, r2
 800a400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d11b      	bne.n	800a444 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a410:	f003 0320 	and.w	r3, r3, #32
 800a414:	2b00      	cmp	r3, #0
 800a416:	d015      	beq.n	800a444 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a41c:	f003 0320 	and.w	r3, r3, #32
 800a420:	2b00      	cmp	r3, #0
 800a422:	d105      	bne.n	800a430 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d009      	beq.n	800a444 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 8377 	beq.w	800ab28 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
      }
      return;
 800a442:	e371      	b.n	800ab28 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 8123 	beq.w	800a694 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a44e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a452:	4b8d      	ldr	r3, [pc, #564]	; (800a688 <HAL_UART_IRQHandler+0x2b8>)
 800a454:	4013      	ands	r3, r2
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a45a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a45e:	4b8b      	ldr	r3, [pc, #556]	; (800a68c <HAL_UART_IRQHandler+0x2bc>)
 800a460:	4013      	ands	r3, r2
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 8116 	beq.w	800a694 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d011      	beq.n	800a498 <HAL_UART_IRQHandler+0xc8>
 800a474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00b      	beq.n	800a498 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2201      	movs	r2, #1
 800a486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48e:	f043 0201 	orr.w	r2, r3, #1
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d011      	beq.n	800a4c8 <HAL_UART_IRQHandler+0xf8>
 800a4a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00b      	beq.n	800a4c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4be:	f043 0204 	orr.w	r2, r3, #4
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d011      	beq.n	800a4f8 <HAL_UART_IRQHandler+0x128>
 800a4d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00b      	beq.n	800a4f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2204      	movs	r2, #4
 800a4e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ee:	f043 0202 	orr.w	r2, r3, #2
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b00      	cmp	r3, #0
 800a502:	d017      	beq.n	800a534 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a508:	f003 0320 	and.w	r3, r3, #32
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d105      	bne.n	800a51c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a510:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a514:	4b5c      	ldr	r3, [pc, #368]	; (800a688 <HAL_UART_IRQHandler+0x2b8>)
 800a516:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00b      	beq.n	800a534 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2208      	movs	r2, #8
 800a522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a52a:	f043 0208 	orr.w	r2, r3, #8
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d012      	beq.n	800a566 <HAL_UART_IRQHandler+0x196>
 800a540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00c      	beq.n	800a566 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a55c:	f043 0220 	orr.w	r2, r3, #32
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 82dd 	beq.w	800ab2c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a576:	f003 0320 	and.w	r3, r3, #32
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d013      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a57e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a582:	f003 0320 	and.w	r3, r3, #32
 800a586:	2b00      	cmp	r3, #0
 800a588:	d105      	bne.n	800a596 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a58a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a58e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d007      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ba:	2b40      	cmp	r3, #64	; 0x40
 800a5bc:	d005      	beq.n	800a5ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d054      	beq.n	800a674 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fb42 	bl	800ac54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5da:	2b40      	cmp	r3, #64	; 0x40
 800a5dc:	d146      	bne.n	800a66c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5ec:	e853 3f00 	ldrex	r3, [r3]
 800a5f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a5f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3308      	adds	r3, #8
 800a606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a60a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a60e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1d9      	bne.n	800a5de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a630:	2b00      	cmp	r3, #0
 800a632:	d017      	beq.n	800a664 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a63a:	4a15      	ldr	r2, [pc, #84]	; (800a690 <HAL_UART_IRQHandler+0x2c0>)
 800a63c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a644:	4618      	mov	r0, r3
 800a646:	f7f9 fde9 	bl	800421c <HAL_DMA_Abort_IT>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d019      	beq.n	800a684 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a65e:	4610      	mov	r0, r2
 800a660:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a662:	e00f      	b.n	800a684 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fa77 	bl	800ab58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a66a:	e00b      	b.n	800a684 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fa73 	bl	800ab58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a672:	e007      	b.n	800a684 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fa6f 	bl	800ab58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a682:	e253      	b.n	800ab2c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a684:	bf00      	nop
    return;
 800a686:	e251      	b.n	800ab2c <HAL_UART_IRQHandler+0x75c>
 800a688:	10000001 	.word	0x10000001
 800a68c:	04000120 	.word	0x04000120
 800a690:	0800ad21 	.word	0x0800ad21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a698:	2b01      	cmp	r3, #1
 800a69a:	f040 81e7 	bne.w	800aa6c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6a2:	f003 0310 	and.w	r3, r3, #16
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 81e0 	beq.w	800aa6c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6b0:	f003 0310 	and.w	r3, r3, #16
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 81d9 	beq.w	800aa6c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2210      	movs	r2, #16
 800a6c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6cc:	2b40      	cmp	r3, #64	; 0x40
 800a6ce:	f040 8151 	bne.w	800a974 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a96      	ldr	r2, [pc, #600]	; (800a934 <HAL_UART_IRQHandler+0x564>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d068      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a93      	ldr	r2, [pc, #588]	; (800a938 <HAL_UART_IRQHandler+0x568>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d061      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a91      	ldr	r2, [pc, #580]	; (800a93c <HAL_UART_IRQHandler+0x56c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d05a      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a8e      	ldr	r2, [pc, #568]	; (800a940 <HAL_UART_IRQHandler+0x570>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d053      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a8c      	ldr	r2, [pc, #560]	; (800a944 <HAL_UART_IRQHandler+0x574>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d04c      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a89      	ldr	r2, [pc, #548]	; (800a948 <HAL_UART_IRQHandler+0x578>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d045      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a87      	ldr	r2, [pc, #540]	; (800a94c <HAL_UART_IRQHandler+0x57c>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d03e      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a84      	ldr	r2, [pc, #528]	; (800a950 <HAL_UART_IRQHandler+0x580>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d037      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a82      	ldr	r2, [pc, #520]	; (800a954 <HAL_UART_IRQHandler+0x584>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d030      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a7f      	ldr	r2, [pc, #508]	; (800a958 <HAL_UART_IRQHandler+0x588>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d029      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a7d      	ldr	r2, [pc, #500]	; (800a95c <HAL_UART_IRQHandler+0x58c>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d022      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a7a      	ldr	r2, [pc, #488]	; (800a960 <HAL_UART_IRQHandler+0x590>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d01b      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a78      	ldr	r2, [pc, #480]	; (800a964 <HAL_UART_IRQHandler+0x594>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d014      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a75      	ldr	r2, [pc, #468]	; (800a968 <HAL_UART_IRQHandler+0x598>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d00d      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a73      	ldr	r2, [pc, #460]	; (800a96c <HAL_UART_IRQHandler+0x59c>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d006      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x3e2>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a70      	ldr	r2, [pc, #448]	; (800a970 <HAL_UART_IRQHandler+0x5a0>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d106      	bne.n	800a7c0 <HAL_UART_IRQHandler+0x3f0>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	e005      	b.n	800a7cc <HAL_UART_IRQHandler+0x3fc>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 81ab 	beq.w	800ab30 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	f080 81a3 	bcs.w	800ab30 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a800:	f000 8087 	beq.w	800a912 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a810:	e853 3f00 	ldrex	r3, [r3]
 800a814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a81c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a820:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a82e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a832:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a83a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a83e:	e841 2300 	strex	r3, r2, [r1]
 800a842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1da      	bne.n	800a804 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a858:	e853 3f00 	ldrex	r3, [r3]
 800a85c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a85e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a860:	f023 0301 	bic.w	r3, r3, #1
 800a864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3308      	adds	r3, #8
 800a86e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a872:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a876:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a878:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a87a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a87e:	e841 2300 	strex	r3, r2, [r1]
 800a882:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1e1      	bne.n	800a84e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3308      	adds	r3, #8
 800a890:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a894:	e853 3f00 	ldrex	r3, [r3]
 800a898:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a89a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a89c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a8ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a8b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8b6:	e841 2300 	strex	r3, r2, [r1]
 800a8ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a8bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1e3      	bne.n	800a88a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2220      	movs	r2, #32
 800a8c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8d8:	e853 3f00 	ldrex	r3, [r3]
 800a8dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e0:	f023 0310 	bic.w	r3, r3, #16
 800a8e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a8f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e4      	bne.n	800a8d0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7f9 f967 	bl	8003be0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2202      	movs	r2, #2
 800a916:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a924:	b29b      	uxth	r3, r3
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	b29b      	uxth	r3, r3
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f91d 	bl	800ab6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a932:	e0fd      	b.n	800ab30 <HAL_UART_IRQHandler+0x760>
 800a934:	40020010 	.word	0x40020010
 800a938:	40020028 	.word	0x40020028
 800a93c:	40020040 	.word	0x40020040
 800a940:	40020058 	.word	0x40020058
 800a944:	40020070 	.word	0x40020070
 800a948:	40020088 	.word	0x40020088
 800a94c:	400200a0 	.word	0x400200a0
 800a950:	400200b8 	.word	0x400200b8
 800a954:	40020410 	.word	0x40020410
 800a958:	40020428 	.word	0x40020428
 800a95c:	40020440 	.word	0x40020440
 800a960:	40020458 	.word	0x40020458
 800a964:	40020470 	.word	0x40020470
 800a968:	40020488 	.word	0x40020488
 800a96c:	400204a0 	.word	0x400204a0
 800a970:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a980:	b29b      	uxth	r3, r3
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a98e:	b29b      	uxth	r3, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 80cf 	beq.w	800ab34 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a996:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 80ca 	beq.w	800ab34 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a9c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e4      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3308      	adds	r3, #8
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e0:	e853 3f00 	ldrex	r3, [r3]
 800a9e4:	623b      	str	r3, [r7, #32]
   return(result);
 800a9e6:	6a3a      	ldr	r2, [r7, #32]
 800a9e8:	4b55      	ldr	r3, [pc, #340]	; (800ab40 <HAL_UART_IRQHandler+0x770>)
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9fa:	633a      	str	r2, [r7, #48]	; 0x30
 800a9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e3      	bne.n	800a9d6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2220      	movs	r2, #32
 800aa12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	e853 3f00 	ldrex	r3, [r3]
 800aa2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f023 0310 	bic.w	r3, r3, #16
 800aa36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa44:	61fb      	str	r3, [r7, #28]
 800aa46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	69b9      	ldr	r1, [r7, #24]
 800aa4a:	69fa      	ldr	r2, [r7, #28]
 800aa4c:	e841 2300 	strex	r3, r2, [r1]
 800aa50:	617b      	str	r3, [r7, #20]
   return(result);
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e4      	bne.n	800aa22 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f881 	bl	800ab6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa6a:	e063      	b.n	800ab34 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00e      	beq.n	800aa96 <HAL_UART_IRQHandler+0x6c6>
 800aa78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d008      	beq.n	800aa96 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aa8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f987 	bl	800ada2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa94:	e051      	b.n	800ab3a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aa96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d014      	beq.n	800aacc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aaa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d105      	bne.n	800aaba <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aaae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d008      	beq.n	800aacc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d03a      	beq.n	800ab38 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	4798      	blx	r3
    }
    return;
 800aaca:	e035      	b.n	800ab38 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d009      	beq.n	800aaec <HAL_UART_IRQHandler+0x71c>
 800aad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f931 	bl	800ad4c <UART_EndTransmit_IT>
    return;
 800aaea:	e026      	b.n	800ab3a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aaec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d009      	beq.n	800ab0c <HAL_UART_IRQHandler+0x73c>
 800aaf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aafc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d003      	beq.n	800ab0c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f960 	bl	800adca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab0a:	e016      	b.n	800ab3a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d010      	beq.n	800ab3a <HAL_UART_IRQHandler+0x76a>
 800ab18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	da0c      	bge.n	800ab3a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f948 	bl	800adb6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab26:	e008      	b.n	800ab3a <HAL_UART_IRQHandler+0x76a>
      return;
 800ab28:	bf00      	nop
 800ab2a:	e006      	b.n	800ab3a <HAL_UART_IRQHandler+0x76a>
    return;
 800ab2c:	bf00      	nop
 800ab2e:	e004      	b.n	800ab3a <HAL_UART_IRQHandler+0x76a>
      return;
 800ab30:	bf00      	nop
 800ab32:	e002      	b.n	800ab3a <HAL_UART_IRQHandler+0x76a>
      return;
 800ab34:	bf00      	nop
 800ab36:	e000      	b.n	800ab3a <HAL_UART_IRQHandler+0x76a>
    return;
 800ab38:	bf00      	nop
  }
}
 800ab3a:	37e8      	adds	r7, #232	; 0xe8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	effffffe 	.word	0xeffffffe

0800ab44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	4613      	mov	r3, r2
 800ab92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab94:	e049      	b.n	800ac2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9c:	d045      	beq.n	800ac2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab9e:	f7f8 fec3 	bl	8003928 <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d302      	bcc.n	800abb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e048      	b.n	800ac4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 0304 	and.w	r3, r3, #4
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d031      	beq.n	800ac2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d110      	bne.n	800abf6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2208      	movs	r2, #8
 800abda:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 f839 	bl	800ac54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2208      	movs	r2, #8
 800abe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e029      	b.n	800ac4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	69db      	ldr	r3, [r3, #28]
 800abfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac04:	d111      	bne.n	800ac2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f000 f81f 	bl	800ac54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e00f      	b.n	800ac4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	69da      	ldr	r2, [r3, #28]
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	4013      	ands	r3, r2
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	bf0c      	ite	eq
 800ac3a:	2301      	moveq	r3, #1
 800ac3c:	2300      	movne	r3, #0
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	461a      	mov	r2, r3
 800ac42:	79fb      	ldrb	r3, [r7, #7]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d0a6      	beq.n	800ab96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
	...

0800ac54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b095      	sub	sp, #84	; 0x54
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac64:	e853 3f00 	ldrex	r3, [r3]
 800ac68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac7a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac82:	e841 2300 	strex	r3, r2, [r1]
 800ac86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1e6      	bne.n	800ac5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3308      	adds	r3, #8
 800ac94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac9e:	69fa      	ldr	r2, [r7, #28]
 800aca0:	4b1e      	ldr	r3, [pc, #120]	; (800ad1c <UART_EndRxTransfer+0xc8>)
 800aca2:	4013      	ands	r3, r2
 800aca4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e5      	bne.n	800ac8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d118      	bne.n	800acfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	e853 3f00 	ldrex	r3, [r3]
 800acd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f023 0310 	bic.w	r3, r3, #16
 800acde:	647b      	str	r3, [r7, #68]	; 0x44
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	461a      	mov	r2, r3
 800ace6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ace8:	61bb      	str	r3, [r7, #24]
 800acea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acec:	6979      	ldr	r1, [r7, #20]
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	e841 2300 	strex	r3, r2, [r1]
 800acf4:	613b      	str	r3, [r7, #16]
   return(result);
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1e6      	bne.n	800acca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2220      	movs	r2, #32
 800ad00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ad10:	bf00      	nop
 800ad12:	3754      	adds	r7, #84	; 0x54
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	effffffe 	.word	0xeffffffe

0800ad20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f7ff ff0a 	bl	800ab58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad44:	bf00      	nop
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad68:	61fb      	str	r3, [r7, #28]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	61bb      	str	r3, [r7, #24]
 800ad74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6979      	ldr	r1, [r7, #20]
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e6      	bne.n	800ad54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2220      	movs	r2, #32
 800ad8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff fed5 	bl	800ab44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad9a:	bf00      	nop
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d121      	bne.n	800ae36 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	4b27      	ldr	r3, [pc, #156]	; (800ae94 <FMC_SDRAM_Init+0xb4>)
 800adf8:	4013      	ands	r3, r2
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	6851      	ldr	r1, [r2, #4]
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	6892      	ldr	r2, [r2, #8]
 800ae02:	4311      	orrs	r1, r2
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	68d2      	ldr	r2, [r2, #12]
 800ae08:	4311      	orrs	r1, r2
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	6912      	ldr	r2, [r2, #16]
 800ae0e:	4311      	orrs	r1, r2
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	6952      	ldr	r2, [r2, #20]
 800ae14:	4311      	orrs	r1, r2
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	6992      	ldr	r2, [r2, #24]
 800ae1a:	4311      	orrs	r1, r2
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	69d2      	ldr	r2, [r2, #28]
 800ae20:	4311      	orrs	r1, r2
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	6a12      	ldr	r2, [r2, #32]
 800ae26:	4311      	orrs	r1, r2
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	e026      	b.n	800ae84 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	69d9      	ldr	r1, [r3, #28]
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	4319      	orrs	r1, r3
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	4b0e      	ldr	r3, [pc, #56]	; (800ae94 <FMC_SDRAM_Init+0xb4>)
 800ae5a:	4013      	ands	r3, r2
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	6851      	ldr	r1, [r2, #4]
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	6892      	ldr	r2, [r2, #8]
 800ae64:	4311      	orrs	r1, r2
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	68d2      	ldr	r2, [r2, #12]
 800ae6a:	4311      	orrs	r1, r2
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	6912      	ldr	r2, [r2, #16]
 800ae70:	4311      	orrs	r1, r2
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	6952      	ldr	r2, [r2, #20]
 800ae76:	4311      	orrs	r1, r2
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	6992      	ldr	r2, [r2, #24]
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	ffff8000 	.word	0xffff8000

0800ae98 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d128      	bne.n	800aefc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	1e59      	subs	r1, r3, #1
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	3b01      	subs	r3, #1
 800aebe:	011b      	lsls	r3, r3, #4
 800aec0:	4319      	orrs	r1, r3
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	021b      	lsls	r3, r3, #8
 800aeca:	4319      	orrs	r1, r3
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	3b01      	subs	r3, #1
 800aed2:	031b      	lsls	r3, r3, #12
 800aed4:	4319      	orrs	r1, r3
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	041b      	lsls	r3, r3, #16
 800aede:	4319      	orrs	r1, r3
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	3b01      	subs	r3, #1
 800aee6:	051b      	lsls	r3, r3, #20
 800aee8:	4319      	orrs	r1, r3
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	699b      	ldr	r3, [r3, #24]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	061b      	lsls	r3, r3, #24
 800aef2:	430b      	orrs	r3, r1
 800aef4:	431a      	orrs	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	609a      	str	r2, [r3, #8]
 800aefa:	e02d      	b.n	800af58 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	689a      	ldr	r2, [r3, #8]
 800af00:	4b19      	ldr	r3, [pc, #100]	; (800af68 <FMC_SDRAM_Timing_Init+0xd0>)
 800af02:	4013      	ands	r3, r2
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	68d2      	ldr	r2, [r2, #12]
 800af08:	3a01      	subs	r2, #1
 800af0a:	0311      	lsls	r1, r2, #12
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	6952      	ldr	r2, [r2, #20]
 800af10:	3a01      	subs	r2, #1
 800af12:	0512      	lsls	r2, r2, #20
 800af14:	430a      	orrs	r2, r1
 800af16:	431a      	orrs	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	1e59      	subs	r1, r3, #1
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	3b01      	subs	r3, #1
 800af30:	011b      	lsls	r3, r3, #4
 800af32:	4319      	orrs	r1, r3
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	3b01      	subs	r3, #1
 800af3a:	021b      	lsls	r3, r3, #8
 800af3c:	4319      	orrs	r1, r3
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	3b01      	subs	r3, #1
 800af44:	041b      	lsls	r3, r3, #16
 800af46:	4319      	orrs	r1, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	699b      	ldr	r3, [r3, #24]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	061b      	lsls	r3, r3, #24
 800af50:	430b      	orrs	r3, r1
 800af52:	431a      	orrs	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	ff0f0fff 	.word	0xff0f0fff

0800af6c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	691a      	ldr	r2, [r3, #16]
 800af7c:	4b0c      	ldr	r3, [pc, #48]	; (800afb0 <FMC_SDRAM_SendCommand+0x44>)
 800af7e:	4013      	ands	r3, r2
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	6811      	ldr	r1, [r2, #0]
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	6852      	ldr	r2, [r2, #4]
 800af88:	4311      	orrs	r1, r2
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	6892      	ldr	r2, [r2, #8]
 800af8e:	3a01      	subs	r2, #1
 800af90:	0152      	lsls	r2, r2, #5
 800af92:	4311      	orrs	r1, r2
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	68d2      	ldr	r2, [r2, #12]
 800af98:	0252      	lsls	r2, r2, #9
 800af9a:	430a      	orrs	r2, r1
 800af9c:	431a      	orrs	r2, r3
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	ffc00000 	.word	0xffc00000

0800afb4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	695a      	ldr	r2, [r3, #20]
 800afc2:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	0052      	lsls	r2, r2, #1
 800afca:	431a      	orrs	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	ffffc001 	.word	0xffffc001

0800afe4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	689a      	ldr	r2, [r3, #8]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	683a      	ldr	r2, [r7, #0]
 800b008:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	601a      	str	r2, [r3, #0]
}
 800b020:	bf00      	nop
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	6892      	ldr	r2, [r2, #8]
 800b042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	6852      	ldr	r2, [r2, #4]
 800b04c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	429a      	cmp	r2, r3
 800b056:	d103      	bne.n	800b060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	689a      	ldr	r2, [r3, #8]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	1e5a      	subs	r2, r3, #1
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b086:	2300      	movs	r3, #0
 800b088:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b08a:	4b4f      	ldr	r3, [pc, #316]	; (800b1c8 <xTaskIncrementTick+0x148>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f040 808f 	bne.w	800b1b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b094:	4b4d      	ldr	r3, [pc, #308]	; (800b1cc <xTaskIncrementTick+0x14c>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3301      	adds	r3, #1
 800b09a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b09c:	4a4b      	ldr	r2, [pc, #300]	; (800b1cc <xTaskIncrementTick+0x14c>)
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d120      	bne.n	800b0ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0a8:	4b49      	ldr	r3, [pc, #292]	; (800b1d0 <xTaskIncrementTick+0x150>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00a      	beq.n	800b0c8 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b0c4:	bf00      	nop
 800b0c6:	e7fe      	b.n	800b0c6 <xTaskIncrementTick+0x46>
 800b0c8:	4b41      	ldr	r3, [pc, #260]	; (800b1d0 <xTaskIncrementTick+0x150>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	4b41      	ldr	r3, [pc, #260]	; (800b1d4 <xTaskIncrementTick+0x154>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a3f      	ldr	r2, [pc, #252]	; (800b1d0 <xTaskIncrementTick+0x150>)
 800b0d4:	6013      	str	r3, [r2, #0]
 800b0d6:	4a3f      	ldr	r2, [pc, #252]	; (800b1d4 <xTaskIncrementTick+0x154>)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6013      	str	r3, [r2, #0]
 800b0dc:	4b3e      	ldr	r3, [pc, #248]	; (800b1d8 <xTaskIncrementTick+0x158>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	4a3d      	ldr	r2, [pc, #244]	; (800b1d8 <xTaskIncrementTick+0x158>)
 800b0e4:	6013      	str	r3, [r2, #0]
 800b0e6:	f000 f8e3 	bl	800b2b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0ea:	4b3c      	ldr	r3, [pc, #240]	; (800b1dc <xTaskIncrementTick+0x15c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d349      	bcc.n	800b188 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0f4:	4b36      	ldr	r3, [pc, #216]	; (800b1d0 <xTaskIncrementTick+0x150>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d104      	bne.n	800b108 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0fe:	4b37      	ldr	r3, [pc, #220]	; (800b1dc <xTaskIncrementTick+0x15c>)
 800b100:	f04f 32ff 	mov.w	r2, #4294967295
 800b104:	601a      	str	r2, [r3, #0]
					break;
 800b106:	e03f      	b.n	800b188 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b108:	4b31      	ldr	r3, [pc, #196]	; (800b1d0 <xTaskIncrementTick+0x150>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b118:	693a      	ldr	r2, [r7, #16]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d203      	bcs.n	800b128 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b120:	4a2e      	ldr	r2, [pc, #184]	; (800b1dc <xTaskIncrementTick+0x15c>)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b126:	e02f      	b.n	800b188 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7ff ff7d 	bl	800b02c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b136:	2b00      	cmp	r3, #0
 800b138:	d004      	beq.n	800b144 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	3318      	adds	r3, #24
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff ff74 	bl	800b02c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b148:	4b25      	ldr	r3, [pc, #148]	; (800b1e0 <xTaskIncrementTick+0x160>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d903      	bls.n	800b158 <xTaskIncrementTick+0xd8>
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b154:	4a22      	ldr	r2, [pc, #136]	; (800b1e0 <xTaskIncrementTick+0x160>)
 800b156:	6013      	str	r3, [r2, #0]
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15c:	4613      	mov	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4a1f      	ldr	r2, [pc, #124]	; (800b1e4 <xTaskIncrementTick+0x164>)
 800b166:	441a      	add	r2, r3
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	3304      	adds	r3, #4
 800b16c:	4619      	mov	r1, r3
 800b16e:	4610      	mov	r0, r2
 800b170:	f7ff ff38 	bl	800afe4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b178:	4b1b      	ldr	r3, [pc, #108]	; (800b1e8 <xTaskIncrementTick+0x168>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17e:	429a      	cmp	r2, r3
 800b180:	d3b8      	bcc.n	800b0f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b182:	2301      	movs	r3, #1
 800b184:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b186:	e7b5      	b.n	800b0f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b188:	4b17      	ldr	r3, [pc, #92]	; (800b1e8 <xTaskIncrementTick+0x168>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18e:	4915      	ldr	r1, [pc, #84]	; (800b1e4 <xTaskIncrementTick+0x164>)
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	440b      	add	r3, r1
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d901      	bls.n	800b1a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1a4:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <xTaskIncrementTick+0x16c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d007      	beq.n	800b1bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	617b      	str	r3, [r7, #20]
 800b1b0:	e004      	b.n	800b1bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1b2:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <xTaskIncrementTick+0x170>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	4a0d      	ldr	r2, [pc, #52]	; (800b1f0 <xTaskIncrementTick+0x170>)
 800b1ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1bc:	697b      	ldr	r3, [r7, #20]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	240014a0 	.word	0x240014a0
 800b1cc:	24001484 	.word	0x24001484
 800b1d0:	2400147c 	.word	0x2400147c
 800b1d4:	24001480 	.word	0x24001480
 800b1d8:	24001498 	.word	0x24001498
 800b1dc:	2400149c 	.word	0x2400149c
 800b1e0:	24001488 	.word	0x24001488
 800b1e4:	2400101c 	.word	0x2400101c
 800b1e8:	24001018 	.word	0x24001018
 800b1ec:	24001494 	.word	0x24001494
 800b1f0:	24001490 	.word	0x24001490

0800b1f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1fa:	4b28      	ldr	r3, [pc, #160]	; (800b29c <vTaskSwitchContext+0xa8>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d003      	beq.n	800b20a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b202:	4b27      	ldr	r3, [pc, #156]	; (800b2a0 <vTaskSwitchContext+0xac>)
 800b204:	2201      	movs	r2, #1
 800b206:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b208:	e041      	b.n	800b28e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b20a:	4b25      	ldr	r3, [pc, #148]	; (800b2a0 <vTaskSwitchContext+0xac>)
 800b20c:	2200      	movs	r2, #0
 800b20e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b210:	4b24      	ldr	r3, [pc, #144]	; (800b2a4 <vTaskSwitchContext+0xb0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e010      	b.n	800b23a <vTaskSwitchContext+0x46>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10a      	bne.n	800b234 <vTaskSwitchContext+0x40>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	607b      	str	r3, [r7, #4]
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <vTaskSwitchContext+0x3e>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3b01      	subs	r3, #1
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	491b      	ldr	r1, [pc, #108]	; (800b2a8 <vTaskSwitchContext+0xb4>)
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	4613      	mov	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	440b      	add	r3, r1
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0e4      	beq.n	800b218 <vTaskSwitchContext+0x24>
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	4613      	mov	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4a13      	ldr	r2, [pc, #76]	; (800b2a8 <vTaskSwitchContext+0xb4>)
 800b25a:	4413      	add	r3, r2
 800b25c:	60bb      	str	r3, [r7, #8]
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	605a      	str	r2, [r3, #4]
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	3308      	adds	r3, #8
 800b270:	429a      	cmp	r2, r3
 800b272:	d104      	bne.n	800b27e <vTaskSwitchContext+0x8a>
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	685a      	ldr	r2, [r3, #4]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	605a      	str	r2, [r3, #4]
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	4a09      	ldr	r2, [pc, #36]	; (800b2ac <vTaskSwitchContext+0xb8>)
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	4a06      	ldr	r2, [pc, #24]	; (800b2a4 <vTaskSwitchContext+0xb0>)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6013      	str	r3, [r2, #0]
}
 800b28e:	bf00      	nop
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	240014a0 	.word	0x240014a0
 800b2a0:	24001494 	.word	0x24001494
 800b2a4:	24001488 	.word	0x24001488
 800b2a8:	2400101c 	.word	0x2400101c
 800b2ac:	24001018 	.word	0x24001018

0800b2b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <prvResetNextTaskUnblockTime+0x38>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d104      	bne.n	800b2ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b2c0:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <prvResetNextTaskUnblockTime+0x3c>)
 800b2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b2c8:	e008      	b.n	800b2dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ca:	4b07      	ldr	r3, [pc, #28]	; (800b2e8 <prvResetNextTaskUnblockTime+0x38>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	4a04      	ldr	r2, [pc, #16]	; (800b2ec <prvResetNextTaskUnblockTime+0x3c>)
 800b2da:	6013      	str	r3, [r2, #0]
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	2400147c 	.word	0x2400147c
 800b2ec:	2400149c 	.word	0x2400149c

0800b2f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <xTaskGetSchedulerState+0x34>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d102      	bne.n	800b304 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2fe:	2301      	movs	r3, #1
 800b300:	607b      	str	r3, [r7, #4]
 800b302:	e008      	b.n	800b316 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b304:	4b08      	ldr	r3, [pc, #32]	; (800b328 <xTaskGetSchedulerState+0x38>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d102      	bne.n	800b312 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b30c:	2302      	movs	r3, #2
 800b30e:	607b      	str	r3, [r7, #4]
 800b310:	e001      	b.n	800b316 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b312:	2300      	movs	r3, #0
 800b314:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b316:	687b      	ldr	r3, [r7, #4]
	}
 800b318:	4618      	mov	r0, r3
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	2400148c 	.word	0x2400148c
 800b328:	240014a0 	.word	0x240014a0
 800b32c:	00000000 	.word	0x00000000

0800b330 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b330:	4b07      	ldr	r3, [pc, #28]	; (800b350 <pxCurrentTCBConst2>)
 800b332:	6819      	ldr	r1, [r3, #0]
 800b334:	6808      	ldr	r0, [r1, #0]
 800b336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33a:	f380 8809 	msr	PSP, r0
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f04f 0000 	mov.w	r0, #0
 800b346:	f380 8811 	msr	BASEPRI, r0
 800b34a:	4770      	bx	lr
 800b34c:	f3af 8000 	nop.w

0800b350 <pxCurrentTCBConst2>:
 800b350:	24001018 	.word	0x24001018
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b354:	bf00      	nop
 800b356:	bf00      	nop
	...

0800b360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b360:	f3ef 8009 	mrs	r0, PSP
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	4b15      	ldr	r3, [pc, #84]	; (800b3c0 <pxCurrentTCBConst>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	f01e 0f10 	tst.w	lr, #16
 800b370:	bf08      	it	eq
 800b372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37a:	6010      	str	r0, [r2, #0]
 800b37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b380:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b384:	f380 8811 	msr	BASEPRI, r0
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f7ff ff30 	bl	800b1f4 <vTaskSwitchContext>
 800b394:	f04f 0000 	mov.w	r0, #0
 800b398:	f380 8811 	msr	BASEPRI, r0
 800b39c:	bc09      	pop	{r0, r3}
 800b39e:	6819      	ldr	r1, [r3, #0]
 800b3a0:	6808      	ldr	r0, [r1, #0]
 800b3a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a6:	f01e 0f10 	tst.w	lr, #16
 800b3aa:	bf08      	it	eq
 800b3ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b3b0:	f380 8809 	msr	PSP, r0
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	f3af 8000 	nop.w

0800b3c0 <pxCurrentTCBConst>:
 800b3c0:	24001018 	.word	0x24001018
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop

0800b3c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	607b      	str	r3, [r7, #4]
}
 800b3e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3e2:	f7ff fe4d 	bl	800b080 <xTaskIncrementTick>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d003      	beq.n	800b3f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3ec:	4b06      	ldr	r3, [pc, #24]	; (800b408 <xPortSysTickHandler+0x40>)
 800b3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b3fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b400:	bf00      	nop
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	e000ed04 	.word	0xe000ed04

0800b40c <malloc>:
 800b40c:	4b02      	ldr	r3, [pc, #8]	; (800b418 <malloc+0xc>)
 800b40e:	4601      	mov	r1, r0
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	f000 b82b 	b.w	800b46c <_malloc_r>
 800b416:	bf00      	nop
 800b418:	24000088 	.word	0x24000088

0800b41c <free>:
 800b41c:	4b02      	ldr	r3, [pc, #8]	; (800b428 <free+0xc>)
 800b41e:	4601      	mov	r1, r0
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	f000 bb25 	b.w	800ba70 <_free_r>
 800b426:	bf00      	nop
 800b428:	24000088 	.word	0x24000088

0800b42c <sbrk_aligned>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	4e0e      	ldr	r6, [pc, #56]	; (800b468 <sbrk_aligned+0x3c>)
 800b430:	460c      	mov	r4, r1
 800b432:	6831      	ldr	r1, [r6, #0]
 800b434:	4605      	mov	r5, r0
 800b436:	b911      	cbnz	r1, 800b43e <sbrk_aligned+0x12>
 800b438:	f000 fa9e 	bl	800b978 <_sbrk_r>
 800b43c:	6030      	str	r0, [r6, #0]
 800b43e:	4621      	mov	r1, r4
 800b440:	4628      	mov	r0, r5
 800b442:	f000 fa99 	bl	800b978 <_sbrk_r>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	d00a      	beq.n	800b460 <sbrk_aligned+0x34>
 800b44a:	1cc4      	adds	r4, r0, #3
 800b44c:	f024 0403 	bic.w	r4, r4, #3
 800b450:	42a0      	cmp	r0, r4
 800b452:	d007      	beq.n	800b464 <sbrk_aligned+0x38>
 800b454:	1a21      	subs	r1, r4, r0
 800b456:	4628      	mov	r0, r5
 800b458:	f000 fa8e 	bl	800b978 <_sbrk_r>
 800b45c:	3001      	adds	r0, #1
 800b45e:	d101      	bne.n	800b464 <sbrk_aligned+0x38>
 800b460:	f04f 34ff 	mov.w	r4, #4294967295
 800b464:	4620      	mov	r0, r4
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	240014a8 	.word	0x240014a8

0800b46c <_malloc_r>:
 800b46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b470:	1ccd      	adds	r5, r1, #3
 800b472:	f025 0503 	bic.w	r5, r5, #3
 800b476:	3508      	adds	r5, #8
 800b478:	2d0c      	cmp	r5, #12
 800b47a:	bf38      	it	cc
 800b47c:	250c      	movcc	r5, #12
 800b47e:	2d00      	cmp	r5, #0
 800b480:	4607      	mov	r7, r0
 800b482:	db01      	blt.n	800b488 <_malloc_r+0x1c>
 800b484:	42a9      	cmp	r1, r5
 800b486:	d905      	bls.n	800b494 <_malloc_r+0x28>
 800b488:	230c      	movs	r3, #12
 800b48a:	603b      	str	r3, [r7, #0]
 800b48c:	2600      	movs	r6, #0
 800b48e:	4630      	mov	r0, r6
 800b490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b494:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b568 <_malloc_r+0xfc>
 800b498:	f000 f868 	bl	800b56c <__malloc_lock>
 800b49c:	f8d8 3000 	ldr.w	r3, [r8]
 800b4a0:	461c      	mov	r4, r3
 800b4a2:	bb5c      	cbnz	r4, 800b4fc <_malloc_r+0x90>
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	f7ff ffc0 	bl	800b42c <sbrk_aligned>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	d155      	bne.n	800b55e <_malloc_r+0xf2>
 800b4b2:	f8d8 4000 	ldr.w	r4, [r8]
 800b4b6:	4626      	mov	r6, r4
 800b4b8:	2e00      	cmp	r6, #0
 800b4ba:	d145      	bne.n	800b548 <_malloc_r+0xdc>
 800b4bc:	2c00      	cmp	r4, #0
 800b4be:	d048      	beq.n	800b552 <_malloc_r+0xe6>
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	eb04 0903 	add.w	r9, r4, r3
 800b4ca:	f000 fa55 	bl	800b978 <_sbrk_r>
 800b4ce:	4581      	cmp	r9, r0
 800b4d0:	d13f      	bne.n	800b552 <_malloc_r+0xe6>
 800b4d2:	6821      	ldr	r1, [r4, #0]
 800b4d4:	1a6d      	subs	r5, r5, r1
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f7ff ffa7 	bl	800b42c <sbrk_aligned>
 800b4de:	3001      	adds	r0, #1
 800b4e0:	d037      	beq.n	800b552 <_malloc_r+0xe6>
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	442b      	add	r3, r5
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d038      	beq.n	800b562 <_malloc_r+0xf6>
 800b4f0:	685a      	ldr	r2, [r3, #4]
 800b4f2:	42a2      	cmp	r2, r4
 800b4f4:	d12b      	bne.n	800b54e <_malloc_r+0xe2>
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	605a      	str	r2, [r3, #4]
 800b4fa:	e00f      	b.n	800b51c <_malloc_r+0xb0>
 800b4fc:	6822      	ldr	r2, [r4, #0]
 800b4fe:	1b52      	subs	r2, r2, r5
 800b500:	d41f      	bmi.n	800b542 <_malloc_r+0xd6>
 800b502:	2a0b      	cmp	r2, #11
 800b504:	d917      	bls.n	800b536 <_malloc_r+0xca>
 800b506:	1961      	adds	r1, r4, r5
 800b508:	42a3      	cmp	r3, r4
 800b50a:	6025      	str	r5, [r4, #0]
 800b50c:	bf18      	it	ne
 800b50e:	6059      	strne	r1, [r3, #4]
 800b510:	6863      	ldr	r3, [r4, #4]
 800b512:	bf08      	it	eq
 800b514:	f8c8 1000 	streq.w	r1, [r8]
 800b518:	5162      	str	r2, [r4, r5]
 800b51a:	604b      	str	r3, [r1, #4]
 800b51c:	4638      	mov	r0, r7
 800b51e:	f104 060b 	add.w	r6, r4, #11
 800b522:	f000 f829 	bl	800b578 <__malloc_unlock>
 800b526:	f026 0607 	bic.w	r6, r6, #7
 800b52a:	1d23      	adds	r3, r4, #4
 800b52c:	1af2      	subs	r2, r6, r3
 800b52e:	d0ae      	beq.n	800b48e <_malloc_r+0x22>
 800b530:	1b9b      	subs	r3, r3, r6
 800b532:	50a3      	str	r3, [r4, r2]
 800b534:	e7ab      	b.n	800b48e <_malloc_r+0x22>
 800b536:	42a3      	cmp	r3, r4
 800b538:	6862      	ldr	r2, [r4, #4]
 800b53a:	d1dd      	bne.n	800b4f8 <_malloc_r+0x8c>
 800b53c:	f8c8 2000 	str.w	r2, [r8]
 800b540:	e7ec      	b.n	800b51c <_malloc_r+0xb0>
 800b542:	4623      	mov	r3, r4
 800b544:	6864      	ldr	r4, [r4, #4]
 800b546:	e7ac      	b.n	800b4a2 <_malloc_r+0x36>
 800b548:	4634      	mov	r4, r6
 800b54a:	6876      	ldr	r6, [r6, #4]
 800b54c:	e7b4      	b.n	800b4b8 <_malloc_r+0x4c>
 800b54e:	4613      	mov	r3, r2
 800b550:	e7cc      	b.n	800b4ec <_malloc_r+0x80>
 800b552:	230c      	movs	r3, #12
 800b554:	603b      	str	r3, [r7, #0]
 800b556:	4638      	mov	r0, r7
 800b558:	f000 f80e 	bl	800b578 <__malloc_unlock>
 800b55c:	e797      	b.n	800b48e <_malloc_r+0x22>
 800b55e:	6025      	str	r5, [r4, #0]
 800b560:	e7dc      	b.n	800b51c <_malloc_r+0xb0>
 800b562:	605b      	str	r3, [r3, #4]
 800b564:	deff      	udf	#255	; 0xff
 800b566:	bf00      	nop
 800b568:	240014a4 	.word	0x240014a4

0800b56c <__malloc_lock>:
 800b56c:	4801      	ldr	r0, [pc, #4]	; (800b574 <__malloc_lock+0x8>)
 800b56e:	f000 ba50 	b.w	800ba12 <__retarget_lock_acquire_recursive>
 800b572:	bf00      	nop
 800b574:	240015ec 	.word	0x240015ec

0800b578 <__malloc_unlock>:
 800b578:	4801      	ldr	r0, [pc, #4]	; (800b580 <__malloc_unlock+0x8>)
 800b57a:	f000 ba4b 	b.w	800ba14 <__retarget_lock_release_recursive>
 800b57e:	bf00      	nop
 800b580:	240015ec 	.word	0x240015ec

0800b584 <srand>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <srand+0x44>)
 800b588:	681d      	ldr	r5, [r3, #0]
 800b58a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b58c:	4604      	mov	r4, r0
 800b58e:	b9b3      	cbnz	r3, 800b5be <srand+0x3a>
 800b590:	2018      	movs	r0, #24
 800b592:	f7ff ff3b 	bl	800b40c <malloc>
 800b596:	4602      	mov	r2, r0
 800b598:	6328      	str	r0, [r5, #48]	; 0x30
 800b59a:	b920      	cbnz	r0, 800b5a6 <srand+0x22>
 800b59c:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <srand+0x48>)
 800b59e:	480c      	ldr	r0, [pc, #48]	; (800b5d0 <srand+0x4c>)
 800b5a0:	2146      	movs	r1, #70	; 0x46
 800b5a2:	f000 fa47 	bl	800ba34 <__assert_func>
 800b5a6:	490b      	ldr	r1, [pc, #44]	; (800b5d4 <srand+0x50>)
 800b5a8:	4b0b      	ldr	r3, [pc, #44]	; (800b5d8 <srand+0x54>)
 800b5aa:	e9c0 1300 	strd	r1, r3, [r0]
 800b5ae:	4b0b      	ldr	r3, [pc, #44]	; (800b5dc <srand+0x58>)
 800b5b0:	6083      	str	r3, [r0, #8]
 800b5b2:	230b      	movs	r3, #11
 800b5b4:	8183      	strh	r3, [r0, #12]
 800b5b6:	2100      	movs	r1, #0
 800b5b8:	2001      	movs	r0, #1
 800b5ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b5be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	611c      	str	r4, [r3, #16]
 800b5c4:	615a      	str	r2, [r3, #20]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	24000088 	.word	0x24000088
 800b5cc:	0800d538 	.word	0x0800d538
 800b5d0:	0800d54f 	.word	0x0800d54f
 800b5d4:	abcd330e 	.word	0xabcd330e
 800b5d8:	e66d1234 	.word	0xe66d1234
 800b5dc:	0005deec 	.word	0x0005deec

0800b5e0 <rand>:
 800b5e0:	4b16      	ldr	r3, [pc, #88]	; (800b63c <rand+0x5c>)
 800b5e2:	b510      	push	{r4, lr}
 800b5e4:	681c      	ldr	r4, [r3, #0]
 800b5e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b5e8:	b9b3      	cbnz	r3, 800b618 <rand+0x38>
 800b5ea:	2018      	movs	r0, #24
 800b5ec:	f7ff ff0e 	bl	800b40c <malloc>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	6320      	str	r0, [r4, #48]	; 0x30
 800b5f4:	b920      	cbnz	r0, 800b600 <rand+0x20>
 800b5f6:	4b12      	ldr	r3, [pc, #72]	; (800b640 <rand+0x60>)
 800b5f8:	4812      	ldr	r0, [pc, #72]	; (800b644 <rand+0x64>)
 800b5fa:	2152      	movs	r1, #82	; 0x52
 800b5fc:	f000 fa1a 	bl	800ba34 <__assert_func>
 800b600:	4911      	ldr	r1, [pc, #68]	; (800b648 <rand+0x68>)
 800b602:	4b12      	ldr	r3, [pc, #72]	; (800b64c <rand+0x6c>)
 800b604:	e9c0 1300 	strd	r1, r3, [r0]
 800b608:	4b11      	ldr	r3, [pc, #68]	; (800b650 <rand+0x70>)
 800b60a:	6083      	str	r3, [r0, #8]
 800b60c:	230b      	movs	r3, #11
 800b60e:	8183      	strh	r3, [r0, #12]
 800b610:	2100      	movs	r1, #0
 800b612:	2001      	movs	r0, #1
 800b614:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b618:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b61a:	480e      	ldr	r0, [pc, #56]	; (800b654 <rand+0x74>)
 800b61c:	690b      	ldr	r3, [r1, #16]
 800b61e:	694c      	ldr	r4, [r1, #20]
 800b620:	4a0d      	ldr	r2, [pc, #52]	; (800b658 <rand+0x78>)
 800b622:	4358      	muls	r0, r3
 800b624:	fb02 0004 	mla	r0, r2, r4, r0
 800b628:	fba3 3202 	umull	r3, r2, r3, r2
 800b62c:	3301      	adds	r3, #1
 800b62e:	eb40 0002 	adc.w	r0, r0, r2
 800b632:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b636:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b63a:	bd10      	pop	{r4, pc}
 800b63c:	24000088 	.word	0x24000088
 800b640:	0800d538 	.word	0x0800d538
 800b644:	0800d54f 	.word	0x0800d54f
 800b648:	abcd330e 	.word	0xabcd330e
 800b64c:	e66d1234 	.word	0xe66d1234
 800b650:	0005deec 	.word	0x0005deec
 800b654:	5851f42d 	.word	0x5851f42d
 800b658:	4c957f2d 	.word	0x4c957f2d

0800b65c <std>:
 800b65c:	2300      	movs	r3, #0
 800b65e:	b510      	push	{r4, lr}
 800b660:	4604      	mov	r4, r0
 800b662:	e9c0 3300 	strd	r3, r3, [r0]
 800b666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b66a:	6083      	str	r3, [r0, #8]
 800b66c:	8181      	strh	r1, [r0, #12]
 800b66e:	6643      	str	r3, [r0, #100]	; 0x64
 800b670:	81c2      	strh	r2, [r0, #14]
 800b672:	6183      	str	r3, [r0, #24]
 800b674:	4619      	mov	r1, r3
 800b676:	2208      	movs	r2, #8
 800b678:	305c      	adds	r0, #92	; 0x5c
 800b67a:	f000 f914 	bl	800b8a6 <memset>
 800b67e:	4b0d      	ldr	r3, [pc, #52]	; (800b6b4 <std+0x58>)
 800b680:	6263      	str	r3, [r4, #36]	; 0x24
 800b682:	4b0d      	ldr	r3, [pc, #52]	; (800b6b8 <std+0x5c>)
 800b684:	62a3      	str	r3, [r4, #40]	; 0x28
 800b686:	4b0d      	ldr	r3, [pc, #52]	; (800b6bc <std+0x60>)
 800b688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b68a:	4b0d      	ldr	r3, [pc, #52]	; (800b6c0 <std+0x64>)
 800b68c:	6323      	str	r3, [r4, #48]	; 0x30
 800b68e:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <std+0x68>)
 800b690:	6224      	str	r4, [r4, #32]
 800b692:	429c      	cmp	r4, r3
 800b694:	d006      	beq.n	800b6a4 <std+0x48>
 800b696:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b69a:	4294      	cmp	r4, r2
 800b69c:	d002      	beq.n	800b6a4 <std+0x48>
 800b69e:	33d0      	adds	r3, #208	; 0xd0
 800b6a0:	429c      	cmp	r4, r3
 800b6a2:	d105      	bne.n	800b6b0 <std+0x54>
 800b6a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6ac:	f000 b9b0 	b.w	800ba10 <__retarget_lock_init_recursive>
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	bf00      	nop
 800b6b4:	0800b821 	.word	0x0800b821
 800b6b8:	0800b843 	.word	0x0800b843
 800b6bc:	0800b87b 	.word	0x0800b87b
 800b6c0:	0800b89f 	.word	0x0800b89f
 800b6c4:	240014ac 	.word	0x240014ac

0800b6c8 <stdio_exit_handler>:
 800b6c8:	4a02      	ldr	r2, [pc, #8]	; (800b6d4 <stdio_exit_handler+0xc>)
 800b6ca:	4903      	ldr	r1, [pc, #12]	; (800b6d8 <stdio_exit_handler+0x10>)
 800b6cc:	4803      	ldr	r0, [pc, #12]	; (800b6dc <stdio_exit_handler+0x14>)
 800b6ce:	f000 b869 	b.w	800b7a4 <_fwalk_sglue>
 800b6d2:	bf00      	nop
 800b6d4:	24000030 	.word	0x24000030
 800b6d8:	0800c1e5 	.word	0x0800c1e5
 800b6dc:	2400003c 	.word	0x2400003c

0800b6e0 <cleanup_stdio>:
 800b6e0:	6841      	ldr	r1, [r0, #4]
 800b6e2:	4b0c      	ldr	r3, [pc, #48]	; (800b714 <cleanup_stdio+0x34>)
 800b6e4:	4299      	cmp	r1, r3
 800b6e6:	b510      	push	{r4, lr}
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	d001      	beq.n	800b6f0 <cleanup_stdio+0x10>
 800b6ec:	f000 fd7a 	bl	800c1e4 <_fflush_r>
 800b6f0:	68a1      	ldr	r1, [r4, #8]
 800b6f2:	4b09      	ldr	r3, [pc, #36]	; (800b718 <cleanup_stdio+0x38>)
 800b6f4:	4299      	cmp	r1, r3
 800b6f6:	d002      	beq.n	800b6fe <cleanup_stdio+0x1e>
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f000 fd73 	bl	800c1e4 <_fflush_r>
 800b6fe:	68e1      	ldr	r1, [r4, #12]
 800b700:	4b06      	ldr	r3, [pc, #24]	; (800b71c <cleanup_stdio+0x3c>)
 800b702:	4299      	cmp	r1, r3
 800b704:	d004      	beq.n	800b710 <cleanup_stdio+0x30>
 800b706:	4620      	mov	r0, r4
 800b708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b70c:	f000 bd6a 	b.w	800c1e4 <_fflush_r>
 800b710:	bd10      	pop	{r4, pc}
 800b712:	bf00      	nop
 800b714:	240014ac 	.word	0x240014ac
 800b718:	24001514 	.word	0x24001514
 800b71c:	2400157c 	.word	0x2400157c

0800b720 <global_stdio_init.part.0>:
 800b720:	b510      	push	{r4, lr}
 800b722:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <global_stdio_init.part.0+0x30>)
 800b724:	4c0b      	ldr	r4, [pc, #44]	; (800b754 <global_stdio_init.part.0+0x34>)
 800b726:	4a0c      	ldr	r2, [pc, #48]	; (800b758 <global_stdio_init.part.0+0x38>)
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	4620      	mov	r0, r4
 800b72c:	2200      	movs	r2, #0
 800b72e:	2104      	movs	r1, #4
 800b730:	f7ff ff94 	bl	800b65c <std>
 800b734:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b738:	2201      	movs	r2, #1
 800b73a:	2109      	movs	r1, #9
 800b73c:	f7ff ff8e 	bl	800b65c <std>
 800b740:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b744:	2202      	movs	r2, #2
 800b746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b74a:	2112      	movs	r1, #18
 800b74c:	f7ff bf86 	b.w	800b65c <std>
 800b750:	240015e4 	.word	0x240015e4
 800b754:	240014ac 	.word	0x240014ac
 800b758:	0800b6c9 	.word	0x0800b6c9

0800b75c <__sfp_lock_acquire>:
 800b75c:	4801      	ldr	r0, [pc, #4]	; (800b764 <__sfp_lock_acquire+0x8>)
 800b75e:	f000 b958 	b.w	800ba12 <__retarget_lock_acquire_recursive>
 800b762:	bf00      	nop
 800b764:	240015ed 	.word	0x240015ed

0800b768 <__sfp_lock_release>:
 800b768:	4801      	ldr	r0, [pc, #4]	; (800b770 <__sfp_lock_release+0x8>)
 800b76a:	f000 b953 	b.w	800ba14 <__retarget_lock_release_recursive>
 800b76e:	bf00      	nop
 800b770:	240015ed 	.word	0x240015ed

0800b774 <__sinit>:
 800b774:	b510      	push	{r4, lr}
 800b776:	4604      	mov	r4, r0
 800b778:	f7ff fff0 	bl	800b75c <__sfp_lock_acquire>
 800b77c:	6a23      	ldr	r3, [r4, #32]
 800b77e:	b11b      	cbz	r3, 800b788 <__sinit+0x14>
 800b780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b784:	f7ff bff0 	b.w	800b768 <__sfp_lock_release>
 800b788:	4b04      	ldr	r3, [pc, #16]	; (800b79c <__sinit+0x28>)
 800b78a:	6223      	str	r3, [r4, #32]
 800b78c:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <__sinit+0x2c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1f5      	bne.n	800b780 <__sinit+0xc>
 800b794:	f7ff ffc4 	bl	800b720 <global_stdio_init.part.0>
 800b798:	e7f2      	b.n	800b780 <__sinit+0xc>
 800b79a:	bf00      	nop
 800b79c:	0800b6e1 	.word	0x0800b6e1
 800b7a0:	240015e4 	.word	0x240015e4

0800b7a4 <_fwalk_sglue>:
 800b7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7a8:	4607      	mov	r7, r0
 800b7aa:	4688      	mov	r8, r1
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	2600      	movs	r6, #0
 800b7b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7b4:	f1b9 0901 	subs.w	r9, r9, #1
 800b7b8:	d505      	bpl.n	800b7c6 <_fwalk_sglue+0x22>
 800b7ba:	6824      	ldr	r4, [r4, #0]
 800b7bc:	2c00      	cmp	r4, #0
 800b7be:	d1f7      	bne.n	800b7b0 <_fwalk_sglue+0xc>
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c6:	89ab      	ldrh	r3, [r5, #12]
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d907      	bls.n	800b7dc <_fwalk_sglue+0x38>
 800b7cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	d003      	beq.n	800b7dc <_fwalk_sglue+0x38>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	47c0      	blx	r8
 800b7da:	4306      	orrs	r6, r0
 800b7dc:	3568      	adds	r5, #104	; 0x68
 800b7de:	e7e9      	b.n	800b7b4 <_fwalk_sglue+0x10>

0800b7e0 <siprintf>:
 800b7e0:	b40e      	push	{r1, r2, r3}
 800b7e2:	b500      	push	{lr}
 800b7e4:	b09c      	sub	sp, #112	; 0x70
 800b7e6:	ab1d      	add	r3, sp, #116	; 0x74
 800b7e8:	9002      	str	r0, [sp, #8]
 800b7ea:	9006      	str	r0, [sp, #24]
 800b7ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7f0:	4809      	ldr	r0, [pc, #36]	; (800b818 <siprintf+0x38>)
 800b7f2:	9107      	str	r1, [sp, #28]
 800b7f4:	9104      	str	r1, [sp, #16]
 800b7f6:	4909      	ldr	r1, [pc, #36]	; (800b81c <siprintf+0x3c>)
 800b7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7fc:	9105      	str	r1, [sp, #20]
 800b7fe:	6800      	ldr	r0, [r0, #0]
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	a902      	add	r1, sp, #8
 800b804:	f000 f9da 	bl	800bbbc <_svfiprintf_r>
 800b808:	9b02      	ldr	r3, [sp, #8]
 800b80a:	2200      	movs	r2, #0
 800b80c:	701a      	strb	r2, [r3, #0]
 800b80e:	b01c      	add	sp, #112	; 0x70
 800b810:	f85d eb04 	ldr.w	lr, [sp], #4
 800b814:	b003      	add	sp, #12
 800b816:	4770      	bx	lr
 800b818:	24000088 	.word	0x24000088
 800b81c:	ffff0208 	.word	0xffff0208

0800b820 <__sread>:
 800b820:	b510      	push	{r4, lr}
 800b822:	460c      	mov	r4, r1
 800b824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b828:	f000 f894 	bl	800b954 <_read_r>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	bfab      	itete	ge
 800b830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b832:	89a3      	ldrhlt	r3, [r4, #12]
 800b834:	181b      	addge	r3, r3, r0
 800b836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b83a:	bfac      	ite	ge
 800b83c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b83e:	81a3      	strhlt	r3, [r4, #12]
 800b840:	bd10      	pop	{r4, pc}

0800b842 <__swrite>:
 800b842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b846:	461f      	mov	r7, r3
 800b848:	898b      	ldrh	r3, [r1, #12]
 800b84a:	05db      	lsls	r3, r3, #23
 800b84c:	4605      	mov	r5, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	4616      	mov	r6, r2
 800b852:	d505      	bpl.n	800b860 <__swrite+0x1e>
 800b854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b858:	2302      	movs	r3, #2
 800b85a:	2200      	movs	r2, #0
 800b85c:	f000 f868 	bl	800b930 <_lseek_r>
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b86a:	81a3      	strh	r3, [r4, #12]
 800b86c:	4632      	mov	r2, r6
 800b86e:	463b      	mov	r3, r7
 800b870:	4628      	mov	r0, r5
 800b872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b876:	f000 b88f 	b.w	800b998 <_write_r>

0800b87a <__sseek>:
 800b87a:	b510      	push	{r4, lr}
 800b87c:	460c      	mov	r4, r1
 800b87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b882:	f000 f855 	bl	800b930 <_lseek_r>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	bf15      	itete	ne
 800b88c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b88e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b896:	81a3      	strheq	r3, [r4, #12]
 800b898:	bf18      	it	ne
 800b89a:	81a3      	strhne	r3, [r4, #12]
 800b89c:	bd10      	pop	{r4, pc}

0800b89e <__sclose>:
 800b89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a2:	f000 b823 	b.w	800b8ec <_close_r>

0800b8a6 <memset>:
 800b8a6:	4402      	add	r2, r0
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d100      	bne.n	800b8b0 <memset+0xa>
 800b8ae:	4770      	bx	lr
 800b8b0:	f803 1b01 	strb.w	r1, [r3], #1
 800b8b4:	e7f9      	b.n	800b8aa <memset+0x4>
	...

0800b8b8 <time>:
 800b8b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ba:	4b0b      	ldr	r3, [pc, #44]	; (800b8e8 <time+0x30>)
 800b8bc:	2200      	movs	r2, #0
 800b8be:	4669      	mov	r1, sp
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	6818      	ldr	r0, [r3, #0]
 800b8c4:	f000 f822 	bl	800b90c <_gettimeofday_r>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	bfbe      	ittt	lt
 800b8cc:	f04f 32ff 	movlt.w	r2, #4294967295
 800b8d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8d4:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b8d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8dc:	b10c      	cbz	r4, 800b8e2 <time+0x2a>
 800b8de:	e9c4 0100 	strd	r0, r1, [r4]
 800b8e2:	b004      	add	sp, #16
 800b8e4:	bd10      	pop	{r4, pc}
 800b8e6:	bf00      	nop
 800b8e8:	24000088 	.word	0x24000088

0800b8ec <_close_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d06      	ldr	r5, [pc, #24]	; (800b908 <_close_r+0x1c>)
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	4608      	mov	r0, r1
 800b8f6:	602b      	str	r3, [r5, #0]
 800b8f8:	f7f5 f9fc 	bl	8000cf4 <_close>
 800b8fc:	1c43      	adds	r3, r0, #1
 800b8fe:	d102      	bne.n	800b906 <_close_r+0x1a>
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	b103      	cbz	r3, 800b906 <_close_r+0x1a>
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	bd38      	pop	{r3, r4, r5, pc}
 800b908:	240015e8 	.word	0x240015e8

0800b90c <_gettimeofday_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d07      	ldr	r5, [pc, #28]	; (800b92c <_gettimeofday_r+0x20>)
 800b910:	2300      	movs	r3, #0
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	f000 ff97 	bl	800c84c <_gettimeofday>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d102      	bne.n	800b928 <_gettimeofday_r+0x1c>
 800b922:	682b      	ldr	r3, [r5, #0]
 800b924:	b103      	cbz	r3, 800b928 <_gettimeofday_r+0x1c>
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	bd38      	pop	{r3, r4, r5, pc}
 800b92a:	bf00      	nop
 800b92c:	240015e8 	.word	0x240015e8

0800b930 <_lseek_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4d07      	ldr	r5, [pc, #28]	; (800b950 <_lseek_r+0x20>)
 800b934:	4604      	mov	r4, r0
 800b936:	4608      	mov	r0, r1
 800b938:	4611      	mov	r1, r2
 800b93a:	2200      	movs	r2, #0
 800b93c:	602a      	str	r2, [r5, #0]
 800b93e:	461a      	mov	r2, r3
 800b940:	f7f5 f9ef 	bl	8000d22 <_lseek>
 800b944:	1c43      	adds	r3, r0, #1
 800b946:	d102      	bne.n	800b94e <_lseek_r+0x1e>
 800b948:	682b      	ldr	r3, [r5, #0]
 800b94a:	b103      	cbz	r3, 800b94e <_lseek_r+0x1e>
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	bd38      	pop	{r3, r4, r5, pc}
 800b950:	240015e8 	.word	0x240015e8

0800b954 <_read_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	4d07      	ldr	r5, [pc, #28]	; (800b974 <_read_r+0x20>)
 800b958:	4604      	mov	r4, r0
 800b95a:	4608      	mov	r0, r1
 800b95c:	4611      	mov	r1, r2
 800b95e:	2200      	movs	r2, #0
 800b960:	602a      	str	r2, [r5, #0]
 800b962:	461a      	mov	r2, r3
 800b964:	f7f5 fa0a 	bl	8000d7c <_read>
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d102      	bne.n	800b972 <_read_r+0x1e>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	b103      	cbz	r3, 800b972 <_read_r+0x1e>
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	240015e8 	.word	0x240015e8

0800b978 <_sbrk_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d06      	ldr	r5, [pc, #24]	; (800b994 <_sbrk_r+0x1c>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	602b      	str	r3, [r5, #0]
 800b984:	f7f5 feec 	bl	8001760 <_sbrk>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_sbrk_r+0x1a>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_sbrk_r+0x1a>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	240015e8 	.word	0x240015e8

0800b998 <_write_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4d07      	ldr	r5, [pc, #28]	; (800b9b8 <_write_r+0x20>)
 800b99c:	4604      	mov	r4, r0
 800b99e:	4608      	mov	r0, r1
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	602a      	str	r2, [r5, #0]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f7f5 fa10 	bl	8000dcc <_write>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_write_r+0x1e>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_write_r+0x1e>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	240015e8 	.word	0x240015e8

0800b9bc <__errno>:
 800b9bc:	4b01      	ldr	r3, [pc, #4]	; (800b9c4 <__errno+0x8>)
 800b9be:	6818      	ldr	r0, [r3, #0]
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	24000088 	.word	0x24000088

0800b9c8 <__libc_init_array>:
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	4d0d      	ldr	r5, [pc, #52]	; (800ba00 <__libc_init_array+0x38>)
 800b9cc:	4c0d      	ldr	r4, [pc, #52]	; (800ba04 <__libc_init_array+0x3c>)
 800b9ce:	1b64      	subs	r4, r4, r5
 800b9d0:	10a4      	asrs	r4, r4, #2
 800b9d2:	2600      	movs	r6, #0
 800b9d4:	42a6      	cmp	r6, r4
 800b9d6:	d109      	bne.n	800b9ec <__libc_init_array+0x24>
 800b9d8:	4d0b      	ldr	r5, [pc, #44]	; (800ba08 <__libc_init_array+0x40>)
 800b9da:	4c0c      	ldr	r4, [pc, #48]	; (800ba0c <__libc_init_array+0x44>)
 800b9dc:	f000 ff3e 	bl	800c85c <_init>
 800b9e0:	1b64      	subs	r4, r4, r5
 800b9e2:	10a4      	asrs	r4, r4, #2
 800b9e4:	2600      	movs	r6, #0
 800b9e6:	42a6      	cmp	r6, r4
 800b9e8:	d105      	bne.n	800b9f6 <__libc_init_array+0x2e>
 800b9ea:	bd70      	pop	{r4, r5, r6, pc}
 800b9ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f0:	4798      	blx	r3
 800b9f2:	3601      	adds	r6, #1
 800b9f4:	e7ee      	b.n	800b9d4 <__libc_init_array+0xc>
 800b9f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9fa:	4798      	blx	r3
 800b9fc:	3601      	adds	r6, #1
 800b9fe:	e7f2      	b.n	800b9e6 <__libc_init_array+0x1e>
 800ba00:	0800d618 	.word	0x0800d618
 800ba04:	0800d618 	.word	0x0800d618
 800ba08:	0800d618 	.word	0x0800d618
 800ba0c:	0800d61c 	.word	0x0800d61c

0800ba10 <__retarget_lock_init_recursive>:
 800ba10:	4770      	bx	lr

0800ba12 <__retarget_lock_acquire_recursive>:
 800ba12:	4770      	bx	lr

0800ba14 <__retarget_lock_release_recursive>:
 800ba14:	4770      	bx	lr

0800ba16 <memcpy>:
 800ba16:	440a      	add	r2, r1
 800ba18:	4291      	cmp	r1, r2
 800ba1a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba1e:	d100      	bne.n	800ba22 <memcpy+0xc>
 800ba20:	4770      	bx	lr
 800ba22:	b510      	push	{r4, lr}
 800ba24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba2c:	4291      	cmp	r1, r2
 800ba2e:	d1f9      	bne.n	800ba24 <memcpy+0xe>
 800ba30:	bd10      	pop	{r4, pc}
	...

0800ba34 <__assert_func>:
 800ba34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba36:	4614      	mov	r4, r2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4b09      	ldr	r3, [pc, #36]	; (800ba60 <__assert_func+0x2c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4605      	mov	r5, r0
 800ba40:	68d8      	ldr	r0, [r3, #12]
 800ba42:	b14c      	cbz	r4, 800ba58 <__assert_func+0x24>
 800ba44:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <__assert_func+0x30>)
 800ba46:	9100      	str	r1, [sp, #0]
 800ba48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba4c:	4906      	ldr	r1, [pc, #24]	; (800ba68 <__assert_func+0x34>)
 800ba4e:	462b      	mov	r3, r5
 800ba50:	f000 fbf0 	bl	800c234 <fiprintf>
 800ba54:	f000 fc9e 	bl	800c394 <abort>
 800ba58:	4b04      	ldr	r3, [pc, #16]	; (800ba6c <__assert_func+0x38>)
 800ba5a:	461c      	mov	r4, r3
 800ba5c:	e7f3      	b.n	800ba46 <__assert_func+0x12>
 800ba5e:	bf00      	nop
 800ba60:	24000088 	.word	0x24000088
 800ba64:	0800d5a7 	.word	0x0800d5a7
 800ba68:	0800d5b4 	.word	0x0800d5b4
 800ba6c:	0800d5e2 	.word	0x0800d5e2

0800ba70 <_free_r>:
 800ba70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba72:	2900      	cmp	r1, #0
 800ba74:	d044      	beq.n	800bb00 <_free_r+0x90>
 800ba76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba7a:	9001      	str	r0, [sp, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ba82:	bfb8      	it	lt
 800ba84:	18e4      	addlt	r4, r4, r3
 800ba86:	f7ff fd71 	bl	800b56c <__malloc_lock>
 800ba8a:	4a1e      	ldr	r2, [pc, #120]	; (800bb04 <_free_r+0x94>)
 800ba8c:	9801      	ldr	r0, [sp, #4]
 800ba8e:	6813      	ldr	r3, [r2, #0]
 800ba90:	b933      	cbnz	r3, 800baa0 <_free_r+0x30>
 800ba92:	6063      	str	r3, [r4, #4]
 800ba94:	6014      	str	r4, [r2, #0]
 800ba96:	b003      	add	sp, #12
 800ba98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba9c:	f7ff bd6c 	b.w	800b578 <__malloc_unlock>
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	d908      	bls.n	800bab6 <_free_r+0x46>
 800baa4:	6825      	ldr	r5, [r4, #0]
 800baa6:	1961      	adds	r1, r4, r5
 800baa8:	428b      	cmp	r3, r1
 800baaa:	bf01      	itttt	eq
 800baac:	6819      	ldreq	r1, [r3, #0]
 800baae:	685b      	ldreq	r3, [r3, #4]
 800bab0:	1949      	addeq	r1, r1, r5
 800bab2:	6021      	streq	r1, [r4, #0]
 800bab4:	e7ed      	b.n	800ba92 <_free_r+0x22>
 800bab6:	461a      	mov	r2, r3
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	b10b      	cbz	r3, 800bac0 <_free_r+0x50>
 800babc:	42a3      	cmp	r3, r4
 800babe:	d9fa      	bls.n	800bab6 <_free_r+0x46>
 800bac0:	6811      	ldr	r1, [r2, #0]
 800bac2:	1855      	adds	r5, r2, r1
 800bac4:	42a5      	cmp	r5, r4
 800bac6:	d10b      	bne.n	800bae0 <_free_r+0x70>
 800bac8:	6824      	ldr	r4, [r4, #0]
 800baca:	4421      	add	r1, r4
 800bacc:	1854      	adds	r4, r2, r1
 800bace:	42a3      	cmp	r3, r4
 800bad0:	6011      	str	r1, [r2, #0]
 800bad2:	d1e0      	bne.n	800ba96 <_free_r+0x26>
 800bad4:	681c      	ldr	r4, [r3, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	6053      	str	r3, [r2, #4]
 800bada:	440c      	add	r4, r1
 800badc:	6014      	str	r4, [r2, #0]
 800bade:	e7da      	b.n	800ba96 <_free_r+0x26>
 800bae0:	d902      	bls.n	800bae8 <_free_r+0x78>
 800bae2:	230c      	movs	r3, #12
 800bae4:	6003      	str	r3, [r0, #0]
 800bae6:	e7d6      	b.n	800ba96 <_free_r+0x26>
 800bae8:	6825      	ldr	r5, [r4, #0]
 800baea:	1961      	adds	r1, r4, r5
 800baec:	428b      	cmp	r3, r1
 800baee:	bf04      	itt	eq
 800baf0:	6819      	ldreq	r1, [r3, #0]
 800baf2:	685b      	ldreq	r3, [r3, #4]
 800baf4:	6063      	str	r3, [r4, #4]
 800baf6:	bf04      	itt	eq
 800baf8:	1949      	addeq	r1, r1, r5
 800bafa:	6021      	streq	r1, [r4, #0]
 800bafc:	6054      	str	r4, [r2, #4]
 800bafe:	e7ca      	b.n	800ba96 <_free_r+0x26>
 800bb00:	b003      	add	sp, #12
 800bb02:	bd30      	pop	{r4, r5, pc}
 800bb04:	240014a4 	.word	0x240014a4

0800bb08 <__ssputs_r>:
 800bb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb0c:	688e      	ldr	r6, [r1, #8]
 800bb0e:	461f      	mov	r7, r3
 800bb10:	42be      	cmp	r6, r7
 800bb12:	680b      	ldr	r3, [r1, #0]
 800bb14:	4682      	mov	sl, r0
 800bb16:	460c      	mov	r4, r1
 800bb18:	4690      	mov	r8, r2
 800bb1a:	d82c      	bhi.n	800bb76 <__ssputs_r+0x6e>
 800bb1c:	898a      	ldrh	r2, [r1, #12]
 800bb1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb22:	d026      	beq.n	800bb72 <__ssputs_r+0x6a>
 800bb24:	6965      	ldr	r5, [r4, #20]
 800bb26:	6909      	ldr	r1, [r1, #16]
 800bb28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb2c:	eba3 0901 	sub.w	r9, r3, r1
 800bb30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb34:	1c7b      	adds	r3, r7, #1
 800bb36:	444b      	add	r3, r9
 800bb38:	106d      	asrs	r5, r5, #1
 800bb3a:	429d      	cmp	r5, r3
 800bb3c:	bf38      	it	cc
 800bb3e:	461d      	movcc	r5, r3
 800bb40:	0553      	lsls	r3, r2, #21
 800bb42:	d527      	bpl.n	800bb94 <__ssputs_r+0x8c>
 800bb44:	4629      	mov	r1, r5
 800bb46:	f7ff fc91 	bl	800b46c <_malloc_r>
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	b360      	cbz	r0, 800bba8 <__ssputs_r+0xa0>
 800bb4e:	6921      	ldr	r1, [r4, #16]
 800bb50:	464a      	mov	r2, r9
 800bb52:	f7ff ff60 	bl	800ba16 <memcpy>
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb60:	81a3      	strh	r3, [r4, #12]
 800bb62:	6126      	str	r6, [r4, #16]
 800bb64:	6165      	str	r5, [r4, #20]
 800bb66:	444e      	add	r6, r9
 800bb68:	eba5 0509 	sub.w	r5, r5, r9
 800bb6c:	6026      	str	r6, [r4, #0]
 800bb6e:	60a5      	str	r5, [r4, #8]
 800bb70:	463e      	mov	r6, r7
 800bb72:	42be      	cmp	r6, r7
 800bb74:	d900      	bls.n	800bb78 <__ssputs_r+0x70>
 800bb76:	463e      	mov	r6, r7
 800bb78:	6820      	ldr	r0, [r4, #0]
 800bb7a:	4632      	mov	r2, r6
 800bb7c:	4641      	mov	r1, r8
 800bb7e:	f000 fbcd 	bl	800c31c <memmove>
 800bb82:	68a3      	ldr	r3, [r4, #8]
 800bb84:	1b9b      	subs	r3, r3, r6
 800bb86:	60a3      	str	r3, [r4, #8]
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	4433      	add	r3, r6
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	2000      	movs	r0, #0
 800bb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb94:	462a      	mov	r2, r5
 800bb96:	f000 fc04 	bl	800c3a2 <_realloc_r>
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d1e0      	bne.n	800bb62 <__ssputs_r+0x5a>
 800bba0:	6921      	ldr	r1, [r4, #16]
 800bba2:	4650      	mov	r0, sl
 800bba4:	f7ff ff64 	bl	800ba70 <_free_r>
 800bba8:	230c      	movs	r3, #12
 800bbaa:	f8ca 3000 	str.w	r3, [sl]
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbb4:	81a3      	strh	r3, [r4, #12]
 800bbb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbba:	e7e9      	b.n	800bb90 <__ssputs_r+0x88>

0800bbbc <_svfiprintf_r>:
 800bbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	4698      	mov	r8, r3
 800bbc2:	898b      	ldrh	r3, [r1, #12]
 800bbc4:	061b      	lsls	r3, r3, #24
 800bbc6:	b09d      	sub	sp, #116	; 0x74
 800bbc8:	4607      	mov	r7, r0
 800bbca:	460d      	mov	r5, r1
 800bbcc:	4614      	mov	r4, r2
 800bbce:	d50e      	bpl.n	800bbee <_svfiprintf_r+0x32>
 800bbd0:	690b      	ldr	r3, [r1, #16]
 800bbd2:	b963      	cbnz	r3, 800bbee <_svfiprintf_r+0x32>
 800bbd4:	2140      	movs	r1, #64	; 0x40
 800bbd6:	f7ff fc49 	bl	800b46c <_malloc_r>
 800bbda:	6028      	str	r0, [r5, #0]
 800bbdc:	6128      	str	r0, [r5, #16]
 800bbde:	b920      	cbnz	r0, 800bbea <_svfiprintf_r+0x2e>
 800bbe0:	230c      	movs	r3, #12
 800bbe2:	603b      	str	r3, [r7, #0]
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	e0d0      	b.n	800bd8c <_svfiprintf_r+0x1d0>
 800bbea:	2340      	movs	r3, #64	; 0x40
 800bbec:	616b      	str	r3, [r5, #20]
 800bbee:	2300      	movs	r3, #0
 800bbf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf2:	2320      	movs	r3, #32
 800bbf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbfc:	2330      	movs	r3, #48	; 0x30
 800bbfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bda4 <_svfiprintf_r+0x1e8>
 800bc02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc06:	f04f 0901 	mov.w	r9, #1
 800bc0a:	4623      	mov	r3, r4
 800bc0c:	469a      	mov	sl, r3
 800bc0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc12:	b10a      	cbz	r2, 800bc18 <_svfiprintf_r+0x5c>
 800bc14:	2a25      	cmp	r2, #37	; 0x25
 800bc16:	d1f9      	bne.n	800bc0c <_svfiprintf_r+0x50>
 800bc18:	ebba 0b04 	subs.w	fp, sl, r4
 800bc1c:	d00b      	beq.n	800bc36 <_svfiprintf_r+0x7a>
 800bc1e:	465b      	mov	r3, fp
 800bc20:	4622      	mov	r2, r4
 800bc22:	4629      	mov	r1, r5
 800bc24:	4638      	mov	r0, r7
 800bc26:	f7ff ff6f 	bl	800bb08 <__ssputs_r>
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	f000 80a9 	beq.w	800bd82 <_svfiprintf_r+0x1c6>
 800bc30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc32:	445a      	add	r2, fp
 800bc34:	9209      	str	r2, [sp, #36]	; 0x24
 800bc36:	f89a 3000 	ldrb.w	r3, [sl]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 80a1 	beq.w	800bd82 <_svfiprintf_r+0x1c6>
 800bc40:	2300      	movs	r3, #0
 800bc42:	f04f 32ff 	mov.w	r2, #4294967295
 800bc46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc4a:	f10a 0a01 	add.w	sl, sl, #1
 800bc4e:	9304      	str	r3, [sp, #16]
 800bc50:	9307      	str	r3, [sp, #28]
 800bc52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc56:	931a      	str	r3, [sp, #104]	; 0x68
 800bc58:	4654      	mov	r4, sl
 800bc5a:	2205      	movs	r2, #5
 800bc5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc60:	4850      	ldr	r0, [pc, #320]	; (800bda4 <_svfiprintf_r+0x1e8>)
 800bc62:	f7f4 fb3d 	bl	80002e0 <memchr>
 800bc66:	9a04      	ldr	r2, [sp, #16]
 800bc68:	b9d8      	cbnz	r0, 800bca2 <_svfiprintf_r+0xe6>
 800bc6a:	06d0      	lsls	r0, r2, #27
 800bc6c:	bf44      	itt	mi
 800bc6e:	2320      	movmi	r3, #32
 800bc70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc74:	0711      	lsls	r1, r2, #28
 800bc76:	bf44      	itt	mi
 800bc78:	232b      	movmi	r3, #43	; 0x2b
 800bc7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc7e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc82:	2b2a      	cmp	r3, #42	; 0x2a
 800bc84:	d015      	beq.n	800bcb2 <_svfiprintf_r+0xf6>
 800bc86:	9a07      	ldr	r2, [sp, #28]
 800bc88:	4654      	mov	r4, sl
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	f04f 0c0a 	mov.w	ip, #10
 800bc90:	4621      	mov	r1, r4
 800bc92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc96:	3b30      	subs	r3, #48	; 0x30
 800bc98:	2b09      	cmp	r3, #9
 800bc9a:	d94d      	bls.n	800bd38 <_svfiprintf_r+0x17c>
 800bc9c:	b1b0      	cbz	r0, 800bccc <_svfiprintf_r+0x110>
 800bc9e:	9207      	str	r2, [sp, #28]
 800bca0:	e014      	b.n	800bccc <_svfiprintf_r+0x110>
 800bca2:	eba0 0308 	sub.w	r3, r0, r8
 800bca6:	fa09 f303 	lsl.w	r3, r9, r3
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	9304      	str	r3, [sp, #16]
 800bcae:	46a2      	mov	sl, r4
 800bcb0:	e7d2      	b.n	800bc58 <_svfiprintf_r+0x9c>
 800bcb2:	9b03      	ldr	r3, [sp, #12]
 800bcb4:	1d19      	adds	r1, r3, #4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	9103      	str	r1, [sp, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	bfbb      	ittet	lt
 800bcbe:	425b      	neglt	r3, r3
 800bcc0:	f042 0202 	orrlt.w	r2, r2, #2
 800bcc4:	9307      	strge	r3, [sp, #28]
 800bcc6:	9307      	strlt	r3, [sp, #28]
 800bcc8:	bfb8      	it	lt
 800bcca:	9204      	strlt	r2, [sp, #16]
 800bccc:	7823      	ldrb	r3, [r4, #0]
 800bcce:	2b2e      	cmp	r3, #46	; 0x2e
 800bcd0:	d10c      	bne.n	800bcec <_svfiprintf_r+0x130>
 800bcd2:	7863      	ldrb	r3, [r4, #1]
 800bcd4:	2b2a      	cmp	r3, #42	; 0x2a
 800bcd6:	d134      	bne.n	800bd42 <_svfiprintf_r+0x186>
 800bcd8:	9b03      	ldr	r3, [sp, #12]
 800bcda:	1d1a      	adds	r2, r3, #4
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	9203      	str	r2, [sp, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	bfb8      	it	lt
 800bce4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bce8:	3402      	adds	r4, #2
 800bcea:	9305      	str	r3, [sp, #20]
 800bcec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bdb4 <_svfiprintf_r+0x1f8>
 800bcf0:	7821      	ldrb	r1, [r4, #0]
 800bcf2:	2203      	movs	r2, #3
 800bcf4:	4650      	mov	r0, sl
 800bcf6:	f7f4 faf3 	bl	80002e0 <memchr>
 800bcfa:	b138      	cbz	r0, 800bd0c <_svfiprintf_r+0x150>
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	eba0 000a 	sub.w	r0, r0, sl
 800bd02:	2240      	movs	r2, #64	; 0x40
 800bd04:	4082      	lsls	r2, r0
 800bd06:	4313      	orrs	r3, r2
 800bd08:	3401      	adds	r4, #1
 800bd0a:	9304      	str	r3, [sp, #16]
 800bd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd10:	4825      	ldr	r0, [pc, #148]	; (800bda8 <_svfiprintf_r+0x1ec>)
 800bd12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd16:	2206      	movs	r2, #6
 800bd18:	f7f4 fae2 	bl	80002e0 <memchr>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d038      	beq.n	800bd92 <_svfiprintf_r+0x1d6>
 800bd20:	4b22      	ldr	r3, [pc, #136]	; (800bdac <_svfiprintf_r+0x1f0>)
 800bd22:	bb1b      	cbnz	r3, 800bd6c <_svfiprintf_r+0x1b0>
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	3307      	adds	r3, #7
 800bd28:	f023 0307 	bic.w	r3, r3, #7
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	9303      	str	r3, [sp, #12]
 800bd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd32:	4433      	add	r3, r6
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
 800bd36:	e768      	b.n	800bc0a <_svfiprintf_r+0x4e>
 800bd38:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	2001      	movs	r0, #1
 800bd40:	e7a6      	b.n	800bc90 <_svfiprintf_r+0xd4>
 800bd42:	2300      	movs	r3, #0
 800bd44:	3401      	adds	r4, #1
 800bd46:	9305      	str	r3, [sp, #20]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f04f 0c0a 	mov.w	ip, #10
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd54:	3a30      	subs	r2, #48	; 0x30
 800bd56:	2a09      	cmp	r2, #9
 800bd58:	d903      	bls.n	800bd62 <_svfiprintf_r+0x1a6>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d0c6      	beq.n	800bcec <_svfiprintf_r+0x130>
 800bd5e:	9105      	str	r1, [sp, #20]
 800bd60:	e7c4      	b.n	800bcec <_svfiprintf_r+0x130>
 800bd62:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd66:	4604      	mov	r4, r0
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e7f0      	b.n	800bd4e <_svfiprintf_r+0x192>
 800bd6c:	ab03      	add	r3, sp, #12
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	462a      	mov	r2, r5
 800bd72:	4b0f      	ldr	r3, [pc, #60]	; (800bdb0 <_svfiprintf_r+0x1f4>)
 800bd74:	a904      	add	r1, sp, #16
 800bd76:	4638      	mov	r0, r7
 800bd78:	f3af 8000 	nop.w
 800bd7c:	1c42      	adds	r2, r0, #1
 800bd7e:	4606      	mov	r6, r0
 800bd80:	d1d6      	bne.n	800bd30 <_svfiprintf_r+0x174>
 800bd82:	89ab      	ldrh	r3, [r5, #12]
 800bd84:	065b      	lsls	r3, r3, #25
 800bd86:	f53f af2d 	bmi.w	800bbe4 <_svfiprintf_r+0x28>
 800bd8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd8c:	b01d      	add	sp, #116	; 0x74
 800bd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd92:	ab03      	add	r3, sp, #12
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	462a      	mov	r2, r5
 800bd98:	4b05      	ldr	r3, [pc, #20]	; (800bdb0 <_svfiprintf_r+0x1f4>)
 800bd9a:	a904      	add	r1, sp, #16
 800bd9c:	4638      	mov	r0, r7
 800bd9e:	f000 f879 	bl	800be94 <_printf_i>
 800bda2:	e7eb      	b.n	800bd7c <_svfiprintf_r+0x1c0>
 800bda4:	0800d5e3 	.word	0x0800d5e3
 800bda8:	0800d5ed 	.word	0x0800d5ed
 800bdac:	00000000 	.word	0x00000000
 800bdb0:	0800bb09 	.word	0x0800bb09
 800bdb4:	0800d5e9 	.word	0x0800d5e9

0800bdb8 <_printf_common>:
 800bdb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdbc:	4616      	mov	r6, r2
 800bdbe:	4699      	mov	r9, r3
 800bdc0:	688a      	ldr	r2, [r1, #8]
 800bdc2:	690b      	ldr	r3, [r1, #16]
 800bdc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	bfb8      	it	lt
 800bdcc:	4613      	movlt	r3, r2
 800bdce:	6033      	str	r3, [r6, #0]
 800bdd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdd4:	4607      	mov	r7, r0
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	b10a      	cbz	r2, 800bdde <_printf_common+0x26>
 800bdda:	3301      	adds	r3, #1
 800bddc:	6033      	str	r3, [r6, #0]
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	0699      	lsls	r1, r3, #26
 800bde2:	bf42      	ittt	mi
 800bde4:	6833      	ldrmi	r3, [r6, #0]
 800bde6:	3302      	addmi	r3, #2
 800bde8:	6033      	strmi	r3, [r6, #0]
 800bdea:	6825      	ldr	r5, [r4, #0]
 800bdec:	f015 0506 	ands.w	r5, r5, #6
 800bdf0:	d106      	bne.n	800be00 <_printf_common+0x48>
 800bdf2:	f104 0a19 	add.w	sl, r4, #25
 800bdf6:	68e3      	ldr	r3, [r4, #12]
 800bdf8:	6832      	ldr	r2, [r6, #0]
 800bdfa:	1a9b      	subs	r3, r3, r2
 800bdfc:	42ab      	cmp	r3, r5
 800bdfe:	dc26      	bgt.n	800be4e <_printf_common+0x96>
 800be00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be04:	1e13      	subs	r3, r2, #0
 800be06:	6822      	ldr	r2, [r4, #0]
 800be08:	bf18      	it	ne
 800be0a:	2301      	movne	r3, #1
 800be0c:	0692      	lsls	r2, r2, #26
 800be0e:	d42b      	bmi.n	800be68 <_printf_common+0xb0>
 800be10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be14:	4649      	mov	r1, r9
 800be16:	4638      	mov	r0, r7
 800be18:	47c0      	blx	r8
 800be1a:	3001      	adds	r0, #1
 800be1c:	d01e      	beq.n	800be5c <_printf_common+0xa4>
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	6922      	ldr	r2, [r4, #16]
 800be22:	f003 0306 	and.w	r3, r3, #6
 800be26:	2b04      	cmp	r3, #4
 800be28:	bf02      	ittt	eq
 800be2a:	68e5      	ldreq	r5, [r4, #12]
 800be2c:	6833      	ldreq	r3, [r6, #0]
 800be2e:	1aed      	subeq	r5, r5, r3
 800be30:	68a3      	ldr	r3, [r4, #8]
 800be32:	bf0c      	ite	eq
 800be34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be38:	2500      	movne	r5, #0
 800be3a:	4293      	cmp	r3, r2
 800be3c:	bfc4      	itt	gt
 800be3e:	1a9b      	subgt	r3, r3, r2
 800be40:	18ed      	addgt	r5, r5, r3
 800be42:	2600      	movs	r6, #0
 800be44:	341a      	adds	r4, #26
 800be46:	42b5      	cmp	r5, r6
 800be48:	d11a      	bne.n	800be80 <_printf_common+0xc8>
 800be4a:	2000      	movs	r0, #0
 800be4c:	e008      	b.n	800be60 <_printf_common+0xa8>
 800be4e:	2301      	movs	r3, #1
 800be50:	4652      	mov	r2, sl
 800be52:	4649      	mov	r1, r9
 800be54:	4638      	mov	r0, r7
 800be56:	47c0      	blx	r8
 800be58:	3001      	adds	r0, #1
 800be5a:	d103      	bne.n	800be64 <_printf_common+0xac>
 800be5c:	f04f 30ff 	mov.w	r0, #4294967295
 800be60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be64:	3501      	adds	r5, #1
 800be66:	e7c6      	b.n	800bdf6 <_printf_common+0x3e>
 800be68:	18e1      	adds	r1, r4, r3
 800be6a:	1c5a      	adds	r2, r3, #1
 800be6c:	2030      	movs	r0, #48	; 0x30
 800be6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be72:	4422      	add	r2, r4
 800be74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be7c:	3302      	adds	r3, #2
 800be7e:	e7c7      	b.n	800be10 <_printf_common+0x58>
 800be80:	2301      	movs	r3, #1
 800be82:	4622      	mov	r2, r4
 800be84:	4649      	mov	r1, r9
 800be86:	4638      	mov	r0, r7
 800be88:	47c0      	blx	r8
 800be8a:	3001      	adds	r0, #1
 800be8c:	d0e6      	beq.n	800be5c <_printf_common+0xa4>
 800be8e:	3601      	adds	r6, #1
 800be90:	e7d9      	b.n	800be46 <_printf_common+0x8e>
	...

0800be94 <_printf_i>:
 800be94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be98:	7e0f      	ldrb	r7, [r1, #24]
 800be9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be9c:	2f78      	cmp	r7, #120	; 0x78
 800be9e:	4691      	mov	r9, r2
 800bea0:	4680      	mov	r8, r0
 800bea2:	460c      	mov	r4, r1
 800bea4:	469a      	mov	sl, r3
 800bea6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800beaa:	d807      	bhi.n	800bebc <_printf_i+0x28>
 800beac:	2f62      	cmp	r7, #98	; 0x62
 800beae:	d80a      	bhi.n	800bec6 <_printf_i+0x32>
 800beb0:	2f00      	cmp	r7, #0
 800beb2:	f000 80d4 	beq.w	800c05e <_printf_i+0x1ca>
 800beb6:	2f58      	cmp	r7, #88	; 0x58
 800beb8:	f000 80c0 	beq.w	800c03c <_printf_i+0x1a8>
 800bebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bec4:	e03a      	b.n	800bf3c <_printf_i+0xa8>
 800bec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800beca:	2b15      	cmp	r3, #21
 800becc:	d8f6      	bhi.n	800bebc <_printf_i+0x28>
 800bece:	a101      	add	r1, pc, #4	; (adr r1, 800bed4 <_printf_i+0x40>)
 800bed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bed4:	0800bf2d 	.word	0x0800bf2d
 800bed8:	0800bf41 	.word	0x0800bf41
 800bedc:	0800bebd 	.word	0x0800bebd
 800bee0:	0800bebd 	.word	0x0800bebd
 800bee4:	0800bebd 	.word	0x0800bebd
 800bee8:	0800bebd 	.word	0x0800bebd
 800beec:	0800bf41 	.word	0x0800bf41
 800bef0:	0800bebd 	.word	0x0800bebd
 800bef4:	0800bebd 	.word	0x0800bebd
 800bef8:	0800bebd 	.word	0x0800bebd
 800befc:	0800bebd 	.word	0x0800bebd
 800bf00:	0800c045 	.word	0x0800c045
 800bf04:	0800bf6d 	.word	0x0800bf6d
 800bf08:	0800bfff 	.word	0x0800bfff
 800bf0c:	0800bebd 	.word	0x0800bebd
 800bf10:	0800bebd 	.word	0x0800bebd
 800bf14:	0800c067 	.word	0x0800c067
 800bf18:	0800bebd 	.word	0x0800bebd
 800bf1c:	0800bf6d 	.word	0x0800bf6d
 800bf20:	0800bebd 	.word	0x0800bebd
 800bf24:	0800bebd 	.word	0x0800bebd
 800bf28:	0800c007 	.word	0x0800c007
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	1d1a      	adds	r2, r3, #4
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	602a      	str	r2, [r5, #0]
 800bf34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e09f      	b.n	800c080 <_printf_i+0x1ec>
 800bf40:	6820      	ldr	r0, [r4, #0]
 800bf42:	682b      	ldr	r3, [r5, #0]
 800bf44:	0607      	lsls	r7, r0, #24
 800bf46:	f103 0104 	add.w	r1, r3, #4
 800bf4a:	6029      	str	r1, [r5, #0]
 800bf4c:	d501      	bpl.n	800bf52 <_printf_i+0xbe>
 800bf4e:	681e      	ldr	r6, [r3, #0]
 800bf50:	e003      	b.n	800bf5a <_printf_i+0xc6>
 800bf52:	0646      	lsls	r6, r0, #25
 800bf54:	d5fb      	bpl.n	800bf4e <_printf_i+0xba>
 800bf56:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	da03      	bge.n	800bf66 <_printf_i+0xd2>
 800bf5e:	232d      	movs	r3, #45	; 0x2d
 800bf60:	4276      	negs	r6, r6
 800bf62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf66:	485a      	ldr	r0, [pc, #360]	; (800c0d0 <_printf_i+0x23c>)
 800bf68:	230a      	movs	r3, #10
 800bf6a:	e012      	b.n	800bf92 <_printf_i+0xfe>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	6820      	ldr	r0, [r4, #0]
 800bf70:	1d19      	adds	r1, r3, #4
 800bf72:	6029      	str	r1, [r5, #0]
 800bf74:	0605      	lsls	r5, r0, #24
 800bf76:	d501      	bpl.n	800bf7c <_printf_i+0xe8>
 800bf78:	681e      	ldr	r6, [r3, #0]
 800bf7a:	e002      	b.n	800bf82 <_printf_i+0xee>
 800bf7c:	0641      	lsls	r1, r0, #25
 800bf7e:	d5fb      	bpl.n	800bf78 <_printf_i+0xe4>
 800bf80:	881e      	ldrh	r6, [r3, #0]
 800bf82:	4853      	ldr	r0, [pc, #332]	; (800c0d0 <_printf_i+0x23c>)
 800bf84:	2f6f      	cmp	r7, #111	; 0x6f
 800bf86:	bf0c      	ite	eq
 800bf88:	2308      	moveq	r3, #8
 800bf8a:	230a      	movne	r3, #10
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf92:	6865      	ldr	r5, [r4, #4]
 800bf94:	60a5      	str	r5, [r4, #8]
 800bf96:	2d00      	cmp	r5, #0
 800bf98:	bfa2      	ittt	ge
 800bf9a:	6821      	ldrge	r1, [r4, #0]
 800bf9c:	f021 0104 	bicge.w	r1, r1, #4
 800bfa0:	6021      	strge	r1, [r4, #0]
 800bfa2:	b90e      	cbnz	r6, 800bfa8 <_printf_i+0x114>
 800bfa4:	2d00      	cmp	r5, #0
 800bfa6:	d04b      	beq.n	800c040 <_printf_i+0x1ac>
 800bfa8:	4615      	mov	r5, r2
 800bfaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfae:	fb03 6711 	mls	r7, r3, r1, r6
 800bfb2:	5dc7      	ldrb	r7, [r0, r7]
 800bfb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfb8:	4637      	mov	r7, r6
 800bfba:	42bb      	cmp	r3, r7
 800bfbc:	460e      	mov	r6, r1
 800bfbe:	d9f4      	bls.n	800bfaa <_printf_i+0x116>
 800bfc0:	2b08      	cmp	r3, #8
 800bfc2:	d10b      	bne.n	800bfdc <_printf_i+0x148>
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	07de      	lsls	r6, r3, #31
 800bfc8:	d508      	bpl.n	800bfdc <_printf_i+0x148>
 800bfca:	6923      	ldr	r3, [r4, #16]
 800bfcc:	6861      	ldr	r1, [r4, #4]
 800bfce:	4299      	cmp	r1, r3
 800bfd0:	bfde      	ittt	le
 800bfd2:	2330      	movle	r3, #48	; 0x30
 800bfd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfdc:	1b52      	subs	r2, r2, r5
 800bfde:	6122      	str	r2, [r4, #16]
 800bfe0:	f8cd a000 	str.w	sl, [sp]
 800bfe4:	464b      	mov	r3, r9
 800bfe6:	aa03      	add	r2, sp, #12
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4640      	mov	r0, r8
 800bfec:	f7ff fee4 	bl	800bdb8 <_printf_common>
 800bff0:	3001      	adds	r0, #1
 800bff2:	d14a      	bne.n	800c08a <_printf_i+0x1f6>
 800bff4:	f04f 30ff 	mov.w	r0, #4294967295
 800bff8:	b004      	add	sp, #16
 800bffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	f043 0320 	orr.w	r3, r3, #32
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	4833      	ldr	r0, [pc, #204]	; (800c0d4 <_printf_i+0x240>)
 800c008:	2778      	movs	r7, #120	; 0x78
 800c00a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	6829      	ldr	r1, [r5, #0]
 800c012:	061f      	lsls	r7, r3, #24
 800c014:	f851 6b04 	ldr.w	r6, [r1], #4
 800c018:	d402      	bmi.n	800c020 <_printf_i+0x18c>
 800c01a:	065f      	lsls	r7, r3, #25
 800c01c:	bf48      	it	mi
 800c01e:	b2b6      	uxthmi	r6, r6
 800c020:	07df      	lsls	r7, r3, #31
 800c022:	bf48      	it	mi
 800c024:	f043 0320 	orrmi.w	r3, r3, #32
 800c028:	6029      	str	r1, [r5, #0]
 800c02a:	bf48      	it	mi
 800c02c:	6023      	strmi	r3, [r4, #0]
 800c02e:	b91e      	cbnz	r6, 800c038 <_printf_i+0x1a4>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	f023 0320 	bic.w	r3, r3, #32
 800c036:	6023      	str	r3, [r4, #0]
 800c038:	2310      	movs	r3, #16
 800c03a:	e7a7      	b.n	800bf8c <_printf_i+0xf8>
 800c03c:	4824      	ldr	r0, [pc, #144]	; (800c0d0 <_printf_i+0x23c>)
 800c03e:	e7e4      	b.n	800c00a <_printf_i+0x176>
 800c040:	4615      	mov	r5, r2
 800c042:	e7bd      	b.n	800bfc0 <_printf_i+0x12c>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	6826      	ldr	r6, [r4, #0]
 800c048:	6961      	ldr	r1, [r4, #20]
 800c04a:	1d18      	adds	r0, r3, #4
 800c04c:	6028      	str	r0, [r5, #0]
 800c04e:	0635      	lsls	r5, r6, #24
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	d501      	bpl.n	800c058 <_printf_i+0x1c4>
 800c054:	6019      	str	r1, [r3, #0]
 800c056:	e002      	b.n	800c05e <_printf_i+0x1ca>
 800c058:	0670      	lsls	r0, r6, #25
 800c05a:	d5fb      	bpl.n	800c054 <_printf_i+0x1c0>
 800c05c:	8019      	strh	r1, [r3, #0]
 800c05e:	2300      	movs	r3, #0
 800c060:	6123      	str	r3, [r4, #16]
 800c062:	4615      	mov	r5, r2
 800c064:	e7bc      	b.n	800bfe0 <_printf_i+0x14c>
 800c066:	682b      	ldr	r3, [r5, #0]
 800c068:	1d1a      	adds	r2, r3, #4
 800c06a:	602a      	str	r2, [r5, #0]
 800c06c:	681d      	ldr	r5, [r3, #0]
 800c06e:	6862      	ldr	r2, [r4, #4]
 800c070:	2100      	movs	r1, #0
 800c072:	4628      	mov	r0, r5
 800c074:	f7f4 f934 	bl	80002e0 <memchr>
 800c078:	b108      	cbz	r0, 800c07e <_printf_i+0x1ea>
 800c07a:	1b40      	subs	r0, r0, r5
 800c07c:	6060      	str	r0, [r4, #4]
 800c07e:	6863      	ldr	r3, [r4, #4]
 800c080:	6123      	str	r3, [r4, #16]
 800c082:	2300      	movs	r3, #0
 800c084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c088:	e7aa      	b.n	800bfe0 <_printf_i+0x14c>
 800c08a:	6923      	ldr	r3, [r4, #16]
 800c08c:	462a      	mov	r2, r5
 800c08e:	4649      	mov	r1, r9
 800c090:	4640      	mov	r0, r8
 800c092:	47d0      	blx	sl
 800c094:	3001      	adds	r0, #1
 800c096:	d0ad      	beq.n	800bff4 <_printf_i+0x160>
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	079b      	lsls	r3, r3, #30
 800c09c:	d413      	bmi.n	800c0c6 <_printf_i+0x232>
 800c09e:	68e0      	ldr	r0, [r4, #12]
 800c0a0:	9b03      	ldr	r3, [sp, #12]
 800c0a2:	4298      	cmp	r0, r3
 800c0a4:	bfb8      	it	lt
 800c0a6:	4618      	movlt	r0, r3
 800c0a8:	e7a6      	b.n	800bff8 <_printf_i+0x164>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	4632      	mov	r2, r6
 800c0ae:	4649      	mov	r1, r9
 800c0b0:	4640      	mov	r0, r8
 800c0b2:	47d0      	blx	sl
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d09d      	beq.n	800bff4 <_printf_i+0x160>
 800c0b8:	3501      	adds	r5, #1
 800c0ba:	68e3      	ldr	r3, [r4, #12]
 800c0bc:	9903      	ldr	r1, [sp, #12]
 800c0be:	1a5b      	subs	r3, r3, r1
 800c0c0:	42ab      	cmp	r3, r5
 800c0c2:	dcf2      	bgt.n	800c0aa <_printf_i+0x216>
 800c0c4:	e7eb      	b.n	800c09e <_printf_i+0x20a>
 800c0c6:	2500      	movs	r5, #0
 800c0c8:	f104 0619 	add.w	r6, r4, #25
 800c0cc:	e7f5      	b.n	800c0ba <_printf_i+0x226>
 800c0ce:	bf00      	nop
 800c0d0:	0800d5f4 	.word	0x0800d5f4
 800c0d4:	0800d605 	.word	0x0800d605

0800c0d8 <__sflush_r>:
 800c0d8:	898a      	ldrh	r2, [r1, #12]
 800c0da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0de:	4605      	mov	r5, r0
 800c0e0:	0710      	lsls	r0, r2, #28
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	d458      	bmi.n	800c198 <__sflush_r+0xc0>
 800c0e6:	684b      	ldr	r3, [r1, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dc05      	bgt.n	800c0f8 <__sflush_r+0x20>
 800c0ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	dc02      	bgt.n	800c0f8 <__sflush_r+0x20>
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0fa:	2e00      	cmp	r6, #0
 800c0fc:	d0f9      	beq.n	800c0f2 <__sflush_r+0x1a>
 800c0fe:	2300      	movs	r3, #0
 800c100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c104:	682f      	ldr	r7, [r5, #0]
 800c106:	6a21      	ldr	r1, [r4, #32]
 800c108:	602b      	str	r3, [r5, #0]
 800c10a:	d032      	beq.n	800c172 <__sflush_r+0x9a>
 800c10c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c10e:	89a3      	ldrh	r3, [r4, #12]
 800c110:	075a      	lsls	r2, r3, #29
 800c112:	d505      	bpl.n	800c120 <__sflush_r+0x48>
 800c114:	6863      	ldr	r3, [r4, #4]
 800c116:	1ac0      	subs	r0, r0, r3
 800c118:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c11a:	b10b      	cbz	r3, 800c120 <__sflush_r+0x48>
 800c11c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c11e:	1ac0      	subs	r0, r0, r3
 800c120:	2300      	movs	r3, #0
 800c122:	4602      	mov	r2, r0
 800c124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c126:	6a21      	ldr	r1, [r4, #32]
 800c128:	4628      	mov	r0, r5
 800c12a:	47b0      	blx	r6
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	89a3      	ldrh	r3, [r4, #12]
 800c130:	d106      	bne.n	800c140 <__sflush_r+0x68>
 800c132:	6829      	ldr	r1, [r5, #0]
 800c134:	291d      	cmp	r1, #29
 800c136:	d82b      	bhi.n	800c190 <__sflush_r+0xb8>
 800c138:	4a29      	ldr	r2, [pc, #164]	; (800c1e0 <__sflush_r+0x108>)
 800c13a:	410a      	asrs	r2, r1
 800c13c:	07d6      	lsls	r6, r2, #31
 800c13e:	d427      	bmi.n	800c190 <__sflush_r+0xb8>
 800c140:	2200      	movs	r2, #0
 800c142:	6062      	str	r2, [r4, #4]
 800c144:	04d9      	lsls	r1, r3, #19
 800c146:	6922      	ldr	r2, [r4, #16]
 800c148:	6022      	str	r2, [r4, #0]
 800c14a:	d504      	bpl.n	800c156 <__sflush_r+0x7e>
 800c14c:	1c42      	adds	r2, r0, #1
 800c14e:	d101      	bne.n	800c154 <__sflush_r+0x7c>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b903      	cbnz	r3, 800c156 <__sflush_r+0x7e>
 800c154:	6560      	str	r0, [r4, #84]	; 0x54
 800c156:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c158:	602f      	str	r7, [r5, #0]
 800c15a:	2900      	cmp	r1, #0
 800c15c:	d0c9      	beq.n	800c0f2 <__sflush_r+0x1a>
 800c15e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c162:	4299      	cmp	r1, r3
 800c164:	d002      	beq.n	800c16c <__sflush_r+0x94>
 800c166:	4628      	mov	r0, r5
 800c168:	f7ff fc82 	bl	800ba70 <_free_r>
 800c16c:	2000      	movs	r0, #0
 800c16e:	6360      	str	r0, [r4, #52]	; 0x34
 800c170:	e7c0      	b.n	800c0f4 <__sflush_r+0x1c>
 800c172:	2301      	movs	r3, #1
 800c174:	4628      	mov	r0, r5
 800c176:	47b0      	blx	r6
 800c178:	1c41      	adds	r1, r0, #1
 800c17a:	d1c8      	bne.n	800c10e <__sflush_r+0x36>
 800c17c:	682b      	ldr	r3, [r5, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d0c5      	beq.n	800c10e <__sflush_r+0x36>
 800c182:	2b1d      	cmp	r3, #29
 800c184:	d001      	beq.n	800c18a <__sflush_r+0xb2>
 800c186:	2b16      	cmp	r3, #22
 800c188:	d101      	bne.n	800c18e <__sflush_r+0xb6>
 800c18a:	602f      	str	r7, [r5, #0]
 800c18c:	e7b1      	b.n	800c0f2 <__sflush_r+0x1a>
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	e7ad      	b.n	800c0f4 <__sflush_r+0x1c>
 800c198:	690f      	ldr	r7, [r1, #16]
 800c19a:	2f00      	cmp	r7, #0
 800c19c:	d0a9      	beq.n	800c0f2 <__sflush_r+0x1a>
 800c19e:	0793      	lsls	r3, r2, #30
 800c1a0:	680e      	ldr	r6, [r1, #0]
 800c1a2:	bf08      	it	eq
 800c1a4:	694b      	ldreq	r3, [r1, #20]
 800c1a6:	600f      	str	r7, [r1, #0]
 800c1a8:	bf18      	it	ne
 800c1aa:	2300      	movne	r3, #0
 800c1ac:	eba6 0807 	sub.w	r8, r6, r7
 800c1b0:	608b      	str	r3, [r1, #8]
 800c1b2:	f1b8 0f00 	cmp.w	r8, #0
 800c1b6:	dd9c      	ble.n	800c0f2 <__sflush_r+0x1a>
 800c1b8:	6a21      	ldr	r1, [r4, #32]
 800c1ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1bc:	4643      	mov	r3, r8
 800c1be:	463a      	mov	r2, r7
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	47b0      	blx	r6
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	dc06      	bgt.n	800c1d6 <__sflush_r+0xfe>
 800c1c8:	89a3      	ldrh	r3, [r4, #12]
 800c1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	e78e      	b.n	800c0f4 <__sflush_r+0x1c>
 800c1d6:	4407      	add	r7, r0
 800c1d8:	eba8 0800 	sub.w	r8, r8, r0
 800c1dc:	e7e9      	b.n	800c1b2 <__sflush_r+0xda>
 800c1de:	bf00      	nop
 800c1e0:	dfbffffe 	.word	0xdfbffffe

0800c1e4 <_fflush_r>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	690b      	ldr	r3, [r1, #16]
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	b913      	cbnz	r3, 800c1f4 <_fflush_r+0x10>
 800c1ee:	2500      	movs	r5, #0
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	b118      	cbz	r0, 800c1fe <_fflush_r+0x1a>
 800c1f6:	6a03      	ldr	r3, [r0, #32]
 800c1f8:	b90b      	cbnz	r3, 800c1fe <_fflush_r+0x1a>
 800c1fa:	f7ff fabb 	bl	800b774 <__sinit>
 800c1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d0f3      	beq.n	800c1ee <_fflush_r+0xa>
 800c206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c208:	07d0      	lsls	r0, r2, #31
 800c20a:	d404      	bmi.n	800c216 <_fflush_r+0x32>
 800c20c:	0599      	lsls	r1, r3, #22
 800c20e:	d402      	bmi.n	800c216 <_fflush_r+0x32>
 800c210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c212:	f7ff fbfe 	bl	800ba12 <__retarget_lock_acquire_recursive>
 800c216:	4628      	mov	r0, r5
 800c218:	4621      	mov	r1, r4
 800c21a:	f7ff ff5d 	bl	800c0d8 <__sflush_r>
 800c21e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c220:	07da      	lsls	r2, r3, #31
 800c222:	4605      	mov	r5, r0
 800c224:	d4e4      	bmi.n	800c1f0 <_fflush_r+0xc>
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	059b      	lsls	r3, r3, #22
 800c22a:	d4e1      	bmi.n	800c1f0 <_fflush_r+0xc>
 800c22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c22e:	f7ff fbf1 	bl	800ba14 <__retarget_lock_release_recursive>
 800c232:	e7dd      	b.n	800c1f0 <_fflush_r+0xc>

0800c234 <fiprintf>:
 800c234:	b40e      	push	{r1, r2, r3}
 800c236:	b503      	push	{r0, r1, lr}
 800c238:	4601      	mov	r1, r0
 800c23a:	ab03      	add	r3, sp, #12
 800c23c:	4805      	ldr	r0, [pc, #20]	; (800c254 <fiprintf+0x20>)
 800c23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c242:	6800      	ldr	r0, [r0, #0]
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	f000 f905 	bl	800c454 <_vfiprintf_r>
 800c24a:	b002      	add	sp, #8
 800c24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c250:	b003      	add	sp, #12
 800c252:	4770      	bx	lr
 800c254:	24000088 	.word	0x24000088

0800c258 <__swhatbuf_r>:
 800c258:	b570      	push	{r4, r5, r6, lr}
 800c25a:	460c      	mov	r4, r1
 800c25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c260:	2900      	cmp	r1, #0
 800c262:	b096      	sub	sp, #88	; 0x58
 800c264:	4615      	mov	r5, r2
 800c266:	461e      	mov	r6, r3
 800c268:	da0d      	bge.n	800c286 <__swhatbuf_r+0x2e>
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c270:	f04f 0100 	mov.w	r1, #0
 800c274:	bf0c      	ite	eq
 800c276:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c27a:	2340      	movne	r3, #64	; 0x40
 800c27c:	2000      	movs	r0, #0
 800c27e:	6031      	str	r1, [r6, #0]
 800c280:	602b      	str	r3, [r5, #0]
 800c282:	b016      	add	sp, #88	; 0x58
 800c284:	bd70      	pop	{r4, r5, r6, pc}
 800c286:	466a      	mov	r2, sp
 800c288:	f000 f862 	bl	800c350 <_fstat_r>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	dbec      	blt.n	800c26a <__swhatbuf_r+0x12>
 800c290:	9901      	ldr	r1, [sp, #4]
 800c292:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c296:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c29a:	4259      	negs	r1, r3
 800c29c:	4159      	adcs	r1, r3
 800c29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2a2:	e7eb      	b.n	800c27c <__swhatbuf_r+0x24>

0800c2a4 <__smakebuf_r>:
 800c2a4:	898b      	ldrh	r3, [r1, #12]
 800c2a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2a8:	079d      	lsls	r5, r3, #30
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	460c      	mov	r4, r1
 800c2ae:	d507      	bpl.n	800c2c0 <__smakebuf_r+0x1c>
 800c2b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	6123      	str	r3, [r4, #16]
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	6163      	str	r3, [r4, #20]
 800c2bc:	b002      	add	sp, #8
 800c2be:	bd70      	pop	{r4, r5, r6, pc}
 800c2c0:	ab01      	add	r3, sp, #4
 800c2c2:	466a      	mov	r2, sp
 800c2c4:	f7ff ffc8 	bl	800c258 <__swhatbuf_r>
 800c2c8:	9900      	ldr	r1, [sp, #0]
 800c2ca:	4605      	mov	r5, r0
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7ff f8cd 	bl	800b46c <_malloc_r>
 800c2d2:	b948      	cbnz	r0, 800c2e8 <__smakebuf_r+0x44>
 800c2d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d8:	059a      	lsls	r2, r3, #22
 800c2da:	d4ef      	bmi.n	800c2bc <__smakebuf_r+0x18>
 800c2dc:	f023 0303 	bic.w	r3, r3, #3
 800c2e0:	f043 0302 	orr.w	r3, r3, #2
 800c2e4:	81a3      	strh	r3, [r4, #12]
 800c2e6:	e7e3      	b.n	800c2b0 <__smakebuf_r+0xc>
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	6020      	str	r0, [r4, #0]
 800c2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2f0:	81a3      	strh	r3, [r4, #12]
 800c2f2:	9b00      	ldr	r3, [sp, #0]
 800c2f4:	6163      	str	r3, [r4, #20]
 800c2f6:	9b01      	ldr	r3, [sp, #4]
 800c2f8:	6120      	str	r0, [r4, #16]
 800c2fa:	b15b      	cbz	r3, 800c314 <__smakebuf_r+0x70>
 800c2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c300:	4630      	mov	r0, r6
 800c302:	f000 f837 	bl	800c374 <_isatty_r>
 800c306:	b128      	cbz	r0, 800c314 <__smakebuf_r+0x70>
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	f023 0303 	bic.w	r3, r3, #3
 800c30e:	f043 0301 	orr.w	r3, r3, #1
 800c312:	81a3      	strh	r3, [r4, #12]
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	431d      	orrs	r5, r3
 800c318:	81a5      	strh	r5, [r4, #12]
 800c31a:	e7cf      	b.n	800c2bc <__smakebuf_r+0x18>

0800c31c <memmove>:
 800c31c:	4288      	cmp	r0, r1
 800c31e:	b510      	push	{r4, lr}
 800c320:	eb01 0402 	add.w	r4, r1, r2
 800c324:	d902      	bls.n	800c32c <memmove+0x10>
 800c326:	4284      	cmp	r4, r0
 800c328:	4623      	mov	r3, r4
 800c32a:	d807      	bhi.n	800c33c <memmove+0x20>
 800c32c:	1e43      	subs	r3, r0, #1
 800c32e:	42a1      	cmp	r1, r4
 800c330:	d008      	beq.n	800c344 <memmove+0x28>
 800c332:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c33a:	e7f8      	b.n	800c32e <memmove+0x12>
 800c33c:	4402      	add	r2, r0
 800c33e:	4601      	mov	r1, r0
 800c340:	428a      	cmp	r2, r1
 800c342:	d100      	bne.n	800c346 <memmove+0x2a>
 800c344:	bd10      	pop	{r4, pc}
 800c346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c34a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c34e:	e7f7      	b.n	800c340 <memmove+0x24>

0800c350 <_fstat_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d07      	ldr	r5, [pc, #28]	; (800c370 <_fstat_r+0x20>)
 800c354:	2300      	movs	r3, #0
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	4611      	mov	r1, r2
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	f7f4 fcf1 	bl	8000d44 <_fstat>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	d102      	bne.n	800c36c <_fstat_r+0x1c>
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	b103      	cbz	r3, 800c36c <_fstat_r+0x1c>
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	bd38      	pop	{r3, r4, r5, pc}
 800c36e:	bf00      	nop
 800c370:	240015e8 	.word	0x240015e8

0800c374 <_isatty_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d06      	ldr	r5, [pc, #24]	; (800c390 <_isatty_r+0x1c>)
 800c378:	2300      	movs	r3, #0
 800c37a:	4604      	mov	r4, r0
 800c37c:	4608      	mov	r0, r1
 800c37e:	602b      	str	r3, [r5, #0]
 800c380:	f7f4 fca2 	bl	8000cc8 <_isatty>
 800c384:	1c43      	adds	r3, r0, #1
 800c386:	d102      	bne.n	800c38e <_isatty_r+0x1a>
 800c388:	682b      	ldr	r3, [r5, #0]
 800c38a:	b103      	cbz	r3, 800c38e <_isatty_r+0x1a>
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	bd38      	pop	{r3, r4, r5, pc}
 800c390:	240015e8 	.word	0x240015e8

0800c394 <abort>:
 800c394:	b508      	push	{r3, lr}
 800c396:	2006      	movs	r0, #6
 800c398:	f000 fa34 	bl	800c804 <raise>
 800c39c:	2001      	movs	r0, #1
 800c39e:	f7f5 f9d4 	bl	800174a <_exit>

0800c3a2 <_realloc_r>:
 800c3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a6:	4680      	mov	r8, r0
 800c3a8:	4614      	mov	r4, r2
 800c3aa:	460e      	mov	r6, r1
 800c3ac:	b921      	cbnz	r1, 800c3b8 <_realloc_r+0x16>
 800c3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b2:	4611      	mov	r1, r2
 800c3b4:	f7ff b85a 	b.w	800b46c <_malloc_r>
 800c3b8:	b92a      	cbnz	r2, 800c3c6 <_realloc_r+0x24>
 800c3ba:	f7ff fb59 	bl	800ba70 <_free_r>
 800c3be:	4625      	mov	r5, r4
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c6:	f000 fa39 	bl	800c83c <_malloc_usable_size_r>
 800c3ca:	4284      	cmp	r4, r0
 800c3cc:	4607      	mov	r7, r0
 800c3ce:	d802      	bhi.n	800c3d6 <_realloc_r+0x34>
 800c3d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3d4:	d812      	bhi.n	800c3fc <_realloc_r+0x5a>
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	4640      	mov	r0, r8
 800c3da:	f7ff f847 	bl	800b46c <_malloc_r>
 800c3de:	4605      	mov	r5, r0
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d0ed      	beq.n	800c3c0 <_realloc_r+0x1e>
 800c3e4:	42bc      	cmp	r4, r7
 800c3e6:	4622      	mov	r2, r4
 800c3e8:	4631      	mov	r1, r6
 800c3ea:	bf28      	it	cs
 800c3ec:	463a      	movcs	r2, r7
 800c3ee:	f7ff fb12 	bl	800ba16 <memcpy>
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	f7ff fb3b 	bl	800ba70 <_free_r>
 800c3fa:	e7e1      	b.n	800c3c0 <_realloc_r+0x1e>
 800c3fc:	4635      	mov	r5, r6
 800c3fe:	e7df      	b.n	800c3c0 <_realloc_r+0x1e>

0800c400 <__sfputc_r>:
 800c400:	6893      	ldr	r3, [r2, #8]
 800c402:	3b01      	subs	r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	b410      	push	{r4}
 800c408:	6093      	str	r3, [r2, #8]
 800c40a:	da08      	bge.n	800c41e <__sfputc_r+0x1e>
 800c40c:	6994      	ldr	r4, [r2, #24]
 800c40e:	42a3      	cmp	r3, r4
 800c410:	db01      	blt.n	800c416 <__sfputc_r+0x16>
 800c412:	290a      	cmp	r1, #10
 800c414:	d103      	bne.n	800c41e <__sfputc_r+0x1e>
 800c416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c41a:	f000 b935 	b.w	800c688 <__swbuf_r>
 800c41e:	6813      	ldr	r3, [r2, #0]
 800c420:	1c58      	adds	r0, r3, #1
 800c422:	6010      	str	r0, [r2, #0]
 800c424:	7019      	strb	r1, [r3, #0]
 800c426:	4608      	mov	r0, r1
 800c428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <__sfputs_r>:
 800c42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c430:	4606      	mov	r6, r0
 800c432:	460f      	mov	r7, r1
 800c434:	4614      	mov	r4, r2
 800c436:	18d5      	adds	r5, r2, r3
 800c438:	42ac      	cmp	r4, r5
 800c43a:	d101      	bne.n	800c440 <__sfputs_r+0x12>
 800c43c:	2000      	movs	r0, #0
 800c43e:	e007      	b.n	800c450 <__sfputs_r+0x22>
 800c440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c444:	463a      	mov	r2, r7
 800c446:	4630      	mov	r0, r6
 800c448:	f7ff ffda 	bl	800c400 <__sfputc_r>
 800c44c:	1c43      	adds	r3, r0, #1
 800c44e:	d1f3      	bne.n	800c438 <__sfputs_r+0xa>
 800c450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c454 <_vfiprintf_r>:
 800c454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c458:	460d      	mov	r5, r1
 800c45a:	b09d      	sub	sp, #116	; 0x74
 800c45c:	4614      	mov	r4, r2
 800c45e:	4698      	mov	r8, r3
 800c460:	4606      	mov	r6, r0
 800c462:	b118      	cbz	r0, 800c46c <_vfiprintf_r+0x18>
 800c464:	6a03      	ldr	r3, [r0, #32]
 800c466:	b90b      	cbnz	r3, 800c46c <_vfiprintf_r+0x18>
 800c468:	f7ff f984 	bl	800b774 <__sinit>
 800c46c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c46e:	07d9      	lsls	r1, r3, #31
 800c470:	d405      	bmi.n	800c47e <_vfiprintf_r+0x2a>
 800c472:	89ab      	ldrh	r3, [r5, #12]
 800c474:	059a      	lsls	r2, r3, #22
 800c476:	d402      	bmi.n	800c47e <_vfiprintf_r+0x2a>
 800c478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c47a:	f7ff faca 	bl	800ba12 <__retarget_lock_acquire_recursive>
 800c47e:	89ab      	ldrh	r3, [r5, #12]
 800c480:	071b      	lsls	r3, r3, #28
 800c482:	d501      	bpl.n	800c488 <_vfiprintf_r+0x34>
 800c484:	692b      	ldr	r3, [r5, #16]
 800c486:	b99b      	cbnz	r3, 800c4b0 <_vfiprintf_r+0x5c>
 800c488:	4629      	mov	r1, r5
 800c48a:	4630      	mov	r0, r6
 800c48c:	f000 f93a 	bl	800c704 <__swsetup_r>
 800c490:	b170      	cbz	r0, 800c4b0 <_vfiprintf_r+0x5c>
 800c492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c494:	07dc      	lsls	r4, r3, #31
 800c496:	d504      	bpl.n	800c4a2 <_vfiprintf_r+0x4e>
 800c498:	f04f 30ff 	mov.w	r0, #4294967295
 800c49c:	b01d      	add	sp, #116	; 0x74
 800c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a2:	89ab      	ldrh	r3, [r5, #12]
 800c4a4:	0598      	lsls	r0, r3, #22
 800c4a6:	d4f7      	bmi.n	800c498 <_vfiprintf_r+0x44>
 800c4a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4aa:	f7ff fab3 	bl	800ba14 <__retarget_lock_release_recursive>
 800c4ae:	e7f3      	b.n	800c498 <_vfiprintf_r+0x44>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4b4:	2320      	movs	r3, #32
 800c4b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4be:	2330      	movs	r3, #48	; 0x30
 800c4c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c674 <_vfiprintf_r+0x220>
 800c4c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4c8:	f04f 0901 	mov.w	r9, #1
 800c4cc:	4623      	mov	r3, r4
 800c4ce:	469a      	mov	sl, r3
 800c4d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4d4:	b10a      	cbz	r2, 800c4da <_vfiprintf_r+0x86>
 800c4d6:	2a25      	cmp	r2, #37	; 0x25
 800c4d8:	d1f9      	bne.n	800c4ce <_vfiprintf_r+0x7a>
 800c4da:	ebba 0b04 	subs.w	fp, sl, r4
 800c4de:	d00b      	beq.n	800c4f8 <_vfiprintf_r+0xa4>
 800c4e0:	465b      	mov	r3, fp
 800c4e2:	4622      	mov	r2, r4
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f7ff ffa1 	bl	800c42e <__sfputs_r>
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	f000 80a9 	beq.w	800c644 <_vfiprintf_r+0x1f0>
 800c4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4f4:	445a      	add	r2, fp
 800c4f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 80a1 	beq.w	800c644 <_vfiprintf_r+0x1f0>
 800c502:	2300      	movs	r3, #0
 800c504:	f04f 32ff 	mov.w	r2, #4294967295
 800c508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c50c:	f10a 0a01 	add.w	sl, sl, #1
 800c510:	9304      	str	r3, [sp, #16]
 800c512:	9307      	str	r3, [sp, #28]
 800c514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c518:	931a      	str	r3, [sp, #104]	; 0x68
 800c51a:	4654      	mov	r4, sl
 800c51c:	2205      	movs	r2, #5
 800c51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c522:	4854      	ldr	r0, [pc, #336]	; (800c674 <_vfiprintf_r+0x220>)
 800c524:	f7f3 fedc 	bl	80002e0 <memchr>
 800c528:	9a04      	ldr	r2, [sp, #16]
 800c52a:	b9d8      	cbnz	r0, 800c564 <_vfiprintf_r+0x110>
 800c52c:	06d1      	lsls	r1, r2, #27
 800c52e:	bf44      	itt	mi
 800c530:	2320      	movmi	r3, #32
 800c532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c536:	0713      	lsls	r3, r2, #28
 800c538:	bf44      	itt	mi
 800c53a:	232b      	movmi	r3, #43	; 0x2b
 800c53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c540:	f89a 3000 	ldrb.w	r3, [sl]
 800c544:	2b2a      	cmp	r3, #42	; 0x2a
 800c546:	d015      	beq.n	800c574 <_vfiprintf_r+0x120>
 800c548:	9a07      	ldr	r2, [sp, #28]
 800c54a:	4654      	mov	r4, sl
 800c54c:	2000      	movs	r0, #0
 800c54e:	f04f 0c0a 	mov.w	ip, #10
 800c552:	4621      	mov	r1, r4
 800c554:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c558:	3b30      	subs	r3, #48	; 0x30
 800c55a:	2b09      	cmp	r3, #9
 800c55c:	d94d      	bls.n	800c5fa <_vfiprintf_r+0x1a6>
 800c55e:	b1b0      	cbz	r0, 800c58e <_vfiprintf_r+0x13a>
 800c560:	9207      	str	r2, [sp, #28]
 800c562:	e014      	b.n	800c58e <_vfiprintf_r+0x13a>
 800c564:	eba0 0308 	sub.w	r3, r0, r8
 800c568:	fa09 f303 	lsl.w	r3, r9, r3
 800c56c:	4313      	orrs	r3, r2
 800c56e:	9304      	str	r3, [sp, #16]
 800c570:	46a2      	mov	sl, r4
 800c572:	e7d2      	b.n	800c51a <_vfiprintf_r+0xc6>
 800c574:	9b03      	ldr	r3, [sp, #12]
 800c576:	1d19      	adds	r1, r3, #4
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	9103      	str	r1, [sp, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	bfbb      	ittet	lt
 800c580:	425b      	neglt	r3, r3
 800c582:	f042 0202 	orrlt.w	r2, r2, #2
 800c586:	9307      	strge	r3, [sp, #28]
 800c588:	9307      	strlt	r3, [sp, #28]
 800c58a:	bfb8      	it	lt
 800c58c:	9204      	strlt	r2, [sp, #16]
 800c58e:	7823      	ldrb	r3, [r4, #0]
 800c590:	2b2e      	cmp	r3, #46	; 0x2e
 800c592:	d10c      	bne.n	800c5ae <_vfiprintf_r+0x15a>
 800c594:	7863      	ldrb	r3, [r4, #1]
 800c596:	2b2a      	cmp	r3, #42	; 0x2a
 800c598:	d134      	bne.n	800c604 <_vfiprintf_r+0x1b0>
 800c59a:	9b03      	ldr	r3, [sp, #12]
 800c59c:	1d1a      	adds	r2, r3, #4
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	9203      	str	r2, [sp, #12]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	bfb8      	it	lt
 800c5a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5aa:	3402      	adds	r4, #2
 800c5ac:	9305      	str	r3, [sp, #20]
 800c5ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c684 <_vfiprintf_r+0x230>
 800c5b2:	7821      	ldrb	r1, [r4, #0]
 800c5b4:	2203      	movs	r2, #3
 800c5b6:	4650      	mov	r0, sl
 800c5b8:	f7f3 fe92 	bl	80002e0 <memchr>
 800c5bc:	b138      	cbz	r0, 800c5ce <_vfiprintf_r+0x17a>
 800c5be:	9b04      	ldr	r3, [sp, #16]
 800c5c0:	eba0 000a 	sub.w	r0, r0, sl
 800c5c4:	2240      	movs	r2, #64	; 0x40
 800c5c6:	4082      	lsls	r2, r0
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	3401      	adds	r4, #1
 800c5cc:	9304      	str	r3, [sp, #16]
 800c5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5d2:	4829      	ldr	r0, [pc, #164]	; (800c678 <_vfiprintf_r+0x224>)
 800c5d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5d8:	2206      	movs	r2, #6
 800c5da:	f7f3 fe81 	bl	80002e0 <memchr>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d03f      	beq.n	800c662 <_vfiprintf_r+0x20e>
 800c5e2:	4b26      	ldr	r3, [pc, #152]	; (800c67c <_vfiprintf_r+0x228>)
 800c5e4:	bb1b      	cbnz	r3, 800c62e <_vfiprintf_r+0x1da>
 800c5e6:	9b03      	ldr	r3, [sp, #12]
 800c5e8:	3307      	adds	r3, #7
 800c5ea:	f023 0307 	bic.w	r3, r3, #7
 800c5ee:	3308      	adds	r3, #8
 800c5f0:	9303      	str	r3, [sp, #12]
 800c5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f4:	443b      	add	r3, r7
 800c5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f8:	e768      	b.n	800c4cc <_vfiprintf_r+0x78>
 800c5fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5fe:	460c      	mov	r4, r1
 800c600:	2001      	movs	r0, #1
 800c602:	e7a6      	b.n	800c552 <_vfiprintf_r+0xfe>
 800c604:	2300      	movs	r3, #0
 800c606:	3401      	adds	r4, #1
 800c608:	9305      	str	r3, [sp, #20]
 800c60a:	4619      	mov	r1, r3
 800c60c:	f04f 0c0a 	mov.w	ip, #10
 800c610:	4620      	mov	r0, r4
 800c612:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c616:	3a30      	subs	r2, #48	; 0x30
 800c618:	2a09      	cmp	r2, #9
 800c61a:	d903      	bls.n	800c624 <_vfiprintf_r+0x1d0>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d0c6      	beq.n	800c5ae <_vfiprintf_r+0x15a>
 800c620:	9105      	str	r1, [sp, #20]
 800c622:	e7c4      	b.n	800c5ae <_vfiprintf_r+0x15a>
 800c624:	fb0c 2101 	mla	r1, ip, r1, r2
 800c628:	4604      	mov	r4, r0
 800c62a:	2301      	movs	r3, #1
 800c62c:	e7f0      	b.n	800c610 <_vfiprintf_r+0x1bc>
 800c62e:	ab03      	add	r3, sp, #12
 800c630:	9300      	str	r3, [sp, #0]
 800c632:	462a      	mov	r2, r5
 800c634:	4b12      	ldr	r3, [pc, #72]	; (800c680 <_vfiprintf_r+0x22c>)
 800c636:	a904      	add	r1, sp, #16
 800c638:	4630      	mov	r0, r6
 800c63a:	f3af 8000 	nop.w
 800c63e:	4607      	mov	r7, r0
 800c640:	1c78      	adds	r0, r7, #1
 800c642:	d1d6      	bne.n	800c5f2 <_vfiprintf_r+0x19e>
 800c644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c646:	07d9      	lsls	r1, r3, #31
 800c648:	d405      	bmi.n	800c656 <_vfiprintf_r+0x202>
 800c64a:	89ab      	ldrh	r3, [r5, #12]
 800c64c:	059a      	lsls	r2, r3, #22
 800c64e:	d402      	bmi.n	800c656 <_vfiprintf_r+0x202>
 800c650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c652:	f7ff f9df 	bl	800ba14 <__retarget_lock_release_recursive>
 800c656:	89ab      	ldrh	r3, [r5, #12]
 800c658:	065b      	lsls	r3, r3, #25
 800c65a:	f53f af1d 	bmi.w	800c498 <_vfiprintf_r+0x44>
 800c65e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c660:	e71c      	b.n	800c49c <_vfiprintf_r+0x48>
 800c662:	ab03      	add	r3, sp, #12
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	462a      	mov	r2, r5
 800c668:	4b05      	ldr	r3, [pc, #20]	; (800c680 <_vfiprintf_r+0x22c>)
 800c66a:	a904      	add	r1, sp, #16
 800c66c:	4630      	mov	r0, r6
 800c66e:	f7ff fc11 	bl	800be94 <_printf_i>
 800c672:	e7e4      	b.n	800c63e <_vfiprintf_r+0x1ea>
 800c674:	0800d5e3 	.word	0x0800d5e3
 800c678:	0800d5ed 	.word	0x0800d5ed
 800c67c:	00000000 	.word	0x00000000
 800c680:	0800c42f 	.word	0x0800c42f
 800c684:	0800d5e9 	.word	0x0800d5e9

0800c688 <__swbuf_r>:
 800c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68a:	460e      	mov	r6, r1
 800c68c:	4614      	mov	r4, r2
 800c68e:	4605      	mov	r5, r0
 800c690:	b118      	cbz	r0, 800c69a <__swbuf_r+0x12>
 800c692:	6a03      	ldr	r3, [r0, #32]
 800c694:	b90b      	cbnz	r3, 800c69a <__swbuf_r+0x12>
 800c696:	f7ff f86d 	bl	800b774 <__sinit>
 800c69a:	69a3      	ldr	r3, [r4, #24]
 800c69c:	60a3      	str	r3, [r4, #8]
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	071a      	lsls	r2, r3, #28
 800c6a2:	d525      	bpl.n	800c6f0 <__swbuf_r+0x68>
 800c6a4:	6923      	ldr	r3, [r4, #16]
 800c6a6:	b31b      	cbz	r3, 800c6f0 <__swbuf_r+0x68>
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	6922      	ldr	r2, [r4, #16]
 800c6ac:	1a98      	subs	r0, r3, r2
 800c6ae:	6963      	ldr	r3, [r4, #20]
 800c6b0:	b2f6      	uxtb	r6, r6
 800c6b2:	4283      	cmp	r3, r0
 800c6b4:	4637      	mov	r7, r6
 800c6b6:	dc04      	bgt.n	800c6c2 <__swbuf_r+0x3a>
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f7ff fd92 	bl	800c1e4 <_fflush_r>
 800c6c0:	b9e0      	cbnz	r0, 800c6fc <__swbuf_r+0x74>
 800c6c2:	68a3      	ldr	r3, [r4, #8]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	60a3      	str	r3, [r4, #8]
 800c6c8:	6823      	ldr	r3, [r4, #0]
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	6022      	str	r2, [r4, #0]
 800c6ce:	701e      	strb	r6, [r3, #0]
 800c6d0:	6962      	ldr	r2, [r4, #20]
 800c6d2:	1c43      	adds	r3, r0, #1
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d004      	beq.n	800c6e2 <__swbuf_r+0x5a>
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	07db      	lsls	r3, r3, #31
 800c6dc:	d506      	bpl.n	800c6ec <__swbuf_r+0x64>
 800c6de:	2e0a      	cmp	r6, #10
 800c6e0:	d104      	bne.n	800c6ec <__swbuf_r+0x64>
 800c6e2:	4621      	mov	r1, r4
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	f7ff fd7d 	bl	800c1e4 <_fflush_r>
 800c6ea:	b938      	cbnz	r0, 800c6fc <__swbuf_r+0x74>
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f000 f806 	bl	800c704 <__swsetup_r>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d0d5      	beq.n	800c6a8 <__swbuf_r+0x20>
 800c6fc:	f04f 37ff 	mov.w	r7, #4294967295
 800c700:	e7f4      	b.n	800c6ec <__swbuf_r+0x64>
	...

0800c704 <__swsetup_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	4b2a      	ldr	r3, [pc, #168]	; (800c7b0 <__swsetup_r+0xac>)
 800c708:	4605      	mov	r5, r0
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	460c      	mov	r4, r1
 800c70e:	b118      	cbz	r0, 800c718 <__swsetup_r+0x14>
 800c710:	6a03      	ldr	r3, [r0, #32]
 800c712:	b90b      	cbnz	r3, 800c718 <__swsetup_r+0x14>
 800c714:	f7ff f82e 	bl	800b774 <__sinit>
 800c718:	89a3      	ldrh	r3, [r4, #12]
 800c71a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c71e:	0718      	lsls	r0, r3, #28
 800c720:	d422      	bmi.n	800c768 <__swsetup_r+0x64>
 800c722:	06d9      	lsls	r1, r3, #27
 800c724:	d407      	bmi.n	800c736 <__swsetup_r+0x32>
 800c726:	2309      	movs	r3, #9
 800c728:	602b      	str	r3, [r5, #0]
 800c72a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c72e:	81a3      	strh	r3, [r4, #12]
 800c730:	f04f 30ff 	mov.w	r0, #4294967295
 800c734:	e034      	b.n	800c7a0 <__swsetup_r+0x9c>
 800c736:	0758      	lsls	r0, r3, #29
 800c738:	d512      	bpl.n	800c760 <__swsetup_r+0x5c>
 800c73a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c73c:	b141      	cbz	r1, 800c750 <__swsetup_r+0x4c>
 800c73e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c742:	4299      	cmp	r1, r3
 800c744:	d002      	beq.n	800c74c <__swsetup_r+0x48>
 800c746:	4628      	mov	r0, r5
 800c748:	f7ff f992 	bl	800ba70 <_free_r>
 800c74c:	2300      	movs	r3, #0
 800c74e:	6363      	str	r3, [r4, #52]	; 0x34
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	2300      	movs	r3, #0
 800c75a:	6063      	str	r3, [r4, #4]
 800c75c:	6923      	ldr	r3, [r4, #16]
 800c75e:	6023      	str	r3, [r4, #0]
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	f043 0308 	orr.w	r3, r3, #8
 800c766:	81a3      	strh	r3, [r4, #12]
 800c768:	6923      	ldr	r3, [r4, #16]
 800c76a:	b94b      	cbnz	r3, 800c780 <__swsetup_r+0x7c>
 800c76c:	89a3      	ldrh	r3, [r4, #12]
 800c76e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c776:	d003      	beq.n	800c780 <__swsetup_r+0x7c>
 800c778:	4621      	mov	r1, r4
 800c77a:	4628      	mov	r0, r5
 800c77c:	f7ff fd92 	bl	800c2a4 <__smakebuf_r>
 800c780:	89a0      	ldrh	r0, [r4, #12]
 800c782:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c786:	f010 0301 	ands.w	r3, r0, #1
 800c78a:	d00a      	beq.n	800c7a2 <__swsetup_r+0x9e>
 800c78c:	2300      	movs	r3, #0
 800c78e:	60a3      	str	r3, [r4, #8]
 800c790:	6963      	ldr	r3, [r4, #20]
 800c792:	425b      	negs	r3, r3
 800c794:	61a3      	str	r3, [r4, #24]
 800c796:	6923      	ldr	r3, [r4, #16]
 800c798:	b943      	cbnz	r3, 800c7ac <__swsetup_r+0xa8>
 800c79a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c79e:	d1c4      	bne.n	800c72a <__swsetup_r+0x26>
 800c7a0:	bd38      	pop	{r3, r4, r5, pc}
 800c7a2:	0781      	lsls	r1, r0, #30
 800c7a4:	bf58      	it	pl
 800c7a6:	6963      	ldrpl	r3, [r4, #20]
 800c7a8:	60a3      	str	r3, [r4, #8]
 800c7aa:	e7f4      	b.n	800c796 <__swsetup_r+0x92>
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	e7f7      	b.n	800c7a0 <__swsetup_r+0x9c>
 800c7b0:	24000088 	.word	0x24000088

0800c7b4 <_raise_r>:
 800c7b4:	291f      	cmp	r1, #31
 800c7b6:	b538      	push	{r3, r4, r5, lr}
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	460d      	mov	r5, r1
 800c7bc:	d904      	bls.n	800c7c8 <_raise_r+0x14>
 800c7be:	2316      	movs	r3, #22
 800c7c0:	6003      	str	r3, [r0, #0]
 800c7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c7ca:	b112      	cbz	r2, 800c7d2 <_raise_r+0x1e>
 800c7cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7d0:	b94b      	cbnz	r3, 800c7e6 <_raise_r+0x32>
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f000 f830 	bl	800c838 <_getpid_r>
 800c7d8:	462a      	mov	r2, r5
 800c7da:	4601      	mov	r1, r0
 800c7dc:	4620      	mov	r0, r4
 800c7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7e2:	f000 b817 	b.w	800c814 <_kill_r>
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d00a      	beq.n	800c800 <_raise_r+0x4c>
 800c7ea:	1c59      	adds	r1, r3, #1
 800c7ec:	d103      	bne.n	800c7f6 <_raise_r+0x42>
 800c7ee:	2316      	movs	r3, #22
 800c7f0:	6003      	str	r3, [r0, #0]
 800c7f2:	2001      	movs	r0, #1
 800c7f4:	e7e7      	b.n	800c7c6 <_raise_r+0x12>
 800c7f6:	2400      	movs	r4, #0
 800c7f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	4798      	blx	r3
 800c800:	2000      	movs	r0, #0
 800c802:	e7e0      	b.n	800c7c6 <_raise_r+0x12>

0800c804 <raise>:
 800c804:	4b02      	ldr	r3, [pc, #8]	; (800c810 <raise+0xc>)
 800c806:	4601      	mov	r1, r0
 800c808:	6818      	ldr	r0, [r3, #0]
 800c80a:	f7ff bfd3 	b.w	800c7b4 <_raise_r>
 800c80e:	bf00      	nop
 800c810:	24000088 	.word	0x24000088

0800c814 <_kill_r>:
 800c814:	b538      	push	{r3, r4, r5, lr}
 800c816:	4d07      	ldr	r5, [pc, #28]	; (800c834 <_kill_r+0x20>)
 800c818:	2300      	movs	r3, #0
 800c81a:	4604      	mov	r4, r0
 800c81c:	4608      	mov	r0, r1
 800c81e:	4611      	mov	r1, r2
 800c820:	602b      	str	r3, [r5, #0]
 800c822:	f7f4 ff82 	bl	800172a <_kill>
 800c826:	1c43      	adds	r3, r0, #1
 800c828:	d102      	bne.n	800c830 <_kill_r+0x1c>
 800c82a:	682b      	ldr	r3, [r5, #0]
 800c82c:	b103      	cbz	r3, 800c830 <_kill_r+0x1c>
 800c82e:	6023      	str	r3, [r4, #0]
 800c830:	bd38      	pop	{r3, r4, r5, pc}
 800c832:	bf00      	nop
 800c834:	240015e8 	.word	0x240015e8

0800c838 <_getpid_r>:
 800c838:	f7f4 bf6f 	b.w	800171a <_getpid>

0800c83c <_malloc_usable_size_r>:
 800c83c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c840:	1f18      	subs	r0, r3, #4
 800c842:	2b00      	cmp	r3, #0
 800c844:	bfbc      	itt	lt
 800c846:	580b      	ldrlt	r3, [r1, r0]
 800c848:	18c0      	addlt	r0, r0, r3
 800c84a:	4770      	bx	lr

0800c84c <_gettimeofday>:
 800c84c:	4b02      	ldr	r3, [pc, #8]	; (800c858 <_gettimeofday+0xc>)
 800c84e:	2258      	movs	r2, #88	; 0x58
 800c850:	601a      	str	r2, [r3, #0]
 800c852:	f04f 30ff 	mov.w	r0, #4294967295
 800c856:	4770      	bx	lr
 800c858:	240015e8 	.word	0x240015e8

0800c85c <_init>:
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85e:	bf00      	nop
 800c860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c862:	bc08      	pop	{r3}
 800c864:	469e      	mov	lr, r3
 800c866:	4770      	bx	lr

0800c868 <_fini>:
 800c868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86a:	bf00      	nop
 800c86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c86e:	bc08      	pop	{r3}
 800c870:	469e      	mov	lr, r3
 800c872:	4770      	bx	lr
