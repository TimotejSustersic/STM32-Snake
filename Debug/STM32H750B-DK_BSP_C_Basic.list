
STM32H750B-DK_BSP_C_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c744  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cf4  0800c9e4  0800c9e4  0001c9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f6d8  0800f6d8  0001f6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f6dc  0800f6dc  0001f6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  24000000  0800f6e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001564  2400009c  0800f77c  0002009c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001600  0800f77c  00021600  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY
 10 .debug_info   000314a0  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005cd5  00000000  00000000  000515ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000025d0  00000000  00000000  00057288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d84  00000000  00000000  00059858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00009f84  00000000  00000000  0005b5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003428e  00000000  00000000  00065560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a914c  00000000  00000000  000997ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000ac5c  00000000  00000000  0024293c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000060  00000000  00000000  0024d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400009c 	.word	0x2400009c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c9cc 	.word	0x0800c9cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a0 	.word	0x240000a0
 80002dc:	0800c9cc 	.word	0x0800c9cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <gameMain>:
static void Init_Buttons(void);
static void newApple(void);
static int InBody(int x, int y);
static node_t* push(int x, int y);

void gameMain() {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

    Init_Buttons();
 8000384:	f000 fc20 	bl	8000bc8 <Init_Buttons>

    // LTCD setup
    BSP_LCD_GetXSize(0, &x_size);
 8000388:	4925      	ldr	r1, [pc, #148]	; (8000420 <gameMain+0xa0>)
 800038a:	2000      	movs	r0, #0
 800038c:	f002 fc40 	bl	8002c10 <BSP_LCD_GetXSize>
    BSP_LCD_GetYSize(0, &y_size);
 8000390:	4924      	ldr	r1, [pc, #144]	; (8000424 <gameMain+0xa4>)
 8000392:	2000      	movs	r0, #0
 8000394:	f002 fc5a 	bl	8002c4c <BSP_LCD_GetYSize>
    
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8000398:	f04f 30ff 	mov.w	r0, #4294967295
 800039c:	f000 fe6c 	bl	8001078 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetLayer(0);
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 fe37 	bl	8001014 <UTIL_LCD_SetLayer>

    x_grid = x_size / cellSize;
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <gameMain+0xa0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1f      	ldr	r2, [pc, #124]	; (8000428 <gameMain+0xa8>)
 80003ac:	6812      	ldr	r2, [r2, #0]
 80003ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <gameMain+0xac>)
 80003b6:	601a      	str	r2, [r3, #0]
    y_grid = y_size / cellSize;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <gameMain+0xa4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a1a      	ldr	r2, [pc, #104]	; (8000428 <gameMain+0xa8>)
 80003be:	6812      	ldr	r2, [r2, #0]
 80003c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <gameMain+0xb0>)
 80003c8:	601a      	str	r2, [r3, #0]

    x_border = (x_size - (x_grid * cellSize)) / 2; 
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <gameMain+0xa0>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a17      	ldr	r2, [pc, #92]	; (800042c <gameMain+0xac>)
 80003d0:	6812      	ldr	r2, [r2, #0]
 80003d2:	4915      	ldr	r1, [pc, #84]	; (8000428 <gameMain+0xa8>)
 80003d4:	6809      	ldr	r1, [r1, #0]
 80003d6:	fb01 f202 	mul.w	r2, r1, r2
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	085b      	lsrs	r3, r3, #1
 80003de:	461a      	mov	r2, r3
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <gameMain+0xb4>)
 80003e2:	601a      	str	r2, [r3, #0]
    y_border = (y_size - (y_grid * cellSize)) / 2; 
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <gameMain+0xa4>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a11      	ldr	r2, [pc, #68]	; (8000430 <gameMain+0xb0>)
 80003ea:	6812      	ldr	r2, [r2, #0]
 80003ec:	490e      	ldr	r1, [pc, #56]	; (8000428 <gameMain+0xa8>)
 80003ee:	6809      	ldr	r1, [r1, #0]
 80003f0:	fb01 f202 	mul.w	r2, r1, r2
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	085b      	lsrs	r3, r3, #1
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <gameMain+0xb8>)
 80003fc:	601a      	str	r2, [r3, #0]
     * 2. Game Over
    */
    while (1)
    {
        // game
        if (gameStage == START)
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <gameMain+0xbc>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d102      	bne.n	800040c <gameMain+0x8c>
            gameStart();
 8000406:	f000 f81b 	bl	8000440 <gameStart>
 800040a:	e7f8      	b.n	80003fe <gameMain+0x7e>
        else if (gameStage == GAME)
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <gameMain+0xbc>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d102      	bne.n	800041a <gameMain+0x9a>
            game();
 8000414:	f000 f87c 	bl	8000510 <game>
 8000418:	e7f1      	b.n	80003fe <gameMain+0x7e>
        else
            gameOver();
 800041a:	f000 f937 	bl	800068c <gameOver>
        if (gameStage == START)
 800041e:	e7ee      	b.n	80003fe <gameMain+0x7e>
 8000420:	240000c0 	.word	0x240000c0
 8000424:	240000c4 	.word	0x240000c4
 8000428:	24000000 	.word	0x24000000
 800042c:	240000cc 	.word	0x240000cc
 8000430:	240000d0 	.word	0x240000d0
 8000434:	240000d4 	.word	0x240000d4
 8000438:	240000d8 	.word	0x240000d8
 800043c:	240000c8 	.word	0x240000c8

08000440 <gameStart>:
    }
    
}

static void gameStart() {
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b083      	sub	sp, #12
 8000444:	af02      	add	r7, sp, #8

    // 1. Draw shit and reset variables    

    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000446:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800044a:	f000 fec5 	bl	80011d8 <UTIL_LCD_Clear>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_ORANGE);
 800044e:	4826      	ldr	r0, [pc, #152]	; (80004e8 <gameStart+0xa8>)
 8000450:	f000 fdfe 	bl	8001050 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetFont(&Font24);
 8000454:	4825      	ldr	r0, [pc, #148]	; (80004ec <gameStart+0xac>)
 8000456:	f000 fe23 	bl	80010a0 <UTIL_LCD_SetFont>
    UTIL_LCD_FillRect(x_size/5, y_size/4, 3*x_size/5, y_size/2, UTIL_LCD_COLOR_WHITE);
 800045a:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <gameStart+0xb0>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a25      	ldr	r2, [pc, #148]	; (80004f4 <gameStart+0xb4>)
 8000460:	fba2 2303 	umull	r2, r3, r2, r3
 8000464:	0898      	lsrs	r0, r3, #2
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <gameStart+0xb8>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	0899      	lsrs	r1, r3, #2
 800046c:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <gameStart+0xb0>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	4613      	mov	r3, r2
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	4413      	add	r3, r2
 8000476:	4a1f      	ldr	r2, [pc, #124]	; (80004f4 <gameStart+0xb4>)
 8000478:	fba2 2303 	umull	r2, r3, r2, r3
 800047c:	089a      	lsrs	r2, r3, #2
 800047e:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <gameStart+0xb8>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	085b      	lsrs	r3, r3, #1
 8000484:	f04f 34ff 	mov.w	r4, #4294967295
 8000488:	9400      	str	r4, [sp, #0]
 800048a:	f000 ffc9 	bl	8001420 <UTIL_LCD_FillRect>
    UTIL_LCD_DisplayStringAt(0, (y_size/2) - 12, (uint8_t *)"Start Game", CENTER_MODE);
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <gameStart+0xb8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	085b      	lsrs	r3, r3, #1
 8000494:	f1a3 010c 	sub.w	r1, r3, #12
 8000498:	2301      	movs	r3, #1
 800049a:	4a18      	ldr	r2, [pc, #96]	; (80004fc <gameStart+0xbc>)
 800049c:	2000      	movs	r0, #0
 800049e:	f000 fee7 	bl	8001270 <UTIL_LCD_DisplayStringAt>

    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 80004a2:	4817      	ldr	r0, [pc, #92]	; (8000500 <gameStart+0xc0>)
 80004a4:	f000 fdd4 	bl	8001050 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetFont(&Font12);
 80004a8:	4816      	ldr	r0, [pc, #88]	; (8000504 <gameStart+0xc4>)
 80004aa:	f000 fdf9 	bl	80010a0 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(0, (y_size/2) + 12, (uint8_t *)"Press the blue button", CENTER_MODE);
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <gameStart+0xb8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	085b      	lsrs	r3, r3, #1
 80004b4:	f103 010c 	add.w	r1, r3, #12
 80004b8:	2301      	movs	r3, #1
 80004ba:	4a13      	ldr	r2, [pc, #76]	; (8000508 <gameStart+0xc8>)
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 fed7 	bl	8001270 <UTIL_LCD_DisplayStringAt>

    // 2. wait for user input
    while (!BSP_PB_GetState(BUTTON_USER_PIN)) { }
 80004c2:	bf00      	nop
 80004c4:	2000      	movs	r0, #0
 80004c6:	f001 fdb9 	bl	800203c <BSP_PB_GetState>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d0f9      	beq.n	80004c4 <gameStart+0x84>

    DrawCanvas();
 80004d0:	f000 f9a0 	bl	8000814 <DrawCanvas>
    resetVariables();
 80004d4:	f000 fac0 	bl	8000a58 <resetVariables>
    
    gameStage = GAME;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <gameStart+0xcc>)
 80004da:	2201      	movs	r2, #1
 80004dc:	601a      	str	r2, [r3, #0]
}
 80004de:	bf00      	nop
 80004e0:	3704      	adds	r7, #4
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd90      	pop	{r4, r7, pc}
 80004e6:	bf00      	nop
 80004e8:	ffffa500 	.word	0xffffa500
 80004ec:	24000004 	.word	0x24000004
 80004f0:	240000c0 	.word	0x240000c0
 80004f4:	cccccccd 	.word	0xcccccccd
 80004f8:	240000c4 	.word	0x240000c4
 80004fc:	0800c9e4 	.word	0x0800c9e4
 8000500:	ff0000ff 	.word	0xff0000ff
 8000504:	24000014 	.word	0x24000014
 8000508:	0800c9f0 	.word	0x0800c9f0
 800050c:	240000c8 	.word	0x240000c8

08000510 <game>:

// game logic
static void game() {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

    // initial
    BSP_LED_Off(LED_GREEN);
 8000516:	2000      	movs	r0, #0
 8000518:	f001 fd00 	bl	8001f1c <BSP_LED_Off>

    // New Location //
    ////////////////////////////
    int x_new = head->x; 
 800051c:	4b51      	ldr	r3, [pc, #324]	; (8000664 <game+0x154>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	60fb      	str	r3, [r7, #12]
    int y_new = head->y;
 8000524:	4b4f      	ldr	r3, [pc, #316]	; (8000664 <game+0x154>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	60bb      	str	r3, [r7, #8]
    
    if (HAL_GPIO_ReadPin(GPIOB, BUTTON_LEFT) && smer != RIGHT)
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	484e      	ldr	r0, [pc, #312]	; (8000668 <game+0x158>)
 8000530:	f005 fd84 	bl	800603c <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d006      	beq.n	8000548 <game+0x38>
 800053a:	4b4c      	ldr	r3, [pc, #304]	; (800066c <game+0x15c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b03      	cmp	r3, #3
 8000540:	d002      	beq.n	8000548 <game+0x38>
        smer = LEFT;
 8000542:	4b4a      	ldr	r3, [pc, #296]	; (800066c <game+0x15c>)
 8000544:	2201      	movs	r2, #1
 8000546:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOB, BUTTON_RIGHT) && smer != LEFT)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	4847      	ldr	r0, [pc, #284]	; (8000668 <game+0x158>)
 800054c:	f005 fd76 	bl	800603c <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <game+0x54>
 8000556:	4b45      	ldr	r3, [pc, #276]	; (800066c <game+0x15c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d002      	beq.n	8000564 <game+0x54>
        smer = RIGHT;
 800055e:	4b43      	ldr	r3, [pc, #268]	; (800066c <game+0x15c>)
 8000560:	2203      	movs	r2, #3
 8000562:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_DOWN) && smer != UP)
 8000564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000568:	4841      	ldr	r0, [pc, #260]	; (8000670 <game+0x160>)
 800056a:	f005 fd67 	bl	800603c <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d006      	beq.n	8000582 <game+0x72>
 8000574:	4b3d      	ldr	r3, [pc, #244]	; (800066c <game+0x15c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b02      	cmp	r3, #2
 800057a:	d002      	beq.n	8000582 <game+0x72>
        smer = DOWN;
 800057c:	4b3b      	ldr	r3, [pc, #236]	; (800066c <game+0x15c>)
 800057e:	2204      	movs	r2, #4
 8000580:	601a      	str	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(GPIOA, BUTTON_UP) && smer != DOWN)
 8000582:	2140      	movs	r1, #64	; 0x40
 8000584:	483a      	ldr	r0, [pc, #232]	; (8000670 <game+0x160>)
 8000586:	f005 fd59 	bl	800603c <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d006      	beq.n	800059e <game+0x8e>
 8000590:	4b36      	ldr	r3, [pc, #216]	; (800066c <game+0x15c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b04      	cmp	r3, #4
 8000596:	d002      	beq.n	800059e <game+0x8e>
        smer = UP;
 8000598:	4b34      	ldr	r3, [pc, #208]	; (800066c <game+0x15c>)
 800059a:	2202      	movs	r2, #2
 800059c:	601a      	str	r2, [r3, #0]
    
    // rabis 4 gumbe
    if (smer == DOWN) 
 800059e:	4b33      	ldr	r3, [pc, #204]	; (800066c <game+0x15c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d103      	bne.n	80005ae <game+0x9e>
        y_new++;    
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	e016      	b.n	80005dc <game+0xcc>
    else if (smer == RIGHT) 
 80005ae:	4b2f      	ldr	r3, [pc, #188]	; (800066c <game+0x15c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d103      	bne.n	80005be <game+0xae>
        x_new++;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3301      	adds	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	e00e      	b.n	80005dc <game+0xcc>
    else if (smer == UP) 
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <game+0x15c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d103      	bne.n	80005ce <game+0xbe>
        y_new--;    
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	e006      	b.n	80005dc <game+0xcc>
    else if (smer == LEFT) 
 80005ce:	4b27      	ldr	r3, [pc, #156]	; (800066c <game+0x15c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d102      	bne.n	80005dc <game+0xcc>
        x_new--;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3b01      	subs	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
    ////////////////////////////

    // Colision //
    ////////////////////////////
    if (InBody(x_new, y_new)) {
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	68f8      	ldr	r0, [r7, #12]
 80005e0:	f000 f9cc 	bl	800097c <InBody>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <game+0xe2>
        gameStage = OVER;
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <game+0x164>)
 80005ec:	2202      	movs	r2, #2
 80005ee:	601a      	str	r2, [r3, #0]
        return;
 80005f0:	e034      	b.n	800065c <game+0x14c>
    }


    // if we want to draw off grid its an error and game over
    if (
        x_new >= x_grid || 
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <game+0x168>)
 80005f4:	681b      	ldr	r3, [r3, #0]
    if (
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	da0a      	bge.n	8000612 <game+0x102>
        y_new >= y_grid ||
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <game+0x16c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
        x_new >= x_grid || 
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	429a      	cmp	r2, r3
 8000604:	da05      	bge.n	8000612 <game+0x102>
        y_new >= y_grid ||
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db02      	blt.n	8000612 <game+0x102>
        x_new < 0 || 
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	2b00      	cmp	r3, #0
 8000610:	da03      	bge.n	800061a <game+0x10a>
        y_new < 0           
    ) {
        gameStage = OVER;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <game+0x164>)
 8000614:	2202      	movs	r2, #2
 8000616:	601a      	str	r2, [r3, #0]
        return;
 8000618:	e020      	b.n	800065c <game+0x14c>
    }
    ////////////////////////////

    // Apple //
    ////////////////////////////
    int appleCollision = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
    if (x_new == x_apple && y_new == y_apple) {
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <game+0x170>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	429a      	cmp	r2, r3
 8000626:	d111      	bne.n	800064c <game+0x13c>
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <game+0x174>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	429a      	cmp	r2, r3
 8000630:	d10c      	bne.n	800064c <game+0x13c>
        appleCollision++;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
        snakeLength++;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <game+0x178>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <game+0x178>)
 8000640:	6013      	str	r3, [r2, #0]
        BSP_LED_On(LED_GREEN);
 8000642:	2000      	movs	r0, #0
 8000644:	f001 fc4c 	bl	8001ee0 <BSP_LED_On>

        newApple();
 8000648:	f000 f894 	bl	8000774 <newApple>
    }
    ////////////////////////////

    addtoSnake(x_new, y_new, appleCollision);
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	68b9      	ldr	r1, [r7, #8]
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	f000 fa65 	bl	8000b20 <addtoSnake>

    HAL_Delay(150);
 8000656:	2096      	movs	r0, #150	; 0x96
 8000658:	f003 fa28 	bl	8003aac <HAL_Delay>
}
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	240000b8 	.word	0x240000b8
 8000668:	58020400 	.word	0x58020400
 800066c:	240000e8 	.word	0x240000e8
 8000670:	58020000 	.word	0x58020000
 8000674:	240000c8 	.word	0x240000c8
 8000678:	240000cc 	.word	0x240000cc
 800067c:	240000d0 	.word	0x240000d0
 8000680:	240000dc 	.word	0x240000dc
 8000684:	240000e0 	.word	0x240000e0
 8000688:	240000e4 	.word	0x240000e4

0800068c <gameOver>:
 
static void gameOver() {
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b085      	sub	sp, #20
 8000690:	af02      	add	r7, sp, #8

    BSP_LED_Off(LED_GREEN);
 8000692:	2000      	movs	r0, #0
 8000694:	f001 fc42 	bl	8001f1c <BSP_LED_Off>
    BSP_LED_On(LED_RED);
 8000698:	2001      	movs	r0, #1
 800069a:	f001 fc21 	bl	8001ee0 <BSP_LED_On>

    // first wait for 3 seconds to see error
    HAL_Delay(2000);
 800069e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a2:	f003 fa03 	bl	8003aac <HAL_Delay>

    UTIL_LCD_Clear(UTIL_LCD_COLOR_RED);
 80006a6:	4829      	ldr	r0, [pc, #164]	; (800074c <gameOver+0xc0>)
 80006a8:	f000 fd96 	bl	80011d8 <UTIL_LCD_Clear>
    UTIL_LCD_FillRect(x_size/5, y_size/4, 3*x_size/5, y_size/2, UTIL_LCD_COLOR_WHITE);
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <gameOver+0xc4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a28      	ldr	r2, [pc, #160]	; (8000754 <gameOver+0xc8>)
 80006b2:	fba2 2303 	umull	r2, r3, r2, r3
 80006b6:	0898      	lsrs	r0, r3, #2
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <gameOver+0xcc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	0899      	lsrs	r1, r3, #2
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <gameOver+0xc4>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4613      	mov	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	4a22      	ldr	r2, [pc, #136]	; (8000754 <gameOver+0xc8>)
 80006ca:	fba2 2303 	umull	r2, r3, r2, r3
 80006ce:	089a      	lsrs	r2, r3, #2
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <gameOver+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	085b      	lsrs	r3, r3, #1
 80006d6:	f04f 34ff 	mov.w	r4, #4294967295
 80006da:	9400      	str	r4, [sp, #0]
 80006dc:	f000 fea0 	bl	8001420 <UTIL_LCD_FillRect>

    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 80006e0:	481a      	ldr	r0, [pc, #104]	; (800074c <gameOver+0xc0>)
 80006e2:	f000 fcb5 	bl	8001050 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetFont(&Font24);    
 80006e6:	481d      	ldr	r0, [pc, #116]	; (800075c <gameOver+0xd0>)
 80006e8:	f000 fcda 	bl	80010a0 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(0, (y_size/2) - 12, (uint8_t *)"GAME OVER!", CENTER_MODE);
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <gameOver+0xcc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	085b      	lsrs	r3, r3, #1
 80006f2:	f1a3 010c 	sub.w	r1, r3, #12
 80006f6:	2301      	movs	r3, #1
 80006f8:	4a19      	ldr	r2, [pc, #100]	; (8000760 <gameOver+0xd4>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 fdb8 	bl	8001270 <UTIL_LCD_DisplayStringAt>

    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8000700:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000704:	f000 fca4 	bl	8001050 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetFont(&Font16);
 8000708:	4816      	ldr	r0, [pc, #88]	; (8000764 <gameOver+0xd8>)
 800070a:	f000 fcc9 	bl	80010a0 <UTIL_LCD_SetFont>
    char sc;
    sprintf(sc, "Score: %d", snakeLength - 3);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4618      	mov	r0, r3
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <gameOver+0xdc>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3b03      	subs	r3, #3
 8000718:	461a      	mov	r2, r3
 800071a:	4914      	ldr	r1, [pc, #80]	; (800076c <gameOver+0xe0>)
 800071c:	f00b f918 	bl	800b950 <siprintf>
    UTIL_LCD_DisplayStringAt(0, (y_size/2) + 12, (uint8_t *)sc, CENTER_MODE);
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <gameOver+0xcc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	085b      	lsrs	r3, r3, #1
 8000726:	f103 010c 	add.w	r1, r3, #12
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	461a      	mov	r2, r3
 800072e:	2301      	movs	r3, #1
 8000730:	2000      	movs	r0, #0
 8000732:	f000 fd9d 	bl	8001270 <UTIL_LCD_DisplayStringAt>

    // wait for 5 seconds
    HAL_Delay(5000);
 8000736:	f241 3088 	movw	r0, #5000	; 0x1388
 800073a:	f003 f9b7 	bl	8003aac <HAL_Delay>
    // back to start
    gameStage = START;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <gameOver+0xe4>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	ffff0000 	.word	0xffff0000
 8000750:	240000c0 	.word	0x240000c0
 8000754:	cccccccd 	.word	0xcccccccd
 8000758:	240000c4 	.word	0x240000c4
 800075c:	24000004 	.word	0x24000004
 8000760:	0800ca08 	.word	0x0800ca08
 8000764:	2400000c 	.word	0x2400000c
 8000768:	240000e4 	.word	0x240000e4
 800076c:	0800ca14 	.word	0x0800ca14
 8000770:	240000c8 	.word	0x240000c8

08000774 <newApple>:

static void newApple() {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

    x_apple = rand() % x_grid;
 8000778:	f00a ffea 	bl	800b750 <rand>
 800077c:	4602      	mov	r2, r0
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <newApple+0x90>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	fb92 f1f3 	sdiv	r1, r2, r3
 8000786:	fb01 f303 	mul.w	r3, r1, r3
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <newApple+0x94>)
 800078e:	6013      	str	r3, [r2, #0]
    y_apple = rand() % y_grid;
 8000790:	f00a ffde 	bl	800b750 <rand>
 8000794:	4602      	mov	r2, r0
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <newApple+0x98>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	fb92 f1f3 	sdiv	r1, r2, r3
 800079e:	fb01 f303 	mul.w	r3, r1, r3
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <newApple+0x9c>)
 80007a6:	6013      	str	r3, [r2, #0]

    while (InBody(x_apple, y_apple)) {
 80007a8:	e017      	b.n	80007da <newApple+0x66>
        x_apple = rand() % x_grid;
 80007aa:	f00a ffd1 	bl	800b750 <rand>
 80007ae:	4602      	mov	r2, r0
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <newApple+0x90>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	fb92 f1f3 	sdiv	r1, r2, r3
 80007b8:	fb01 f303 	mul.w	r3, r1, r3
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <newApple+0x94>)
 80007c0:	6013      	str	r3, [r2, #0]
        y_apple = rand() % y_grid;
 80007c2:	f00a ffc5 	bl	800b750 <rand>
 80007c6:	4602      	mov	r2, r0
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <newApple+0x98>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	fb92 f1f3 	sdiv	r1, r2, r3
 80007d0:	fb01 f303 	mul.w	r3, r1, r3
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <newApple+0x9c>)
 80007d8:	6013      	str	r3, [r2, #0]
    while (InBody(x_apple, y_apple)) {
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <newApple+0x94>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <newApple+0x9c>)
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f8c9 	bl	800097c <InBody>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1dc      	bne.n	80007aa <newApple+0x36>
    }
    DrawGridCell(x_apple, y_apple, 3);
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <newApple+0x94>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <newApple+0x9c>)
 80007f6:	6811      	ldr	r1, [r2, #0]
 80007f8:	2203      	movs	r2, #3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f836 	bl	800086c <DrawGridCell>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	240000cc 	.word	0x240000cc
 8000808:	240000dc 	.word	0x240000dc
 800080c:	240000d0 	.word	0x240000d0
 8000810:	240000e0 	.word	0x240000e0

08000814 <DrawCanvas>:

static void DrawCanvas() {    
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0

    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800081a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800081e:	f000 fcdb 	bl	80011d8 <UTIL_LCD_Clear>
    // main platform
    // UTIL_LCD_DrawRect(x_border, y_border, x_size - 2*x_border, y_size - 2*y_border, 0xFF070707UL);

    // grid
    for (int i = 0; i < x_grid; i++) 
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e012      	b.n	800084e <DrawCanvas+0x3a>
        for (int j = 0; j < y_grid; j++) 
 8000828:	2300      	movs	r3, #0
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	e007      	b.n	800083e <DrawCanvas+0x2a>
            DrawGridCell(i, j, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	6839      	ldr	r1, [r7, #0]
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 f81a 	bl	800086c <DrawGridCell>
        for (int j = 0; j < y_grid; j++) 
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <DrawCanvas+0x50>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf2      	blt.n	800082e <DrawCanvas+0x1a>
    for (int i = 0; i < x_grid; i++) 
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3301      	adds	r3, #1
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <DrawCanvas+0x54>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	429a      	cmp	r2, r3
 8000856:	dbe7      	blt.n	8000828 <DrawCanvas+0x14>
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	240000d0 	.word	0x240000d0
 8000868:	240000cc 	.word	0x240000cc

0800086c <DrawGridCell>:

static void DrawGridCell(int x, int y, int type) {
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af02      	add	r7, sp, #8
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]

    int x_pos = x * cellSize + x_border;
 8000878:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <DrawGridCell+0xf8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	fb03 f202 	mul.w	r2, r3, r2
 8000882:	4b39      	ldr	r3, [pc, #228]	; (8000968 <DrawGridCell+0xfc>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	617b      	str	r3, [r7, #20]
    int y_pos = y * cellSize + y_border;
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <DrawGridCell+0xf8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	fb03 f202 	mul.w	r2, r3, r2
 8000894:	4b35      	ldr	r3, [pc, #212]	; (800096c <DrawGridCell+0x100>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4413      	add	r3, r2
 800089a:	613b      	str	r3, [r7, #16]

    // snake Body
    if (type == 1) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10e      	bne.n	80008c0 <DrawGridCell+0x54>
        // UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_LIGHTMAGENTA);
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_GREEN);
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	6939      	ldr	r1, [r7, #16]
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <DrawGridCell+0xf8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <DrawGridCell+0xf8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	461c      	mov	r4, r3
 80008b2:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4623      	mov	r3, r4
 80008ba:	f000 fdb1 	bl	8001420 <UTIL_LCD_FillRect>
    // empty cell
    else if (type == 0) {
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_BLACK);
        UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, 0xFF070707UL);
    }
}
 80008be:	e04d      	b.n	800095c <DrawGridCell+0xf0>
    else if (type == 2) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d11b      	bne.n	80008fe <DrawGridCell+0x92>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_DARKGREEN);
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	6939      	ldr	r1, [r7, #16]
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <DrawGridCell+0xf8>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <DrawGridCell+0xf8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	461c      	mov	r4, r3
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <DrawGridCell+0x104>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	4623      	mov	r3, r4
 80008dc:	f000 fda0 	bl	8001420 <UTIL_LCD_FillRect>
        UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_GREEN);
 80008e0:	6978      	ldr	r0, [r7, #20]
 80008e2:	6939      	ldr	r1, [r7, #16]
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <DrawGridCell+0xf8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <DrawGridCell+0xf8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	461c      	mov	r4, r3
 80008f0:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	4623      	mov	r3, r4
 80008f8:	f000 fd68 	bl	80013cc <UTIL_LCD_DrawRect>
}
 80008fc:	e02e      	b.n	800095c <DrawGridCell+0xf0>
    else if (type == 3) {
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d10d      	bne.n	8000920 <DrawGridCell+0xb4>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_RED);
 8000904:	6978      	ldr	r0, [r7, #20]
 8000906:	6939      	ldr	r1, [r7, #16]
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <DrawGridCell+0xf8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <DrawGridCell+0xf8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	461c      	mov	r4, r3
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <DrawGridCell+0x108>)
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	4623      	mov	r3, r4
 800091a:	f000 fd81 	bl	8001420 <UTIL_LCD_FillRect>
}
 800091e:	e01d      	b.n	800095c <DrawGridCell+0xf0>
    else if (type == 0) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d11a      	bne.n	800095c <DrawGridCell+0xf0>
        UTIL_LCD_FillRect(x_pos, y_pos, cellSize, cellSize, UTIL_LCD_COLOR_BLACK);
 8000926:	6978      	ldr	r0, [r7, #20]
 8000928:	6939      	ldr	r1, [r7, #16]
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <DrawGridCell+0xf8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <DrawGridCell+0xf8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	461c      	mov	r4, r3
 8000936:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	4623      	mov	r3, r4
 800093e:	f000 fd6f 	bl	8001420 <UTIL_LCD_FillRect>
        UTIL_LCD_DrawRect(x_pos, y_pos, cellSize, cellSize, 0xFF070707UL);
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	6939      	ldr	r1, [r7, #16]
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <DrawGridCell+0xf8>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <DrawGridCell+0xf8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	461c      	mov	r4, r3
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <DrawGridCell+0x10c>)
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	4623      	mov	r3, r4
 8000958:	f000 fd38 	bl	80013cc <UTIL_LCD_DrawRect>
}
 800095c:	bf00      	nop
 800095e:	371c      	adds	r7, #28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	24000000 	.word	0x24000000
 8000968:	240000d4 	.word	0x240000d4
 800096c:	240000d8 	.word	0x240000d8
 8000970:	ff008000 	.word	0xff008000
 8000974:	ffff0000 	.word	0xffff0000
 8000978:	ff070707 	.word	0xff070707

0800097c <InBody>:
//         pressed = HAL_GPIO_ReadPin(GPIO, pin);
            
//     return HAL_GetTick() - startTime;
// }

static int InBody(int x, int y) {
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]

    node_t* tmpNode = head->next;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <InBody+0x48>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	60fb      	str	r3, [r7, #12]
    while (tmpNode != NULL)
 800098e:	e00e      	b.n	80009ae <InBody+0x32>
    {
        // if location would hit the body
        if (x == tmpNode->x && y == tmpNode->y) 
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	429a      	cmp	r2, r3
 8000998:	d106      	bne.n	80009a8 <InBody+0x2c>
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d101      	bne.n	80009a8 <InBody+0x2c>
            return 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e006      	b.n	80009b6 <InBody+0x3a>
        
        tmpNode = tmpNode->next;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	60fb      	str	r3, [r7, #12]
    while (tmpNode != NULL)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1ed      	bne.n	8000990 <InBody+0x14>
    }
    return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	240000b8 	.word	0x240000b8

080009c8 <push>:

static node_t* push(int x, int y) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]

    node_t* newNode = (node_t*)malloc(sizeof(node_t));
 80009d2:	2010      	movs	r0, #16
 80009d4:	f00a fdd2 	bl	800b57c <malloc>
 80009d8:	4603      	mov	r3, r0
 80009da:	60fb      	str	r3, [r7, #12]

    newNode->next = NULL;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]

    if (head == NULL) {
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <push+0x84>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d108      	bne.n	80009fc <push+0x34>
        head = newNode;  
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <push+0x84>)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6013      	str	r3, [r2, #0]
        DrawGridCell(x, y, 2); 
 80009f0:	2202      	movs	r2, #2
 80009f2:	6839      	ldr	r1, [r7, #0]
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ff39 	bl	800086c <DrawGridCell>
 80009fa:	e004      	b.n	8000a06 <push+0x3e>
    } 
    else {
        DrawGridCell(x, y, 1); 
 80009fc:	2201      	movs	r2, #1
 80009fe:	6839      	ldr	r1, [r7, #0]
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff33 	bl	800086c <DrawGridCell>
    }

    if (tail == NULL) {
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <push+0x88>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d106      	bne.n	8000a1c <push+0x54>
        tail = newNode;
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <push+0x88>)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6013      	str	r3, [r2, #0]
        newNode->prev = NULL;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	e006      	b.n	8000a2a <push+0x62>
    }
    else {
        newNode->prev = tail;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <push+0x88>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	60da      	str	r2, [r3, #12]
        tail = newNode;
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <push+0x88>)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	6013      	str	r3, [r2, #0]
    }

    newNode->x = x;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	601a      	str	r2, [r3, #0]
    newNode->y = y;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	605a      	str	r2, [r3, #4]

    snakeLength++;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <push+0x8c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <push+0x8c>)
 8000a3e:	6013      	str	r3, [r2, #0]

    return newNode;
 8000a40:	68fb      	ldr	r3, [r7, #12]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	240000b8 	.word	0x240000b8
 8000a50:	240000bc 	.word	0x240000bc
 8000a54:	240000e4 	.word	0x240000e4

08000a58 <resetVariables>:

static void resetVariables() {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0

    BSP_LED_Off(LED_GREEN);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f001 fa5c 	bl	8001f1c <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f001 fa59 	bl	8001f1c <BSP_LED_Off>

    // pobrisemo kaco ce je prevelika
    while (snakeLength > 1)
 8000a6a:	e00f      	b.n	8000a8c <resetVariables+0x34>
    {
        node_t* deletingNode = head;
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <resetVariables+0xb4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	607b      	str	r3, [r7, #4]
        head = head->next;
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <resetVariables+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	4a24      	ldr	r2, [pc, #144]	; (8000b0c <resetVariables+0xb4>)
 8000a7a:	6013      	str	r3, [r2, #0]
        free(deletingNode);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f00a fd85 	bl	800b58c <free>
        snakeLength--;
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <resetVariables+0xb8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <resetVariables+0xb8>)
 8000a8a:	6013      	str	r3, [r2, #0]
    while (snakeLength > 1)
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <resetVariables+0xb8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	dceb      	bgt.n	8000a6c <resetVariables+0x14>
    }

    // create a snake
    int x = x_grid / 2;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <resetVariables+0xbc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	da00      	bge.n	8000a9e <resetVariables+0x46>
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	105b      	asrs	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
    int y = y_grid / 2;
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <resetVariables+0xc0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	da00      	bge.n	8000aac <resetVariables+0x54>
 8000aaa:	3301      	adds	r3, #1
 8000aac:	105b      	asrs	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]

    if (snakeLength == 0)
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <resetVariables+0xb8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d103      	bne.n	8000ac0 <resetVariables+0x68>
        push(x, y);
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f7ff ff84 	bl	80009c8 <push>
    if (snakeLength == 1) {
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <resetVariables+0xb8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d10d      	bne.n	8000ae4 <resetVariables+0x8c>
        head->x = x;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <resetVariables+0xb4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	601a      	str	r2, [r3, #0]
        head->y = y;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <resetVariables+0xb4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	605a      	str	r2, [r3, #4]
        push(x, y+1);
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	3301      	adds	r3, #1
 8000adc:	4619      	mov	r1, r3
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ff72 	bl	80009c8 <push>
    }
    if (snakeLength == 2)
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <resetVariables+0xb8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d105      	bne.n	8000af8 <resetVariables+0xa0>
        push(x, y+2);
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3302      	adds	r3, #2
 8000af0:	4619      	mov	r1, r3
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff ff68 	bl	80009c8 <push>

    newApple();
 8000af8:	f7ff fe3c 	bl	8000774 <newApple>
    smer = LEFT;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <resetVariables+0xc4>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	240000b8 	.word	0x240000b8
 8000b10:	240000e4 	.word	0x240000e4
 8000b14:	240000cc 	.word	0x240000cc
 8000b18:	240000d0 	.word	0x240000d0
 8000b1c:	240000e8 	.word	0x240000e8

08000b20 <addtoSnake>:

static void addtoSnake(int x, int y, int new) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]

    // dodamo na head
    // v pomnilnik
    node_t* newNode = (node_t*)malloc(sizeof(node_t));
 8000b2c:	2010      	movs	r0, #16
 8000b2e:	f00a fd25 	bl	800b57c <malloc>
 8000b32:	4603      	mov	r3, r0
 8000b34:	617b      	str	r3, [r7, #20]
    newNode->x = x;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	601a      	str	r2, [r3, #0]
    newNode->y = y;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	605a      	str	r2, [r3, #4]

    head->prev = newNode;
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <addtoSnake+0xa0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	60da      	str	r2, [r3, #12]
    newNode->next = head;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <addtoSnake+0xa0>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	609a      	str	r2, [r3, #8]
    newNode->prev = NULL;
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    head = newNode;
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <addtoSnake+0xa0>)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	6013      	str	r3, [r2, #0]

    // na grid
    DrawGridCell(newNode->x, newNode->y, 2); // head
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	2202      	movs	r2, #2
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f7ff fe7f 	bl	800086c <DrawGridCell>
    DrawGridCell(newNode->next->x, newNode->next->y, 1); // change head color to body color
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	6818      	ldr	r0, [r3, #0]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f7ff fe75 	bl	800086c <DrawGridCell>
    ///////////////////

    ///////////////////
    // brisemo zadnjega ce nismo jabolka pojedl
    if (!new) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d117      	bne.n	8000bb8 <addtoSnake+0x98>
        
        node_t* deletingNode = tail;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <addtoSnake+0xa4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	613b      	str	r3, [r7, #16]

        tail->prev->next = NULL;    
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <addtoSnake+0xa4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
        tail = tail->prev;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <addtoSnake+0xa4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <addtoSnake+0xa4>)
 8000ba0:	6013      	str	r3, [r2, #0]

        // z grida
        DrawGridCell(deletingNode->x, deletingNode->y, 0);
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	f7ff fe5d 	bl	800086c <DrawGridCell>
        // s pomnilnika
        free(deletingNode);
 8000bb2:	6938      	ldr	r0, [r7, #16]
 8000bb4:	f00a fcea 	bl	800b58c <free>
    }
}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	240000b8 	.word	0x240000b8
 8000bc4:	240000bc 	.word	0x240000bc

08000bc8 <Init_Buttons>:

static void Init_Buttons(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <Init_Buttons+0x84>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <Init_Buttons+0x84>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <Init_Buttons+0x84>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <Init_Buttons+0x84>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <Init_Buttons+0x84>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <Init_Buttons+0x84>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
   
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
    
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	617b      	str	r3, [r7, #20]

    GPIO_InitStruct.Pin = BUTTON_UP | BUTTON_DOWN;
 8000c22:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c26:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <Init_Buttons+0x88>)
 8000c30:	f005 f854 	bl	8005cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUTTON_LEFT | BUTTON_RIGHT;
 8000c34:	23c0      	movs	r3, #192	; 0xc0
 8000c36:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <Init_Buttons+0x8c>)
 8000c40:	f005 f84c 	bl	8005cdc <HAL_GPIO_Init>
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	58024400 	.word	0x58024400
 8000c50:	58020000 	.word	0x58020000
 8000c54:	58020400 	.word	0x58020400

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
  */
  HAL_Init();
 8000c5c:	f002 fe94 	bl	8003988 <HAL_Init>

  SystemClock_Config();
 8000c60:	f000 f836 	bl	8000cd0 <SystemClock_Config>

  BSP_PB_Init(BUTTON_USER_PIN, BUTTON_MODE_GPIO);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2000      	movs	r0, #0
 8000c68:	f001 f976 	bl	8001f58 <BSP_PB_Init>
  BSP_LED_Init(LED_GREEN);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f001 f8d9 	bl	8001e24 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f001 f8d6 	bl	8001e24 <BSP_LED_Init>

 	srand(time(NULL));   // Initialization, should only be called once.
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f00a fed5 	bl	800ba28 <time>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4610      	mov	r0, r2
 8000c84:	4619      	mov	r1, r3
 8000c86:	f00a fd35 	bl	800b6f4 <srand>
	// HAL_IncTick();

  ////////////////////////////////////////////////////////
  // LTDC INIT
  ////////////////////////////////////////////////////////
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f001 fde3 	bl	8002858 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <main+0x4c>)
 8000c94:	f000 f968 	bl	8000f68 <UTIL_LCD_SetFuncDriver>

  gameMain();
 8000c98:	f7ff fb72 	bl	8000380 <gameMain>

  return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	0800f5cc 	.word	0x0800f5cc

08000ca8 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <BSP_PB_Callback+0x24>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	240000ec 	.word	0x240000ec

08000cd0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09e      	sub	sp, #120	; 0x78
 8000cd4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f006 fbeb 	bl	80074b8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	4b42      	ldr	r3, [pc, #264]	; (8000df0 <SystemClock_Config+0x120>)
 8000ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cea:	4a41      	ldr	r2, [pc, #260]	; (8000df0 <SystemClock_Config+0x120>)
 8000cec:	f023 0301 	bic.w	r3, r3, #1
 8000cf0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cf2:	4b3f      	ldr	r3, [pc, #252]	; (8000df0 <SystemClock_Config+0x120>)
 8000cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	4b3d      	ldr	r3, [pc, #244]	; (8000df4 <SystemClock_Config+0x124>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a3c      	ldr	r2, [pc, #240]	; (8000df4 <SystemClock_Config+0x124>)
 8000d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <SystemClock_Config+0x124>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d14:	bf00      	nop
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <SystemClock_Config+0x124>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d22:	d1f8      	bne.n	8000d16 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000d42:	23a0      	movs	r3, #160	; 0xa0
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d52:	2304      	movs	r3, #4
 8000d54:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	4618      	mov	r0, r3
 8000d64:	f006 fbe2 	bl	800752c <HAL_RCC_OscConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000d6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d76:	f000 f841 	bl	8000dfc <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000d7a:	233f      	movs	r3, #63	; 0x3f
 8000d7c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d86:	2308      	movs	r3, #8
 8000d88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d8e:	2340      	movs	r3, #64	; 0x40
 8000d90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d96:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d98:	2340      	movs	r3, #64	; 0x40
 8000d9a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000d9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000da0:	2104      	movs	r1, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f007 f81c 	bl	8007de0 <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000dae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000db6:	f000 f821 	bl	8000dfc <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <SystemClock_Config+0x128>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <SystemClock_Config+0x128>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <SystemClock_Config+0x128>)
 8000dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SystemClock_Config+0x128>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <SystemClock_Config+0x128>)
 8000dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 8000de4:	f002 fe92 	bl	8003b0c <HAL_EnableCompensationCell>
}
 8000de8:	bf00      	nop
 8000dea:	3778      	adds	r7, #120	; 0x78
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58000400 	.word	0x58000400
 8000df4:	58024800 	.word	0x58024800
 8000df8:	58024400 	.word	0x58024400

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f001 f86b 	bl	8001ee0 <BSP_LED_On>
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <Error_Handler+0xe>

08000e0c <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db04      	blt.n	8000e24 <_isatty+0x18>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	dc01      	bgt.n	8000e24 <_isatty+0x18>
    return 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e005      	b.n	8000e30 <_isatty+0x24>

  errno = EBADF;
 8000e24:	f00a fe82 	bl	800bb2c <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2209      	movs	r2, #9
 8000e2c:	601a      	str	r2, [r3, #0]
  return 0;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_close>:

int _close(int fd) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db04      	blt.n	8000e50 <_close+0x18>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	dc01      	bgt.n	8000e50 <_close+0x18>
    return 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e006      	b.n	8000e5e <_close+0x26>

  errno = EBADF;
 8000e50:	f00a fe6c 	bl	800bb2c <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2209      	movs	r2, #9
 8000e58:	601a      	str	r2, [r3, #0]
  return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000e72:	f00a fe5b 	bl	800bb2c <__errno>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2209      	movs	r2, #9
 8000e7a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_fstat>:



int _fstat(int fd, struct stat* st) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db08      	blt.n	8000eaa <_fstat+0x22>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	dc05      	bgt.n	8000eaa <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea4:	605a      	str	r2, [r3, #4]
    return 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e005      	b.n	8000eb6 <_fstat+0x2e>
  }

  errno = EBADF;
 8000eaa:	f00a fe3f 	bl	800bb2c <__errno>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2209      	movs	r2, #9
 8000eb2:	601a      	str	r2, [r3, #0]
  return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <_read>:


int _read(int fd, char* ptr, int len) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d110      	bne.n	8000ef4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <_read+0x4c>)
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	2201      	movs	r2, #1
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	f009 fa65 	bl	800a3ac <HAL_UART_Receive>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <_read+0x30>
      return 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e008      	b.n	8000f02 <_read+0x42>
    else
      return EIO;
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	e006      	b.n	8000f02 <_read+0x42>
  }
  errno = EBADF;
 8000ef4:	f00a fe1a 	bl	800bb2c <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2209      	movs	r2, #9
 8000efc:	601a      	str	r2, [r3, #0]
  return -1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	240001d0 	.word	0x240001d0

08000f10 <_write>:

int _write(int fd, char* ptr, int len) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d002      	beq.n	8000f28 <_write+0x18>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d111      	bne.n	8000f4c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <_write+0x54>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	f009 f9ab 	bl	800a290 <HAL_UART_Transmit>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <_write+0x38>
      return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	e008      	b.n	8000f5a <_write+0x4a>
    else
      return EIO;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	e006      	b.n	8000f5a <_write+0x4a>
  }
  errno = EBADF;
 8000f4c:	f00a fdee 	bl	800bb2c <__errno>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2209      	movs	r2, #9
 8000f54:	601a      	str	r2, [r3, #0]
  return -1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	240001d0 	.word	0x240001d0

08000f68 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a22      	ldr	r2, [pc, #136]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f76:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a20      	ldr	r2, [pc, #128]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f7e:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f86:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f8e:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	4a1a      	ldr	r2, [pc, #104]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f96:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f9e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fa6:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	4a14      	ldr	r2, [pc, #80]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fae:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a12      	ldr	r2, [pc, #72]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fb6:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fbe:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fc6:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <UTIL_LCD_SetFuncDriver+0xa0>)
 8000fda:	4611      	mov	r1, r2
 8000fdc:	2000      	movs	r0, #0
 8000fde:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4a09      	ldr	r2, [pc, #36]	; (800100c <UTIL_LCD_SetFuncDriver+0xa4>)
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	2000      	movs	r0, #0
 8000fea:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <UTIL_LCD_SetFuncDriver+0xa8>)
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	4798      	blx	r3
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	24000214 	.word	0x24000214
 8001004:	240001d4 	.word	0x240001d4
 8001008:	240001e8 	.word	0x240001e8
 800100c:	240001ec 	.word	0x240001ec
 8001010:	240001f0 	.word	0x240001f0

08001014 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <UTIL_LCD_SetLayer+0x34>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00c      	beq.n	800103e <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <UTIL_LCD_SetLayer+0x34>)
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	4a08      	ldr	r2, [pc, #32]	; (800104c <UTIL_LCD_SetLayer+0x38>)
 800102a:	6912      	ldr	r2, [r2, #16]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	4610      	mov	r0, r2
 8001030:	4798      	blx	r3
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <UTIL_LCD_SetLayer+0x38>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60d3      	str	r3, [r2, #12]
    }
  }
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	24000214 	.word	0x24000214
 800104c:	240001d4 	.word	0x240001d4

08001050 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <UTIL_LCD_SetTextColor+0x24>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a05      	ldr	r2, [pc, #20]	; (8001074 <UTIL_LCD_SetTextColor+0x24>)
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	4413      	add	r3, r2
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	240001d4 	.word	0x240001d4

08001078 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <UTIL_LCD_SetBackColor+0x24>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <UTIL_LCD_SetBackColor+0x24>)
 8001086:	015b      	lsls	r3, r3, #5
 8001088:	4413      	add	r3, r2
 800108a:	3304      	adds	r3, #4
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	240001d4 	.word	0x240001d4

080010a0 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <UTIL_LCD_SetFont+0x24>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <UTIL_LCD_SetFont+0x24>)
 80010ae:	015b      	lsls	r3, r3, #5
 80010b0:	4413      	add	r3, r2
 80010b2:	3308      	adds	r3, #8
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	601a      	str	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	240001d4 	.word	0x240001d4

080010c8 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <UTIL_LCD_FillRGBRect+0x30>)
 80010d8:	685c      	ldr	r4, [r3, #4]
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <UTIL_LCD_FillRGBRect+0x34>)
 80010dc:	6918      	ldr	r0, [r3, #16]
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	47a0      	blx	r4
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24000214 	.word	0x24000214
 80010fc:	240001d4 	.word	0x240001d4

08001100 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b087      	sub	sp, #28
 8001104:	af02      	add	r7, sp, #8
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <UTIL_LCD_DrawHLine+0x64>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d118      	bne.n	8001148 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <UTIL_LCD_DrawHLine+0x68>)
 8001118:	689c      	ldr	r4, [r3, #8]
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <UTIL_LCD_DrawHLine+0x64>)
 800111c:	6918      	ldr	r0, [r3, #16]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	f003 021f 	and.w	r2, r3, #31
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	0a9b      	lsrs	r3, r3, #10
 800112a:	015b      	lsls	r3, r3, #5
 800112c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001130:	431a      	orrs	r2, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	0cdb      	lsrs	r3, r3, #19
 8001136:	02db      	lsls	r3, r3, #11
 8001138:	b29b      	uxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8001146:	e009      	b.n	800115c <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <UTIL_LCD_DrawHLine+0x68>)
 800114a:	689c      	ldr	r4, [r3, #8]
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <UTIL_LCD_DrawHLine+0x64>)
 800114e:	6918      	ldr	r0, [r3, #16]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	68f9      	ldr	r1, [r7, #12]
 800115a:	47a0      	blx	r4
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	240001d4 	.word	0x240001d4
 8001168:	24000214 	.word	0x24000214

0800116c <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b087      	sub	sp, #28
 8001170:	af02      	add	r7, sp, #8
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <UTIL_LCD_DrawVLine+0x64>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d118      	bne.n	80011b4 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <UTIL_LCD_DrawVLine+0x68>)
 8001184:	68dc      	ldr	r4, [r3, #12]
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <UTIL_LCD_DrawVLine+0x64>)
 8001188:	6918      	ldr	r0, [r3, #16]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	f003 021f 	and.w	r2, r3, #31
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	0a9b      	lsrs	r3, r3, #10
 8001196:	015b      	lsls	r3, r3, #5
 8001198:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800119c:	431a      	orrs	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	0cdb      	lsrs	r3, r3, #19
 80011a2:	02db      	lsls	r3, r3, #11
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80011b2:	e009      	b.n	80011c8 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <UTIL_LCD_DrawVLine+0x68>)
 80011b6:	68dc      	ldr	r4, [r3, #12]
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <UTIL_LCD_DrawVLine+0x64>)
 80011ba:	6918      	ldr	r0, [r3, #16]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	47a0      	blx	r4
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	240001d4 	.word	0x240001d4
 80011d4:	24000214 	.word	0x24000214

080011d8 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af02      	add	r7, sp, #8
 80011de:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <UTIL_LCD_Clear+0x28>)
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <UTIL_LCD_Clear+0x28>)
 80011e6:	6999      	ldr	r1, [r3, #24]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	460b      	mov	r3, r1
 80011ee:	2100      	movs	r1, #0
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f915 	bl	8001420 <UTIL_LCD_FillRect>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	240001d4 	.word	0x240001d4

08001204 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	4613      	mov	r3, r2
 8001210:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <UTIL_LCD_DisplayChar+0x68>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <UTIL_LCD_DisplayChar+0x68>)
 8001218:	015b      	lsls	r3, r3, #5
 800121a:	4413      	add	r3, r2
 800121c:	3308      	adds	r3, #8
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8001226:	4911      	ldr	r1, [pc, #68]	; (800126c <UTIL_LCD_DisplayChar+0x68>)
 8001228:	68c9      	ldr	r1, [r1, #12]
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <UTIL_LCD_DisplayChar+0x68>)
 800122c:	0149      	lsls	r1, r1, #5
 800122e:	4401      	add	r1, r0
 8001230:	3108      	adds	r1, #8
 8001232:	6809      	ldr	r1, [r1, #0]
 8001234:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001236:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <UTIL_LCD_DisplayChar+0x68>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <UTIL_LCD_DisplayChar+0x68>)
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	4403      	add	r3, r0
 8001244:	3308      	adds	r3, #8
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	889b      	ldrh	r3, [r3, #4]
 800124a:	3307      	adds	r3, #7
 800124c:	2b00      	cmp	r3, #0
 800124e:	da00      	bge.n	8001252 <UTIL_LCD_DisplayChar+0x4e>
 8001250:	3307      	adds	r3, #7
 8001252:	10db      	asrs	r3, r3, #3
 8001254:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8001258:	4413      	add	r3, r2
 800125a:	461a      	mov	r2, r3
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f918 	bl	8001494 <DrawChar>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	240001d4 	.word	0x240001d4

08001270 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 800127e:	2301      	movs	r3, #1
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001292:	e002      	b.n	800129a <UTIL_LCD_DisplayStringAt+0x2a>
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	61ba      	str	r2, [r7, #24]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f6      	bne.n	8001294 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 80012a6:	4b48      	ldr	r3, [pc, #288]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	4a47      	ldr	r2, [pc, #284]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 80012ac:	68d2      	ldr	r2, [r2, #12]
 80012ae:	4946      	ldr	r1, [pc, #280]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 80012b0:	0152      	lsls	r2, r2, #5
 80012b2:	440a      	add	r2, r1
 80012b4:	3208      	adds	r2, #8
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	8892      	ldrh	r2, [r2, #4]
 80012ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80012be:	617b      	str	r3, [r7, #20]

  switch (Mode)
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d018      	beq.n	80012f8 <UTIL_LCD_DisplayStringAt+0x88>
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	dc2a      	bgt.n	8001320 <UTIL_LCD_DisplayStringAt+0xb0>
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d002      	beq.n	80012d4 <UTIL_LCD_DisplayStringAt+0x64>
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d015      	beq.n	80012fe <UTIL_LCD_DisplayStringAt+0x8e>
 80012d2:	e025      	b.n	8001320 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	4a3b      	ldr	r2, [pc, #236]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 80012dc:	68d2      	ldr	r2, [r2, #12]
 80012de:	493a      	ldr	r1, [pc, #232]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 80012e0:	0152      	lsls	r2, r2, #5
 80012e2:	440a      	add	r2, r1
 80012e4:	3208      	adds	r2, #8
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	8892      	ldrh	r2, [r2, #4]
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	085b      	lsrs	r3, r3, #1
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012f6:	e016      	b.n	8001326 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012fc:	e013      	b.n	8001326 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4a30      	ldr	r2, [pc, #192]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 8001306:	68d2      	ldr	r2, [r2, #12]
 8001308:	492f      	ldr	r1, [pc, #188]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 800130a:	0152      	lsls	r2, r2, #5
 800130c:	440a      	add	r2, r1
 800130e:	3208      	adds	r2, #8
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	8892      	ldrh	r2, [r2, #4]
 8001314:	fb03 f202 	mul.w	r2, r3, r2
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800131e:	e002      	b.n	8001326 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001324:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <UTIL_LCD_DisplayStringAt+0xc4>
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001332:	d31b      	bcc.n	800136c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001338:	e018      	b.n	800136c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001344:	f7ff ff5e 	bl	8001204 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 800134e:	015b      	lsls	r3, r3, #5
 8001350:	4413      	add	r3, r2
 8001352:	3308      	adds	r3, #8
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	889b      	ldrh	r3, [r3, #4]
 8001358:	461a      	mov	r2, r3
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	4413      	add	r3, r2
 800135e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3301      	adds	r3, #1
 8001364:	607b      	str	r3, [r7, #4]
    i++;
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	3301      	adds	r3, #1
 800136a:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf14      	ite	ne
 8001374:	2301      	movne	r3, #1
 8001376:	2300      	moveq	r3, #0
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 800137c:	6959      	ldr	r1, [r3, #20]
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	4403      	add	r3, r0
 8001388:	3308      	adds	r3, #8
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	889b      	ldrh	r3, [r3, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	fb00 f303 	mul.w	r3, r0, r3
 8001396:	1acb      	subs	r3, r1, r3
 8001398:	b29b      	uxth	r3, r3
 800139a:	490b      	ldr	r1, [pc, #44]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 800139c:	68c9      	ldr	r1, [r1, #12]
 800139e:	480a      	ldr	r0, [pc, #40]	; (80013c8 <UTIL_LCD_DisplayStringAt+0x158>)
 80013a0:	0149      	lsls	r1, r1, #5
 80013a2:	4401      	add	r1, r0
 80013a4:	3108      	adds	r1, #8
 80013a6:	6809      	ldr	r1, [r1, #0]
 80013a8:	8889      	ldrh	r1, [r1, #4]
 80013aa:	428b      	cmp	r3, r1
 80013ac:	bf2c      	ite	cs
 80013ae:	2301      	movcs	r3, #1
 80013b0:	2300      	movcc	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1be      	bne.n	800133a <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	240001d4 	.word	0x240001d4

080013cc <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff fe8d 	bl	8001100 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	1e59      	subs	r1, r3, #1
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff fe84 	bl	8001100 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff feb4 	bl	800116c <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	1e58      	subs	r0, r3, #1
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	f7ff feab 	bl	800116c <UTIL_LCD_DrawVLine>
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b087      	sub	sp, #28
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <UTIL_LCD_FillRect+0x6c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d11a      	bne.n	800146c <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <UTIL_LCD_FillRect+0x70>)
 8001438:	691c      	ldr	r4, [r3, #16]
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <UTIL_LCD_FillRect+0x6c>)
 800143c:	6918      	ldr	r0, [r3, #16]
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	f003 021f 	and.w	r2, r3, #31
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	0a9b      	lsrs	r3, r3, #10
 800144a:	015b      	lsls	r3, r3, #5
 800144c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001450:	431a      	orrs	r2, r3
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	0cdb      	lsrs	r3, r3, #19
 8001456:	02db      	lsls	r3, r3, #11
 8001458:	b29b      	uxth	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 800146a:	e00b      	b.n	8001484 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <UTIL_LCD_FillRect+0x70>)
 800146e:	691c      	ldr	r4, [r3, #16]
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <UTIL_LCD_FillRect+0x6c>)
 8001472:	6918      	ldr	r0, [r3, #16]
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	68f9      	ldr	r1, [r7, #12]
 8001482:	47a0      	blx	r4
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	240001d4 	.word	0x240001d4
 8001490:	24000214 	.word	0x24000214

08001494 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0b2      	sub	sp, #200	; 0xc8
 8001498:	af02      	add	r7, sp, #8
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 80014ac:	4ba5      	ldr	r3, [pc, #660]	; (8001744 <DrawChar+0x2b0>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4aa4      	ldr	r2, [pc, #656]	; (8001744 <DrawChar+0x2b0>)
 80014b2:	015b      	lsls	r3, r3, #5
 80014b4:	4413      	add	r3, r2
 80014b6:	3308      	adds	r3, #8
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	88db      	ldrh	r3, [r3, #6]
 80014bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 80014c0:	4ba0      	ldr	r3, [pc, #640]	; (8001744 <DrawChar+0x2b0>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4a9f      	ldr	r2, [pc, #636]	; (8001744 <DrawChar+0x2b0>)
 80014c6:	015b      	lsls	r3, r3, #5
 80014c8:	4413      	add	r3, r2
 80014ca:	3308      	adds	r3, #8
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	889b      	ldrh	r3, [r3, #4]
 80014d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 80014d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014d8:	3307      	adds	r3, #7
 80014da:	f023 0207 	bic.w	r2, r3, #7
 80014de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014ee:	e11c      	b.n	800172a <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80014f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014f4:	3307      	adds	r3, #7
 80014f6:	08db      	lsrs	r3, r3, #3
 80014f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 8001508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800150c:	3307      	adds	r3, #7
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d002      	beq.n	800151a <DrawChar+0x86>
 8001514:	2b02      	cmp	r3, #2
 8001516:	d006      	beq.n	8001526 <DrawChar+0x92>
 8001518:	e011      	b.n	800153e <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 800151a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001524:	e01d      	b.n	8001562 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001526:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001532:	3201      	adds	r2, #1
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	4313      	orrs	r3, r2
 8001538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800153c:	e011      	b.n	8001562 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800153e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800154a:	3301      	adds	r3, #1
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	4313      	orrs	r3, r2
 8001552:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001556:	3202      	adds	r2, #2
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	4313      	orrs	r3, r2
 800155c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001560:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001562:	4b78      	ldr	r3, [pc, #480]	; (8001744 <DrawChar+0x2b0>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	4a77      	ldr	r2, [pc, #476]	; (8001744 <DrawChar+0x2b0>)
 8001568:	015b      	lsls	r3, r3, #5
 800156a:	4413      	add	r3, r2
 800156c:	331c      	adds	r3, #28
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b02      	cmp	r3, #2
 8001572:	f040 808c 	bne.w	800168e <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800157c:	e074      	b.n	8001668 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 800157e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001586:	1ad2      	subs	r2, r2, r3
 8001588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800158c:	4413      	add	r3, r2
 800158e:	3b01      	subs	r3, #1
 8001590:	2201      	movs	r2, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	461a      	mov	r2, r3
 8001598:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d02d      	beq.n	80015fe <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 80015a2:	4b68      	ldr	r3, [pc, #416]	; (8001744 <DrawChar+0x2b0>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	4a67      	ldr	r2, [pc, #412]	; (8001744 <DrawChar+0x2b0>)
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	4413      	add	r3, r2
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	08db      	lsrs	r3, r3, #3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	4b62      	ldr	r3, [pc, #392]	; (8001744 <DrawChar+0x2b0>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4961      	ldr	r1, [pc, #388]	; (8001744 <DrawChar+0x2b0>)
 80015be:	015b      	lsls	r3, r3, #5
 80015c0:	440b      	add	r3, r1
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0a9b      	lsrs	r3, r3, #10
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <DrawChar+0x2b0>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	495a      	ldr	r1, [pc, #360]	; (8001744 <DrawChar+0x2b0>)
 80015dc:	015b      	lsls	r3, r3, #5
 80015de:	440b      	add	r3, r1
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0cdb      	lsrs	r3, r3, #19
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	02db      	lsls	r3, r3, #11
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	33c0      	adds	r3, #192	; 0xc0
 80015f6:	443b      	add	r3, r7
 80015f8:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80015fc:	e02f      	b.n	800165e <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80015fe:	4b51      	ldr	r3, [pc, #324]	; (8001744 <DrawChar+0x2b0>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a50      	ldr	r2, [pc, #320]	; (8001744 <DrawChar+0x2b0>)
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	4413      	add	r3, r2
 8001608:	3304      	adds	r3, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	b29b      	uxth	r3, r3
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	b29a      	uxth	r2, r3
 8001616:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <DrawChar+0x2b0>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	494a      	ldr	r1, [pc, #296]	; (8001744 <DrawChar+0x2b0>)
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	440b      	add	r3, r1
 8001620:	3304      	adds	r3, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0a9b      	lsrs	r3, r3, #10
 8001626:	b29b      	uxth	r3, r3
 8001628:	015b      	lsls	r3, r3, #5
 800162a:	b29b      	uxth	r3, r3
 800162c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001630:	b29b      	uxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b43      	ldr	r3, [pc, #268]	; (8001744 <DrawChar+0x2b0>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	4942      	ldr	r1, [pc, #264]	; (8001744 <DrawChar+0x2b0>)
 800163c:	015b      	lsls	r3, r3, #5
 800163e:	440b      	add	r3, r1
 8001640:	3304      	adds	r3, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0cdb      	lsrs	r3, r3, #19
 8001646:	b29b      	uxth	r3, r3
 8001648:	02db      	lsls	r3, r3, #11
 800164a:	b29b      	uxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b29a      	uxth	r2, r3
 8001650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	33c0      	adds	r3, #192	; 0xc0
 8001658:	443b      	add	r3, r7
 800165a:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 800165e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001662:	3301      	adds	r3, #1
 8001664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001668:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800166c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001670:	429a      	cmp	r2, r3
 8001672:	d384      	bcc.n	800157e <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	1c4b      	adds	r3, r1, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800167e:	2301      	movs	r3, #1
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7ff fd1e 	bl	80010c8 <UTIL_LCD_FillRGBRect>
 800168c:	e048      	b.n	8001720 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001694:	e032      	b.n	80016fc <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001696:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800169a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800169e:	1ad2      	subs	r2, r2, r3
 80016a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016a4:	4413      	add	r3, r2
 80016a6:	3b01      	subs	r3, #1
 80016a8:	2201      	movs	r2, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00d      	beq.n	80016d6 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <DrawChar+0x2b0>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	4a21      	ldr	r2, [pc, #132]	; (8001744 <DrawChar+0x2b0>)
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	4413      	add	r3, r2
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	33c0      	adds	r3, #192	; 0xc0
 80016ce:	443b      	add	r3, r7
 80016d0:	f843 2cac 	str.w	r2, [r3, #-172]
 80016d4:	e00d      	b.n	80016f2 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <DrawChar+0x2b0>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <DrawChar+0x2b0>)
 80016dc:	015b      	lsls	r3, r3, #5
 80016de:	4413      	add	r3, r2
 80016e0:	3304      	adds	r3, #4
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	33c0      	adds	r3, #192	; 0xc0
 80016ec:	443b      	add	r3, r7
 80016ee:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80016f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016f6:	3301      	adds	r3, #1
 80016f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80016fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001704:	429a      	cmp	r2, r3
 8001706:	d3c6      	bcc.n	8001696 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	1c4b      	adds	r3, r1, #1
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	f107 0214 	add.w	r2, r7, #20
 8001712:	2301      	movs	r3, #1
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff fcd4 	bl	80010c8 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8001720:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001724:	3301      	adds	r3, #1
 8001726:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800172a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800172e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001732:	429a      	cmp	r2, r3
 8001734:	f4ff aedc 	bcc.w	80014f0 <DrawChar+0x5c>
    }
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	37c0      	adds	r7, #192	; 0xc0
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	240001d4 	.word	0x240001d4

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_MspInit+0x74>)
 8001750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_MspInit+0x74>)
 8001756:	f043 0302 	orr.w	r3, r3, #2
 800175a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_MspInit+0x74>)
 8001760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	210f      	movs	r1, #15
 8001770:	f06f 0001 	mvn.w	r0, #1
 8001774:	f002 fab5 	bl	8003ce2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_MspInit+0x74>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177e:	4a0f      	ldr	r2, [pc, #60]	; (80017bc <HAL_MspInit+0x74>)
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_MspInit+0x74>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001796:	2308      	movs	r3, #8
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <HAL_MspInit+0x78>)
 80017ae:	f004 fa95 	bl	8005cdc <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58021000 	.word	0x58021000

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f002 f93a 	bl	8003a6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017f8:	f009 fe30 	bl	800b45c <xTaskGetSchedulerState>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d001      	beq.n	8001806 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001802:	f009 fe99 	bl	800b538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}

0800180a <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 800180e:	2000      	movs	r0, #0
 8001810:	f000 fc2a 	bl	8002068 <BSP_PB_IRQHandler>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <TIM3_IRQHandler+0x10>)
 800181e:	f008 fb2d 	bl	8009e7c <HAL_TIM_IRQHandler>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000184 	.word	0x24000184

0800182c <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <USART3_IRQHandler+0x10>)
 8001832:	f008 fe83 	bl	800a53c <HAL_UART_IRQHandler>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	240000f0 	.word	0x240000f0

08001840 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8001844:	2000      	movs	r0, #0
 8001846:	f000 fc29 	bl	800209c <BSP_AUDIO_OUT_IRQHandler>
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <DMA2_Stream4_IRQHandler+0x14>)
 8001856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800185a:	4618      	mov	r0, r3
 800185c:	f002 ffda 	bl	8004814 <HAL_DMA_IRQHandler>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	240002f4 	.word	0x240002f4

08001868 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 800186c:	2130      	movs	r1, #48	; 0x30
 800186e:	2001      	movs	r0, #1
 8001870:	f000 fc28 	bl	80020c4 <BSP_AUDIO_IN_IRQHandler>

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 800187c:	2000      	movs	r0, #0
 800187e:	f001 ff6f 	bl	8003760 <BSP_SDRAM_IRQHandler>

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}

08001886 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_kill>:

int _kill(int pid, int sig)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018a0:	f00a f944 	bl	800bb2c <__errno>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2216      	movs	r2, #22
 80018a8:	601a      	str	r2, [r3, #0]
  return -1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_exit>:

void _exit (int status)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018be:	f04f 31ff 	mov.w	r1, #4294967295
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffe7 	bl	8001896 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018c8:	e7fe      	b.n	80018c8 <_exit+0x12>
	...

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f00a f916 	bl	800bb2c <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	24080000 	.word	0x24080000
 800192c:	00000400 	.word	0x00000400
 8001930:	24000240 	.word	0x24000240
 8001934:	24001600 	.word	0x24001600

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <SystemInit+0xe4>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a36      	ldr	r2, [pc, #216]	; (8001a1c <SystemInit+0xe4>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <SystemInit+0xe8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	2b06      	cmp	r3, #6
 8001956:	d807      	bhi.n	8001968 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001958:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <SystemInit+0xe8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 030f 	bic.w	r3, r3, #15
 8001960:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <SystemInit+0xe8>)
 8001962:	f043 0307 	orr.w	r3, r3, #7
 8001966:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <SystemInit+0xec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2d      	ldr	r2, [pc, #180]	; (8001a24 <SystemInit+0xec>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <SystemInit+0xec>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <SystemInit+0xec>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4929      	ldr	r1, [pc, #164]	; (8001a24 <SystemInit+0xec>)
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <SystemInit+0xf0>)
 8001982:	4013      	ands	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <SystemInit+0xe8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <SystemInit+0xe8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 030f 	bic.w	r3, r3, #15
 800199a:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <SystemInit+0xe8>)
 800199c:	f043 0307 	orr.w	r3, r3, #7
 80019a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <SystemInit+0xec>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <SystemInit+0xec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <SystemInit+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <SystemInit+0xec>)
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <SystemInit+0xf4>)
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <SystemInit+0xec>)
 80019bc:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <SystemInit+0xf8>)
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <SystemInit+0xec>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <SystemInit+0xfc>)
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <SystemInit+0xec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <SystemInit+0xec>)
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <SystemInit+0xfc>)
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <SystemInit+0xec>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <SystemInit+0xec>)
 80019da:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <SystemInit+0xfc>)
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <SystemInit+0xec>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <SystemInit+0xec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <SystemInit+0xec>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <SystemInit+0xec>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <SystemInit+0x100>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <SystemInit+0x104>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a02:	d202      	bcs.n	8001a0a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <SystemInit+0x108>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <SystemInit+0x10c>)
 8001a0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a10:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00
 8001a20:	52002000 	.word	0x52002000
 8001a24:	58024400 	.word	0x58024400
 8001a28:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a2c:	02020200 	.word	0x02020200
 8001a30:	01ff0000 	.word	0x01ff0000
 8001a34:	01010280 	.word	0x01010280
 8001a38:	5c001000 	.word	0x5c001000
 8001a3c:	ffff0000 	.word	0xffff0000
 8001a40:	51008108 	.word	0x51008108
 8001a44:	52004000 	.word	0x52004000

08001a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a4c:	f7ff ff74 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	; (8001a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	; (8001a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f00a f85f 	bl	800bb38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7a:	f7ff f8ed 	bl	8000c58 <main>
  bx  lr
 8001a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a88:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8001a8c:	0800f6e0 	.word	0x0800f6e0
  ldr r2, =_sbss
 8001a90:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 8001a94:	24001600 	.word	0x24001600

08001a98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC3_IRQHandler>
	...

08001a9c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d103      	bne.n	8001ab4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e02c      	b.n	8001b0e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	891a      	ldrh	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <FT5336_RegisterBusIO+0x7c>)
 8001ae8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <FT5336_RegisterBusIO+0x80>)
 8001aee:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4798      	blx	r3
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	e002      	b.n	8001b0e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	08001b41 	.word	0x08001b41
 8001b1c:	08001b75 	.word	0x08001b75

08001b20 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f850 	bl	8001bd6 <ft5336_chip_id>
 8001b36:	4603      	mov	r3, r0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	72fb      	strb	r3, [r7, #11]
 8001b50:	4613      	mov	r3, r2
 8001b52:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	691c      	ldr	r4, [r3, #16]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	8918      	ldrh	r0, [r3, #8]
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	b299      	uxth	r1, r3
 8001b64:	893b      	ldrh	r3, [r7, #8]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	47a0      	blx	r4
 8001b6a:	4603      	mov	r3, r0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}

08001b74 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	72fb      	strb	r3, [r7, #11]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	68dc      	ldr	r4, [r3, #12]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	8918      	ldrh	r0, [r3, #8]
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	b299      	uxth	r1, r3
 8001b98:	893b      	ldrh	r3, [r7, #8]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	47a0      	blx	r4
 8001b9e:	4603      	mov	r3, r0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	371c      	adds	r7, #28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}

08001ba8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	72fb      	strb	r3, [r7, #11]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685c      	ldr	r4, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6898      	ldr	r0, [r3, #8]
 8001bc4:	893b      	ldrh	r3, [r7, #8]
 8001bc6:	7af9      	ldrb	r1, [r7, #11]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	47a0      	blx	r4
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}

08001bd6 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8001be0:	2301      	movs	r3, #1
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	21a8      	movs	r1, #168	; 0xa8
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffde 	bl	8001ba8 <ft5336_read_reg>
 8001bec:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8001c04:	68fb      	ldr	r3, [r7, #12]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4619      	mov	r1, r3
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f831 	bl	8001c8c <MT48LC4M32B2_ClockEnable>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d128      	bne.n	8001c82 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f000 f8e1 	bl	8001df8 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f849 	bl	8001cd4 <MT48LC4M32B2_Precharge>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11c      	bne.n	8001c82 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	461a      	mov	r2, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f896 	bl	8001d84 <MT48LC4M32B2_RefreshMode>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d111      	bne.n	8001c82 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f85b 	bl	8001d1c <MT48LC4M32B2_ModeRegConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10a      	bne.n	8001c82 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f8ac 	bl	8001dd0 <MT48LC4M32B2_RefreshRate>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MT48LC4M32B2_ClockEnable+0x44>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <MT48LC4M32B2_ClockEnable+0x44>)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MT48LC4M32B2_ClockEnable+0x44>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MT48LC4M32B2_ClockEnable+0x44>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <MT48LC4M32B2_ClockEnable+0x44>)
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f007 ffbd 	bl	8009c34 <HAL_SDRAM_SendCommand>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	e000      	b.n	8001cc8 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001cc6:	2300      	movs	r3, #0
  }
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	24000244 	.word	0x24000244

08001cd4 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MT48LC4M32B2_Precharge+0x44>)
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <MT48LC4M32B2_Precharge+0x44>)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MT48LC4M32B2_Precharge+0x44>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MT48LC4M32B2_Precharge+0x44>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfa:	4907      	ldr	r1, [pc, #28]	; (8001d18 <MT48LC4M32B2_Precharge+0x44>)
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f007 ff99 	bl	8009c34 <HAL_SDRAM_SendCommand>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	e000      	b.n	8001d10 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001d0e:	2300      	movs	r3, #0
  }
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	24000244 	.word	0x24000244

08001d1c <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001d2e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8001d34:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8001d3a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001d46:	2204      	movs	r2, #4
 8001d48:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001d50:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001d58:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d62:	4907      	ldr	r1, [pc, #28]	; (8001d80 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f007 ff65 	bl	8009c34 <HAL_SDRAM_SendCommand>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
 8001d74:	e000      	b.n	8001d78 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001d76:	2300      	movs	r3, #0
  }
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	24000244 	.word	0x24000244

08001d84 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <MT48LC4M32B2_RefreshMode+0x48>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8001d96:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <MT48LC4M32B2_RefreshMode+0x48>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <MT48LC4M32B2_RefreshMode+0x48>)
 8001d9e:	2208      	movs	r2, #8
 8001da0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <MT48LC4M32B2_RefreshMode+0x48>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <MT48LC4M32B2_RefreshMode+0x48>)
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f007 ff40 	bl	8009c34 <HAL_SDRAM_SendCommand>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	e000      	b.n	8001dc2 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001dc0:	2300      	movs	r3, #0
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	24000244 	.word	0x24000244

08001dd0 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f007 ff5e 	bl	8009c9e <HAL_SDRAM_ProgramRefreshRate>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	e000      	b.n	8001df0 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001dee:	2300      	movs	r3, #0
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8001e00:	f001 fe48 	bl	8003a94 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8001e06:	bf00      	nop
 8001e08:	f001 fe44 	bl	8003a94 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10f      	bne.n	8001e58 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 8001e38:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <BSP_LED_Init+0xb0>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3e:	4a25      	ldr	r2, [pc, #148]	; (8001ed4 <BSP_LED_Init+0xb0>)
 8001e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e48:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <BSP_LED_Init+0xb0>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	e015      	b.n	8001e84 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10f      	bne.n	8001e7e <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <BSP_LED_Init+0xb0>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e64:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <BSP_LED_Init+0xb0>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e6e:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <BSP_LED_Init+0xb0>)
 8001e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	e002      	b.n	8001e84 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e7e:	f06f 0301 	mvn.w	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <BSP_LED_Init+0xb4>)
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <BSP_LED_Init+0xb8>)
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	f107 0210 	add.w	r2, r7, #16
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 ff17 	bl	8005cdc <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <BSP_LED_Init+0xb8>)
 8001eb2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <BSP_LED_Init+0xb4>)
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f004 f8d2 	bl	800606c <HAL_GPIO_WritePin>
  return ret;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	58024400 	.word	0x58024400
 8001ed8:	0800f53c 	.word	0x0800f53c
 8001edc:	24000024 	.word	0x24000024

08001ee0 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <BSP_LED_On+0x34>)
 8001ef2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <BSP_LED_On+0x38>)
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	f004 f8b2 	bl	800606c <HAL_GPIO_WritePin>
  return ret;
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	24000024 	.word	0x24000024
 8001f18:	0800f53c 	.word	0x0800f53c

08001f1c <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <BSP_LED_Off+0x34>)
 8001f2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <BSP_LED_Off+0x38>)
 8001f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f004 f894 	bl	800606c <HAL_GPIO_WritePin>
  return ret;
 8001f44:	68fb      	ldr	r3, [r7, #12]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	24000024 	.word	0x24000024
 8001f54:	0800f53c 	.word	0x0800f53c

08001f58 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	460a      	mov	r2, r1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	4613      	mov	r3, r2
 8001f66:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <BSP_PB_Init+0xcc>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <BSP_PB_Init+0xcc>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <BSP_PB_Init+0xcc>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10c      	bne.n	8001fb4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	4a21      	ldr	r2, [pc, #132]	; (8002028 <BSP_PB_Init+0xd0>)
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	f107 020c 	add.w	r2, r7, #12
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fe95 	bl	8005cdc <HAL_GPIO_Init>
 8001fb2:	e031      	b.n	8002018 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001fb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fb8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	4a1a      	ldr	r2, [pc, #104]	; (8002028 <BSP_PB_Init+0xd0>)
 8001fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc2:	f107 020c 	add.w	r2, r7, #12
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 fe87 	bl	8005cdc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4a16      	ldr	r2, [pc, #88]	; (800202c <BSP_PB_Init+0xd4>)
 8001fd4:	441a      	add	r2, r3
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4915      	ldr	r1, [pc, #84]	; (8002030 <BSP_PB_Init+0xd8>)
 8001fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f003 fe36 	bl	8005c52 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <BSP_PB_Init+0xd4>)
 8001fec:	1898      	adds	r0, r3, r2
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4a10      	ldr	r2, [pc, #64]	; (8002034 <BSP_PB_Init+0xdc>)
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f003 fe0b 	bl	8005c14 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001ffe:	2028      	movs	r0, #40	; 0x28
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <BSP_PB_Init+0xe0>)
 8002004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002008:	2200      	movs	r2, #0
 800200a:	4619      	mov	r1, r3
 800200c:	f001 fe69 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002010:	2328      	movs	r3, #40	; 0x28
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fe7f 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	58024400 	.word	0x58024400
 8002028:	2400002c 	.word	0x2400002c
 800202c:	24000254 	.word	0x24000254
 8002030:	0800f544 	.word	0x0800f544
 8002034:	24000030 	.word	0x24000030
 8002038:	24000034 	.word	0x24000034

0800203c <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	4a06      	ldr	r2, [pc, #24]	; (8002064 <BSP_PB_GetState+0x28>)
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fff1 	bl	800603c <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2400002c 	.word	0x2400002c

08002068 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4a04      	ldr	r2, [pc, #16]	; (8002088 <BSP_PB_IRQHandler+0x20>)
 8002078:	4413      	add	r3, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f003 fdfe 	bl	8005c7c <HAL_EXTI_IRQHandler>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	24000254 	.word	0x24000254

0800208c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002090:	2000      	movs	r0, #0
 8002092:	f7fe fe09 	bl	8000ca8 <BSP_PB_Callback>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 80020ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fbaf 	bl	8004814 <HAL_DMA_IRQHandler>
  }
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2400025c 	.word	0x2400025c

080020c4 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b30      	cmp	r3, #48	; 0x30
 80020d2:	d002      	beq.n	80020da <BSP_AUDIO_IN_IRQHandler+0x16>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 80020dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fb97 	bl	8004814 <HAL_DMA_IRQHandler>
  }

}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	240002f4 	.word	0x240002f4

080020f4 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <BSP_I2C4_Init+0x64>)
 8002100:	4a16      	ldr	r2, [pc, #88]	; (800215c <BSP_I2C4_Init+0x68>)
 8002102:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <BSP_I2C4_Init+0x6c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11f      	bne.n	800214c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <BSP_I2C4_Init+0x6c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	3301      	adds	r3, #1
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <BSP_I2C4_Init+0x6c>)
 8002114:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002116:	4810      	ldr	r0, [pc, #64]	; (8002158 <BSP_I2C4_Init+0x64>)
 8002118:	f004 f976 	bl	8006408 <HAL_I2C_GetState>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d114      	bne.n	800214c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <BSP_I2C4_Init+0x64>)
 8002124:	f000 fb06 	bl	8002734 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002128:	f006 f9ba 	bl	80084a0 <HAL_RCC_GetPCLK2Freq>
 800212c:	4603      	mov	r3, r0
 800212e:	490d      	ldr	r1, [pc, #52]	; (8002164 <BSP_I2C4_Init+0x70>)
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f889 	bl	8002248 <I2C_GetTiming>
 8002136:	4603      	mov	r3, r0
 8002138:	4619      	mov	r1, r3
 800213a:	4807      	ldr	r0, [pc, #28]	; (8002158 <BSP_I2C4_Init+0x64>)
 800213c:	f000 f814 	bl	8002168 <MX_I2C4_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002146:	f06f 0307 	mvn.w	r3, #7
 800214a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	24000d94 	.word	0x24000d94
 800215c:	58001c00 	.word	0x58001c00
 8002160:	2400038c 	.word	0x2400038c
 8002164:	000186a0 	.word	0x000186a0

08002168 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f003 ff7a 	bl	80060a0 <HAL_I2C_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	e014      	b.n	80021e2 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f004 fba0 	bl	8006904 <HAL_I2CEx_ConfigAnalogFilter>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e008      	b.n	80021e2 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80021d0:	2100      	movs	r1, #0
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f004 fbe1 	bl	800699a <HAL_I2CEx_ConfigDigitalFilter>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60ba      	str	r2, [r7, #8]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	81fb      	strh	r3, [r7, #14]
 80021fa:	460b      	mov	r3, r1
 80021fc:	81bb      	strh	r3, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002202:	89b9      	ldrh	r1, [r7, #12]
 8002204:	89f8      	ldrh	r0, [r7, #14]
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2201      	movs	r2, #1
 800220e:	f000 fafd 	bl	800280c <I2C4_ReadReg>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e00c      	b.n	8002238 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800221e:	4809      	ldr	r0, [pc, #36]	; (8002244 <BSP_I2C4_ReadReg+0x58>)
 8002220:	f004 f900 	bl	8006424 <HAL_I2C_GetError>
 8002224:	4603      	mov	r3, r0
 8002226:	2b04      	cmp	r3, #4
 8002228:	d103      	bne.n	8002232 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800222a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	e002      	b.n	8002238 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002232:	f06f 0303 	mvn.w	r3, #3
 8002236:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002238:	697b      	ldr	r3, [r7, #20]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	24000d94 	.word	0x24000d94

08002248 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d06b      	beq.n	8002334 <I2C_GetTiming+0xec>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d068      	beq.n	8002334 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e060      	b.n	800232a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002268:	4a35      	ldr	r2, [pc, #212]	; (8002340 <I2C_GetTiming+0xf8>)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d352      	bcc.n	8002324 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800227e:	4a30      	ldr	r2, [pc, #192]	; (8002340 <I2C_GetTiming+0xf8>)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	3308      	adds	r3, #8
 800228c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d847      	bhi.n	8002324 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f856 	bl	8002348 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800229c:	6939      	ldr	r1, [r7, #16]
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f940 	bl	8002524 <I2C_Compute_SCLL_SCLH>
 80022a4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b7f      	cmp	r3, #127	; 0x7f
 80022aa:	d842      	bhi.n	8002332 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80022ac:	4925      	ldr	r1, [pc, #148]	; (8002344 <I2C_GetTiming+0xfc>)
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80022be:	4821      	ldr	r0, [pc, #132]	; (8002344 <I2C_GetTiming+0xfc>)
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4403      	add	r3, r0
 80022cc:	3304      	adds	r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	051b      	lsls	r3, r3, #20
 80022d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80022d6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80022d8:	481a      	ldr	r0, [pc, #104]	; (8002344 <I2C_GetTiming+0xfc>)
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4403      	add	r3, r0
 80022e6:	3308      	adds	r3, #8
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80022f0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80022f2:	4814      	ldr	r0, [pc, #80]	; (8002344 <I2C_GetTiming+0xfc>)
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4403      	add	r3, r0
 8002300:	330c      	adds	r3, #12
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002308:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800230a:	480e      	ldr	r0, [pc, #56]	; (8002344 <I2C_GetTiming+0xfc>)
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4403      	add	r3, r0
 8002318:	3310      	adds	r3, #16
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800231e:	430b      	orrs	r3, r1
 8002320:	617b      	str	r3, [r7, #20]
        }
        break;
 8002322:	e006      	b.n	8002332 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3301      	adds	r3, #1
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d99b      	bls.n	8002268 <I2C_GetTiming+0x20>
 8002330:	e000      	b.n	8002334 <I2C_GetTiming+0xec>
        break;
 8002332:	bf00      	nop
      }
    }
  }

  return ret;
 8002334:	697b      	ldr	r3, [r7, #20]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	0800f548 	.word	0x0800f548
 8002344:	24000390 	.word	0x24000390

08002348 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002348:	b480      	push	{r7}
 800234a:	b08f      	sub	sp, #60	; 0x3c
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002352:	2310      	movs	r3, #16
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	085a      	lsrs	r2, r3, #1
 800235a:	4b6e      	ldr	r3, [pc, #440]	; (8002514 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800235c:	4413      	add	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	fbb3 f3f2 	udiv	r3, r3, r2
 8002364:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002366:	2332      	movs	r3, #50	; 0x32
 8002368:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800236a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800236e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002370:	4a69      	ldr	r2, [pc, #420]	; (8002518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	3324      	adds	r3, #36	; 0x24
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	4a65      	ldr	r2, [pc, #404]	; (8002518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	330c      	adds	r3, #12
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002394:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002396:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002398:	495f      	ldr	r1, [pc, #380]	; (8002518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	202c      	movs	r0, #44	; 0x2c
 800239e:	fb00 f303 	mul.w	r3, r0, r3
 80023a2:	440b      	add	r3, r1
 80023a4:	3328      	adds	r3, #40	; 0x28
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	3303      	adds	r3, #3
 80023aa:	69f9      	ldr	r1, [r7, #28]
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3310      	adds	r3, #16
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	4a54      	ldr	r2, [pc, #336]	; (8002518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3320      	adds	r3, #32
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80023d8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80023da:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80023dc:	494e      	ldr	r1, [pc, #312]	; (8002518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	202c      	movs	r0, #44	; 0x2c
 80023e2:	fb00 f303 	mul.w	r3, r0, r3
 80023e6:	440b      	add	r3, r1
 80023e8:	3328      	adds	r3, #40	; 0x28
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3304      	adds	r3, #4
 80023ee:	69f9      	ldr	r1, [r7, #28]
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80023f8:	4a47      	ldr	r2, [pc, #284]	; (8002518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3320      	adds	r3, #32
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	4a43      	ldr	r2, [pc, #268]	; (8002518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3314      	adds	r3, #20
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4403      	add	r3, r0
 800241c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	2b00      	cmp	r3, #0
 8002422:	dc01      	bgt.n	8002428 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	2b00      	cmp	r3, #0
 800242c:	dc01      	bgt.n	8002432 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002432:	2300      	movs	r3, #0
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	e062      	b.n	80024fe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
 800243c:	e059      	b.n	80024f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	3301      	adds	r3, #1
 8002442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002444:	3201      	adds	r2, #1
 8002446:	fb03 f202 	mul.w	r2, r3, r2
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	429a      	cmp	r2, r3
 8002458:	d348      	bcc.n	80024ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	e042      	b.n	80024e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	3301      	adds	r3, #1
 8002464:	6a3a      	ldr	r2, [r7, #32]
 8002466:	fb03 f202 	mul.w	r2, r3, r2
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d332      	bcc.n	80024e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	429a      	cmp	r2, r3
 8002480:	d82e      	bhi.n	80024e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	429a      	cmp	r2, r3
 8002488:	d02a      	beq.n	80024e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4924      	ldr	r1, [pc, #144]	; (8002520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800249c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800249e:	4b1f      	ldr	r3, [pc, #124]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	491f      	ldr	r1, [pc, #124]	; (8002520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3304      	adds	r3, #4
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4919      	ldr	r1, [pc, #100]	; (8002520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3308      	adds	r3, #8
 80024c6:	6a3a      	ldr	r2, [r7, #32]
 80024c8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024d6:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b7f      	cmp	r3, #127	; 0x7f
 80024de:	d812      	bhi.n	8002506 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	3301      	adds	r3, #1
 80024e4:	623b      	str	r3, [r7, #32]
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	2b0f      	cmp	r3, #15
 80024ea:	d9b9      	bls.n	8002460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	3301      	adds	r3, #1
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d9a2      	bls.n	800243e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	3301      	adds	r3, #1
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d999      	bls.n	8002438 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002504:	e000      	b.n	8002508 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002506:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002508:	373c      	adds	r7, #60	; 0x3c
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	3b9aca00 	.word	0x3b9aca00
 8002518:	0800f548 	.word	0x0800f548
 800251c:	24000d90 	.word	0x24000d90
 8002520:	24000390 	.word	0x24000390

08002524 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002524:	b480      	push	{r7}
 8002526:	b093      	sub	sp, #76	; 0x4c
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	085a      	lsrs	r2, r3, #1
 8002538:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <I2C_Compute_SCLL_SCLH+0x200>)
 800253a:	4413      	add	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002544:	4a78      	ldr	r2, [pc, #480]	; (8002728 <I2C_Compute_SCLL_SCLH+0x204>)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	085a      	lsrs	r2, r3, #1
 8002554:	4b73      	ldr	r3, [pc, #460]	; (8002724 <I2C_Compute_SCLL_SCLH+0x200>)
 8002556:	4413      	add	r3, r2
 8002558:	4973      	ldr	r1, [pc, #460]	; (8002728 <I2C_Compute_SCLL_SCLH+0x204>)
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	202c      	movs	r0, #44	; 0x2c
 800255e:	fb00 f202 	mul.w	r2, r0, r2
 8002562:	440a      	add	r2, r1
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	fbb3 f3f2 	udiv	r3, r3, r2
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800256c:	2332      	movs	r3, #50	; 0x32
 800256e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002570:	4a6d      	ldr	r2, [pc, #436]	; (8002728 <I2C_Compute_SCLL_SCLH+0x204>)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3328      	adds	r3, #40	; 0x28
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002588:	4a67      	ldr	r2, [pc, #412]	; (8002728 <I2C_Compute_SCLL_SCLH+0x204>)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3304      	adds	r3, #4
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a62      	ldr	r2, [pc, #392]	; (8002724 <I2C_Compute_SCLL_SCLH+0x200>)
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80025a0:	4a61      	ldr	r2, [pc, #388]	; (8002728 <I2C_Compute_SCLL_SCLH+0x204>)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3308      	adds	r3, #8
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <I2C_Compute_SCLL_SCLH+0x200>)
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
 80025c0:	e0a3      	b.n	800270a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80025c2:	495a      	ldr	r1, [pc, #360]	; (800272c <I2C_Compute_SCLL_SCLH+0x208>)
 80025c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80025dc:	2300      	movs	r3, #0
 80025de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e0:	e08c      	b.n	80026fc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80025e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	441a      	add	r2, r3
 80025e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ea:	3301      	adds	r3, #1
 80025ec:	6979      	ldr	r1, [r7, #20]
 80025ee:	fb03 f101 	mul.w	r1, r3, r1
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	4413      	add	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80025fc:	4a4a      	ldr	r2, [pc, #296]	; (8002728 <I2C_Compute_SCLL_SCLH+0x204>)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3318      	adds	r3, #24
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	429a      	cmp	r2, r3
 8002610:	d971      	bls.n	80026f6 <I2C_Compute_SCLL_SCLH+0x1d2>
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	1ad2      	subs	r2, r2, r3
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002620:	429a      	cmp	r2, r3
 8002622:	d268      	bcs.n	80026f6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002624:	2300      	movs	r3, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
 8002628:	e062      	b.n	80026f0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	441a      	add	r2, r3
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	3301      	adds	r3, #1
 8002634:	6979      	ldr	r1, [r7, #20]
 8002636:	fb03 f101 	mul.w	r1, r3, r1
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	440b      	add	r3, r1
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	441a      	add	r2, r3
 800264a:	4937      	ldr	r1, [pc, #220]	; (8002728 <I2C_Compute_SCLL_SCLH+0x204>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	202c      	movs	r0, #44	; 0x2c
 8002650:	fb00 f303 	mul.w	r3, r0, r3
 8002654:	440b      	add	r3, r1
 8002656:	3320      	adds	r3, #32
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	441a      	add	r2, r3
 800265c:	4932      	ldr	r1, [pc, #200]	; (8002728 <I2C_Compute_SCLL_SCLH+0x204>)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	202c      	movs	r0, #44	; 0x2c
 8002662:	fb00 f303 	mul.w	r3, r0, r3
 8002666:	440b      	add	r3, r1
 8002668:	3324      	adds	r3, #36	; 0x24
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4413      	add	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	429a      	cmp	r2, r3
 8002676:	d338      	bcc.n	80026ea <I2C_Compute_SCLL_SCLH+0x1c6>
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	429a      	cmp	r2, r3
 800267e:	d834      	bhi.n	80026ea <I2C_Compute_SCLL_SCLH+0x1c6>
 8002680:	4a29      	ldr	r2, [pc, #164]	; (8002728 <I2C_Compute_SCLL_SCLH+0x204>)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	331c      	adds	r3, #28
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	429a      	cmp	r2, r3
 8002694:	d329      	bcc.n	80026ea <I2C_Compute_SCLL_SCLH+0x1c6>
 8002696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	429a      	cmp	r2, r3
 800269c:	d225      	bcs.n	80026ea <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da02      	bge.n	80026b2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	425b      	negs	r3, r3
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d917      	bls.n	80026ea <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80026be:	491b      	ldr	r1, [pc, #108]	; (800272c <I2C_Compute_SCLL_SCLH+0x208>)
 80026c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3310      	adds	r3, #16
 80026ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80026d2:	4916      	ldr	r1, [pc, #88]	; (800272c <I2C_Compute_SCLL_SCLH+0x208>)
 80026d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	330c      	adds	r3, #12
 80026e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e4:	601a      	str	r2, [r3, #0]
              ret = count;
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	3301      	adds	r3, #1
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f2:	2bff      	cmp	r3, #255	; 0xff
 80026f4:	d999      	bls.n	800262a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80026f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f8:	3301      	adds	r3, #1
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fe:	2bff      	cmp	r3, #255	; 0xff
 8002700:	f67f af6f 	bls.w	80025e2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	3301      	adds	r3, #1
 8002708:	637b      	str	r3, [r7, #52]	; 0x34
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <I2C_Compute_SCLL_SCLH+0x20c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002710:	429a      	cmp	r2, r3
 8002712:	f4ff af56 	bcc.w	80025c2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002718:	4618      	mov	r0, r3
 800271a:	374c      	adds	r7, #76	; 0x4c
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	3b9aca00 	.word	0x3b9aca00
 8002728:	0800f548 	.word	0x0800f548
 800272c:	24000390 	.word	0x24000390
 8002730:	24000d90 	.word	0x24000d90

08002734 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800273c:	4b31      	ldr	r3, [pc, #196]	; (8002804 <I2C4_MspInit+0xd0>)
 800273e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002742:	4a30      	ldr	r2, [pc, #192]	; (8002804 <I2C4_MspInit+0xd0>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <I2C4_MspInit+0xd0>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800275a:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <I2C4_MspInit+0xd0>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002760:	4a28      	ldr	r2, [pc, #160]	; (8002804 <I2C4_MspInit+0xd0>)
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <I2C4_MspInit+0xd0>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800277e:	2312      	movs	r3, #18
 8002780:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002786:	2302      	movs	r3, #2
 8002788:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800278a:	2304      	movs	r3, #4
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	481c      	ldr	r0, [pc, #112]	; (8002808 <I2C4_MspInit+0xd4>)
 8002796:	f003 faa1 	bl	8005cdc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800279a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80027a0:	2312      	movs	r3, #18
 80027a2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80027a8:	2302      	movs	r3, #2
 80027aa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80027ac:	2304      	movs	r3, #4
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4814      	ldr	r0, [pc, #80]	; (8002808 <I2C4_MspInit+0xd4>)
 80027b8:	f003 fa90 	bl	8005cdc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <I2C4_MspInit+0xd0>)
 80027be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <I2C4_MspInit+0xd0>)
 80027c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <I2C4_MspInit+0xd0>)
 80027ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <I2C4_MspInit+0xd0>)
 80027dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027e0:	4a08      	ldr	r2, [pc, #32]	; (8002804 <I2C4_MspInit+0xd0>)
 80027e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <I2C4_MspInit+0xd0>)
 80027ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <I2C4_MspInit+0xd0>)
 80027f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80027fa:	bf00      	nop
 80027fc:	3728      	adds	r7, #40	; 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	58024400 	.word	0x58024400
 8002808:	58020c00 	.word	0x58020c00

0800280c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af04      	add	r7, sp, #16
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	4603      	mov	r3, r0
 8002816:	81fb      	strh	r3, [r7, #14]
 8002818:	460b      	mov	r3, r1
 800281a:	81bb      	strh	r3, [r7, #12]
 800281c:	4613      	mov	r3, r2
 800281e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002820:	8978      	ldrh	r0, [r7, #10]
 8002822:	89ba      	ldrh	r2, [r7, #12]
 8002824:	89f9      	ldrh	r1, [r7, #14]
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	8b3b      	ldrh	r3, [r7, #24]
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	4603      	mov	r3, r0
 8002836:	4807      	ldr	r0, [pc, #28]	; (8002854 <I2C4_ReadReg+0x48>)
 8002838:	f003 fccc 	bl	80061d4 <HAL_I2C_Mem_Read>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002842:	2300      	movs	r3, #0
 8002844:	e001      	b.n	800284a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002846:	f06f 0307 	mvn.w	r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	24000d94 	.word	0x24000d94

08002858 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af02      	add	r7, sp, #8
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002862:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800286c:	2200      	movs	r2, #0
 800286e:	6839      	ldr	r1, [r7, #0]
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f805 	bl	8002880 <BSP_LCD_InitEx>
 8002876:	4603      	mov	r3, r0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b09e      	sub	sp, #120	; 0x78
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800288e:	2300      	movs	r3, #0
 8002890:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d808      	bhi.n	80028ae <BSP_LCD_InitEx+0x2e>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <BSP_LCD_InitEx+0x2e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d006      	beq.n	80028b6 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028ae:	f06f 0301 	mvn.w	r3, #1
 80028b2:	677b      	str	r3, [r7, #116]	; 0x74
 80028b4:	e0a8      	b.n	8002a08 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d109      	bne.n	80028d0 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80028bc:	2302      	movs	r3, #2
 80028be:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 80028c0:	4a54      	ldr	r2, [pc, #336]	; (8002a14 <BSP_LCD_InitEx+0x194>)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	015b      	lsls	r3, r3, #5
 80028c6:	4413      	add	r3, r2
 80028c8:	3310      	adds	r3, #16
 80028ca:	2202      	movs	r2, #2
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e008      	b.n	80028e2 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80028d0:	2300      	movs	r3, #0
 80028d2:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 80028d4:	4a4f      	ldr	r2, [pc, #316]	; (8002a14 <BSP_LCD_InitEx+0x194>)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015b      	lsls	r3, r3, #5
 80028da:	4413      	add	r3, r2
 80028dc:	3310      	adds	r3, #16
 80028de:	2204      	movs	r2, #4
 80028e0:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80028e2:	4a4c      	ldr	r2, [pc, #304]	; (8002a14 <BSP_LCD_InitEx+0x194>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015b      	lsls	r3, r3, #5
 80028e8:	4413      	add	r3, r2
 80028ea:	330c      	adds	r3, #12
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80028f0:	4a48      	ldr	r2, [pc, #288]	; (8002a14 <BSP_LCD_InitEx+0x194>)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	015b      	lsls	r3, r3, #5
 80028f6:	4413      	add	r3, r2
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80028fc:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <BSP_LCD_InitEx+0x194>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015b      	lsls	r3, r3, #5
 8002902:	4413      	add	r3, r2
 8002904:	3304      	adds	r3, #4
 8002906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800290a:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 800290c:	4b42      	ldr	r3, [pc, #264]	; (8002a18 <BSP_LCD_InitEx+0x198>)
 800290e:	4a43      	ldr	r2, [pc, #268]	; (8002a1c <BSP_LCD_InitEx+0x19c>)
 8002910:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8002912:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <BSP_LCD_InitEx+0x1a0>)
 8002914:	4a43      	ldr	r2, [pc, #268]	; (8002a24 <BSP_LCD_InitEx+0x1a4>)
 8002916:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8002918:	483f      	ldr	r0, [pc, #252]	; (8002a18 <BSP_LCD_InitEx+0x198>)
 800291a:	f000 fd1b 	bl	8003354 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 800291e:	4840      	ldr	r0, [pc, #256]	; (8002a20 <BSP_LCD_InitEx+0x1a0>)
 8002920:	f000 fde4 	bl	80034ec <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8002924:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <BSP_LCD_InitEx+0x1a8>)
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8002928:	4b40      	ldr	r3, [pc, #256]	; (8002a2c <BSP_LCD_InitEx+0x1ac>)
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 800292c:	2370      	movs	r3, #112	; 0x70
 800292e:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8002930:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002934:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f8ae 	bl	8001a9c <FT5336_RegisterBusIO>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	da03      	bge.n	800294e <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002946:	f06f 0304 	mvn.w	r3, #4
 800294a:	677b      	str	r3, [r7, #116]	; 0x74
 800294c:	e02b      	b.n	80029a6 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 800294e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002952:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff f8e1 	bl	8001b20 <FT5336_ReadID>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	da03      	bge.n	800296c <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002964:	f06f 0304 	mvn.w	r3, #4
 8002968:	677b      	str	r3, [r7, #116]	; 0x74
 800296a:	e01c      	b.n	80029a6 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 800296c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296e:	2b51      	cmp	r3, #81	; 0x51
 8002970:	d003      	beq.n	800297a <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002972:	f06f 0306 	mvn.w	r3, #6
 8002976:	677b      	str	r3, [r7, #116]	; 0x74
 8002978:	e015      	b.n	80029a6 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800297a:	4827      	ldr	r0, [pc, #156]	; (8002a18 <BSP_LCD_InitEx+0x198>)
 800297c:	f000 f8e8 	bl	8002b50 <MX_LTDC_ClockConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002986:	f06f 0303 	mvn.w	r3, #3
 800298a:	677b      	str	r3, [r7, #116]	; 0x74
 800298c:	e00b      	b.n	80029a6 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800298e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	4820      	ldr	r0, [pc, #128]	; (8002a18 <BSP_LCD_InitEx+0x198>)
 8002996:	f000 f84d 	bl	8002a34 <MX_LTDC_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80029a0:	f06f 0303 	mvn.w	r3, #3
 80029a4:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 80029a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d12d      	bne.n	8002a08 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80029ac:	2000      	movs	r0, #0
 80029ae:	f000 fe2f 	bl	8003610 <BSP_SDRAM_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80029b8:	f06f 0303 	mvn.w	r3, #3
 80029bc:	e025      	b.n	8002a0a <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 80029ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029ce:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 80029d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 80029d4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	461a      	mov	r2, r3
 80029e0:	2100      	movs	r1, #0
 80029e2:	480d      	ldr	r0, [pc, #52]	; (8002a18 <BSP_LCD_InitEx+0x198>)
 80029e4:	f000 f872 	bl	8002acc <MX_LTDC_ConfigLayer>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80029ee:	f06f 0303 	mvn.w	r3, #3
 80029f2:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 80029f4:	480e      	ldr	r0, [pc, #56]	; (8002a30 <BSP_LCD_InitEx+0x1b0>)
 80029f6:	f000 fde1 	bl	80035bc <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 80029fa:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <BSP_LCD_InitEx+0x194>)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015b      	lsls	r3, r3, #5
 8002a00:	4413      	add	r3, r2
 8002a02:	3318      	adds	r3, #24
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 8002a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3778      	adds	r7, #120	; 0x78
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	24000f44 	.word	0x24000f44
 8002a18:	24000e9c 	.word	0x24000e9c
 8002a1c:	50001000 	.word	0x50001000
 8002a20:	24000e34 	.word	0x24000e34
 8002a24:	52001000 	.word	0x52001000
 8002a28:	080020f5 	.word	0x080020f5
 8002a2c:	080021ed 	.word	0x080021ed
 8002a30:	24000de8 	.word	0x24000de8

08002a34 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <MX_LTDC_Init+0x94>)
 8002a44:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2228      	movs	r2, #40	; 0x28
 8002a62:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	222a      	movs	r2, #42	; 0x2a
 8002a68:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2209      	movs	r2, #9
 8002a82:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	220b      	movs	r2, #11
 8002a88:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f103 020b 	add.w	r2, r3, #11
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f103 020d 	add.w	r2, r3, #13
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	22ff      	movs	r2, #255	; 0xff
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	22ff      	movs	r2, #255	; 0xff
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	22ff      	movs	r2, #255	; 0xff
 8002ab2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f003 ffbc 	bl	8006a34 <HAL_LTDC_Init>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	50001000 	.word	0x50001000

08002acc <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b092      	sub	sp, #72	; 0x48
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 8002af6:	23ff      	movs	r3, #255	; 0xff
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002afe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002b04:	2307      	movs	r3, #7
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f004 f851 	bl	8006be8 <HAL_LTDC_ConfigLayer>
 8002b46:	4603      	mov	r3, r0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3748      	adds	r7, #72	; 0x48
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b0b2      	sub	sp, #200	; 0xc8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8002b58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002b64:	2305      	movs	r3, #5
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8002b68:	23a0      	movs	r3, #160	; 0xa0
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002b70:	2302      	movs	r3, #2
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002b74:	2353      	movs	r3, #83	; 0x53
 8002b76:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002b80:	f107 0308 	add.w	r3, r7, #8
 8002b84:	4618      	mov	r0, r3
 8002b86:	f005 fca1 	bl	80084cc <HAL_RCCEx_PeriphCLKConfig>
 8002b8a:	4603      	mov	r3, r0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	37c8      	adds	r7, #200	; 0xc8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ba8:	f06f 0301 	mvn.w	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	e007      	b.n	8002bc0 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002bb0:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <BSP_LCD_GetPixelFormat+0x3c>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	015b      	lsls	r3, r3, #5
 8002bb6:	4413      	add	r3, r2
 8002bb8:	330c      	adds	r3, #12
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	24000f44 	.word	0x24000f44

08002bd4 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002be8:	f06f 0301 	mvn.w	r3, #1
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e006      	b.n	8002bfe <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8002bf0:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <BSP_LCD_SetActiveLayer+0x38>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	015b      	lsls	r3, r3, #5
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	24000f44 	.word	0x24000f44

08002c10 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c24:	f06f 0301 	mvn.w	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e006      	b.n	8002c3a <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002c2c:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <BSP_LCD_GetXSize+0x38>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	015b      	lsls	r3, r3, #5
 8002c32:	4413      	add	r3, r2
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	24000f44 	.word	0x24000f44

08002c4c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c60:	f06f 0301 	mvn.w	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e007      	b.n	8002c78 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8002c68:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <BSP_LCD_GetYSize+0x3c>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	015b      	lsls	r3, r3, #5
 8002c6e:	4413      	add	r3, r2
 8002c70:	3304      	adds	r3, #4
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002c78:	68fb      	ldr	r3, [r7, #12]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	24000f44 	.word	0x24000f44

08002c8c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	330a      	adds	r3, #10
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	330b      	adds	r3, #11
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	441a      	add	r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	441a      	add	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	330d      	adds	r3, #13
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	061b      	lsls	r3, r3, #24
 8002cc2:	4413      	add	r3, r2
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3312      	adds	r3, #18
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	3313      	adds	r3, #19
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	441a      	add	r2, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	3314      	adds	r3, #20
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	041b      	lsls	r3, r3, #16
 8002ce0:	441a      	add	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	3315      	adds	r3, #21
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	4413      	add	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	3316      	adds	r3, #22
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	3317      	adds	r3, #23
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	441a      	add	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3318      	adds	r3, #24
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	041b      	lsls	r3, r3, #16
 8002d08:	441a      	add	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	3319      	adds	r3, #25
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	331c      	adds	r3, #28
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	331d      	adds	r3, #29
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	4413      	add	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8002d2a:	4a37      	ldr	r2, [pc, #220]	; (8002e08 <BSP_LCD_DrawBitmap+0x17c>)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	015b      	lsls	r3, r3, #5
 8002d30:	4413      	add	r3, r2
 8002d32:	3308      	adds	r3, #8
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a35      	ldr	r2, [pc, #212]	; (8002e0c <BSP_LCD_DrawBitmap+0x180>)
 8002d38:	2134      	movs	r1, #52	; 0x34
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	335c      	adds	r3, #92	; 0x5c
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4930      	ldr	r1, [pc, #192]	; (8002e08 <BSP_LCD_DrawBitmap+0x17c>)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	015b      	lsls	r3, r3, #5
 8002d4a:	440b      	add	r3, r1
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	fb03 f101 	mul.w	r1, r3, r1
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	440b      	add	r3, r1
 8002d58:	482b      	ldr	r0, [pc, #172]	; (8002e08 <BSP_LCD_DrawBitmap+0x17c>)
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	0149      	lsls	r1, r1, #5
 8002d5e:	4401      	add	r1, r0
 8002d60:	3110      	adds	r1, #16
 8002d62:	6809      	ldr	r1, [r1, #0]
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	3b20      	subs	r3, #32
 8002d70:	2b07      	cmp	r3, #7
 8002d72:	d802      	bhi.n	8002d7a <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	e008      	b.n	8002d8c <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	3b10      	subs	r3, #16
 8002d7e:	2b07      	cmp	r3, #7
 8002d80:	d802      	bhi.n	8002d88 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002d82:	2302      	movs	r3, #2
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	e001      	b.n	8002d8c <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	08d2      	lsrs	r2, r2, #3
 8002d9a:	fb03 f202 	mul.w	r2, r3, r2
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	4413      	add	r3, r2
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	4413      	add	r3, r2
 8002da6:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dac:	e023      	b.n	8002df6 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6a39      	ldr	r1, [r7, #32]
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fa77 	bl	80032ac <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <BSP_LCD_DrawBitmap+0x17c>)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	015b      	lsls	r3, r3, #5
 8002dc4:	4413      	add	r3, r2
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	490f      	ldr	r1, [pc, #60]	; (8002e08 <BSP_LCD_DrawBitmap+0x17c>)
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	0152      	lsls	r2, r2, #5
 8002dce:	440a      	add	r2, r1
 8002dd0:	3210      	adds	r2, #16
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	fb02 f303 	mul.w	r3, r2, r3
 8002dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dda:	4413      	add	r3, r2
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	08db      	lsrs	r3, r3, #3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	425b      	negs	r3, r3
 8002dea:	6a3a      	ldr	r2, [r7, #32]
 8002dec:	4413      	add	r3, r2
 8002dee:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	3301      	adds	r3, #1
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3d7      	bcc.n	8002dae <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3730      	adds	r7, #48	; 0x30
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	24000f44 	.word	0x24000f44
 8002e0c:	24000e9c 	.word	0x24000e9c

08002e10 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e032      	b.n	8002e8e <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e028      	b.n	8002e80 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	3301      	adds	r3, #1
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	3302      	adds	r3, #2
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	3303      	adds	r3, #3
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	061b      	lsls	r3, r3, #24
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	18d1      	adds	r1, r2, r3
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	441a      	add	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f95e 	bl	8003124 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <BSP_LCD_FillRGBRect+0x90>)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	015b      	lsls	r3, r3, #5
 8002e6e:	4413      	add	r3, r2
 8002e70:	3310      	adds	r3, #16
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4413      	add	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d3d2      	bcc.n	8002e2e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3c8      	bcc.n	8002e28 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	24000f44 	.word	0x24000f44

08002ea4 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <BSP_LCD_DrawHLine+0x94>)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	015b      	lsls	r3, r3, #5
 8002eb8:	4413      	add	r3, r2
 8002eba:	3308      	adds	r3, #8
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <BSP_LCD_DrawHLine+0x98>)
 8002ec0:	2134      	movs	r1, #52	; 0x34
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	335c      	adds	r3, #92	; 0x5c
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	491a      	ldr	r1, [pc, #104]	; (8002f38 <BSP_LCD_DrawHLine+0x94>)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	015b      	lsls	r3, r3, #5
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3310      	adds	r3, #16
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4817      	ldr	r0, [pc, #92]	; (8002f38 <BSP_LCD_DrawHLine+0x94>)
 8002eda:	68f9      	ldr	r1, [r7, #12]
 8002edc:	0149      	lsls	r1, r1, #5
 8002ede:	4401      	add	r1, r0
 8002ee0:	6809      	ldr	r1, [r1, #0]
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	fb01 f000 	mul.w	r0, r1, r0
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	4401      	add	r1, r0
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	441a      	add	r2, r3
 8002efa:	490f      	ldr	r1, [pc, #60]	; (8002f38 <BSP_LCD_DrawHLine+0x94>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	015b      	lsls	r3, r3, #5
 8002f00:	440b      	add	r3, r1
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d907      	bls.n	8002f18 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8002f08:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <BSP_LCD_DrawHLine+0x94>)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	015b      	lsls	r3, r3, #5
 8002f0e:	4413      	add	r3, r2
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8002f18:	6979      	ldr	r1, [r7, #20]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2301      	movs	r3, #1
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f956 	bl	80031d8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	24000f44 	.word	0x24000f44
 8002f3c:	24000e9c 	.word	0x24000e9c

08002f40 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002f4e:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <BSP_LCD_DrawVLine+0xa0>)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	015b      	lsls	r3, r3, #5
 8002f54:	4413      	add	r3, r2
 8002f56:	3308      	adds	r3, #8
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <BSP_LCD_DrawVLine+0xa4>)
 8002f5c:	2134      	movs	r1, #52	; 0x34
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	335c      	adds	r3, #92	; 0x5c
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	491d      	ldr	r1, [pc, #116]	; (8002fe0 <BSP_LCD_DrawVLine+0xa0>)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015b      	lsls	r3, r3, #5
 8002f6e:	440b      	add	r3, r1
 8002f70:	3310      	adds	r3, #16
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	481a      	ldr	r0, [pc, #104]	; (8002fe0 <BSP_LCD_DrawVLine+0xa0>)
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	0149      	lsls	r1, r1, #5
 8002f7a:	4401      	add	r1, r0
 8002f7c:	6809      	ldr	r1, [r1, #0]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	fb01 f000 	mul.w	r0, r1, r0
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	4401      	add	r1, r0
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	441a      	add	r2, r3
 8002f96:	4912      	ldr	r1, [pc, #72]	; (8002fe0 <BSP_LCD_DrawVLine+0xa0>)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	015b      	lsls	r3, r3, #5
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d908      	bls.n	8002fb8 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <BSP_LCD_DrawVLine+0xa0>)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	015b      	lsls	r3, r3, #5
 8002fac:	4413      	add	r3, r2
 8002fae:	3304      	adds	r3, #4
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8002fb8:	6979      	ldr	r1, [r7, #20]
 8002fba:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <BSP_LCD_DrawVLine+0xa0>)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015b      	lsls	r3, r3, #5
 8002fc0:	4413      	add	r3, r2
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	6a3a      	ldr	r2, [r7, #32]
 8002fc8:	9201      	str	r2, [sp, #4]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f901 	bl	80031d8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	24000f44 	.word	0x24000f44
 8002fe4:	24000e9c 	.word	0x24000e9c

08002fe8 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002ff6:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <BSP_LCD_FillRect+0x7c>)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3308      	adds	r3, #8
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a19      	ldr	r2, [pc, #100]	; (8003068 <BSP_LCD_FillRect+0x80>)
 8003004:	2134      	movs	r1, #52	; 0x34
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	335c      	adds	r3, #92	; 0x5c
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4914      	ldr	r1, [pc, #80]	; (8003064 <BSP_LCD_FillRect+0x7c>)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	015b      	lsls	r3, r3, #5
 8003016:	440b      	add	r3, r1
 8003018:	3310      	adds	r3, #16
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4811      	ldr	r0, [pc, #68]	; (8003064 <BSP_LCD_FillRect+0x7c>)
 800301e:	68f9      	ldr	r1, [r7, #12]
 8003020:	0149      	lsls	r1, r1, #5
 8003022:	4401      	add	r1, r0
 8003024:	6809      	ldr	r1, [r1, #0]
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	fb01 f000 	mul.w	r0, r1, r0
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	4401      	add	r1, r0
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8003038:	6979      	ldr	r1, [r7, #20]
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <BSP_LCD_FillRect+0x7c>)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	015b      	lsls	r3, r3, #5
 8003040:	4413      	add	r3, r2
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304a:	9201      	str	r2, [sp, #4]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f8c0 	bl	80031d8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	24000f44 	.word	0x24000f44
 8003068:	24000e9c 	.word	0x24000e9c

0800306c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800307a:	4a28      	ldr	r2, [pc, #160]	; (800311c <BSP_LCD_ReadPixel+0xb0>)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	015b      	lsls	r3, r3, #5
 8003080:	4413      	add	r3, r2
 8003082:	3308      	adds	r3, #8
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a26      	ldr	r2, [pc, #152]	; (8003120 <BSP_LCD_ReadPixel+0xb4>)
 8003088:	2134      	movs	r1, #52	; 0x34
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3348      	adds	r3, #72	; 0x48
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11c      	bne.n	80030d2 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003098:	4a20      	ldr	r2, [pc, #128]	; (800311c <BSP_LCD_ReadPixel+0xb0>)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	015b      	lsls	r3, r3, #5
 800309e:	4413      	add	r3, r2
 80030a0:	3308      	adds	r3, #8
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <BSP_LCD_ReadPixel+0xb4>)
 80030a6:	2134      	movs	r1, #52	; 0x34
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	335c      	adds	r3, #92	; 0x5c
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	491a      	ldr	r1, [pc, #104]	; (800311c <BSP_LCD_ReadPixel+0xb0>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	440b      	add	r3, r1
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	fb03 f101 	mul.w	r1, r3, r1
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	440b      	add	r3, r1
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e01d      	b.n	800310e <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 80030d2:	4a12      	ldr	r2, [pc, #72]	; (800311c <BSP_LCD_ReadPixel+0xb0>)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015b      	lsls	r3, r3, #5
 80030d8:	4413      	add	r3, r2
 80030da:	3308      	adds	r3, #8
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <BSP_LCD_ReadPixel+0xb4>)
 80030e0:	2134      	movs	r1, #52	; 0x34
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	335c      	adds	r3, #92	; 0x5c
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	490b      	ldr	r1, [pc, #44]	; (800311c <BSP_LCD_ReadPixel+0xb0>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	015b      	lsls	r3, r3, #5
 80030f2:	440b      	add	r3, r1
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	fb03 f101 	mul.w	r1, r3, r1
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	440b      	add	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	24000f44 	.word	0x24000f44
 8003120:	24000e9c 	.word	0x24000e9c

08003124 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003132:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <BSP_LCD_WritePixel+0xac>)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	015b      	lsls	r3, r3, #5
 8003138:	4413      	add	r3, r2
 800313a:	3308      	adds	r3, #8
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <BSP_LCD_WritePixel+0xb0>)
 8003140:	2134      	movs	r1, #52	; 0x34
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3348      	adds	r3, #72	; 0x48
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11c      	bne.n	800318a <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8003150:	4a1f      	ldr	r2, [pc, #124]	; (80031d0 <BSP_LCD_WritePixel+0xac>)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	015b      	lsls	r3, r3, #5
 8003156:	4413      	add	r3, r2
 8003158:	3308      	adds	r3, #8
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <BSP_LCD_WritePixel+0xb0>)
 800315e:	2134      	movs	r1, #52	; 0x34
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	335c      	adds	r3, #92	; 0x5c
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4919      	ldr	r1, [pc, #100]	; (80031d0 <BSP_LCD_WritePixel+0xac>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	015b      	lsls	r3, r3, #5
 8003170:	440b      	add	r3, r1
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	fb03 f101 	mul.w	r1, r3, r1
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	440b      	add	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	461a      	mov	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	e01b      	b.n	80031c2 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 800318a:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <BSP_LCD_WritePixel+0xac>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	015b      	lsls	r3, r3, #5
 8003190:	4413      	add	r3, r2
 8003192:	3308      	adds	r3, #8
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <BSP_LCD_WritePixel+0xb0>)
 8003198:	2134      	movs	r1, #52	; 0x34
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	335c      	adds	r3, #92	; 0x5c
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	490a      	ldr	r1, [pc, #40]	; (80031d0 <BSP_LCD_WritePixel+0xac>)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	015b      	lsls	r3, r3, #5
 80031aa:	440b      	add	r3, r1
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	fb03 f101 	mul.w	r1, r3, r1
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	440b      	add	r3, r1
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b292      	uxth	r2, r2
 80031c0:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	24000f44 	.word	0x24000f44
 80031d4:	24000e9c 	.word	0x24000e9c

080031d8 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 80031ea:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <LL_FillBuffer+0xc8>)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	015b      	lsls	r3, r3, #5
 80031f0:	4413      	add	r3, r2
 80031f2:	330c      	adds	r3, #12
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d129      	bne.n	800324e <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80031fa:	2302      	movs	r3, #2
 80031fc:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	0adb      	lsrs	r3, r3, #11
 8003202:	f003 021f 	and.w	r2, r3, #31
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	4413      	add	r3, r2
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	3317      	adds	r3, #23
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	0419      	lsls	r1, r3, #16
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800321e:	4613      	mov	r3, r2
 8003220:	01db      	lsls	r3, r3, #7
 8003222:	4413      	add	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	3321      	adds	r3, #33	; 0x21
 800322a:	099b      	lsrs	r3, r3, #6
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	4319      	orrs	r1, r3
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	f003 021f 	and.w	r2, r3, #31
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	3317      	adds	r3, #23
 8003242:	099b      	lsrs	r3, r3, #6
 8003244:	430b      	orrs	r3, r1
 8003246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324a:	613b      	str	r3, [r7, #16]
    break;
 800324c:	e002      	b.n	8003254 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
    break;
 8003252:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <LL_FillBuffer+0xcc>)
 8003256:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800325a:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800325c:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <LL_FillBuffer+0xcc>)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8003262:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <LL_FillBuffer+0xcc>)
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <LL_FillBuffer+0xcc>)
 800326a:	4a0f      	ldr	r2, [pc, #60]	; (80032a8 <LL_FillBuffer+0xd0>)
 800326c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800326e:	480d      	ldr	r0, [pc, #52]	; (80032a4 <LL_FillBuffer+0xcc>)
 8003270:	f002 f9fa 	bl	8005668 <HAL_DMA2D_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10e      	bne.n	8003298 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6939      	ldr	r1, [r7, #16]
 8003284:	4807      	ldr	r0, [pc, #28]	; (80032a4 <LL_FillBuffer+0xcc>)
 8003286:	f002 fa5d 	bl	8005744 <HAL_DMA2D_Start>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003290:	2132      	movs	r1, #50	; 0x32
 8003292:	4804      	ldr	r0, [pc, #16]	; (80032a4 <LL_FillBuffer+0xcc>)
 8003294:	f002 fa81 	bl	800579a <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8003298:	bf00      	nop
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	24000f44 	.word	0x24000f44
 80032a4:	24000e34 	.word	0x24000e34
 80032a8:	52001000 	.word	0x52001000

080032ac <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80032ba:	4a23      	ldr	r2, [pc, #140]	; (8003348 <LL_ConvertLineToRGB+0x9c>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	015b      	lsls	r3, r3, #5
 80032c0:	4413      	add	r3, r2
 80032c2:	330c      	adds	r3, #12
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d102      	bne.n	80032d0 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80032ca:	2302      	movs	r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
    break;
 80032ce:	e002      	b.n	80032d6 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
    break;
 80032d4:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80032d6:	4b1d      	ldr	r3, [pc, #116]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 80032d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032dc:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80032ea:	4b18      	ldr	r3, [pc, #96]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80032f6:	4a15      	ldr	r2, [pc, #84]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 8003304:	4a12      	ldr	r2, [pc, #72]	; (8003350 <LL_ConvertLineToRGB+0xa4>)
 8003306:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003308:	4810      	ldr	r0, [pc, #64]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 800330a:	f002 f9ad 	bl	8005668 <HAL_DMA2D_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d115      	bne.n	8003340 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003314:	2101      	movs	r1, #1
 8003316:	480d      	ldr	r0, [pc, #52]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 8003318:	f002 fb28 	bl	800596c <HAL_DMA2D_ConfigLayer>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10e      	bne.n	8003340 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	2301      	movs	r3, #1
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	4807      	ldr	r0, [pc, #28]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 800332e:	f002 fa09 	bl	8005744 <HAL_DMA2D_Start>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003338:	2132      	movs	r1, #50	; 0x32
 800333a:	4804      	ldr	r0, [pc, #16]	; (800334c <LL_ConvertLineToRGB+0xa0>)
 800333c:	f002 fa2d 	bl	800579a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	24000f44 	.word	0x24000f44
 800334c:	24000e34 	.word	0x24000e34
 8003350:	52001000 	.word	0x52001000

08003354 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a5b      	ldr	r2, [pc, #364]	; (80034d0 <LTDC_MspInit+0x17c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	f040 80b0 	bne.w	80034c8 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003368:	4b5a      	ldr	r3, [pc, #360]	; (80034d4 <LTDC_MspInit+0x180>)
 800336a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800336e:	4a59      	ldr	r2, [pc, #356]	; (80034d4 <LTDC_MspInit+0x180>)
 8003370:	f043 0308 	orr.w	r3, r3, #8
 8003374:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003378:	4b56      	ldr	r3, [pc, #344]	; (80034d4 <LTDC_MspInit+0x180>)
 800337a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	623b      	str	r3, [r7, #32]
 8003384:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003386:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <LTDC_MspInit+0x180>)
 8003388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800338c:	4a51      	ldr	r2, [pc, #324]	; (80034d4 <LTDC_MspInit+0x180>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003396:	4b4f      	ldr	r3, [pc, #316]	; (80034d4 <LTDC_MspInit+0x180>)
 8003398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033a4:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <LTDC_MspInit+0x180>)
 80033a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033aa:	4a4a      	ldr	r2, [pc, #296]	; (80034d4 <LTDC_MspInit+0x180>)
 80033ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b4:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <LTDC_MspInit+0x180>)
 80033b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80033c2:	4b44      	ldr	r3, [pc, #272]	; (80034d4 <LTDC_MspInit+0x180>)
 80033c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c8:	4a42      	ldr	r2, [pc, #264]	; (80034d4 <LTDC_MspInit+0x180>)
 80033ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033d2:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <LTDC_MspInit+0x180>)
 80033d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033e0:	4b3c      	ldr	r3, [pc, #240]	; (80034d4 <LTDC_MspInit+0x180>)
 80033e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e6:	4a3b      	ldr	r2, [pc, #236]	; (80034d4 <LTDC_MspInit+0x180>)
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033f0:	4b38      	ldr	r3, [pc, #224]	; (80034d4 <LTDC_MspInit+0x180>)
 80033f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fe:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <LTDC_MspInit+0x180>)
 8003400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003404:	4a33      	ldr	r2, [pc, #204]	; (80034d4 <LTDC_MspInit+0x180>)
 8003406:	f043 0308 	orr.w	r3, r3, #8
 800340a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800340e:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <LTDC_MspInit+0x180>)
 8003410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 800341c:	f24d 2303 	movw	r3, #53763	; 0xd203
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003422:	2302      	movs	r3, #2
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800342a:	2302      	movs	r3, #2
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800342e:	230e      	movs	r3, #14
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003436:	4619      	mov	r1, r3
 8003438:	4827      	ldr	r0, [pc, #156]	; (80034d8 <LTDC_MspInit+0x184>)
 800343a:	f002 fc4f 	bl	8005cdc <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 800343e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003444:	230e      	movs	r3, #14
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344c:	4619      	mov	r1, r3
 800344e:	4823      	ldr	r0, [pc, #140]	; (80034dc <LTDC_MspInit+0x188>)
 8003450:	f002 fc44 	bl	8005cdc <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003454:	23ff      	movs	r3, #255	; 0xff
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003458:	230e      	movs	r3, #14
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800345c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003460:	4619      	mov	r1, r3
 8003462:	481f      	ldr	r0, [pc, #124]	; (80034e0 <LTDC_MspInit+0x18c>)
 8003464:	f002 fc3a 	bl	8005cdc <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8003468:	f240 2302 	movw	r3, #514	; 0x202
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003476:	2302      	movs	r3, #2
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800347a:	230e      	movs	r3, #14
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800347e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003482:	4619      	mov	r1, r3
 8003484:	4817      	ldr	r0, [pc, #92]	; (80034e4 <LTDC_MspInit+0x190>)
 8003486:	f002 fc29 	bl	8005cdc <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800348e:	2301      	movs	r3, #1
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003496:	4619      	mov	r1, r3
 8003498:	4813      	ldr	r0, [pc, #76]	; (80034e8 <LTDC_MspInit+0x194>)
 800349a:	f002 fc1f 	bl	8005cdc <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800349e:	2201      	movs	r2, #1
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	4811      	ldr	r0, [pc, #68]	; (80034e8 <LTDC_MspInit+0x194>)
 80034a4:	f002 fde2 	bl	800606c <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <LTDC_MspInit+0x180>)
 80034aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ae:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <LTDC_MspInit+0x180>)
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <LTDC_MspInit+0x180>)
 80034ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <LTDC_MspInit+0x180>)
 80034c0:	f023 0308 	bic.w	r3, r3, #8
 80034c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 80034c8:	bf00      	nop
 80034ca:	3738      	adds	r7, #56	; 0x38
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	50001000 	.word	0x50001000
 80034d4:	58024400 	.word	0x58024400
 80034d8:	58022000 	.word	0x58022000
 80034dc:	58022400 	.word	0x58022400
 80034e0:	58022800 	.word	0x58022800
 80034e4:	58021c00 	.word	0x58021c00
 80034e8:	58020c00 	.word	0x58020c00

080034ec <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a11      	ldr	r2, [pc, #68]	; (8003540 <DMA2D_MspInit+0x54>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d11a      	bne.n	8003534 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <DMA2D_MspInit+0x58>)
 8003500:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003504:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <DMA2D_MspInit+0x58>)
 8003506:	f043 0310 	orr.w	r3, r3, #16
 800350a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <DMA2D_MspInit+0x58>)
 8003510:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <DMA2D_MspInit+0x58>)
 800351e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003520:	4a08      	ldr	r2, [pc, #32]	; (8003544 <DMA2D_MspInit+0x58>)
 8003522:	f043 0310 	orr.w	r3, r3, #16
 8003526:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <DMA2D_MspInit+0x58>)
 800352a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352c:	4a05      	ldr	r2, [pc, #20]	; (8003544 <DMA2D_MspInit+0x58>)
 800352e:	f023 0310 	bic.w	r3, r3, #16
 8003532:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	52001000 	.word	0x52001000
 8003544:	58024400 	.word	0x58024400

08003548 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <TIMx_PWM_MspInit+0x6c>)
 8003552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003556:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <TIMx_PWM_MspInit+0x6c>)
 8003558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800355c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <TIMx_PWM_MspInit+0x6c>)
 8003562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <TIMx_PWM_MspInit+0x6c>)
 8003570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003574:	4a0f      	ldr	r2, [pc, #60]	; (80035b4 <TIMx_PWM_MspInit+0x6c>)
 8003576:	f043 0302 	orr.w	r3, r3, #2
 800357a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <TIMx_PWM_MspInit+0x6c>)
 8003580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800358c:	2302      	movs	r3, #2
 800358e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003594:	2301      	movs	r3, #1
 8003596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8003598:	2303      	movs	r3, #3
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 800359c:	2301      	movs	r3, #1
 800359e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	4804      	ldr	r0, [pc, #16]	; (80035b8 <TIMx_PWM_MspInit+0x70>)
 80035a8:	f002 fb98 	bl	8005cdc <HAL_GPIO_Init>
}
 80035ac:	bf00      	nop
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	58024400 	.word	0x58024400
 80035b8:	58022800 	.word	0x58022800

080035bc <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a11      	ldr	r2, [pc, #68]	; (800360c <TIMx_PWM_Init+0x50>)
 80035c8:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f006 fbe6 	bl	8009d9c <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ffb9 	bl	8003548 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2204      	movs	r2, #4
 80035da:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f24c 3250 	movw	r2, #50000	; 0xc350
 80035e2:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f006 fb76 	bl	8009cee <HAL_TIM_PWM_Init>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40010400 	.word	0x40010400

08003610 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8003622:	f06f 0301 	mvn.w	r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e044      	b.n	80036b4 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2234      	movs	r2, #52	; 0x34
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <BSP_SDRAM_Init+0xb0>)
 8003634:	4413      	add	r3, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f8a8 	bl	800378c <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2234      	movs	r2, #52	; 0x34
 8003640:	fb02 f303 	mul.w	r3, r2, r3
 8003644:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <BSP_SDRAM_Init+0xb0>)
 8003646:	4413      	add	r3, r2
 8003648:	2210      	movs	r2, #16
 800364a:	2104      	movs	r1, #4
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f83b 	bl	80036c8 <MX_SDRAM_BANK2_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e029      	b.n	80036b4 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8003660:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <BSP_SDRAM_Init+0xb4>)
 8003662:	2208      	movs	r2, #8
 8003664:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8003666:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <BSP_SDRAM_Init+0xb4>)
 8003668:	2203      	movs	r2, #3
 800366a:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800366c:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <BSP_SDRAM_Init+0xb4>)
 800366e:	f240 6203 	movw	r2, #1539	; 0x603
 8003672:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <BSP_SDRAM_Init+0xb4>)
 8003676:	2200      	movs	r2, #0
 8003678:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800367a:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <BSP_SDRAM_Init+0xb4>)
 800367c:	2200      	movs	r2, #0
 800367e:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8003680:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <BSP_SDRAM_Init+0xb4>)
 8003682:	2230      	movs	r2, #48	; 0x30
 8003684:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <BSP_SDRAM_Init+0xb4>)
 8003688:	2200      	movs	r2, #0
 800368a:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800368c:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <BSP_SDRAM_Init+0xb4>)
 800368e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003692:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2234      	movs	r2, #52	; 0x34
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <BSP_SDRAM_Init+0xb0>)
 800369e:	4413      	add	r3, r2
 80036a0:	4908      	ldr	r1, [pc, #32]	; (80036c4 <BSP_SDRAM_Init+0xb4>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fab3 	bl	8001c0e <MT48LC4M32B2_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80036ae:	f06f 0304 	mvn.w	r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80036b4:	68fb      	ldr	r3, [r7, #12]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	24000f64 	.word	0x24000f64
 80036c4:	24000f98 	.word	0x24000f98

080036c8 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 80036d4:	4b20      	ldr	r3, [pc, #128]	; (8003758 <MX_SDRAM_BANK2_Init+0x90>)
 80036d6:	4a21      	ldr	r2, [pc, #132]	; (800375c <MX_SDRAM_BANK2_Init+0x94>)
 80036d8:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80036f2:	4b19      	ldr	r3, [pc, #100]	; (8003758 <MX_SDRAM_BANK2_Init+0x90>)
 80036f4:	2240      	movs	r2, #64	; 0x40
 80036f6:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80036fe:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800370c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003714:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800371c:	2302      	movs	r3, #2
 800371e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003720:	2307      	movs	r3, #7
 8003722:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003724:	2304      	movs	r3, #4
 8003726:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8003728:	2307      	movs	r3, #7
 800372a:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800372c:	2302      	movs	r3, #2
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8003730:	2302      	movs	r3, #2
 8003732:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8003734:	2302      	movs	r3, #2
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	4619      	mov	r1, r3
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f006 fa32 	bl	8009ba8 <HAL_SDRAM_Init>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3730      	adds	r7, #48	; 0x30
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	24000f64 	.word	0x24000f64
 800375c:	52004140 	.word	0x52004140

08003760 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8003768:	4a07      	ldr	r2, [pc, #28]	; (8003788 <BSP_SDRAM_IRQHandler+0x28>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2134      	movs	r1, #52	; 0x34
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3330      	adds	r3, #48	; 0x30
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fcb1 	bl	80070e0 <HAL_MDMA_IRQHandler>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	24000f64 	.word	0x24000f64

0800378c <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08e      	sub	sp, #56	; 0x38
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003794:	4b73      	ldr	r3, [pc, #460]	; (8003964 <SDRAM_MspInit+0x1d8>)
 8003796:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800379a:	4a72      	ldr	r2, [pc, #456]	; (8003964 <SDRAM_MspInit+0x1d8>)
 800379c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037a0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80037a4:	4b6f      	ldr	r3, [pc, #444]	; (8003964 <SDRAM_MspInit+0x1d8>)
 80037a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80037aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ae:	623b      	str	r3, [r7, #32]
 80037b0:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80037b2:	4b6c      	ldr	r3, [pc, #432]	; (8003964 <SDRAM_MspInit+0x1d8>)
 80037b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80037b8:	4a6a      	ldr	r2, [pc, #424]	; (8003964 <SDRAM_MspInit+0x1d8>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80037c2:	4b68      	ldr	r3, [pc, #416]	; (8003964 <SDRAM_MspInit+0x1d8>)
 80037c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037d0:	4b64      	ldr	r3, [pc, #400]	; (8003964 <SDRAM_MspInit+0x1d8>)
 80037d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d6:	4a63      	ldr	r2, [pc, #396]	; (8003964 <SDRAM_MspInit+0x1d8>)
 80037d8:	f043 0308 	orr.w	r3, r3, #8
 80037dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037e0:	4b60      	ldr	r3, [pc, #384]	; (8003964 <SDRAM_MspInit+0x1d8>)
 80037e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037ee:	4b5d      	ldr	r3, [pc, #372]	; (8003964 <SDRAM_MspInit+0x1d8>)
 80037f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f4:	4a5b      	ldr	r2, [pc, #364]	; (8003964 <SDRAM_MspInit+0x1d8>)
 80037f6:	f043 0310 	orr.w	r3, r3, #16
 80037fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037fe:	4b59      	ldr	r3, [pc, #356]	; (8003964 <SDRAM_MspInit+0x1d8>)
 8003800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <SDRAM_MspInit+0x1d8>)
 800380e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003812:	4a54      	ldr	r2, [pc, #336]	; (8003964 <SDRAM_MspInit+0x1d8>)
 8003814:	f043 0320 	orr.w	r3, r3, #32
 8003818:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800381c:	4b51      	ldr	r3, [pc, #324]	; (8003964 <SDRAM_MspInit+0x1d8>)
 800381e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800382a:	4b4e      	ldr	r3, [pc, #312]	; (8003964 <SDRAM_MspInit+0x1d8>)
 800382c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003830:	4a4c      	ldr	r2, [pc, #304]	; (8003964 <SDRAM_MspInit+0x1d8>)
 8003832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800383a:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <SDRAM_MspInit+0x1d8>)
 800383c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003848:	4b46      	ldr	r3, [pc, #280]	; (8003964 <SDRAM_MspInit+0x1d8>)
 800384a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384e:	4a45      	ldr	r2, [pc, #276]	; (8003964 <SDRAM_MspInit+0x1d8>)
 8003850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003858:	4b42      	ldr	r3, [pc, #264]	; (8003964 <SDRAM_MspInit+0x1d8>)
 800385a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800386a:	2301      	movs	r3, #1
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800386e:	2303      	movs	r3, #3
 8003870:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003872:	230c      	movs	r3, #12
 8003874:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8003876:	f24c 7303 	movw	r3, #50947	; 0xc703
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800387c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003880:	4619      	mov	r1, r3
 8003882:	4839      	ldr	r0, [pc, #228]	; (8003968 <SDRAM_MspInit+0x1dc>)
 8003884:	f002 fa2a 	bl	8005cdc <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003888:	f64f 7383 	movw	r3, #65411	; 0xff83
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800388e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003892:	4619      	mov	r1, r3
 8003894:	4835      	ldr	r0, [pc, #212]	; (800396c <SDRAM_MspInit+0x1e0>)
 8003896:	f002 fa21 	bl	8005cdc <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800389a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80038a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a4:	4619      	mov	r1, r3
 80038a6:	4832      	ldr	r0, [pc, #200]	; (8003970 <SDRAM_MspInit+0x1e4>)
 80038a8:	f002 fa18 	bl	8005cdc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80038ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80038b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b6:	4619      	mov	r1, r3
 80038b8:	482e      	ldr	r0, [pc, #184]	; (8003974 <SDRAM_MspInit+0x1e8>)
 80038ba:	f002 fa0f 	bl	8005cdc <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80038be:	23e0      	movs	r3, #224	; 0xe0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80038c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c6:	4619      	mov	r1, r3
 80038c8:	482b      	ldr	r0, [pc, #172]	; (8003978 <SDRAM_MspInit+0x1ec>)
 80038ca:	f002 fa07 	bl	8005cdc <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 80038ce:	4b2b      	ldr	r3, [pc, #172]	; (800397c <SDRAM_MspInit+0x1f0>)
 80038d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038d4:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80038d6:	4b29      	ldr	r3, [pc, #164]	; (800397c <SDRAM_MspInit+0x1f0>)
 80038d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038dc:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80038de:	4b27      	ldr	r3, [pc, #156]	; (800397c <SDRAM_MspInit+0x1f0>)
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80038e4:	4b25      	ldr	r3, [pc, #148]	; (800397c <SDRAM_MspInit+0x1f0>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <SDRAM_MspInit+0x1f0>)
 80038ec:	f240 2202 	movw	r2, #514	; 0x202
 80038f0:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80038f2:	4b22      	ldr	r3, [pc, #136]	; (800397c <SDRAM_MspInit+0x1f0>)
 80038f4:	f640 0208 	movw	r2, #2056	; 0x808
 80038f8:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <SDRAM_MspInit+0x1f0>)
 80038fc:	2220      	movs	r2, #32
 80038fe:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <SDRAM_MspInit+0x1f0>)
 8003902:	2280      	movs	r2, #128	; 0x80
 8003904:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <SDRAM_MspInit+0x1f0>)
 8003908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <SDRAM_MspInit+0x1f0>)
 8003910:	2200      	movs	r2, #0
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8003914:	4b19      	ldr	r3, [pc, #100]	; (800397c <SDRAM_MspInit+0x1f0>)
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800391a:	4b18      	ldr	r3, [pc, #96]	; (800397c <SDRAM_MspInit+0x1f0>)
 800391c:	2280      	movs	r2, #128	; 0x80
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003920:	4b16      	ldr	r3, [pc, #88]	; (800397c <SDRAM_MspInit+0x1f0>)
 8003922:	2200      	movs	r2, #0
 8003924:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <SDRAM_MspInit+0x1f0>)
 8003928:	2200      	movs	r2, #0
 800392a:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <SDRAM_MspInit+0x1f0>)
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <SDRAM_MspInit+0x1f4>)
 8003930:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <SDRAM_MspInit+0x1f8>)
 8003934:	4a11      	ldr	r2, [pc, #68]	; (800397c <SDRAM_MspInit+0x1f0>)
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
 8003938:	4b10      	ldr	r3, [pc, #64]	; (800397c <SDRAM_MspInit+0x1f0>)
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <SDRAM_MspInit+0x1f8>)
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800393e:	480f      	ldr	r0, [pc, #60]	; (800397c <SDRAM_MspInit+0x1f0>)
 8003940:	f003 fb76 	bl	8007030 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8003944:	480d      	ldr	r0, [pc, #52]	; (800397c <SDRAM_MspInit+0x1f0>)
 8003946:	f003 fb27 	bl	8006f98 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	210f      	movs	r1, #15
 800394e:	207a      	movs	r0, #122	; 0x7a
 8003950:	f000 f9c7 	bl	8003ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8003954:	207a      	movs	r0, #122	; 0x7a
 8003956:	f000 f9de 	bl	8003d16 <HAL_NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3738      	adds	r7, #56	; 0x38
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	58024400 	.word	0x58024400
 8003968:	58020c00 	.word	0x58020c00
 800396c:	58021000 	.word	0x58021000
 8003970:	58021400 	.word	0x58021400
 8003974:	58021800 	.word	0x58021800
 8003978:	58021c00 	.word	0x58021c00
 800397c:	24000fb8 	.word	0x24000fb8
 8003980:	52000040 	.word	0x52000040
 8003984:	24000f64 	.word	0x24000f64

08003988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800398e:	2003      	movs	r0, #3
 8003990:	f000 f99c 	bl	8003ccc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003994:	f004 fbda 	bl	800814c <HAL_RCC_GetSysClockFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_Init+0x68>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	0a1b      	lsrs	r3, r3, #8
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	4913      	ldr	r1, [pc, #76]	; (80039f4 <HAL_Init+0x6c>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
 80039b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <HAL_Init+0x68>)
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <HAL_Init+0x6c>)
 80039bc:	5cd3      	ldrb	r3, [r2, r3]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <HAL_Init+0x70>)
 80039ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039cc:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <HAL_Init+0x74>)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039d2:	200f      	movs	r0, #15
 80039d4:	f000 f814 	bl	8003a00 <HAL_InitTick>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e002      	b.n	80039e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039e2:	f7fd feb1 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	58024400 	.word	0x58024400
 80039f4:	0800f52c 	.word	0x0800f52c
 80039f8:	24000020 	.word	0x24000020
 80039fc:	2400001c 	.word	0x2400001c

08003a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <HAL_InitTick+0x60>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e021      	b.n	8003a58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <HAL_InitTick+0x64>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <HAL_InitTick+0x60>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f981 	bl	8003d32 <HAL_SYSTICK_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00e      	b.n	8003a58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b0f      	cmp	r3, #15
 8003a3e:	d80a      	bhi.n	8003a56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a40:	2200      	movs	r2, #0
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f000 f94b 	bl	8003ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a4c:	4a06      	ldr	r2, [pc, #24]	; (8003a68 <HAL_InitTick+0x68>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e000      	b.n	8003a58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	2400003c 	.word	0x2400003c
 8003a64:	2400001c 	.word	0x2400001c
 8003a68:	24000038 	.word	0x24000038

08003a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_IncTick+0x20>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_IncTick+0x24>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <HAL_IncTick+0x24>)
 8003a7e:	6013      	str	r3, [r2, #0]
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	2400003c 	.word	0x2400003c
 8003a90:	24001024 	.word	0x24001024

08003a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return uwTick;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <HAL_GetTick+0x14>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	24001024 	.word	0x24001024

08003aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7ff ffee 	bl	8003a94 <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d005      	beq.n	8003ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_Delay+0x44>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ad2:	bf00      	nop
 8003ad4:	f7ff ffde 	bl	8003a94 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d8f7      	bhi.n	8003ad4 <HAL_Delay+0x28>
  {
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	2400003c 	.word	0x2400003c

08003af4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_GetREVID+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0c1b      	lsrs	r3, r3, #16
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	5c001000 	.word	0x5c001000

08003b0c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_EnableCompensationCell+0x1c>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <HAL_EnableCompensationCell+0x1c>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6213      	str	r3, [r2, #32]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	58000400 	.word	0x58000400

08003b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <__NVIC_SetPriorityGrouping+0x40>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <__NVIC_SetPriorityGrouping+0x44>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b5a:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <__NVIC_SetPriorityGrouping+0x40>)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	60d3      	str	r3, [r2, #12]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00
 8003b70:	05fa0000 	.word	0x05fa0000

08003b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <__NVIC_GetPriorityGrouping+0x18>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	f003 0307 	and.w	r3, r3, #7
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	db0b      	blt.n	8003bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	f003 021f 	and.w	r2, r3, #31
 8003ba8:	4907      	ldr	r1, [pc, #28]	; (8003bc8 <__NVIC_EnableIRQ+0x38>)
 8003baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	6039      	str	r1, [r7, #0]
 8003bd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	db0a      	blt.n	8003bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	490c      	ldr	r1, [pc, #48]	; (8003c18 <__NVIC_SetPriority+0x4c>)
 8003be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	440b      	add	r3, r1
 8003bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf4:	e00a      	b.n	8003c0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	4908      	ldr	r1, [pc, #32]	; (8003c1c <__NVIC_SetPriority+0x50>)
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	3b04      	subs	r3, #4
 8003c04:	0112      	lsls	r2, r2, #4
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	440b      	add	r3, r1
 8003c0a:	761a      	strb	r2, [r3, #24]
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000e100 	.word	0xe000e100
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f1c3 0307 	rsb	r3, r3, #7
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	bf28      	it	cs
 8003c3e:	2304      	movcs	r3, #4
 8003c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3304      	adds	r3, #4
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d902      	bls.n	8003c50 <NVIC_EncodePriority+0x30>
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3b03      	subs	r3, #3
 8003c4e:	e000      	b.n	8003c52 <NVIC_EncodePriority+0x32>
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	401a      	ands	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c68:	f04f 31ff 	mov.w	r1, #4294967295
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	43d9      	mvns	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	4313      	orrs	r3, r2
         );
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3724      	adds	r7, #36	; 0x24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c98:	d301      	bcc.n	8003c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e00f      	b.n	8003cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <SysTick_Config+0x40>)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ca6:	210f      	movs	r1, #15
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	f7ff ff8e 	bl	8003bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <SysTick_Config+0x40>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <SysTick_Config+0x40>)
 8003cb8:	2207      	movs	r2, #7
 8003cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	e000e010 	.word	0xe000e010

08003ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ff29 	bl	8003b2c <__NVIC_SetPriorityGrouping>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	4603      	mov	r3, r0
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf0:	f7ff ff40 	bl	8003b74 <__NVIC_GetPriorityGrouping>
 8003cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	f7ff ff90 	bl	8003c20 <NVIC_EncodePriority>
 8003d00:	4602      	mov	r2, r0
 8003d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff5f 	bl	8003bcc <__NVIC_SetPriority>
}
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff33 	bl	8003b90 <__NVIC_EnableIRQ>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ffa4 	bl	8003c88 <SysTick_Config>
 8003d40:	4603      	mov	r3, r0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003d54:	f7ff fe9e 	bl	8003a94 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e2dc      	b.n	800431e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d008      	beq.n	8003d82 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2280      	movs	r2, #128	; 0x80
 8003d74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e2cd      	b.n	800431e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a76      	ldr	r2, [pc, #472]	; (8003f60 <HAL_DMA_Abort+0x214>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d04a      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a74      	ldr	r2, [pc, #464]	; (8003f64 <HAL_DMA_Abort+0x218>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d045      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a73      	ldr	r2, [pc, #460]	; (8003f68 <HAL_DMA_Abort+0x21c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d040      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a71      	ldr	r2, [pc, #452]	; (8003f6c <HAL_DMA_Abort+0x220>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d03b      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a70      	ldr	r2, [pc, #448]	; (8003f70 <HAL_DMA_Abort+0x224>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d036      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6e      	ldr	r2, [pc, #440]	; (8003f74 <HAL_DMA_Abort+0x228>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d031      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6d      	ldr	r2, [pc, #436]	; (8003f78 <HAL_DMA_Abort+0x22c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d02c      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <HAL_DMA_Abort+0x230>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d027      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a6a      	ldr	r2, [pc, #424]	; (8003f80 <HAL_DMA_Abort+0x234>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a68      	ldr	r2, [pc, #416]	; (8003f84 <HAL_DMA_Abort+0x238>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01d      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a67      	ldr	r2, [pc, #412]	; (8003f88 <HAL_DMA_Abort+0x23c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d018      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a65      	ldr	r2, [pc, #404]	; (8003f8c <HAL_DMA_Abort+0x240>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a64      	ldr	r2, [pc, #400]	; (8003f90 <HAL_DMA_Abort+0x244>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00e      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a62      	ldr	r2, [pc, #392]	; (8003f94 <HAL_DMA_Abort+0x248>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a61      	ldr	r2, [pc, #388]	; (8003f98 <HAL_DMA_Abort+0x24c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_DMA_Abort+0xd6>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5f      	ldr	r2, [pc, #380]	; (8003f9c <HAL_DMA_Abort+0x250>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_DMA_Abort+0xda>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_DMA_Abort+0xdc>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 021e 	bic.w	r2, r2, #30
 8003e3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e4a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e00a      	b.n	8003e6a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 020e 	bic.w	r2, r2, #14
 8003e62:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <HAL_DMA_Abort+0x214>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d072      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <HAL_DMA_Abort+0x218>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d06d      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a39      	ldr	r2, [pc, #228]	; (8003f68 <HAL_DMA_Abort+0x21c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d068      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a37      	ldr	r2, [pc, #220]	; (8003f6c <HAL_DMA_Abort+0x220>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d063      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a36      	ldr	r2, [pc, #216]	; (8003f70 <HAL_DMA_Abort+0x224>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d05e      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a34      	ldr	r2, [pc, #208]	; (8003f74 <HAL_DMA_Abort+0x228>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d059      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a33      	ldr	r2, [pc, #204]	; (8003f78 <HAL_DMA_Abort+0x22c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d054      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a31      	ldr	r2, [pc, #196]	; (8003f7c <HAL_DMA_Abort+0x230>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d04f      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <HAL_DMA_Abort+0x234>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d04a      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2e      	ldr	r2, [pc, #184]	; (8003f84 <HAL_DMA_Abort+0x238>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d045      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2d      	ldr	r2, [pc, #180]	; (8003f88 <HAL_DMA_Abort+0x23c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d040      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <HAL_DMA_Abort+0x240>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d03b      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <HAL_DMA_Abort+0x244>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d036      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <HAL_DMA_Abort+0x248>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d031      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <HAL_DMA_Abort+0x24c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d02c      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <HAL_DMA_Abort+0x250>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d027      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <HAL_DMA_Abort+0x254>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d022      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <HAL_DMA_Abort+0x258>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <HAL_DMA_Abort+0x25c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1f      	ldr	r2, [pc, #124]	; (8003fac <HAL_DMA_Abort+0x260>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <HAL_DMA_Abort+0x264>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <HAL_DMA_Abort+0x268>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <HAL_DMA_Abort+0x26c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_DMA_Abort+0x20e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_DMA_Abort+0x270>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d132      	bne.n	8003fc0 <HAL_DMA_Abort+0x274>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e031      	b.n	8003fc2 <HAL_DMA_Abort+0x276>
 8003f5e:	bf00      	nop
 8003f60:	40020010 	.word	0x40020010
 8003f64:	40020028 	.word	0x40020028
 8003f68:	40020040 	.word	0x40020040
 8003f6c:	40020058 	.word	0x40020058
 8003f70:	40020070 	.word	0x40020070
 8003f74:	40020088 	.word	0x40020088
 8003f78:	400200a0 	.word	0x400200a0
 8003f7c:	400200b8 	.word	0x400200b8
 8003f80:	40020410 	.word	0x40020410
 8003f84:	40020428 	.word	0x40020428
 8003f88:	40020440 	.word	0x40020440
 8003f8c:	40020458 	.word	0x40020458
 8003f90:	40020470 	.word	0x40020470
 8003f94:	40020488 	.word	0x40020488
 8003f98:	400204a0 	.word	0x400204a0
 8003f9c:	400204b8 	.word	0x400204b8
 8003fa0:	58025408 	.word	0x58025408
 8003fa4:	5802541c 	.word	0x5802541c
 8003fa8:	58025430 	.word	0x58025430
 8003fac:	58025444 	.word	0x58025444
 8003fb0:	58025458 	.word	0x58025458
 8003fb4:	5802546c 	.word	0x5802546c
 8003fb8:	58025480 	.word	0x58025480
 8003fbc:	58025494 	.word	0x58025494
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6d      	ldr	r2, [pc, #436]	; (8004190 <HAL_DMA_Abort+0x444>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d04a      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6b      	ldr	r2, [pc, #428]	; (8004194 <HAL_DMA_Abort+0x448>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d045      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6a      	ldr	r2, [pc, #424]	; (8004198 <HAL_DMA_Abort+0x44c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d040      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a68      	ldr	r2, [pc, #416]	; (800419c <HAL_DMA_Abort+0x450>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d03b      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a67      	ldr	r2, [pc, #412]	; (80041a0 <HAL_DMA_Abort+0x454>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d036      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a65      	ldr	r2, [pc, #404]	; (80041a4 <HAL_DMA_Abort+0x458>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d031      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a64      	ldr	r2, [pc, #400]	; (80041a8 <HAL_DMA_Abort+0x45c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d02c      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a62      	ldr	r2, [pc, #392]	; (80041ac <HAL_DMA_Abort+0x460>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d027      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a61      	ldr	r2, [pc, #388]	; (80041b0 <HAL_DMA_Abort+0x464>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d022      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a5f      	ldr	r2, [pc, #380]	; (80041b4 <HAL_DMA_Abort+0x468>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01d      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a5e      	ldr	r2, [pc, #376]	; (80041b8 <HAL_DMA_Abort+0x46c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d018      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a5c      	ldr	r2, [pc, #368]	; (80041bc <HAL_DMA_Abort+0x470>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a5b      	ldr	r2, [pc, #364]	; (80041c0 <HAL_DMA_Abort+0x474>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a59      	ldr	r2, [pc, #356]	; (80041c4 <HAL_DMA_Abort+0x478>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a58      	ldr	r2, [pc, #352]	; (80041c8 <HAL_DMA_Abort+0x47c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_DMA_Abort+0x32a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a56      	ldr	r2, [pc, #344]	; (80041cc <HAL_DMA_Abort+0x480>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <HAL_DMA_Abort+0x33c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e007      	b.n	8004098 <HAL_DMA_Abort+0x34c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004098:	e013      	b.n	80040c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800409a:	f7ff fcfb 	bl	8003a94 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d90c      	bls.n	80040c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2203      	movs	r2, #3
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e12d      	b.n	800431e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e5      	bne.n	800409a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2f      	ldr	r2, [pc, #188]	; (8004190 <HAL_DMA_Abort+0x444>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d04a      	beq.n	800416e <HAL_DMA_Abort+0x422>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <HAL_DMA_Abort+0x448>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d045      	beq.n	800416e <HAL_DMA_Abort+0x422>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a2c      	ldr	r2, [pc, #176]	; (8004198 <HAL_DMA_Abort+0x44c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d040      	beq.n	800416e <HAL_DMA_Abort+0x422>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2a      	ldr	r2, [pc, #168]	; (800419c <HAL_DMA_Abort+0x450>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d03b      	beq.n	800416e <HAL_DMA_Abort+0x422>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a29      	ldr	r2, [pc, #164]	; (80041a0 <HAL_DMA_Abort+0x454>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d036      	beq.n	800416e <HAL_DMA_Abort+0x422>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <HAL_DMA_Abort+0x458>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d031      	beq.n	800416e <HAL_DMA_Abort+0x422>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <HAL_DMA_Abort+0x45c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d02c      	beq.n	800416e <HAL_DMA_Abort+0x422>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a24      	ldr	r2, [pc, #144]	; (80041ac <HAL_DMA_Abort+0x460>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d027      	beq.n	800416e <HAL_DMA_Abort+0x422>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <HAL_DMA_Abort+0x464>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d022      	beq.n	800416e <HAL_DMA_Abort+0x422>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <HAL_DMA_Abort+0x468>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01d      	beq.n	800416e <HAL_DMA_Abort+0x422>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a20      	ldr	r2, [pc, #128]	; (80041b8 <HAL_DMA_Abort+0x46c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d018      	beq.n	800416e <HAL_DMA_Abort+0x422>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_DMA_Abort+0x470>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <HAL_DMA_Abort+0x422>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <HAL_DMA_Abort+0x474>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_DMA_Abort+0x422>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <HAL_DMA_Abort+0x478>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_DMA_Abort+0x422>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <HAL_DMA_Abort+0x47c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_DMA_Abort+0x422>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_DMA_Abort+0x480>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_DMA_Abort+0x426>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_DMA_Abort+0x428>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02b      	beq.n	80041d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	f003 031f 	and.w	r3, r3, #31
 8004186:	223f      	movs	r2, #63	; 0x3f
 8004188:	409a      	lsls	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	e02a      	b.n	80041e6 <HAL_DMA_Abort+0x49a>
 8004190:	40020010 	.word	0x40020010
 8004194:	40020028 	.word	0x40020028
 8004198:	40020040 	.word	0x40020040
 800419c:	40020058 	.word	0x40020058
 80041a0:	40020070 	.word	0x40020070
 80041a4:	40020088 	.word	0x40020088
 80041a8:	400200a0 	.word	0x400200a0
 80041ac:	400200b8 	.word	0x400200b8
 80041b0:	40020410 	.word	0x40020410
 80041b4:	40020428 	.word	0x40020428
 80041b8:	40020440 	.word	0x40020440
 80041bc:	40020458 	.word	0x40020458
 80041c0:	40020470 	.word	0x40020470
 80041c4:	40020488 	.word	0x40020488
 80041c8:	400204a0 	.word	0x400204a0
 80041cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2201      	movs	r2, #1
 80041e0:	409a      	lsls	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a4f      	ldr	r2, [pc, #316]	; (8004328 <HAL_DMA_Abort+0x5dc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d072      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4d      	ldr	r2, [pc, #308]	; (800432c <HAL_DMA_Abort+0x5e0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d06d      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a4c      	ldr	r2, [pc, #304]	; (8004330 <HAL_DMA_Abort+0x5e4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d068      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a4a      	ldr	r2, [pc, #296]	; (8004334 <HAL_DMA_Abort+0x5e8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d063      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a49      	ldr	r2, [pc, #292]	; (8004338 <HAL_DMA_Abort+0x5ec>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d05e      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a47      	ldr	r2, [pc, #284]	; (800433c <HAL_DMA_Abort+0x5f0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d059      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a46      	ldr	r2, [pc, #280]	; (8004340 <HAL_DMA_Abort+0x5f4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d054      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a44      	ldr	r2, [pc, #272]	; (8004344 <HAL_DMA_Abort+0x5f8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d04f      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a43      	ldr	r2, [pc, #268]	; (8004348 <HAL_DMA_Abort+0x5fc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d04a      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a41      	ldr	r2, [pc, #260]	; (800434c <HAL_DMA_Abort+0x600>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d045      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a40      	ldr	r2, [pc, #256]	; (8004350 <HAL_DMA_Abort+0x604>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d040      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a3e      	ldr	r2, [pc, #248]	; (8004354 <HAL_DMA_Abort+0x608>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d03b      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a3d      	ldr	r2, [pc, #244]	; (8004358 <HAL_DMA_Abort+0x60c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d036      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a3b      	ldr	r2, [pc, #236]	; (800435c <HAL_DMA_Abort+0x610>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d031      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <HAL_DMA_Abort+0x614>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d02c      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a38      	ldr	r2, [pc, #224]	; (8004364 <HAL_DMA_Abort+0x618>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d027      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a37      	ldr	r2, [pc, #220]	; (8004368 <HAL_DMA_Abort+0x61c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d022      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a35      	ldr	r2, [pc, #212]	; (800436c <HAL_DMA_Abort+0x620>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01d      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a34      	ldr	r2, [pc, #208]	; (8004370 <HAL_DMA_Abort+0x624>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d018      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a32      	ldr	r2, [pc, #200]	; (8004374 <HAL_DMA_Abort+0x628>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a31      	ldr	r2, [pc, #196]	; (8004378 <HAL_DMA_Abort+0x62c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a2f      	ldr	r2, [pc, #188]	; (800437c <HAL_DMA_Abort+0x630>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2e      	ldr	r2, [pc, #184]	; (8004380 <HAL_DMA_Abort+0x634>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_DMA_Abort+0x58a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2c      	ldr	r2, [pc, #176]	; (8004384 <HAL_DMA_Abort+0x638>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_DMA_Abort+0x58e>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_DMA_Abort+0x590>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00c      	beq.n	800430c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004300:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800430a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40020010 	.word	0x40020010
 800432c:	40020028 	.word	0x40020028
 8004330:	40020040 	.word	0x40020040
 8004334:	40020058 	.word	0x40020058
 8004338:	40020070 	.word	0x40020070
 800433c:	40020088 	.word	0x40020088
 8004340:	400200a0 	.word	0x400200a0
 8004344:	400200b8 	.word	0x400200b8
 8004348:	40020410 	.word	0x40020410
 800434c:	40020428 	.word	0x40020428
 8004350:	40020440 	.word	0x40020440
 8004354:	40020458 	.word	0x40020458
 8004358:	40020470 	.word	0x40020470
 800435c:	40020488 	.word	0x40020488
 8004360:	400204a0 	.word	0x400204a0
 8004364:	400204b8 	.word	0x400204b8
 8004368:	58025408 	.word	0x58025408
 800436c:	5802541c 	.word	0x5802541c
 8004370:	58025430 	.word	0x58025430
 8004374:	58025444 	.word	0x58025444
 8004378:	58025458 	.word	0x58025458
 800437c:	5802546c 	.word	0x5802546c
 8004380:	58025480 	.word	0x58025480
 8004384:	58025494 	.word	0x58025494

08004388 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e237      	b.n	800480a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e22c      	b.n	800480a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5c      	ldr	r2, [pc, #368]	; (8004528 <HAL_DMA_Abort_IT+0x1a0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d04a      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5b      	ldr	r2, [pc, #364]	; (800452c <HAL_DMA_Abort_IT+0x1a4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d045      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a59      	ldr	r2, [pc, #356]	; (8004530 <HAL_DMA_Abort_IT+0x1a8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d040      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a58      	ldr	r2, [pc, #352]	; (8004534 <HAL_DMA_Abort_IT+0x1ac>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d03b      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a56      	ldr	r2, [pc, #344]	; (8004538 <HAL_DMA_Abort_IT+0x1b0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d036      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a55      	ldr	r2, [pc, #340]	; (800453c <HAL_DMA_Abort_IT+0x1b4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d031      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a53      	ldr	r2, [pc, #332]	; (8004540 <HAL_DMA_Abort_IT+0x1b8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d02c      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a52      	ldr	r2, [pc, #328]	; (8004544 <HAL_DMA_Abort_IT+0x1bc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d027      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a50      	ldr	r2, [pc, #320]	; (8004548 <HAL_DMA_Abort_IT+0x1c0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d022      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a4f      	ldr	r2, [pc, #316]	; (800454c <HAL_DMA_Abort_IT+0x1c4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d01d      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a4d      	ldr	r2, [pc, #308]	; (8004550 <HAL_DMA_Abort_IT+0x1c8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a4c      	ldr	r2, [pc, #304]	; (8004554 <HAL_DMA_Abort_IT+0x1cc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a4a      	ldr	r2, [pc, #296]	; (8004558 <HAL_DMA_Abort_IT+0x1d0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a49      	ldr	r2, [pc, #292]	; (800455c <HAL_DMA_Abort_IT+0x1d4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a47      	ldr	r2, [pc, #284]	; (8004560 <HAL_DMA_Abort_IT+0x1d8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_DMA_Abort_IT+0xc8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a46      	ldr	r2, [pc, #280]	; (8004564 <HAL_DMA_Abort_IT+0x1dc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_DMA_Abort_IT+0xcc>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_DMA_Abort_IT+0xce>
 8004454:	2300      	movs	r3, #0
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8086 	beq.w	8004568 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2204      	movs	r2, #4
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2f      	ldr	r2, [pc, #188]	; (8004528 <HAL_DMA_Abort_IT+0x1a0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d04a      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2e      	ldr	r2, [pc, #184]	; (800452c <HAL_DMA_Abort_IT+0x1a4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d045      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <HAL_DMA_Abort_IT+0x1a8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d040      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <HAL_DMA_Abort_IT+0x1ac>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d03b      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a29      	ldr	r2, [pc, #164]	; (8004538 <HAL_DMA_Abort_IT+0x1b0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d036      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a28      	ldr	r2, [pc, #160]	; (800453c <HAL_DMA_Abort_IT+0x1b4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d031      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <HAL_DMA_Abort_IT+0x1b8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02c      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a25      	ldr	r2, [pc, #148]	; (8004544 <HAL_DMA_Abort_IT+0x1bc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d027      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a23      	ldr	r2, [pc, #140]	; (8004548 <HAL_DMA_Abort_IT+0x1c0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a22      	ldr	r2, [pc, #136]	; (800454c <HAL_DMA_Abort_IT+0x1c4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01d      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a20      	ldr	r2, [pc, #128]	; (8004550 <HAL_DMA_Abort_IT+0x1c8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1f      	ldr	r2, [pc, #124]	; (8004554 <HAL_DMA_Abort_IT+0x1cc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <HAL_DMA_Abort_IT+0x1d0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1c      	ldr	r2, [pc, #112]	; (800455c <HAL_DMA_Abort_IT+0x1d4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_DMA_Abort_IT+0x1d8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_DMA_Abort_IT+0x17c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a19      	ldr	r2, [pc, #100]	; (8004564 <HAL_DMA_Abort_IT+0x1dc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <HAL_DMA_Abort_IT+0x18e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e178      	b.n	8004808 <HAL_DMA_Abort_IT+0x480>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e16f      	b.n	8004808 <HAL_DMA_Abort_IT+0x480>
 8004528:	40020010 	.word	0x40020010
 800452c:	40020028 	.word	0x40020028
 8004530:	40020040 	.word	0x40020040
 8004534:	40020058 	.word	0x40020058
 8004538:	40020070 	.word	0x40020070
 800453c:	40020088 	.word	0x40020088
 8004540:	400200a0 	.word	0x400200a0
 8004544:	400200b8 	.word	0x400200b8
 8004548:	40020410 	.word	0x40020410
 800454c:	40020428 	.word	0x40020428
 8004550:	40020440 	.word	0x40020440
 8004554:	40020458 	.word	0x40020458
 8004558:	40020470 	.word	0x40020470
 800455c:	40020488 	.word	0x40020488
 8004560:	400204a0 	.word	0x400204a0
 8004564:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 020e 	bic.w	r2, r2, #14
 8004576:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a6c      	ldr	r2, [pc, #432]	; (8004730 <HAL_DMA_Abort_IT+0x3a8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d04a      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6b      	ldr	r2, [pc, #428]	; (8004734 <HAL_DMA_Abort_IT+0x3ac>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d045      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a69      	ldr	r2, [pc, #420]	; (8004738 <HAL_DMA_Abort_IT+0x3b0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d040      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a68      	ldr	r2, [pc, #416]	; (800473c <HAL_DMA_Abort_IT+0x3b4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d03b      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a66      	ldr	r2, [pc, #408]	; (8004740 <HAL_DMA_Abort_IT+0x3b8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d036      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a65      	ldr	r2, [pc, #404]	; (8004744 <HAL_DMA_Abort_IT+0x3bc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d031      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a63      	ldr	r2, [pc, #396]	; (8004748 <HAL_DMA_Abort_IT+0x3c0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d02c      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a62      	ldr	r2, [pc, #392]	; (800474c <HAL_DMA_Abort_IT+0x3c4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d027      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a60      	ldr	r2, [pc, #384]	; (8004750 <HAL_DMA_Abort_IT+0x3c8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d022      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a5f      	ldr	r2, [pc, #380]	; (8004754 <HAL_DMA_Abort_IT+0x3cc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d01d      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a5d      	ldr	r2, [pc, #372]	; (8004758 <HAL_DMA_Abort_IT+0x3d0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d018      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a5c      	ldr	r2, [pc, #368]	; (800475c <HAL_DMA_Abort_IT+0x3d4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d013      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5a      	ldr	r2, [pc, #360]	; (8004760 <HAL_DMA_Abort_IT+0x3d8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00e      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a59      	ldr	r2, [pc, #356]	; (8004764 <HAL_DMA_Abort_IT+0x3dc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d009      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a57      	ldr	r2, [pc, #348]	; (8004768 <HAL_DMA_Abort_IT+0x3e0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d004      	beq.n	8004618 <HAL_DMA_Abort_IT+0x290>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a56      	ldr	r2, [pc, #344]	; (800476c <HAL_DMA_Abort_IT+0x3e4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d108      	bne.n	800462a <HAL_DMA_Abort_IT+0x2a2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e007      	b.n	800463a <HAL_DMA_Abort_IT+0x2b2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0201 	bic.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3c      	ldr	r2, [pc, #240]	; (8004730 <HAL_DMA_Abort_IT+0x3a8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d072      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a3a      	ldr	r2, [pc, #232]	; (8004734 <HAL_DMA_Abort_IT+0x3ac>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d06d      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a39      	ldr	r2, [pc, #228]	; (8004738 <HAL_DMA_Abort_IT+0x3b0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d068      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a37      	ldr	r2, [pc, #220]	; (800473c <HAL_DMA_Abort_IT+0x3b4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d063      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a36      	ldr	r2, [pc, #216]	; (8004740 <HAL_DMA_Abort_IT+0x3b8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d05e      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a34      	ldr	r2, [pc, #208]	; (8004744 <HAL_DMA_Abort_IT+0x3bc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d059      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a33      	ldr	r2, [pc, #204]	; (8004748 <HAL_DMA_Abort_IT+0x3c0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d054      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a31      	ldr	r2, [pc, #196]	; (800474c <HAL_DMA_Abort_IT+0x3c4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d04f      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a30      	ldr	r2, [pc, #192]	; (8004750 <HAL_DMA_Abort_IT+0x3c8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d04a      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2e      	ldr	r2, [pc, #184]	; (8004754 <HAL_DMA_Abort_IT+0x3cc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d045      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2d      	ldr	r2, [pc, #180]	; (8004758 <HAL_DMA_Abort_IT+0x3d0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d040      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2b      	ldr	r2, [pc, #172]	; (800475c <HAL_DMA_Abort_IT+0x3d4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d03b      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2a      	ldr	r2, [pc, #168]	; (8004760 <HAL_DMA_Abort_IT+0x3d8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d036      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a28      	ldr	r2, [pc, #160]	; (8004764 <HAL_DMA_Abort_IT+0x3dc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d031      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a27      	ldr	r2, [pc, #156]	; (8004768 <HAL_DMA_Abort_IT+0x3e0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d02c      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a25      	ldr	r2, [pc, #148]	; (800476c <HAL_DMA_Abort_IT+0x3e4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d027      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a24      	ldr	r2, [pc, #144]	; (8004770 <HAL_DMA_Abort_IT+0x3e8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a22      	ldr	r2, [pc, #136]	; (8004774 <HAL_DMA_Abort_IT+0x3ec>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a21      	ldr	r2, [pc, #132]	; (8004778 <HAL_DMA_Abort_IT+0x3f0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1f      	ldr	r2, [pc, #124]	; (800477c <HAL_DMA_Abort_IT+0x3f4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <HAL_DMA_Abort_IT+0x3f8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <HAL_DMA_Abort_IT+0x3fc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <HAL_DMA_Abort_IT+0x400>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_DMA_Abort_IT+0x3a2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <HAL_DMA_Abort_IT+0x404>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d132      	bne.n	8004790 <HAL_DMA_Abort_IT+0x408>
 800472a:	2301      	movs	r3, #1
 800472c:	e031      	b.n	8004792 <HAL_DMA_Abort_IT+0x40a>
 800472e:	bf00      	nop
 8004730:	40020010 	.word	0x40020010
 8004734:	40020028 	.word	0x40020028
 8004738:	40020040 	.word	0x40020040
 800473c:	40020058 	.word	0x40020058
 8004740:	40020070 	.word	0x40020070
 8004744:	40020088 	.word	0x40020088
 8004748:	400200a0 	.word	0x400200a0
 800474c:	400200b8 	.word	0x400200b8
 8004750:	40020410 	.word	0x40020410
 8004754:	40020428 	.word	0x40020428
 8004758:	40020440 	.word	0x40020440
 800475c:	40020458 	.word	0x40020458
 8004760:	40020470 	.word	0x40020470
 8004764:	40020488 	.word	0x40020488
 8004768:	400204a0 	.word	0x400204a0
 800476c:	400204b8 	.word	0x400204b8
 8004770:	58025408 	.word	0x58025408
 8004774:	5802541c 	.word	0x5802541c
 8004778:	58025430 	.word	0x58025430
 800477c:	58025444 	.word	0x58025444
 8004780:	58025458 	.word	0x58025458
 8004784:	5802546c 	.word	0x5802546c
 8004788:	58025480 	.word	0x58025480
 800478c:	58025494 	.word	0x58025494
 8004790:	2300      	movs	r3, #0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d028      	beq.n	80047e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2201      	movs	r2, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop

08004814 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004820:	4b67      	ldr	r3, [pc, #412]	; (80049c0 <HAL_DMA_IRQHandler+0x1ac>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a67      	ldr	r2, [pc, #412]	; (80049c4 <HAL_DMA_IRQHandler+0x1b0>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	0a9b      	lsrs	r3, r3, #10
 800482c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a5f      	ldr	r2, [pc, #380]	; (80049c8 <HAL_DMA_IRQHandler+0x1b4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d04a      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5d      	ldr	r2, [pc, #372]	; (80049cc <HAL_DMA_IRQHandler+0x1b8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d045      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5c      	ldr	r2, [pc, #368]	; (80049d0 <HAL_DMA_IRQHandler+0x1bc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d040      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5a      	ldr	r2, [pc, #360]	; (80049d4 <HAL_DMA_IRQHandler+0x1c0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d03b      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a59      	ldr	r2, [pc, #356]	; (80049d8 <HAL_DMA_IRQHandler+0x1c4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d036      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a57      	ldr	r2, [pc, #348]	; (80049dc <HAL_DMA_IRQHandler+0x1c8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d031      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a56      	ldr	r2, [pc, #344]	; (80049e0 <HAL_DMA_IRQHandler+0x1cc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d02c      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a54      	ldr	r2, [pc, #336]	; (80049e4 <HAL_DMA_IRQHandler+0x1d0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d027      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a53      	ldr	r2, [pc, #332]	; (80049e8 <HAL_DMA_IRQHandler+0x1d4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d022      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a51      	ldr	r2, [pc, #324]	; (80049ec <HAL_DMA_IRQHandler+0x1d8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01d      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a50      	ldr	r2, [pc, #320]	; (80049f0 <HAL_DMA_IRQHandler+0x1dc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d018      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a4e      	ldr	r2, [pc, #312]	; (80049f4 <HAL_DMA_IRQHandler+0x1e0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a4d      	ldr	r2, [pc, #308]	; (80049f8 <HAL_DMA_IRQHandler+0x1e4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a4b      	ldr	r2, [pc, #300]	; (80049fc <HAL_DMA_IRQHandler+0x1e8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4a      	ldr	r2, [pc, #296]	; (8004a00 <HAL_DMA_IRQHandler+0x1ec>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xd2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a48      	ldr	r2, [pc, #288]	; (8004a04 <HAL_DMA_IRQHandler+0x1f0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_DMA_IRQHandler+0xd6>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_DMA_IRQHandler+0xd8>
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 842b 	beq.w	8005148 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2208      	movs	r2, #8
 80048fc:	409a      	lsls	r2, r3
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80a2 	beq.w	8004a4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2e      	ldr	r2, [pc, #184]	; (80049c8 <HAL_DMA_IRQHandler+0x1b4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d04a      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2d      	ldr	r2, [pc, #180]	; (80049cc <HAL_DMA_IRQHandler+0x1b8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d045      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2b      	ldr	r2, [pc, #172]	; (80049d0 <HAL_DMA_IRQHandler+0x1bc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d040      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <HAL_DMA_IRQHandler+0x1c0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d03b      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a28      	ldr	r2, [pc, #160]	; (80049d8 <HAL_DMA_IRQHandler+0x1c4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d036      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a27      	ldr	r2, [pc, #156]	; (80049dc <HAL_DMA_IRQHandler+0x1c8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d031      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <HAL_DMA_IRQHandler+0x1cc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d02c      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <HAL_DMA_IRQHandler+0x1d0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d027      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <HAL_DMA_IRQHandler+0x1d4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d022      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a21      	ldr	r2, [pc, #132]	; (80049ec <HAL_DMA_IRQHandler+0x1d8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d01d      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <HAL_DMA_IRQHandler+0x1dc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d018      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <HAL_DMA_IRQHandler+0x1e0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <HAL_DMA_IRQHandler+0x1e4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00e      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <HAL_DMA_IRQHandler+0x1e8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <HAL_DMA_IRQHandler+0x1ec>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x194>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <HAL_DMA_IRQHandler+0x1f0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d12f      	bne.n	8004a08 <HAL_DMA_IRQHandler+0x1f4>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e02e      	b.n	8004a1c <HAL_DMA_IRQHandler+0x208>
 80049be:	bf00      	nop
 80049c0:	2400001c 	.word	0x2400001c
 80049c4:	1b4e81b5 	.word	0x1b4e81b5
 80049c8:	40020010 	.word	0x40020010
 80049cc:	40020028 	.word	0x40020028
 80049d0:	40020040 	.word	0x40020040
 80049d4:	40020058 	.word	0x40020058
 80049d8:	40020070 	.word	0x40020070
 80049dc:	40020088 	.word	0x40020088
 80049e0:	400200a0 	.word	0x400200a0
 80049e4:	400200b8 	.word	0x400200b8
 80049e8:	40020410 	.word	0x40020410
 80049ec:	40020428 	.word	0x40020428
 80049f0:	40020440 	.word	0x40020440
 80049f4:	40020458 	.word	0x40020458
 80049f8:	40020470 	.word	0x40020470
 80049fc:	40020488 	.word	0x40020488
 8004a00:	400204a0 	.word	0x400204a0
 8004a04:	400204b8 	.word	0x400204b8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bf14      	ite	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	2300      	moveq	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d015      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0204 	bic.w	r2, r2, #4
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2208      	movs	r2, #8
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	f043 0201 	orr.w	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d06e      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a69      	ldr	r2, [pc, #420]	; (8004c0c <HAL_DMA_IRQHandler+0x3f8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d04a      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a67      	ldr	r2, [pc, #412]	; (8004c10 <HAL_DMA_IRQHandler+0x3fc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d045      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a66      	ldr	r2, [pc, #408]	; (8004c14 <HAL_DMA_IRQHandler+0x400>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d040      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a64      	ldr	r2, [pc, #400]	; (8004c18 <HAL_DMA_IRQHandler+0x404>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d03b      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a63      	ldr	r2, [pc, #396]	; (8004c1c <HAL_DMA_IRQHandler+0x408>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d036      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a61      	ldr	r2, [pc, #388]	; (8004c20 <HAL_DMA_IRQHandler+0x40c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d031      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a60      	ldr	r2, [pc, #384]	; (8004c24 <HAL_DMA_IRQHandler+0x410>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d02c      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a5e      	ldr	r2, [pc, #376]	; (8004c28 <HAL_DMA_IRQHandler+0x414>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d027      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a5d      	ldr	r2, [pc, #372]	; (8004c2c <HAL_DMA_IRQHandler+0x418>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d022      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a5b      	ldr	r2, [pc, #364]	; (8004c30 <HAL_DMA_IRQHandler+0x41c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01d      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5a      	ldr	r2, [pc, #360]	; (8004c34 <HAL_DMA_IRQHandler+0x420>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d018      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a58      	ldr	r2, [pc, #352]	; (8004c38 <HAL_DMA_IRQHandler+0x424>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a57      	ldr	r2, [pc, #348]	; (8004c3c <HAL_DMA_IRQHandler+0x428>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a55      	ldr	r2, [pc, #340]	; (8004c40 <HAL_DMA_IRQHandler+0x42c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a54      	ldr	r2, [pc, #336]	; (8004c44 <HAL_DMA_IRQHandler+0x430>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2ee>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a52      	ldr	r2, [pc, #328]	; (8004c48 <HAL_DMA_IRQHandler+0x434>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d10a      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x304>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf14      	ite	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	2300      	moveq	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e003      	b.n	8004b20 <HAL_DMA_IRQHandler+0x30c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	409a      	lsls	r2, r3
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b38:	f043 0202 	orr.w	r2, r3, #2
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2204      	movs	r2, #4
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 808f 	beq.w	8004c74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2c      	ldr	r2, [pc, #176]	; (8004c0c <HAL_DMA_IRQHandler+0x3f8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d04a      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2a      	ldr	r2, [pc, #168]	; (8004c10 <HAL_DMA_IRQHandler+0x3fc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d045      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a29      	ldr	r2, [pc, #164]	; (8004c14 <HAL_DMA_IRQHandler+0x400>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d040      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a27      	ldr	r2, [pc, #156]	; (8004c18 <HAL_DMA_IRQHandler+0x404>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d03b      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <HAL_DMA_IRQHandler+0x408>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d036      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a24      	ldr	r2, [pc, #144]	; (8004c20 <HAL_DMA_IRQHandler+0x40c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d031      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a23      	ldr	r2, [pc, #140]	; (8004c24 <HAL_DMA_IRQHandler+0x410>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d02c      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a21      	ldr	r2, [pc, #132]	; (8004c28 <HAL_DMA_IRQHandler+0x414>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d027      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a20      	ldr	r2, [pc, #128]	; (8004c2c <HAL_DMA_IRQHandler+0x418>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d022      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1e      	ldr	r2, [pc, #120]	; (8004c30 <HAL_DMA_IRQHandler+0x41c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01d      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <HAL_DMA_IRQHandler+0x420>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d018      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1b      	ldr	r2, [pc, #108]	; (8004c38 <HAL_DMA_IRQHandler+0x424>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <HAL_DMA_IRQHandler+0x428>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00e      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <HAL_DMA_IRQHandler+0x42c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d009      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <HAL_DMA_IRQHandler+0x430>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d004      	beq.n	8004bf6 <HAL_DMA_IRQHandler+0x3e2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a15      	ldr	r2, [pc, #84]	; (8004c48 <HAL_DMA_IRQHandler+0x434>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d12a      	bne.n	8004c4c <HAL_DMA_IRQHandler+0x438>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e023      	b.n	8004c54 <HAL_DMA_IRQHandler+0x440>
 8004c0c:	40020010 	.word	0x40020010
 8004c10:	40020028 	.word	0x40020028
 8004c14:	40020040 	.word	0x40020040
 8004c18:	40020058 	.word	0x40020058
 8004c1c:	40020070 	.word	0x40020070
 8004c20:	40020088 	.word	0x40020088
 8004c24:	400200a0 	.word	0x400200a0
 8004c28:	400200b8 	.word	0x400200b8
 8004c2c:	40020410 	.word	0x40020410
 8004c30:	40020428 	.word	0x40020428
 8004c34:	40020440 	.word	0x40020440
 8004c38:	40020458 	.word	0x40020458
 8004c3c:	40020470 	.word	0x40020470
 8004c40:	40020488 	.word	0x40020488
 8004c44:	400204a0 	.word	0x400204a0
 8004c48:	400204b8 	.word	0x400204b8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00d      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	2204      	movs	r2, #4
 8004c62:	409a      	lsls	r2, r3
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f043 0204 	orr.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80a6 	beq.w	8004dd6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a85      	ldr	r2, [pc, #532]	; (8004ea4 <HAL_DMA_IRQHandler+0x690>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d04a      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a83      	ldr	r2, [pc, #524]	; (8004ea8 <HAL_DMA_IRQHandler+0x694>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d045      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a82      	ldr	r2, [pc, #520]	; (8004eac <HAL_DMA_IRQHandler+0x698>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d040      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a80      	ldr	r2, [pc, #512]	; (8004eb0 <HAL_DMA_IRQHandler+0x69c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d03b      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a7f      	ldr	r2, [pc, #508]	; (8004eb4 <HAL_DMA_IRQHandler+0x6a0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d036      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a7d      	ldr	r2, [pc, #500]	; (8004eb8 <HAL_DMA_IRQHandler+0x6a4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d031      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a7c      	ldr	r2, [pc, #496]	; (8004ebc <HAL_DMA_IRQHandler+0x6a8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d02c      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a7a      	ldr	r2, [pc, #488]	; (8004ec0 <HAL_DMA_IRQHandler+0x6ac>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d027      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a79      	ldr	r2, [pc, #484]	; (8004ec4 <HAL_DMA_IRQHandler+0x6b0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d022      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a77      	ldr	r2, [pc, #476]	; (8004ec8 <HAL_DMA_IRQHandler+0x6b4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a76      	ldr	r2, [pc, #472]	; (8004ecc <HAL_DMA_IRQHandler+0x6b8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d018      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a74      	ldr	r2, [pc, #464]	; (8004ed0 <HAL_DMA_IRQHandler+0x6bc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a73      	ldr	r2, [pc, #460]	; (8004ed4 <HAL_DMA_IRQHandler+0x6c0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a71      	ldr	r2, [pc, #452]	; (8004ed8 <HAL_DMA_IRQHandler+0x6c4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a70      	ldr	r2, [pc, #448]	; (8004edc <HAL_DMA_IRQHandler+0x6c8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x516>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6e      	ldr	r2, [pc, #440]	; (8004ee0 <HAL_DMA_IRQHandler+0x6cc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10a      	bne.n	8004d40 <HAL_DMA_IRQHandler+0x52c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e009      	b.n	8004d54 <HAL_DMA_IRQHandler+0x540>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bf14      	ite	ne
 8004d4e:	2301      	movne	r3, #1
 8004d50:	2300      	moveq	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d03e      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	2210      	movs	r2, #16
 8004d62:	409a      	lsls	r2, r3
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d018      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d108      	bne.n	8004d96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d024      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
 8004d94:	e01f      	b.n	8004dd6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01b      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
 8004da6:	e016      	b.n	8004dd6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d107      	bne.n	8004dc6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0208 	bic.w	r2, r2, #8
 8004dc4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2220      	movs	r2, #32
 8004de0:	409a      	lsls	r2, r3
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8110 	beq.w	800500c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2c      	ldr	r2, [pc, #176]	; (8004ea4 <HAL_DMA_IRQHandler+0x690>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d04a      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2b      	ldr	r2, [pc, #172]	; (8004ea8 <HAL_DMA_IRQHandler+0x694>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d045      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a29      	ldr	r2, [pc, #164]	; (8004eac <HAL_DMA_IRQHandler+0x698>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d040      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a28      	ldr	r2, [pc, #160]	; (8004eb0 <HAL_DMA_IRQHandler+0x69c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d03b      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a26      	ldr	r2, [pc, #152]	; (8004eb4 <HAL_DMA_IRQHandler+0x6a0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d036      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <HAL_DMA_IRQHandler+0x6a4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d031      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <HAL_DMA_IRQHandler+0x6a8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02c      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <HAL_DMA_IRQHandler+0x6ac>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d027      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <HAL_DMA_IRQHandler+0x6b0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <HAL_DMA_IRQHandler+0x6b4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d01d      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <HAL_DMA_IRQHandler+0x6b8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <HAL_DMA_IRQHandler+0x6bc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <HAL_DMA_IRQHandler+0x6c0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <HAL_DMA_IRQHandler+0x6c4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <HAL_DMA_IRQHandler+0x6c8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x678>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <HAL_DMA_IRQHandler+0x6cc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d12b      	bne.n	8004ee4 <HAL_DMA_IRQHandler+0x6d0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0310 	and.w	r3, r3, #16
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bf14      	ite	ne
 8004e9a:	2301      	movne	r3, #1
 8004e9c:	2300      	moveq	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	e02a      	b.n	8004ef8 <HAL_DMA_IRQHandler+0x6e4>
 8004ea2:	bf00      	nop
 8004ea4:	40020010 	.word	0x40020010
 8004ea8:	40020028 	.word	0x40020028
 8004eac:	40020040 	.word	0x40020040
 8004eb0:	40020058 	.word	0x40020058
 8004eb4:	40020070 	.word	0x40020070
 8004eb8:	40020088 	.word	0x40020088
 8004ebc:	400200a0 	.word	0x400200a0
 8004ec0:	400200b8 	.word	0x400200b8
 8004ec4:	40020410 	.word	0x40020410
 8004ec8:	40020428 	.word	0x40020428
 8004ecc:	40020440 	.word	0x40020440
 8004ed0:	40020458 	.word	0x40020458
 8004ed4:	40020470 	.word	0x40020470
 8004ed8:	40020488 	.word	0x40020488
 8004edc:	400204a0 	.word	0x400204a0
 8004ee0:	400204b8 	.word	0x400204b8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bf14      	ite	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	2300      	moveq	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8087 	beq.w	800500c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2220      	movs	r2, #32
 8004f08:	409a      	lsls	r2, r3
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d139      	bne.n	8004f8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0216 	bic.w	r2, r2, #22
 8004f28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <HAL_DMA_IRQHandler+0x736>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0208 	bic.w	r2, r2, #8
 8004f58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	223f      	movs	r2, #63	; 0x3f
 8004f64:	409a      	lsls	r2, r3
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 834a 	beq.w	8005618 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
          }
          return;
 8004f8c:	e344      	b.n	8005618 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d018      	beq.n	8004fce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d108      	bne.n	8004fbc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d02c      	beq.n	800500c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4798      	blx	r3
 8004fba:	e027      	b.n	800500c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d023      	beq.n	800500c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
 8004fcc:	e01e      	b.n	800500c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10f      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0210 	bic.w	r2, r2, #16
 8004fea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8306 	beq.w	8005622 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8088 	beq.w	8005134 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2204      	movs	r2, #4
 8005028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a7a      	ldr	r2, [pc, #488]	; (800521c <HAL_DMA_IRQHandler+0xa08>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d04a      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a79      	ldr	r2, [pc, #484]	; (8005220 <HAL_DMA_IRQHandler+0xa0c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d045      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a77      	ldr	r2, [pc, #476]	; (8005224 <HAL_DMA_IRQHandler+0xa10>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d040      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a76      	ldr	r2, [pc, #472]	; (8005228 <HAL_DMA_IRQHandler+0xa14>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d03b      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a74      	ldr	r2, [pc, #464]	; (800522c <HAL_DMA_IRQHandler+0xa18>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d036      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a73      	ldr	r2, [pc, #460]	; (8005230 <HAL_DMA_IRQHandler+0xa1c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d031      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a71      	ldr	r2, [pc, #452]	; (8005234 <HAL_DMA_IRQHandler+0xa20>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d02c      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a70      	ldr	r2, [pc, #448]	; (8005238 <HAL_DMA_IRQHandler+0xa24>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d027      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a6e      	ldr	r2, [pc, #440]	; (800523c <HAL_DMA_IRQHandler+0xa28>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d022      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a6d      	ldr	r2, [pc, #436]	; (8005240 <HAL_DMA_IRQHandler+0xa2c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d01d      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a6b      	ldr	r2, [pc, #428]	; (8005244 <HAL_DMA_IRQHandler+0xa30>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d018      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6a      	ldr	r2, [pc, #424]	; (8005248 <HAL_DMA_IRQHandler+0xa34>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a68      	ldr	r2, [pc, #416]	; (800524c <HAL_DMA_IRQHandler+0xa38>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00e      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a67      	ldr	r2, [pc, #412]	; (8005250 <HAL_DMA_IRQHandler+0xa3c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a65      	ldr	r2, [pc, #404]	; (8005254 <HAL_DMA_IRQHandler+0xa40>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_DMA_IRQHandler+0x8b8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a64      	ldr	r2, [pc, #400]	; (8005258 <HAL_DMA_IRQHandler+0xa44>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d108      	bne.n	80050de <HAL_DMA_IRQHandler+0x8ca>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e007      	b.n	80050ee <HAL_DMA_IRQHandler+0x8da>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	3301      	adds	r3, #1
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d307      	bcc.n	800510a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f2      	bne.n	80050ee <HAL_DMA_IRQHandler+0x8da>
 8005108:	e000      	b.n	800510c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800510a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2203      	movs	r2, #3
 800511e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005122:	e003      	b.n	800512c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8272 	beq.w	8005622 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
 8005146:	e26c      	b.n	8005622 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a43      	ldr	r2, [pc, #268]	; (800525c <HAL_DMA_IRQHandler+0xa48>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d022      	beq.n	8005198 <HAL_DMA_IRQHandler+0x984>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a42      	ldr	r2, [pc, #264]	; (8005260 <HAL_DMA_IRQHandler+0xa4c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d01d      	beq.n	8005198 <HAL_DMA_IRQHandler+0x984>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a40      	ldr	r2, [pc, #256]	; (8005264 <HAL_DMA_IRQHandler+0xa50>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d018      	beq.n	8005198 <HAL_DMA_IRQHandler+0x984>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3f      	ldr	r2, [pc, #252]	; (8005268 <HAL_DMA_IRQHandler+0xa54>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <HAL_DMA_IRQHandler+0x984>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a3d      	ldr	r2, [pc, #244]	; (800526c <HAL_DMA_IRQHandler+0xa58>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00e      	beq.n	8005198 <HAL_DMA_IRQHandler+0x984>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3c      	ldr	r2, [pc, #240]	; (8005270 <HAL_DMA_IRQHandler+0xa5c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d009      	beq.n	8005198 <HAL_DMA_IRQHandler+0x984>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a3a      	ldr	r2, [pc, #232]	; (8005274 <HAL_DMA_IRQHandler+0xa60>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_DMA_IRQHandler+0x984>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a39      	ldr	r2, [pc, #228]	; (8005278 <HAL_DMA_IRQHandler+0xa64>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d101      	bne.n	800519c <HAL_DMA_IRQHandler+0x988>
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <HAL_DMA_IRQHandler+0x98a>
 800519c:	2300      	movs	r3, #0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 823f 	beq.w	8005622 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	f003 031f 	and.w	r3, r3, #31
 80051b4:	2204      	movs	r2, #4
 80051b6:	409a      	lsls	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80cd 	beq.w	800535c <HAL_DMA_IRQHandler+0xb48>
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80c7 	beq.w	800535c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2204      	movs	r2, #4
 80051d8:	409a      	lsls	r2, r3
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d049      	beq.n	800527c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 8210 	beq.w	800561c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005204:	e20a      	b.n	800561c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8206 	beq.w	800561c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005218:	e200      	b.n	800561c <HAL_DMA_IRQHandler+0xe08>
 800521a:	bf00      	nop
 800521c:	40020010 	.word	0x40020010
 8005220:	40020028 	.word	0x40020028
 8005224:	40020040 	.word	0x40020040
 8005228:	40020058 	.word	0x40020058
 800522c:	40020070 	.word	0x40020070
 8005230:	40020088 	.word	0x40020088
 8005234:	400200a0 	.word	0x400200a0
 8005238:	400200b8 	.word	0x400200b8
 800523c:	40020410 	.word	0x40020410
 8005240:	40020428 	.word	0x40020428
 8005244:	40020440 	.word	0x40020440
 8005248:	40020458 	.word	0x40020458
 800524c:	40020470 	.word	0x40020470
 8005250:	40020488 	.word	0x40020488
 8005254:	400204a0 	.word	0x400204a0
 8005258:	400204b8 	.word	0x400204b8
 800525c:	58025408 	.word	0x58025408
 8005260:	5802541c 	.word	0x5802541c
 8005264:	58025430 	.word	0x58025430
 8005268:	58025444 	.word	0x58025444
 800526c:	58025458 	.word	0x58025458
 8005270:	5802546c 	.word	0x5802546c
 8005274:	58025480 	.word	0x58025480
 8005278:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d160      	bne.n	8005348 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a7f      	ldr	r2, [pc, #508]	; (8005488 <HAL_DMA_IRQHandler+0xc74>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d04a      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a7d      	ldr	r2, [pc, #500]	; (800548c <HAL_DMA_IRQHandler+0xc78>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d045      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a7c      	ldr	r2, [pc, #496]	; (8005490 <HAL_DMA_IRQHandler+0xc7c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d040      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a7a      	ldr	r2, [pc, #488]	; (8005494 <HAL_DMA_IRQHandler+0xc80>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d03b      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a79      	ldr	r2, [pc, #484]	; (8005498 <HAL_DMA_IRQHandler+0xc84>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d036      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a77      	ldr	r2, [pc, #476]	; (800549c <HAL_DMA_IRQHandler+0xc88>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d031      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a76      	ldr	r2, [pc, #472]	; (80054a0 <HAL_DMA_IRQHandler+0xc8c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d02c      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a74      	ldr	r2, [pc, #464]	; (80054a4 <HAL_DMA_IRQHandler+0xc90>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d027      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a73      	ldr	r2, [pc, #460]	; (80054a8 <HAL_DMA_IRQHandler+0xc94>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d022      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a71      	ldr	r2, [pc, #452]	; (80054ac <HAL_DMA_IRQHandler+0xc98>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01d      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a70      	ldr	r2, [pc, #448]	; (80054b0 <HAL_DMA_IRQHandler+0xc9c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a6e      	ldr	r2, [pc, #440]	; (80054b4 <HAL_DMA_IRQHandler+0xca0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a6d      	ldr	r2, [pc, #436]	; (80054b8 <HAL_DMA_IRQHandler+0xca4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6b      	ldr	r2, [pc, #428]	; (80054bc <HAL_DMA_IRQHandler+0xca8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a6a      	ldr	r2, [pc, #424]	; (80054c0 <HAL_DMA_IRQHandler+0xcac>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_DMA_IRQHandler+0xb12>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a68      	ldr	r2, [pc, #416]	; (80054c4 <HAL_DMA_IRQHandler+0xcb0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d108      	bne.n	8005338 <HAL_DMA_IRQHandler+0xb24>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0208 	bic.w	r2, r2, #8
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e007      	b.n	8005348 <HAL_DMA_IRQHandler+0xb34>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0204 	bic.w	r2, r2, #4
 8005346:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8165 	beq.w	800561c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800535a:	e15f      	b.n	800561c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	2202      	movs	r2, #2
 8005366:	409a      	lsls	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80c5 	beq.w	80054fc <HAL_DMA_IRQHandler+0xce8>
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80bf 	beq.w	80054fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2202      	movs	r2, #2
 8005388:	409a      	lsls	r2, r3
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d018      	beq.n	80053ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 813a 	beq.w	8005620 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053b4:	e134      	b.n	8005620 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8130 	beq.w	8005620 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053c8:	e12a      	b.n	8005620 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f040 8089 	bne.w	80054e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <HAL_DMA_IRQHandler+0xc74>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d04a      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a29      	ldr	r2, [pc, #164]	; (800548c <HAL_DMA_IRQHandler+0xc78>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d045      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a28      	ldr	r2, [pc, #160]	; (8005490 <HAL_DMA_IRQHandler+0xc7c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d040      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a26      	ldr	r2, [pc, #152]	; (8005494 <HAL_DMA_IRQHandler+0xc80>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d03b      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a25      	ldr	r2, [pc, #148]	; (8005498 <HAL_DMA_IRQHandler+0xc84>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d036      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a23      	ldr	r2, [pc, #140]	; (800549c <HAL_DMA_IRQHandler+0xc88>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d031      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <HAL_DMA_IRQHandler+0xc8c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d02c      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a20      	ldr	r2, [pc, #128]	; (80054a4 <HAL_DMA_IRQHandler+0xc90>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d027      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <HAL_DMA_IRQHandler+0xc94>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d022      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <HAL_DMA_IRQHandler+0xc98>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01d      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_DMA_IRQHandler+0xc9c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d018      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1a      	ldr	r2, [pc, #104]	; (80054b4 <HAL_DMA_IRQHandler+0xca0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d013      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <HAL_DMA_IRQHandler+0xca4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00e      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a17      	ldr	r2, [pc, #92]	; (80054bc <HAL_DMA_IRQHandler+0xca8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <HAL_DMA_IRQHandler+0xcac>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_DMA_IRQHandler+0xc62>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <HAL_DMA_IRQHandler+0xcb0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d128      	bne.n	80054c8 <HAL_DMA_IRQHandler+0xcb4>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0214 	bic.w	r2, r2, #20
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e027      	b.n	80054d8 <HAL_DMA_IRQHandler+0xcc4>
 8005488:	40020010 	.word	0x40020010
 800548c:	40020028 	.word	0x40020028
 8005490:	40020040 	.word	0x40020040
 8005494:	40020058 	.word	0x40020058
 8005498:	40020070 	.word	0x40020070
 800549c:	40020088 	.word	0x40020088
 80054a0:	400200a0 	.word	0x400200a0
 80054a4:	400200b8 	.word	0x400200b8
 80054a8:	40020410 	.word	0x40020410
 80054ac:	40020428 	.word	0x40020428
 80054b0:	40020440 	.word	0x40020440
 80054b4:	40020458 	.word	0x40020458
 80054b8:	40020470 	.word	0x40020470
 80054bc:	40020488 	.word	0x40020488
 80054c0:	400204a0 	.word	0x400204a0
 80054c4:	400204b8 	.word	0x400204b8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 020a 	bic.w	r2, r2, #10
 80054d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8097 	beq.w	8005620 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054fa:	e091      	b.n	8005620 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2208      	movs	r2, #8
 8005506:	409a      	lsls	r2, r3
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8088 	beq.w	8005622 <HAL_DMA_IRQHandler+0xe0e>
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8082 	beq.w	8005622 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a41      	ldr	r2, [pc, #260]	; (8005628 <HAL_DMA_IRQHandler+0xe14>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d04a      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a3f      	ldr	r2, [pc, #252]	; (800562c <HAL_DMA_IRQHandler+0xe18>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d045      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a3e      	ldr	r2, [pc, #248]	; (8005630 <HAL_DMA_IRQHandler+0xe1c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d040      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a3c      	ldr	r2, [pc, #240]	; (8005634 <HAL_DMA_IRQHandler+0xe20>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d03b      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3b      	ldr	r2, [pc, #236]	; (8005638 <HAL_DMA_IRQHandler+0xe24>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d036      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a39      	ldr	r2, [pc, #228]	; (800563c <HAL_DMA_IRQHandler+0xe28>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d031      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a38      	ldr	r2, [pc, #224]	; (8005640 <HAL_DMA_IRQHandler+0xe2c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d02c      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a36      	ldr	r2, [pc, #216]	; (8005644 <HAL_DMA_IRQHandler+0xe30>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d027      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a35      	ldr	r2, [pc, #212]	; (8005648 <HAL_DMA_IRQHandler+0xe34>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d022      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a33      	ldr	r2, [pc, #204]	; (800564c <HAL_DMA_IRQHandler+0xe38>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01d      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a32      	ldr	r2, [pc, #200]	; (8005650 <HAL_DMA_IRQHandler+0xe3c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a30      	ldr	r2, [pc, #192]	; (8005654 <HAL_DMA_IRQHandler+0xe40>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2f      	ldr	r2, [pc, #188]	; (8005658 <HAL_DMA_IRQHandler+0xe44>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2d      	ldr	r2, [pc, #180]	; (800565c <HAL_DMA_IRQHandler+0xe48>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2c      	ldr	r2, [pc, #176]	; (8005660 <HAL_DMA_IRQHandler+0xe4c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_DMA_IRQHandler+0xdaa>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2a      	ldr	r2, [pc, #168]	; (8005664 <HAL_DMA_IRQHandler+0xe50>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d108      	bne.n	80055d0 <HAL_DMA_IRQHandler+0xdbc>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 021c 	bic.w	r2, r2, #28
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e007      	b.n	80055e0 <HAL_DMA_IRQHandler+0xdcc>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 020e 	bic.w	r2, r2, #14
 80055de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	2201      	movs	r2, #1
 80055ea:	409a      	lsls	r2, r3
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
 8005616:	e004      	b.n	8005622 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005618:	bf00      	nop
 800561a:	e002      	b.n	8005622 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800561c:	bf00      	nop
 800561e:	e000      	b.n	8005622 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005620:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005622:	3728      	adds	r7, #40	; 0x28
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40020010 	.word	0x40020010
 800562c:	40020028 	.word	0x40020028
 8005630:	40020040 	.word	0x40020040
 8005634:	40020058 	.word	0x40020058
 8005638:	40020070 	.word	0x40020070
 800563c:	40020088 	.word	0x40020088
 8005640:	400200a0 	.word	0x400200a0
 8005644:	400200b8 	.word	0x400200b8
 8005648:	40020410 	.word	0x40020410
 800564c:	40020428 	.word	0x40020428
 8005650:	40020440 	.word	0x40020440
 8005654:	40020458 	.word	0x40020458
 8005658:	40020470 	.word	0x40020470
 800565c:	40020488 	.word	0x40020488
 8005660:	400204a0 	.word	0x400204a0
 8005664:	400204b8 	.word	0x400204b8

08005668 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e04f      	b.n	800571a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f84e 	bl	8005730 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b20      	ldr	r3, [pc, #128]	; (8005724 <HAL_DMA2D_Init+0xbc>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6851      	ldr	r1, [r2, #4]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	69d2      	ldr	r2, [r2, #28]
 80056ae:	4311      	orrs	r1, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	430b      	orrs	r3, r1
 80056b6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056be:	4b1a      	ldr	r3, [pc, #104]	; (8005728 <HAL_DMA2D_Init+0xc0>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6891      	ldr	r1, [r2, #8]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6992      	ldr	r2, [r2, #24]
 80056ca:	4311      	orrs	r1, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056da:	4b14      	ldr	r3, [pc, #80]	; (800572c <HAL_DMA2D_Init+0xc4>)
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68d1      	ldr	r1, [r2, #12]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	430b      	orrs	r3, r1
 80056e8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	051a      	lsls	r2, r3, #20
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	055b      	lsls	r3, r3, #21
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	fff8ffbf 	.word	0xfff8ffbf
 8005728:	fffffef8 	.word	0xfffffef8
 800572c:	ffff0000 	.word	0xffff0000

08005730 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_DMA2D_Start+0x1c>
 800575c:	2302      	movs	r3, #2
 800575e:	e018      	b.n	8005792 <HAL_DMA2D_Start+0x4e>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f9a4 	bl	8005ac8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b086      	sub	sp, #24
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d056      	beq.n	8005864 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80057b6:	f7fe f96d 	bl	8003a94 <HAL_GetTick>
 80057ba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80057bc:	e04b      	b.n	8005856 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d023      	beq.n	8005818 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057de:	f043 0202 	orr.w	r2, r3, #2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f4:	f043 0201 	orr.w	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2221      	movs	r2, #33	; 0x21
 8005802:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2204      	movs	r2, #4
 8005808:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0a5      	b.n	8005964 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d01a      	beq.n	8005856 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005820:	f7fe f938 	bl	8003a94 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d302      	bcc.n	8005836 <HAL_DMA2D_PollForTransfer+0x9c>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2203      	movs	r2, #3
 8005846:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e086      	b.n	8005964 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ac      	beq.n	80057be <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d061      	beq.n	800594a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005886:	f7fe f905 	bl	8003a94 <HAL_GetTick>
 800588a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800588c:	e056      	b.n	800593c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800589c:	2b00      	cmp	r3, #0
 800589e:	d02e      	beq.n	80058fe <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ae:	f043 0204 	orr.w	r2, r3, #4
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c4:	f043 0202 	orr.w	r2, r3, #2
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058da:	f043 0201 	orr.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2229      	movs	r2, #41	; 0x29
 80058e8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2204      	movs	r2, #4
 80058ee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e032      	b.n	8005964 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d01a      	beq.n	800593c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005906:	f7fe f8c5 	bl	8003a94 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d302      	bcc.n	800591c <HAL_DMA2D_PollForTransfer+0x182>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10f      	bne.n	800593c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2203      	movs	r2, #3
 800592c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e013      	b.n	8005964 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0a1      	beq.n	800588e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2212      	movs	r2, #18
 8005950:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_DMA2D_ConfigLayer+0x24>
 800598c:	2302      	movs	r3, #2
 800598e:	e092      	b.n	8005ab6 <HAL_DMA2D_ConfigLayer+0x14a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	4613      	mov	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	3328      	adds	r3, #40	; 0x28
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4413      	add	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80059c4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80059d0:	4b3c      	ldr	r3, [pc, #240]	; (8005ac4 <HAL_DMA2D_ConfigLayer+0x158>)
 80059d2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b0a      	cmp	r3, #10
 80059da:	d003      	beq.n	80059e4 <HAL_DMA2D_ConfigLayer+0x78>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b09      	cmp	r3, #9
 80059e2:	d107      	bne.n	80059f4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	e005      	b.n	8005a00 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	061b      	lsls	r3, r3, #24
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d120      	bne.n	8005a48 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	ea02 0103 	and.w	r1, r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b0a      	cmp	r3, #10
 8005a2e:	d003      	beq.n	8005a38 <HAL_DMA2D_ConfigLayer+0xcc>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b09      	cmp	r3, #9
 8005a36:	d135      	bne.n	8005aa4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a44:	629a      	str	r2, [r3, #40]	; 0x28
 8005a46:	e02d      	b.n	8005aa4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b0b      	cmp	r3, #11
 8005a4e:	d109      	bne.n	8005a64 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	049b      	lsls	r3, r3, #18
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005a62:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	ea02 0103 	and.w	r1, r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b0a      	cmp	r3, #10
 8005a8c:	d003      	beq.n	8005a96 <HAL_DMA2D_ConfigLayer+0x12a>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d106      	bne.n	8005aa4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005aa2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	ff33000f 	.word	0xff33000f

08005ac8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b08b      	sub	sp, #44	; 0x2c
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	041a      	lsls	r2, r3, #16
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b00:	d174      	bne.n	8005bec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b10:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b18:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d108      	bne.n	8005b3a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
 8005b38:	e053      	b.n	8005be2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d106      	bne.n	8005b50 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4e:	e048      	b.n	8005be2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d111      	bne.n	8005b7c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	0cdb      	lsrs	r3, r3, #19
 8005b5c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	0a9b      	lsrs	r3, r3, #10
 8005b62:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	08db      	lsrs	r3, r3, #3
 8005b68:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	02db      	lsls	r3, r3, #11
 8005b72:	4313      	orrs	r3, r2
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7a:	e032      	b.n	8005be2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d117      	bne.n	8005bb4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	0fdb      	lsrs	r3, r3, #31
 8005b88:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	0cdb      	lsrs	r3, r3, #19
 8005b8e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	0adb      	lsrs	r3, r3, #11
 8005b94:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	08db      	lsrs	r3, r3, #3
 8005b9a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	029b      	lsls	r3, r3, #10
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	03db      	lsls	r3, r3, #15
 8005baa:	4313      	orrs	r3, r2
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb2:	e016      	b.n	8005be2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	0f1b      	lsrs	r3, r3, #28
 8005bb8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	0d1b      	lsrs	r3, r3, #20
 8005bbe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	0b1b      	lsrs	r3, r3, #12
 8005bc4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	011a      	lsls	r2, r3, #4
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	031b      	lsls	r3, r3, #12
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005bea:	e00d      	b.n	8005c08 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bf4:	d104      	bne.n	8005c00 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	615a      	str	r2, [r3, #20]
}
 8005bfe:	e003      	b.n	8005c08 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	60da      	str	r2, [r3, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	372c      	adds	r7, #44	; 0x2c
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e00a      	b.n	8005c46 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005c30:	7afb      	ldrb	r3, [r7, #11]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	605a      	str	r2, [r3, #4]
      break;
 8005c3c:	e002      	b.n	8005c44 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	75fb      	strb	r3, [r7, #23]
      break;
 8005c42:	bf00      	nop
  }

  return status;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e003      	b.n	8005c6e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	0c1b      	lsrs	r3, r3, #16
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	2201      	movs	r2, #1
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	011a      	lsls	r2, r3, #4
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <HAL_EXTI_IRQHandler+0x5c>)
 8005ca6:	4413      	add	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4798      	blx	r3
    }
  }
}
 8005cce:	bf00      	nop
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	58000088 	.word	0x58000088

08005cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005cea:	4b89      	ldr	r3, [pc, #548]	; (8005f10 <HAL_GPIO_Init+0x234>)
 8005cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cee:	e194      	b.n	800601a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8186 	beq.w	8006014 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d005      	beq.n	8005d20 <HAL_GPIO_Init+0x44>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d130      	bne.n	8005d82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d56:	2201      	movs	r2, #1
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	4013      	ands	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	f003 0201 	and.w	r2, r3, #1
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d017      	beq.n	8005dbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	2203      	movs	r2, #3
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4013      	ands	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d123      	bne.n	8005e12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	08da      	lsrs	r2, r3, #3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3208      	adds	r2, #8
 8005dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	220f      	movs	r2, #15
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4013      	ands	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	08da      	lsrs	r2, r3, #3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3208      	adds	r2, #8
 8005e0c:	69b9      	ldr	r1, [r7, #24]
 8005e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	43db      	mvns	r3, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4013      	ands	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f003 0203 	and.w	r2, r3, #3
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80e0 	beq.w	8006014 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e54:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <HAL_GPIO_Init+0x238>)
 8005e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e5a:	4a2e      	ldr	r2, [pc, #184]	; (8005f14 <HAL_GPIO_Init+0x238>)
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e64:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <HAL_GPIO_Init+0x238>)
 8005e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e72:	4a29      	ldr	r2, [pc, #164]	; (8005f18 <HAL_GPIO_Init+0x23c>)
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	089b      	lsrs	r3, r3, #2
 8005e78:	3302      	adds	r3, #2
 8005e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	220f      	movs	r2, #15
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4013      	ands	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a20      	ldr	r2, [pc, #128]	; (8005f1c <HAL_GPIO_Init+0x240>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d052      	beq.n	8005f44 <HAL_GPIO_Init+0x268>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <HAL_GPIO_Init+0x244>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d031      	beq.n	8005f0a <HAL_GPIO_Init+0x22e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <HAL_GPIO_Init+0x248>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d02b      	beq.n	8005f06 <HAL_GPIO_Init+0x22a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a1d      	ldr	r2, [pc, #116]	; (8005f28 <HAL_GPIO_Init+0x24c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d025      	beq.n	8005f02 <HAL_GPIO_Init+0x226>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a1c      	ldr	r2, [pc, #112]	; (8005f2c <HAL_GPIO_Init+0x250>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01f      	beq.n	8005efe <HAL_GPIO_Init+0x222>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a1b      	ldr	r2, [pc, #108]	; (8005f30 <HAL_GPIO_Init+0x254>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d019      	beq.n	8005efa <HAL_GPIO_Init+0x21e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1a      	ldr	r2, [pc, #104]	; (8005f34 <HAL_GPIO_Init+0x258>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_GPIO_Init+0x21a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a19      	ldr	r2, [pc, #100]	; (8005f38 <HAL_GPIO_Init+0x25c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00d      	beq.n	8005ef2 <HAL_GPIO_Init+0x216>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <HAL_GPIO_Init+0x260>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <HAL_GPIO_Init+0x212>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <HAL_GPIO_Init+0x264>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <HAL_GPIO_Init+0x20e>
 8005ee6:	2309      	movs	r3, #9
 8005ee8:	e02d      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005eea:	230a      	movs	r3, #10
 8005eec:	e02b      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005eee:	2308      	movs	r3, #8
 8005ef0:	e029      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005ef2:	2307      	movs	r3, #7
 8005ef4:	e027      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005ef6:	2306      	movs	r3, #6
 8005ef8:	e025      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005efa:	2305      	movs	r3, #5
 8005efc:	e023      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005efe:	2304      	movs	r3, #4
 8005f00:	e021      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005f02:	2303      	movs	r3, #3
 8005f04:	e01f      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e01d      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e01b      	b.n	8005f46 <HAL_GPIO_Init+0x26a>
 8005f0e:	bf00      	nop
 8005f10:	58000080 	.word	0x58000080
 8005f14:	58024400 	.word	0x58024400
 8005f18:	58000400 	.word	0x58000400
 8005f1c:	58020000 	.word	0x58020000
 8005f20:	58020400 	.word	0x58020400
 8005f24:	58020800 	.word	0x58020800
 8005f28:	58020c00 	.word	0x58020c00
 8005f2c:	58021000 	.word	0x58021000
 8005f30:	58021400 	.word	0x58021400
 8005f34:	58021800 	.word	0x58021800
 8005f38:	58021c00 	.word	0x58021c00
 8005f3c:	58022000 	.word	0x58022000
 8005f40:	58022400 	.word	0x58022400
 8005f44:	2300      	movs	r3, #0
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	f002 0203 	and.w	r2, r2, #3
 8005f4c:	0092      	lsls	r2, r2, #2
 8005f4e:	4093      	lsls	r3, r2
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f56:	4938      	ldr	r1, [pc, #224]	; (8006038 <HAL_GPIO_Init+0x35c>)
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4013      	ands	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	43db      	mvns	r3, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	f47f ae63 	bne.w	8005cf0 <HAL_GPIO_Init+0x14>
  }
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	3724      	adds	r7, #36	; 0x24
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	58000400 	.word	0x58000400

0800603c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	887b      	ldrh	r3, [r7, #2]
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
 8006058:	e001      	b.n	800605e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	807b      	strh	r3, [r7, #2]
 8006078:	4613      	mov	r3, r2
 800607a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800607c:	787b      	ldrb	r3, [r7, #1]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006082:	887a      	ldrh	r2, [r7, #2]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006088:	e003      	b.n	8006092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800608a:	887b      	ldrh	r3, [r7, #2]
 800608c:	041a      	lsls	r2, r3, #16
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	619a      	str	r2, [r3, #24]
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e07f      	b.n	80061b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f87a 	bl	80061c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2224      	movs	r2, #36	; 0x24
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006100:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d107      	bne.n	800611a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006116:	609a      	str	r2, [r3, #8]
 8006118:	e006      	b.n	8006128 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006126:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d104      	bne.n	800613a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006138:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6859      	ldr	r1, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <HAL_I2C_Init+0x11c>)
 8006146:	430b      	orrs	r3, r1
 8006148:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006158:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69d9      	ldr	r1, [r3, #28]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	02008000 	.word	0x02008000

080061c0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	461a      	mov	r2, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	817b      	strh	r3, [r7, #10]
 80061e6:	460b      	mov	r3, r1
 80061e8:	813b      	strh	r3, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	f040 80fd 	bne.w	80063f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <HAL_I2C_Mem_Read+0x34>
 8006202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d105      	bne.n	8006214 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800620e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e0f1      	b.n	80063f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_I2C_Mem_Read+0x4e>
 800621e:	2302      	movs	r3, #2
 8006220:	e0ea      	b.n	80063f8 <HAL_I2C_Mem_Read+0x224>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800622a:	f7fd fc33 	bl	8003a94 <HAL_GetTick>
 800622e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	2319      	movs	r3, #25
 8006236:	2201      	movs	r2, #1
 8006238:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f975 	bl	800652c <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0d5      	b.n	80063f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2222      	movs	r2, #34	; 0x22
 8006250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006274:	88f8      	ldrh	r0, [r7, #6]
 8006276:	893a      	ldrh	r2, [r7, #8]
 8006278:	8979      	ldrh	r1, [r7, #10]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	4603      	mov	r3, r0
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f8d9 	bl	800643c <I2C_RequestMemoryRead>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e0ad      	b.n	80063f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2bff      	cmp	r3, #255	; 0xff
 80062a4:	d90e      	bls.n	80062c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	22ff      	movs	r2, #255	; 0xff
 80062aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	8979      	ldrh	r1, [r7, #10]
 80062b4:	4b52      	ldr	r3, [pc, #328]	; (8006400 <HAL_I2C_Mem_Read+0x22c>)
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 faef 	bl	80068a0 <I2C_TransferConfig>
 80062c2:	e00f      	b.n	80062e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	8979      	ldrh	r1, [r7, #10]
 80062d6:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <HAL_I2C_Mem_Read+0x22c>)
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fade 	bl	80068a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	2200      	movs	r2, #0
 80062ec:	2104      	movs	r1, #4
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f91c 	bl	800652c <I2C_WaitOnFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e07c      	b.n	80063f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d034      	beq.n	80063a4 <HAL_I2C_Mem_Read+0x1d0>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d130      	bne.n	80063a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	2200      	movs	r2, #0
 800634a:	2180      	movs	r1, #128	; 0x80
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f8ed 	bl	800652c <I2C_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e04d      	b.n	80063f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	2bff      	cmp	r3, #255	; 0xff
 8006364:	d90e      	bls.n	8006384 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	22ff      	movs	r2, #255	; 0xff
 800636a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006370:	b2da      	uxtb	r2, r3
 8006372:	8979      	ldrh	r1, [r7, #10]
 8006374:	2300      	movs	r3, #0
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fa8f 	bl	80068a0 <I2C_TransferConfig>
 8006382:	e00f      	b.n	80063a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006392:	b2da      	uxtb	r2, r3
 8006394:	8979      	ldrh	r1, [r7, #10]
 8006396:	2300      	movs	r3, #0
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fa7e 	bl	80068a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d19a      	bne.n	80062e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f950 	bl	8006658 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e01a      	b.n	80063f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2220      	movs	r2, #32
 80063c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6859      	ldr	r1, [r3, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <HAL_I2C_Mem_Read+0x230>)
 80063d6:	400b      	ands	r3, r1
 80063d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e000      	b.n	80063f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80063f6:	2302      	movs	r3, #2
  }
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	80002400 	.word	0x80002400
 8006404:	fe00e800 	.word	0xfe00e800

08006408 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006416:	b2db      	uxtb	r3, r3
}
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	461a      	mov	r2, r3
 800644a:	4603      	mov	r3, r0
 800644c:	817b      	strh	r3, [r7, #10]
 800644e:	460b      	mov	r3, r1
 8006450:	813b      	strh	r3, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	8979      	ldrh	r1, [r7, #10]
 800645c:	4b20      	ldr	r3, [pc, #128]	; (80064e0 <I2C_RequestMemoryRead+0xa4>)
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	2300      	movs	r3, #0
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fa1c 	bl	80068a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	69b9      	ldr	r1, [r7, #24]
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f8ac 	bl	80065ca <I2C_WaitOnTXISFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e02c      	b.n	80064d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800647c:	88fb      	ldrh	r3, [r7, #6]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d105      	bne.n	800648e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006482:	893b      	ldrh	r3, [r7, #8]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
 800648c:	e015      	b.n	80064ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800648e:	893b      	ldrh	r3, [r7, #8]
 8006490:	0a1b      	lsrs	r3, r3, #8
 8006492:	b29b      	uxth	r3, r3
 8006494:	b2da      	uxtb	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	69b9      	ldr	r1, [r7, #24]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f892 	bl	80065ca <I2C_WaitOnTXISFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e012      	b.n	80064d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064b0:	893b      	ldrh	r3, [r7, #8]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2200      	movs	r2, #0
 80064c2:	2140      	movs	r1, #64	; 0x40
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f831 	bl	800652c <I2C_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	80002000 	.word	0x80002000

080064e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d103      	bne.n	8006502 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b01      	cmp	r3, #1
 800650e:	d007      	beq.n	8006520 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	619a      	str	r2, [r3, #24]
  }
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800653c:	e031      	b.n	80065a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d02d      	beq.n	80065a2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fd faa5 	bl	8003a94 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d122      	bne.n	80065a2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4013      	ands	r3, r2
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	429a      	cmp	r2, r3
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	461a      	mov	r2, r3
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	429a      	cmp	r2, r3
 8006578:	d113      	bne.n	80065a2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	f043 0220 	orr.w	r2, r3, #32
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e00f      	b.n	80065c2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699a      	ldr	r2, [r3, #24]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4013      	ands	r3, r2
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	bf0c      	ite	eq
 80065b2:	2301      	moveq	r3, #1
 80065b4:	2300      	movne	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d0be      	beq.n	800653e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065d6:	e033      	b.n	8006640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f87f 	bl	80066e0 <I2C_IsErrorOccurred>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e031      	b.n	8006650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d025      	beq.n	8006640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f4:	f7fd fa4e 	bl	8003a94 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	429a      	cmp	r2, r3
 8006602:	d302      	bcc.n	800660a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d11a      	bne.n	8006640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b02      	cmp	r3, #2
 8006616:	d013      	beq.n	8006640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	f043 0220 	orr.w	r2, r3, #32
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e007      	b.n	8006650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d1c4      	bne.n	80065d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006664:	e02f      	b.n	80066c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f838 	bl	80066e0 <I2C_IsErrorOccurred>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e02d      	b.n	80066d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667a:	f7fd fa0b 	bl	8003a94 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	429a      	cmp	r2, r3
 8006688:	d302      	bcc.n	8006690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11a      	bne.n	80066c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b20      	cmp	r3, #32
 800669c:	d013      	beq.n	80066c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	f043 0220 	orr.w	r2, r3, #32
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e007      	b.n	80066d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d1c8      	bne.n	8006666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08a      	sub	sp, #40	; 0x28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	d068      	beq.n	80067de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2210      	movs	r2, #16
 8006712:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006714:	e049      	b.n	80067aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d045      	beq.n	80067aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800671e:	f7fd f9b9 	bl	8003a94 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	d302      	bcc.n	8006734 <I2C_IsErrorOccurred+0x54>
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d13a      	bne.n	80067aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800673e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006746:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006756:	d121      	bne.n	800679c <I2C_IsErrorOccurred+0xbc>
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800675e:	d01d      	beq.n	800679c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006760:	7cfb      	ldrb	r3, [r7, #19]
 8006762:	2b20      	cmp	r3, #32
 8006764:	d01a      	beq.n	800679c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006774:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006776:	f7fd f98d 	bl	8003a94 <HAL_GetTick>
 800677a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800677c:	e00e      	b.n	800679c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800677e:	f7fd f989 	bl	8003a94 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b19      	cmp	r3, #25
 800678a:	d907      	bls.n	800679c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	f043 0320 	orr.w	r3, r3, #32
 8006792:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800679a:	e006      	b.n	80067aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d1e9      	bne.n	800677e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d003      	beq.n	80067c0 <I2C_IsErrorOccurred+0xe0>
 80067b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0aa      	beq.n	8006716 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80067c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d103      	bne.n	80067d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2220      	movs	r2, #32
 80067ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	f043 0304 	orr.w	r3, r3, #4
 80067d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00b      	beq.n	800682a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f043 0308 	orr.w	r3, r3, #8
 8006818:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	f043 0302 	orr.w	r3, r3, #2
 800683a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800684c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01c      	beq.n	800688e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff fe45 	bl	80064e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6859      	ldr	r1, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	4b0d      	ldr	r3, [pc, #52]	; (800689c <I2C_IsErrorOccurred+0x1bc>)
 8006866:	400b      	ands	r3, r1
 8006868:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	431a      	orrs	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800688e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006892:	4618      	mov	r0, r3
 8006894:	3728      	adds	r7, #40	; 0x28
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	fe00e800 	.word	0xfe00e800

080068a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	817b      	strh	r3, [r7, #10]
 80068ae:	4613      	mov	r3, r2
 80068b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068b2:	897b      	ldrh	r3, [r7, #10]
 80068b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068b8:	7a7b      	ldrb	r3, [r7, #9]
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	0d5b      	lsrs	r3, r3, #21
 80068da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80068de:	4b08      	ldr	r3, [pc, #32]	; (8006900 <I2C_TransferConfig+0x60>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	43db      	mvns	r3, r3
 80068e4:	ea02 0103 	and.w	r1, r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	03ff63ff 	.word	0x03ff63ff

08006904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b20      	cmp	r3, #32
 8006918:	d138      	bne.n	800698c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006924:	2302      	movs	r3, #2
 8006926:	e032      	b.n	800698e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2224      	movs	r2, #36	; 0x24
 8006934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6819      	ldr	r1, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	e000      	b.n	800698e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800698c:	2302      	movs	r3, #2
  }
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800699a:	b480      	push	{r7}
 800699c:	b085      	sub	sp, #20
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d139      	bne.n	8006a24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e033      	b.n	8006a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2224      	movs	r2, #36	; 0x24
 80069ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	021b      	lsls	r3, r3, #8
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	e000      	b.n	8006a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006a24:	2302      	movs	r3, #2
  }
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e0bf      	b.n	8006bc6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f8ba 	bl	8006bd4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006a76:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6999      	ldr	r1, [r3, #24]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a8c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6899      	ldr	r1, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b4a      	ldr	r3, [pc, #296]	; (8006bd0 <HAL_LTDC_Init+0x19c>)
 8006aa8:	400b      	ands	r3, r1
 8006aaa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6899      	ldr	r1, [r3, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68d9      	ldr	r1, [r3, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4b3e      	ldr	r3, [pc, #248]	; (8006bd0 <HAL_LTDC_Init+0x19c>)
 8006ad6:	400b      	ands	r3, r1
 8006ad8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68d9      	ldr	r1, [r3, #12]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a1a      	ldr	r2, [r3, #32]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6919      	ldr	r1, [r3, #16]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	4b33      	ldr	r3, [pc, #204]	; (8006bd0 <HAL_LTDC_Init+0x19c>)
 8006b04:	400b      	ands	r3, r1
 8006b06:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	041b      	lsls	r3, r3, #16
 8006b0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6919      	ldr	r1, [r3, #16]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6959      	ldr	r1, [r3, #20]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	4b27      	ldr	r3, [pc, #156]	; (8006bd0 <HAL_LTDC_Init+0x19c>)
 8006b32:	400b      	ands	r3, r1
 8006b34:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	041b      	lsls	r3, r3, #16
 8006b3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6959      	ldr	r1, [r3, #20]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b5a:	021b      	lsls	r3, r3, #8
 8006b5c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006b64:	041b      	lsls	r3, r3, #16
 8006b66:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0206 	orr.w	r2, r2, #6
 8006ba2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	f000f800 	.word	0xf000f800

08006bd4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006be8:	b5b0      	push	{r4, r5, r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_LTDC_ConfigLayer+0x1a>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e02c      	b.n	8006c5c <HAL_LTDC_ConfigLayer+0x74>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2134      	movs	r1, #52	; 0x34
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4614      	mov	r4, r2
 8006c26:	461d      	mov	r5, r3
 8006c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f811 	bl	8006c64 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2201      	movs	r2, #1
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bdb0      	pop	{r4, r5, r7, pc}

08006c64 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b089      	sub	sp, #36	; 0x24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	0c1b      	lsrs	r3, r3, #16
 8006c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c80:	4413      	add	r3, r2
 8006c82:	041b      	lsls	r3, r3, #16
 8006c84:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	01db      	lsls	r3, r3, #7
 8006c90:	4413      	add	r3, r2
 8006c92:	3384      	adds	r3, #132	; 0x84
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	01d2      	lsls	r2, r2, #7
 8006ca0:	440a      	add	r2, r1
 8006ca2:	3284      	adds	r2, #132	; 0x84
 8006ca4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006ca8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	0c1b      	lsrs	r3, r3, #16
 8006cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006cba:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006cbc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	01db      	lsls	r3, r3, #7
 8006cc8:	440b      	add	r3, r1
 8006cca:	3384      	adds	r3, #132	; 0x84
 8006ccc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006cd2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce2:	4413      	add	r3, r2
 8006ce4:	041b      	lsls	r3, r3, #16
 8006ce6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	01db      	lsls	r3, r3, #7
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3384      	adds	r3, #132	; 0x84
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	01d2      	lsls	r2, r2, #7
 8006d02:	440a      	add	r2, r1
 8006d04:	3284      	adds	r2, #132	; 0x84
 8006d06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006d0a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d1a:	4413      	add	r3, r2
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4619      	mov	r1, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	01db      	lsls	r3, r3, #7
 8006d28:	440b      	add	r3, r1
 8006d2a:	3384      	adds	r3, #132	; 0x84
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	01db      	lsls	r3, r3, #7
 8006d3e:	4413      	add	r3, r2
 8006d40:	3384      	adds	r3, #132	; 0x84
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	01d2      	lsls	r2, r2, #7
 8006d4e:	440a      	add	r2, r1
 8006d50:	3284      	adds	r2, #132	; 0x84
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	01db      	lsls	r3, r3, #7
 8006d62:	4413      	add	r3, r2
 8006d64:	3384      	adds	r3, #132	; 0x84
 8006d66:	461a      	mov	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d7e:	041b      	lsls	r3, r3, #16
 8006d80:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	061b      	lsls	r3, r3, #24
 8006d88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	01db      	lsls	r3, r3, #7
 8006d94:	4413      	add	r3, r2
 8006d96:	3384      	adds	r3, #132	; 0x84
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	01db      	lsls	r3, r3, #7
 8006da4:	4413      	add	r3, r2
 8006da6:	3384      	adds	r3, #132	; 0x84
 8006da8:	461a      	mov	r2, r3
 8006daa:	2300      	movs	r3, #0
 8006dac:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006db4:	461a      	mov	r2, r3
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	01db      	lsls	r3, r3, #7
 8006dc8:	440b      	add	r3, r1
 8006dca:	3384      	adds	r3, #132	; 0x84
 8006dcc:	4619      	mov	r1, r3
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	01db      	lsls	r3, r3, #7
 8006dde:	4413      	add	r3, r2
 8006de0:	3384      	adds	r3, #132	; 0x84
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	6812      	ldr	r2, [r2, #0]
 8006de8:	4611      	mov	r1, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	01d2      	lsls	r2, r2, #7
 8006dee:	440a      	add	r2, r1
 8006df0:	3284      	adds	r2, #132	; 0x84
 8006df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006df6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	01db      	lsls	r3, r3, #7
 8006e02:	4413      	add	r3, r2
 8006e04:	3384      	adds	r3, #132	; 0x84
 8006e06:	461a      	mov	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	01db      	lsls	r3, r3, #7
 8006e18:	4413      	add	r3, r2
 8006e1a:	3384      	adds	r3, #132	; 0x84
 8006e1c:	69da      	ldr	r2, [r3, #28]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4619      	mov	r1, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	01db      	lsls	r3, r3, #7
 8006e28:	440b      	add	r3, r1
 8006e2a:	3384      	adds	r3, #132	; 0x84
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4b58      	ldr	r3, [pc, #352]	; (8006f90 <LTDC_SetConfig+0x32c>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	68f9      	ldr	r1, [r7, #12]
 8006e3e:	6809      	ldr	r1, [r1, #0]
 8006e40:	4608      	mov	r0, r1
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	01c9      	lsls	r1, r1, #7
 8006e46:	4401      	add	r1, r0
 8006e48:	3184      	adds	r1, #132	; 0x84
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	01db      	lsls	r3, r3, #7
 8006e58:	4413      	add	r3, r2
 8006e5a:	3384      	adds	r3, #132	; 0x84
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	01db      	lsls	r3, r3, #7
 8006e68:	4413      	add	r3, r2
 8006e6a:	3384      	adds	r3, #132	; 0x84
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	01db      	lsls	r3, r3, #7
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3384      	adds	r3, #132	; 0x84
 8006e80:	461a      	mov	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006e90:	2304      	movs	r3, #4
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e01b      	b.n	8006ece <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d102      	bne.n	8006ea4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	e014      	b.n	8006ece <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d00b      	beq.n	8006ec4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d007      	beq.n	8006ec4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d003      	beq.n	8006ec4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ec0:	2b07      	cmp	r3, #7
 8006ec2:	d102      	bne.n	8006eca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	e001      	b.n	8006ece <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	01db      	lsls	r3, r3, #7
 8006ed8:	4413      	add	r3, r2
 8006eda:	3384      	adds	r3, #132	; 0x84
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	01d2      	lsls	r2, r2, #7
 8006ee8:	440a      	add	r2, r1
 8006eea:	3284      	adds	r2, #132	; 0x84
 8006eec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
 8006efc:	041a      	lsls	r2, r3, #16
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6859      	ldr	r1, [r3, #4]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	1acb      	subs	r3, r1, r3
 8006f08:	69f9      	ldr	r1, [r7, #28]
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	3307      	adds	r3, #7
 8006f10:	68f9      	ldr	r1, [r7, #12]
 8006f12:	6809      	ldr	r1, [r1, #0]
 8006f14:	4608      	mov	r0, r1
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	01c9      	lsls	r1, r1, #7
 8006f1a:	4401      	add	r1, r0
 8006f1c:	3184      	adds	r1, #132	; 0x84
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	01db      	lsls	r3, r3, #7
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3384      	adds	r3, #132	; 0x84
 8006f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	01db      	lsls	r3, r3, #7
 8006f3c:	440b      	add	r3, r1
 8006f3e:	3384      	adds	r3, #132	; 0x84
 8006f40:	4619      	mov	r1, r3
 8006f42:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <LTDC_SetConfig+0x330>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	01db      	lsls	r3, r3, #7
 8006f52:	4413      	add	r3, r2
 8006f54:	3384      	adds	r3, #132	; 0x84
 8006f56:	461a      	mov	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	01db      	lsls	r3, r3, #7
 8006f68:	4413      	add	r3, r2
 8006f6a:	3384      	adds	r3, #132	; 0x84
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	6812      	ldr	r2, [r2, #0]
 8006f72:	4611      	mov	r1, r2
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	01d2      	lsls	r2, r2, #7
 8006f78:	440a      	add	r2, r1
 8006f7a:	3284      	adds	r2, #132	; 0x84
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	6013      	str	r3, [r2, #0]
}
 8006f82:	bf00      	nop
 8006f84:	3724      	adds	r7, #36	; 0x24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	fffff8f8 	.word	0xfffff8f8
 8006f94:	fffff800 	.word	0xfffff800

08006f98 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fa0:	f7fc fd78 	bl	8003a94 <HAL_GetTick>
 8006fa4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e03b      	b.n	8007028 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006fd0:	e00f      	b.n	8006ff2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8006fd2:	f7fc fd5f 	bl	8003a94 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b05      	cmp	r3, #5
 8006fde:	d908      	bls.n	8006ff2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2240      	movs	r2, #64	; 0x40
 8006fe4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2203      	movs	r2, #3
 8006fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e01a      	b.n	8007028 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e8      	bne.n	8006fd2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f9c1 	bl	8007388 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e048      	b.n	80070d4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2200      	movs	r2, #0
 8007058:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2200      	movs	r2, #0
 8007060:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2200      	movs	r2, #0
 8007068:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2200      	movs	r2, #0
 8007070:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	221f      	movs	r2, #31
 80070a8:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070ec:	4b91      	ldr	r3, [pc, #580]	; (8007334 <HAL_MDMA_IRQHandler+0x254>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a91      	ldr	r2, [pc, #580]	; (8007338 <HAL_MDMA_IRQHandler+0x258>)
 80070f2:	fba2 2303 	umull	r2, r3, r2, r3
 80070f6:	0a9b      	lsrs	r3, r3, #10
 80070f8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	4b8e      	ldr	r3, [pc, #568]	; (800733c <HAL_MDMA_IRQHandler+0x25c>)
 8007102:	4413      	add	r3, r2
 8007104:	099b      	lsrs	r3, r3, #6
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2201      	movs	r2, #1
 800710c:	fa02 f303 	lsl.w	r3, r2, r3
 8007110:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8007112:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 812d 	beq.w	800737c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d054      	beq.n	80071da <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d04d      	beq.n	80071da <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0202 	bic.w	r2, r2, #2
 800714c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	d106      	bne.n	800716e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007164:	f043 0201 	orr.w	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	669a      	str	r2, [r3, #104]	; 0x68
 800716c:	e005      	b.n	800717a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007172:	f043 0202 	orr.w	r2, r3, #2
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007188:	f043 0204 	orr.w	r2, r3, #4
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800719e:	f043 0208 	orr.w	r2, r3, #8
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071b4:	f043 0210 	orr.w	r2, r3, #16
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ca:	f043 0220 	orr.w	r2, r3, #32
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2201      	movs	r2, #1
 80071d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d012      	beq.n	800720e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2210      	movs	r2, #16
 80071fc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d012      	beq.n	8007242 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00b      	beq.n	8007242 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2208      	movs	r2, #8
 8007230:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d012      	beq.n	8007276 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2204      	movs	r2, #4
 8007264:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d039      	beq.n	80072f8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d032      	beq.n	80072f8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80072a0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d110      	bne.n	80072d0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d05c      	beq.n	8007380 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	4798      	blx	r3
        }
        return;
 80072ce:	e057      	b.n	8007380 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2202      	movs	r2, #2
 80072d6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d040      	beq.n	8007382 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2204      	movs	r2, #4
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0201 	bic.w	r2, r2, #1
 8007316:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	3301      	adds	r3, #1
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	429a      	cmp	r2, r3
 8007322:	d30d      	bcc.n	8007340 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f2      	bne.n	8007318 <HAL_MDMA_IRQHandler+0x238>
 8007332:	e006      	b.n	8007342 <HAL_MDMA_IRQHandler+0x262>
 8007334:	2400001c 	.word	0x2400001c
 8007338:	1b4e81b5 	.word	0x1b4e81b5
 800733c:	adffffc0 	.word	0xadffffc0
        break;
 8007340:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2203      	movs	r2, #3
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007360:	e003      	b.n	800736a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	2b00      	cmp	r3, #0
 8007370:	d007      	beq.n	8007382 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
 800737a:	e002      	b.n	8007382 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800737c:	bf00      	nop
 800737e:	e000      	b.n	8007382 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8007380:	bf00      	nop
    }
  }
}
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68d9      	ldr	r1, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	695a      	ldr	r2, [r3, #20]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80073ae:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80073ba:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80073c6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	3b01      	subs	r3, #1
 80073ce:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80073d0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80073dc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80073de:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e8:	d107      	bne.n	80073fa <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80073f8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2200      	movs	r2, #0
 8007400:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007406:	2b00      	cmp	r3, #0
 8007408:	da11      	bge.n	800742e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695a      	ldr	r2, [r3, #20]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007418:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741e:	425b      	negs	r3, r3
 8007420:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	b292      	uxth	r2, r2
 800742a:	621a      	str	r2, [r3, #32]
 800742c:	e006      	b.n	800743c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b292      	uxth	r2, r2
 800743a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	2b00      	cmp	r3, #0
 8007442:	da15      	bge.n	8007470 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695a      	ldr	r2, [r3, #20]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007452:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	425b      	negs	r3, r3
 800745a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6a19      	ldr	r1, [r3, #32]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	041a      	lsls	r2, r3, #16
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	621a      	str	r2, [r3, #32]
 800746e:	e009      	b.n	8007484 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6a19      	ldr	r1, [r3, #32]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	041a      	lsls	r2, r3, #16
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748c:	d006      	beq.n	800749c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	629a      	str	r2, [r3, #40]	; 0x28
 800749a:	e003      	b.n	80074a4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2200      	movs	r2, #0
 80074a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2200      	movs	r2, #0
 80074aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80074ac:	bf00      	nop
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80074c0:	4b19      	ldr	r3, [pc, #100]	; (8007528 <HAL_PWREx_ConfigSupply+0x70>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d00a      	beq.n	80074e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80074cc:	4b16      	ldr	r3, [pc, #88]	; (8007528 <HAL_PWREx_ConfigSupply+0x70>)
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d001      	beq.n	80074de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e01f      	b.n	800751e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	e01d      	b.n	800751e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80074e2:	4b11      	ldr	r3, [pc, #68]	; (8007528 <HAL_PWREx_ConfigSupply+0x70>)
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f023 0207 	bic.w	r2, r3, #7
 80074ea:	490f      	ldr	r1, [pc, #60]	; (8007528 <HAL_PWREx_ConfigSupply+0x70>)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80074f2:	f7fc facf 	bl	8003a94 <HAL_GetTick>
 80074f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074f8:	e009      	b.n	800750e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074fa:	f7fc facb 	bl	8003a94 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007508:	d901      	bls.n	800750e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e007      	b.n	800751e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800750e:	4b06      	ldr	r3, [pc, #24]	; (8007528 <HAL_PWREx_ConfigSupply+0x70>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800751a:	d1ee      	bne.n	80074fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	58024800 	.word	0x58024800

0800752c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08c      	sub	sp, #48	; 0x30
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f000 bc48 	b.w	8007dd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8088 	beq.w	800765e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800754e:	4b99      	ldr	r3, [pc, #612]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007558:	4b96      	ldr	r3, [pc, #600]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	2b10      	cmp	r3, #16
 8007562:	d007      	beq.n	8007574 <HAL_RCC_OscConfig+0x48>
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	2b18      	cmp	r3, #24
 8007568:	d111      	bne.n	800758e <HAL_RCC_OscConfig+0x62>
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d10c      	bne.n	800758e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007574:	4b8f      	ldr	r3, [pc, #572]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d06d      	beq.n	800765c <HAL_RCC_OscConfig+0x130>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d169      	bne.n	800765c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	f000 bc21 	b.w	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007596:	d106      	bne.n	80075a6 <HAL_RCC_OscConfig+0x7a>
 8007598:	4b86      	ldr	r3, [pc, #536]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a85      	ldr	r2, [pc, #532]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 800759e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	e02e      	b.n	8007604 <HAL_RCC_OscConfig+0xd8>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10c      	bne.n	80075c8 <HAL_RCC_OscConfig+0x9c>
 80075ae:	4b81      	ldr	r3, [pc, #516]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a80      	ldr	r2, [pc, #512]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	4b7e      	ldr	r3, [pc, #504]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a7d      	ldr	r2, [pc, #500]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	e01d      	b.n	8007604 <HAL_RCC_OscConfig+0xd8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075d0:	d10c      	bne.n	80075ec <HAL_RCC_OscConfig+0xc0>
 80075d2:	4b78      	ldr	r3, [pc, #480]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a77      	ldr	r2, [pc, #476]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	4b75      	ldr	r3, [pc, #468]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a74      	ldr	r2, [pc, #464]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e00b      	b.n	8007604 <HAL_RCC_OscConfig+0xd8>
 80075ec:	4b71      	ldr	r3, [pc, #452]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a70      	ldr	r2, [pc, #448]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	4b6e      	ldr	r3, [pc, #440]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a6d      	ldr	r2, [pc, #436]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80075fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d013      	beq.n	8007634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fc fa42 	bl	8003a94 <HAL_GetTick>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007614:	f7fc fa3e 	bl	8003a94 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b64      	cmp	r3, #100	; 0x64
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e3d4      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007626:	4b63      	ldr	r3, [pc, #396]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0xe8>
 8007632:	e014      	b.n	800765e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fc fa2e 	bl	8003a94 <HAL_GetTick>
 8007638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800763c:	f7fc fa2a 	bl	8003a94 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b64      	cmp	r3, #100	; 0x64
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e3c0      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800764e:	4b59      	ldr	r3, [pc, #356]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f0      	bne.n	800763c <HAL_RCC_OscConfig+0x110>
 800765a:	e000      	b.n	800765e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800765c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	f000 80ca 	beq.w	8007800 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800766c:	4b51      	ldr	r3, [pc, #324]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007674:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007676:	4b4f      	ldr	r3, [pc, #316]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <HAL_RCC_OscConfig+0x166>
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	2b18      	cmp	r3, #24
 8007686:	d156      	bne.n	8007736 <HAL_RCC_OscConfig+0x20a>
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d151      	bne.n	8007736 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007692:	4b48      	ldr	r3, [pc, #288]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_RCC_OscConfig+0x17e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e392      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076aa:	4b42      	ldr	r3, [pc, #264]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 0219 	bic.w	r2, r3, #25
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	493f      	ldr	r1, [pc, #252]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076bc:	f7fc f9ea 	bl	8003a94 <HAL_GetTick>
 80076c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076c4:	f7fc f9e6 	bl	8003a94 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e37c      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076d6:	4b37      	ldr	r3, [pc, #220]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e2:	f7fc fa07 	bl	8003af4 <HAL_GetREVID>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d817      	bhi.n	8007720 <HAL_RCC_OscConfig+0x1f4>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b40      	cmp	r3, #64	; 0x40
 80076f6:	d108      	bne.n	800770a <HAL_RCC_OscConfig+0x1de>
 80076f8:	4b2e      	ldr	r3, [pc, #184]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007700:	4a2c      	ldr	r2, [pc, #176]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007706:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007708:	e07a      	b.n	8007800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800770a:	4b2a      	ldr	r3, [pc, #168]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	031b      	lsls	r3, r3, #12
 8007718:	4926      	ldr	r1, [pc, #152]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 800771a:	4313      	orrs	r3, r2
 800771c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800771e:	e06f      	b.n	8007800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007720:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	061b      	lsls	r3, r3, #24
 800772e:	4921      	ldr	r1, [pc, #132]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007730:	4313      	orrs	r3, r2
 8007732:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007734:	e064      	b.n	8007800 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d047      	beq.n	80077ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800773e:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f023 0219 	bic.w	r2, r3, #25
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	491a      	ldr	r1, [pc, #104]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 800774c:	4313      	orrs	r3, r2
 800774e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007750:	f7fc f9a0 	bl	8003a94 <HAL_GetTick>
 8007754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007758:	f7fc f99c 	bl	8003a94 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e332      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800776a:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0304 	and.w	r3, r3, #4
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0f0      	beq.n	8007758 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007776:	f7fc f9bd 	bl	8003af4 <HAL_GetREVID>
 800777a:	4603      	mov	r3, r0
 800777c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007780:	4293      	cmp	r3, r2
 8007782:	d819      	bhi.n	80077b8 <HAL_RCC_OscConfig+0x28c>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	d108      	bne.n	800779e <HAL_RCC_OscConfig+0x272>
 800778c:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007794:	4a07      	ldr	r2, [pc, #28]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 8007796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779a:	6053      	str	r3, [r2, #4]
 800779c:	e030      	b.n	8007800 <HAL_RCC_OscConfig+0x2d4>
 800779e:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	031b      	lsls	r3, r3, #12
 80077ac:	4901      	ldr	r1, [pc, #4]	; (80077b4 <HAL_RCC_OscConfig+0x288>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	604b      	str	r3, [r1, #4]
 80077b2:	e025      	b.n	8007800 <HAL_RCC_OscConfig+0x2d4>
 80077b4:	58024400 	.word	0x58024400
 80077b8:	4b9a      	ldr	r3, [pc, #616]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	061b      	lsls	r3, r3, #24
 80077c6:	4997      	ldr	r1, [pc, #604]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	604b      	str	r3, [r1, #4]
 80077cc:	e018      	b.n	8007800 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ce:	4b95      	ldr	r3, [pc, #596]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a94      	ldr	r2, [pc, #592]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80077d4:	f023 0301 	bic.w	r3, r3, #1
 80077d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077da:	f7fc f95b 	bl	8003a94 <HAL_GetTick>
 80077de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077e2:	f7fc f957 	bl	8003a94 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e2ed      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077f4:	4b8b      	ldr	r3, [pc, #556]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f0      	bne.n	80077e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80a9 	beq.w	8007960 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800780e:	4b85      	ldr	r3, [pc, #532]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007818:	4b82      	ldr	r3, [pc, #520]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b08      	cmp	r3, #8
 8007822:	d007      	beq.n	8007834 <HAL_RCC_OscConfig+0x308>
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	2b18      	cmp	r3, #24
 8007828:	d13a      	bne.n	80078a0 <HAL_RCC_OscConfig+0x374>
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f003 0303 	and.w	r3, r3, #3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d135      	bne.n	80078a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007834:	4b7b      	ldr	r3, [pc, #492]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_RCC_OscConfig+0x320>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	2b80      	cmp	r3, #128	; 0x80
 8007846:	d001      	beq.n	800784c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e2c1      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800784c:	f7fc f952 	bl	8003af4 <HAL_GetREVID>
 8007850:	4603      	mov	r3, r0
 8007852:	f241 0203 	movw	r2, #4099	; 0x1003
 8007856:	4293      	cmp	r3, r2
 8007858:	d817      	bhi.n	800788a <HAL_RCC_OscConfig+0x35e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	2b20      	cmp	r3, #32
 8007860:	d108      	bne.n	8007874 <HAL_RCC_OscConfig+0x348>
 8007862:	4b70      	ldr	r3, [pc, #448]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800786a:	4a6e      	ldr	r2, [pc, #440]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 800786c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007870:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007872:	e075      	b.n	8007960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007874:	4b6b      	ldr	r3, [pc, #428]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	069b      	lsls	r3, r3, #26
 8007882:	4968      	ldr	r1, [pc, #416]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007884:	4313      	orrs	r3, r2
 8007886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007888:	e06a      	b.n	8007960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800788a:	4b66      	ldr	r3, [pc, #408]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	061b      	lsls	r3, r3, #24
 8007898:	4962      	ldr	r1, [pc, #392]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 800789a:	4313      	orrs	r3, r2
 800789c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800789e:	e05f      	b.n	8007960 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d042      	beq.n	800792e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80078a8:	4b5e      	ldr	r3, [pc, #376]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a5d      	ldr	r2, [pc, #372]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b4:	f7fc f8ee 	bl	8003a94 <HAL_GetTick>
 80078b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80078bc:	f7fc f8ea 	bl	8003a94 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e280      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078ce:	4b55      	ldr	r3, [pc, #340]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0f0      	beq.n	80078bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078da:	f7fc f90b 	bl	8003af4 <HAL_GetREVID>
 80078de:	4603      	mov	r3, r0
 80078e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d817      	bhi.n	8007918 <HAL_RCC_OscConfig+0x3ec>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d108      	bne.n	8007902 <HAL_RCC_OscConfig+0x3d6>
 80078f0:	4b4c      	ldr	r3, [pc, #304]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80078f8:	4a4a      	ldr	r2, [pc, #296]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80078fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078fe:	6053      	str	r3, [r2, #4]
 8007900:	e02e      	b.n	8007960 <HAL_RCC_OscConfig+0x434>
 8007902:	4b48      	ldr	r3, [pc, #288]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	069b      	lsls	r3, r3, #26
 8007910:	4944      	ldr	r1, [pc, #272]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007912:	4313      	orrs	r3, r2
 8007914:	604b      	str	r3, [r1, #4]
 8007916:	e023      	b.n	8007960 <HAL_RCC_OscConfig+0x434>
 8007918:	4b42      	ldr	r3, [pc, #264]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	061b      	lsls	r3, r3, #24
 8007926:	493f      	ldr	r1, [pc, #252]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007928:	4313      	orrs	r3, r2
 800792a:	60cb      	str	r3, [r1, #12]
 800792c:	e018      	b.n	8007960 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800792e:	4b3d      	ldr	r3, [pc, #244]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a3c      	ldr	r2, [pc, #240]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793a:	f7fc f8ab 	bl	8003a94 <HAL_GetTick>
 800793e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007942:	f7fc f8a7 	bl	8003a94 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e23d      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007954:	4b33      	ldr	r3, [pc, #204]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f0      	bne.n	8007942 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	2b00      	cmp	r3, #0
 800796a:	d036      	beq.n	80079da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d019      	beq.n	80079a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007974:	4b2b      	ldr	r3, [pc, #172]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007978:	4a2a      	ldr	r2, [pc, #168]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007980:	f7fc f888 	bl	8003a94 <HAL_GetTick>
 8007984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007986:	e008      	b.n	800799a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007988:	f7fc f884 	bl	8003a94 <HAL_GetTick>
 800798c:	4602      	mov	r2, r0
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d901      	bls.n	800799a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e21a      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800799a:	4b22      	ldr	r3, [pc, #136]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 800799c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0f0      	beq.n	8007988 <HAL_RCC_OscConfig+0x45c>
 80079a6:	e018      	b.n	80079da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079a8:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80079aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ac:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b4:	f7fc f86e 	bl	8003a94 <HAL_GetTick>
 80079b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079bc:	f7fc f86a 	bl	8003a94 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e200      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80079ce:	4b15      	ldr	r3, [pc, #84]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80079d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1f0      	bne.n	80079bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0320 	and.w	r3, r3, #32
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d039      	beq.n	8007a5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d01c      	beq.n	8007a28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80079ee:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a0c      	ldr	r2, [pc, #48]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 80079f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80079fa:	f7fc f84b 	bl	8003a94 <HAL_GetTick>
 80079fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a00:	e008      	b.n	8007a14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a02:	f7fc f847 	bl	8003a94 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e1dd      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a14:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <HAL_RCC_OscConfig+0x4f8>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0f0      	beq.n	8007a02 <HAL_RCC_OscConfig+0x4d6>
 8007a20:	e01b      	b.n	8007a5a <HAL_RCC_OscConfig+0x52e>
 8007a22:	bf00      	nop
 8007a24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a28:	4b9b      	ldr	r3, [pc, #620]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a9a      	ldr	r2, [pc, #616]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a34:	f7fc f82e 	bl	8003a94 <HAL_GetTick>
 8007a38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a3c:	f7fc f82a 	bl	8003a94 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e1c0      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a4e:	4b92      	ldr	r3, [pc, #584]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f0      	bne.n	8007a3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8081 	beq.w	8007b6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a68:	4b8c      	ldr	r3, [pc, #560]	; (8007c9c <HAL_RCC_OscConfig+0x770>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a8b      	ldr	r2, [pc, #556]	; (8007c9c <HAL_RCC_OscConfig+0x770>)
 8007a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a74:	f7fc f80e 	bl	8003a94 <HAL_GetTick>
 8007a78:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a7c:	f7fc f80a 	bl	8003a94 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b64      	cmp	r3, #100	; 0x64
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e1a0      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a8e:	4b83      	ldr	r3, [pc, #524]	; (8007c9c <HAL_RCC_OscConfig+0x770>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0f0      	beq.n	8007a7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d106      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x584>
 8007aa2:	4b7d      	ldr	r3, [pc, #500]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	4a7c      	ldr	r2, [pc, #496]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007aa8:	f043 0301 	orr.w	r3, r3, #1
 8007aac:	6713      	str	r3, [r2, #112]	; 0x70
 8007aae:	e02d      	b.n	8007b0c <HAL_RCC_OscConfig+0x5e0>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10c      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x5a6>
 8007ab8:	4b77      	ldr	r3, [pc, #476]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	4a76      	ldr	r2, [pc, #472]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac4:	4b74      	ldr	r3, [pc, #464]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac8:	4a73      	ldr	r2, [pc, #460]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007aca:	f023 0304 	bic.w	r3, r3, #4
 8007ace:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad0:	e01c      	b.n	8007b0c <HAL_RCC_OscConfig+0x5e0>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b05      	cmp	r3, #5
 8007ad8:	d10c      	bne.n	8007af4 <HAL_RCC_OscConfig+0x5c8>
 8007ada:	4b6f      	ldr	r3, [pc, #444]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ade:	4a6e      	ldr	r2, [pc, #440]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007ae0:	f043 0304 	orr.w	r3, r3, #4
 8007ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae6:	4b6c      	ldr	r3, [pc, #432]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	4a6b      	ldr	r2, [pc, #428]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007aec:	f043 0301 	orr.w	r3, r3, #1
 8007af0:	6713      	str	r3, [r2, #112]	; 0x70
 8007af2:	e00b      	b.n	8007b0c <HAL_RCC_OscConfig+0x5e0>
 8007af4:	4b68      	ldr	r3, [pc, #416]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af8:	4a67      	ldr	r2, [pc, #412]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007afa:	f023 0301 	bic.w	r3, r3, #1
 8007afe:	6713      	str	r3, [r2, #112]	; 0x70
 8007b00:	4b65      	ldr	r3, [pc, #404]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b04:	4a64      	ldr	r2, [pc, #400]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007b06:	f023 0304 	bic.w	r3, r3, #4
 8007b0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d015      	beq.n	8007b40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b14:	f7fb ffbe 	bl	8003a94 <HAL_GetTick>
 8007b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b1a:	e00a      	b.n	8007b32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b1c:	f7fb ffba 	bl	8003a94 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e14e      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b32:	4b59      	ldr	r3, [pc, #356]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0ee      	beq.n	8007b1c <HAL_RCC_OscConfig+0x5f0>
 8007b3e:	e014      	b.n	8007b6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b40:	f7fb ffa8 	bl	8003a94 <HAL_GetTick>
 8007b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b46:	e00a      	b.n	8007b5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b48:	f7fb ffa4 	bl	8003a94 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e138      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b5e:	4b4e      	ldr	r3, [pc, #312]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1ee      	bne.n	8007b48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 812d 	beq.w	8007dce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007b74:	4b48      	ldr	r3, [pc, #288]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b7c:	2b18      	cmp	r3, #24
 8007b7e:	f000 80bd 	beq.w	8007cfc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	f040 809e 	bne.w	8007cc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b8c:	4b42      	ldr	r3, [pc, #264]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a41      	ldr	r2, [pc, #260]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b98:	f7fb ff7c 	bl	8003a94 <HAL_GetTick>
 8007b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ba0:	f7fb ff78 	bl	8003a94 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e10e      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bb2:	4b39      	ldr	r3, [pc, #228]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1f0      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bbe:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bc2:	4b37      	ldr	r3, [pc, #220]	; (8007ca0 <HAL_RCC_OscConfig+0x774>)
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bce:	0112      	lsls	r2, r2, #4
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	4931      	ldr	r1, [pc, #196]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	628b      	str	r3, [r1, #40]	; 0x28
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	3b01      	subs	r3, #1
 8007be8:	025b      	lsls	r3, r3, #9
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	431a      	orrs	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	041b      	lsls	r3, r3, #16
 8007bf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c00:	3b01      	subs	r3, #1
 8007c02:	061b      	lsls	r3, r3, #24
 8007c04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c08:	4923      	ldr	r1, [pc, #140]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007c0e:	4b22      	ldr	r3, [pc, #136]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c12:	4a21      	ldr	r2, [pc, #132]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c14:	f023 0301 	bic.w	r3, r3, #1
 8007c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c1a:	4b1f      	ldr	r3, [pc, #124]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c1e:	4b21      	ldr	r3, [pc, #132]	; (8007ca4 <HAL_RCC_OscConfig+0x778>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c26:	00d2      	lsls	r2, r2, #3
 8007c28:	491b      	ldr	r1, [pc, #108]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c2e:	4b1a      	ldr	r3, [pc, #104]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c32:	f023 020c 	bic.w	r2, r3, #12
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	4917      	ldr	r1, [pc, #92]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c40:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	f023 0202 	bic.w	r2, r3, #2
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4c:	4912      	ldr	r1, [pc, #72]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	4a10      	ldr	r2, [pc, #64]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c5e:	4b0e      	ldr	r3, [pc, #56]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	4a0d      	ldr	r2, [pc, #52]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	4a0a      	ldr	r2, [pc, #40]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007c76:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	4a07      	ldr	r2, [pc, #28]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <HAL_RCC_OscConfig+0x76c>)
 8007c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8e:	f7fb ff01 	bl	8003a94 <HAL_GetTick>
 8007c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c94:	e011      	b.n	8007cba <HAL_RCC_OscConfig+0x78e>
 8007c96:	bf00      	nop
 8007c98:	58024400 	.word	0x58024400
 8007c9c:	58024800 	.word	0x58024800
 8007ca0:	fffffc0c 	.word	0xfffffc0c
 8007ca4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ca8:	f7fb fef4 	bl	8003a94 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e08a      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cba:	4b47      	ldr	r3, [pc, #284]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f0      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x77c>
 8007cc6:	e082      	b.n	8007dce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc8:	4b43      	ldr	r3, [pc, #268]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a42      	ldr	r2, [pc, #264]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd4:	f7fb fede 	bl	8003a94 <HAL_GetTick>
 8007cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cda:	e008      	b.n	8007cee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cdc:	f7fb feda 	bl	8003a94 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e070      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cee:	4b3a      	ldr	r3, [pc, #232]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1f0      	bne.n	8007cdc <HAL_RCC_OscConfig+0x7b0>
 8007cfa:	e068      	b.n	8007dce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007cfc:	4b36      	ldr	r3, [pc, #216]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d02:	4b35      	ldr	r3, [pc, #212]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d031      	beq.n	8007d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f003 0203 	and.w	r2, r3, #3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d12a      	bne.n	8007d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	091b      	lsrs	r3, r3, #4
 8007d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d122      	bne.n	8007d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d11a      	bne.n	8007d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	0a5b      	lsrs	r3, r3, #9
 8007d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d111      	bne.n	8007d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	0c1b      	lsrs	r3, r3, #16
 8007d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d108      	bne.n	8007d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	0e1b      	lsrs	r3, r3, #24
 8007d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d001      	beq.n	8007d78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e02b      	b.n	8007dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007d78:	4b17      	ldr	r3, [pc, #92]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7c:	08db      	lsrs	r3, r3, #3
 8007d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d01f      	beq.n	8007dce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007d8e:	4b12      	ldr	r3, [pc, #72]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	4a11      	ldr	r2, [pc, #68]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007d94:	f023 0301 	bic.w	r3, r3, #1
 8007d98:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d9a:	f7fb fe7b 	bl	8003a94 <HAL_GetTick>
 8007d9e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007da0:	bf00      	nop
 8007da2:	f7fb fe77 	bl	8003a94 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d0f9      	beq.n	8007da2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007dae:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007db2:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <HAL_RCC_OscConfig+0x8b0>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007dba:	00d2      	lsls	r2, r2, #3
 8007dbc:	4906      	ldr	r1, [pc, #24]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007dc2:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	4a04      	ldr	r2, [pc, #16]	; (8007dd8 <HAL_RCC_OscConfig+0x8ac>)
 8007dc8:	f043 0301 	orr.w	r3, r3, #1
 8007dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3730      	adds	r7, #48	; 0x30
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	58024400 	.word	0x58024400
 8007ddc:	ffff0007 	.word	0xffff0007

08007de0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e19c      	b.n	800812e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007df4:	4b8a      	ldr	r3, [pc, #552]	; (8008020 <HAL_RCC_ClockConfig+0x240>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 030f 	and.w	r3, r3, #15
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d910      	bls.n	8007e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e02:	4b87      	ldr	r3, [pc, #540]	; (8008020 <HAL_RCC_ClockConfig+0x240>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f023 020f 	bic.w	r2, r3, #15
 8007e0a:	4985      	ldr	r1, [pc, #532]	; (8008020 <HAL_RCC_ClockConfig+0x240>)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e12:	4b83      	ldr	r3, [pc, #524]	; (8008020 <HAL_RCC_ClockConfig+0x240>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d001      	beq.n	8007e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e184      	b.n	800812e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d010      	beq.n	8007e52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	4b7b      	ldr	r3, [pc, #492]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d908      	bls.n	8007e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e40:	4b78      	ldr	r3, [pc, #480]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	4975      	ldr	r1, [pc, #468]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0308 	and.w	r3, r3, #8
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d010      	beq.n	8007e80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	695a      	ldr	r2, [r3, #20]
 8007e62:	4b70      	ldr	r3, [pc, #448]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d908      	bls.n	8007e80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e6e:	4b6d      	ldr	r3, [pc, #436]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	496a      	ldr	r1, [pc, #424]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d010      	beq.n	8007eae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	699a      	ldr	r2, [r3, #24]
 8007e90:	4b64      	ldr	r3, [pc, #400]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d908      	bls.n	8007eae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e9c:	4b61      	ldr	r3, [pc, #388]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	495e      	ldr	r1, [pc, #376]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0320 	and.w	r3, r3, #32
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d010      	beq.n	8007edc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69da      	ldr	r2, [r3, #28]
 8007ebe:	4b59      	ldr	r3, [pc, #356]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d908      	bls.n	8007edc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007eca:	4b56      	ldr	r3, [pc, #344]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	4953      	ldr	r1, [pc, #332]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d010      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	4b4d      	ldr	r3, [pc, #308]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	f003 030f 	and.w	r3, r3, #15
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d908      	bls.n	8007f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ef8:	4b4a      	ldr	r3, [pc, #296]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	f023 020f 	bic.w	r2, r3, #15
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	4947      	ldr	r1, [pc, #284]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d055      	beq.n	8007fc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f16:	4b43      	ldr	r3, [pc, #268]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	4940      	ldr	r1, [pc, #256]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d107      	bne.n	8007f40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f30:	4b3c      	ldr	r3, [pc, #240]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d121      	bne.n	8007f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e0f6      	b.n	800812e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d107      	bne.n	8007f58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f48:	4b36      	ldr	r3, [pc, #216]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d115      	bne.n	8007f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e0ea      	b.n	800812e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d107      	bne.n	8007f70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f60:	4b30      	ldr	r3, [pc, #192]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d109      	bne.n	8007f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e0de      	b.n	800812e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f70:	4b2c      	ldr	r3, [pc, #176]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e0d6      	b.n	800812e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f80:	4b28      	ldr	r3, [pc, #160]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f023 0207 	bic.w	r2, r3, #7
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	4925      	ldr	r1, [pc, #148]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f92:	f7fb fd7f 	bl	8003a94 <HAL_GetTick>
 8007f96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f98:	e00a      	b.n	8007fb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f9a:	f7fb fd7b 	bl	8003a94 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d901      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e0be      	b.n	800812e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fb0:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d1eb      	bne.n	8007f9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d010      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	4b14      	ldr	r3, [pc, #80]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f003 030f 	and.w	r3, r3, #15
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d208      	bcs.n	8007ff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fde:	4b11      	ldr	r3, [pc, #68]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f023 020f 	bic.w	r2, r3, #15
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	490e      	ldr	r1, [pc, #56]	; (8008024 <HAL_RCC_ClockConfig+0x244>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <HAL_RCC_ClockConfig+0x240>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d214      	bcs.n	8008028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ffe:	4b08      	ldr	r3, [pc, #32]	; (8008020 <HAL_RCC_ClockConfig+0x240>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f023 020f 	bic.w	r2, r3, #15
 8008006:	4906      	ldr	r1, [pc, #24]	; (8008020 <HAL_RCC_ClockConfig+0x240>)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	4313      	orrs	r3, r2
 800800c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800800e:	4b04      	ldr	r3, [pc, #16]	; (8008020 <HAL_RCC_ClockConfig+0x240>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	429a      	cmp	r2, r3
 800801a:	d005      	beq.n	8008028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e086      	b.n	800812e <HAL_RCC_ClockConfig+0x34e>
 8008020:	52002000 	.word	0x52002000
 8008024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d010      	beq.n	8008056 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	4b3f      	ldr	r3, [pc, #252]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008040:	429a      	cmp	r2, r3
 8008042:	d208      	bcs.n	8008056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008044:	4b3c      	ldr	r3, [pc, #240]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	4939      	ldr	r1, [pc, #228]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 8008052:	4313      	orrs	r3, r2
 8008054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d010      	beq.n	8008084 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	695a      	ldr	r2, [r3, #20]
 8008066:	4b34      	ldr	r3, [pc, #208]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800806e:	429a      	cmp	r2, r3
 8008070:	d208      	bcs.n	8008084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008072:	4b31      	ldr	r3, [pc, #196]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	492e      	ldr	r1, [pc, #184]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 8008080:	4313      	orrs	r3, r2
 8008082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b00      	cmp	r3, #0
 800808e:	d010      	beq.n	80080b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699a      	ldr	r2, [r3, #24]
 8008094:	4b28      	ldr	r3, [pc, #160]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800809c:	429a      	cmp	r2, r3
 800809e:	d208      	bcs.n	80080b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080a0:	4b25      	ldr	r3, [pc, #148]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	4922      	ldr	r1, [pc, #136]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d010      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69da      	ldr	r2, [r3, #28]
 80080c2:	4b1d      	ldr	r3, [pc, #116]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d208      	bcs.n	80080e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080ce:	4b1a      	ldr	r3, [pc, #104]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	4917      	ldr	r1, [pc, #92]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80080e0:	f000 f834 	bl	800814c <HAL_RCC_GetSysClockFreq>
 80080e4:	4602      	mov	r2, r0
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	4912      	ldr	r1, [pc, #72]	; (800813c <HAL_RCC_ClockConfig+0x35c>)
 80080f2:	5ccb      	ldrb	r3, [r1, r3]
 80080f4:	f003 031f 	and.w	r3, r3, #31
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
 80080fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080fe:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <HAL_RCC_ClockConfig+0x358>)
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	4a0d      	ldr	r2, [pc, #52]	; (800813c <HAL_RCC_ClockConfig+0x35c>)
 8008108:	5cd3      	ldrb	r3, [r2, r3]
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	fa22 f303 	lsr.w	r3, r2, r3
 8008114:	4a0a      	ldr	r2, [pc, #40]	; (8008140 <HAL_RCC_ClockConfig+0x360>)
 8008116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008118:	4a0a      	ldr	r2, [pc, #40]	; (8008144 <HAL_RCC_ClockConfig+0x364>)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800811e:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <HAL_RCC_ClockConfig+0x368>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4618      	mov	r0, r3
 8008124:	f7fb fc6c 	bl	8003a00 <HAL_InitTick>
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	58024400 	.word	0x58024400
 800813c:	0800f52c 	.word	0x0800f52c
 8008140:	24000020 	.word	0x24000020
 8008144:	2400001c 	.word	0x2400001c
 8008148:	24000038 	.word	0x24000038

0800814c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800814c:	b480      	push	{r7}
 800814e:	b089      	sub	sp, #36	; 0x24
 8008150:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008152:	4bb3      	ldr	r3, [pc, #716]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800815a:	2b18      	cmp	r3, #24
 800815c:	f200 8155 	bhi.w	800840a <HAL_RCC_GetSysClockFreq+0x2be>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	080081cd 	.word	0x080081cd
 800816c:	0800840b 	.word	0x0800840b
 8008170:	0800840b 	.word	0x0800840b
 8008174:	0800840b 	.word	0x0800840b
 8008178:	0800840b 	.word	0x0800840b
 800817c:	0800840b 	.word	0x0800840b
 8008180:	0800840b 	.word	0x0800840b
 8008184:	0800840b 	.word	0x0800840b
 8008188:	080081f3 	.word	0x080081f3
 800818c:	0800840b 	.word	0x0800840b
 8008190:	0800840b 	.word	0x0800840b
 8008194:	0800840b 	.word	0x0800840b
 8008198:	0800840b 	.word	0x0800840b
 800819c:	0800840b 	.word	0x0800840b
 80081a0:	0800840b 	.word	0x0800840b
 80081a4:	0800840b 	.word	0x0800840b
 80081a8:	080081f9 	.word	0x080081f9
 80081ac:	0800840b 	.word	0x0800840b
 80081b0:	0800840b 	.word	0x0800840b
 80081b4:	0800840b 	.word	0x0800840b
 80081b8:	0800840b 	.word	0x0800840b
 80081bc:	0800840b 	.word	0x0800840b
 80081c0:	0800840b 	.word	0x0800840b
 80081c4:	0800840b 	.word	0x0800840b
 80081c8:	080081ff 	.word	0x080081ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081cc:	4b94      	ldr	r3, [pc, #592]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d009      	beq.n	80081ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081d8:	4b91      	ldr	r3, [pc, #580]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	08db      	lsrs	r3, r3, #3
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	4a90      	ldr	r2, [pc, #576]	; (8008424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081e4:	fa22 f303 	lsr.w	r3, r2, r3
 80081e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80081ea:	e111      	b.n	8008410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80081ec:	4b8d      	ldr	r3, [pc, #564]	; (8008424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081ee:	61bb      	str	r3, [r7, #24]
      break;
 80081f0:	e10e      	b.n	8008410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80081f2:	4b8d      	ldr	r3, [pc, #564]	; (8008428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081f4:	61bb      	str	r3, [r7, #24]
      break;
 80081f6:	e10b      	b.n	8008410 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80081f8:	4b8c      	ldr	r3, [pc, #560]	; (800842c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80081fa:	61bb      	str	r3, [r7, #24]
      break;
 80081fc:	e108      	b.n	8008410 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081fe:	4b88      	ldr	r3, [pc, #544]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008208:	4b85      	ldr	r3, [pc, #532]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800820a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820c:	091b      	lsrs	r3, r3, #4
 800820e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008212:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008214:	4b82      	ldr	r3, [pc, #520]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800821e:	4b80      	ldr	r3, [pc, #512]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008222:	08db      	lsrs	r3, r3, #3
 8008224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	fb02 f303 	mul.w	r3, r2, r3
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008236:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80e1 	beq.w	8008404 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b02      	cmp	r3, #2
 8008246:	f000 8083 	beq.w	8008350 <HAL_RCC_GetSysClockFreq+0x204>
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	2b02      	cmp	r3, #2
 800824e:	f200 80a1 	bhi.w	8008394 <HAL_RCC_GetSysClockFreq+0x248>
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <HAL_RCC_GetSysClockFreq+0x114>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d056      	beq.n	800830c <HAL_RCC_GetSysClockFreq+0x1c0>
 800825e:	e099      	b.n	8008394 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008260:	4b6f      	ldr	r3, [pc, #444]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b00      	cmp	r3, #0
 800826a:	d02d      	beq.n	80082c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800826c:	4b6c      	ldr	r3, [pc, #432]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	08db      	lsrs	r3, r3, #3
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	4a6b      	ldr	r2, [pc, #428]	; (8008424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008278:	fa22 f303 	lsr.w	r3, r2, r3
 800827c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	ee07 3a90 	vmov	s15, r3
 8008284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008296:	4b62      	ldr	r3, [pc, #392]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829e:	ee07 3a90 	vmov	s15, r3
 80082a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80082c6:	e087      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008434 <HAL_RCC_GetSysClockFreq+0x2e8>
 80082d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082da:	4b51      	ldr	r3, [pc, #324]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e2:	ee07 3a90 	vmov	s15, r3
 80082e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80082ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008306:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800830a:	e065      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008438 <HAL_RCC_GetSysClockFreq+0x2ec>
 800831a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831e:	4b40      	ldr	r3, [pc, #256]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008332:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008430 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800834e:	e043      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800843c <HAL_RCC_GetSysClockFreq+0x2f0>
 800835e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008362:	4b2f      	ldr	r3, [pc, #188]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008372:	ed97 6a02 	vldr	s12, [r7, #8]
 8008376:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008430 <HAL_RCC_GetSysClockFreq+0x2e4>
 800837a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008392:	e021      	b.n	80083d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008438 <HAL_RCC_GetSysClockFreq+0x2ec>
 80083a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083a6:	4b1e      	ldr	r3, [pc, #120]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80083ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80083d8:	4b11      	ldr	r3, [pc, #68]	; (8008420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	0a5b      	lsrs	r3, r3, #9
 80083de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e2:	3301      	adds	r3, #1
 80083e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	ee07 3a90 	vmov	s15, r3
 80083ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fc:	ee17 3a90 	vmov	r3, s15
 8008400:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008402:	e005      	b.n	8008410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	61bb      	str	r3, [r7, #24]
      break;
 8008408:	e002      	b.n	8008410 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800840a:	4b07      	ldr	r3, [pc, #28]	; (8008428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800840c:	61bb      	str	r3, [r7, #24]
      break;
 800840e:	bf00      	nop
  }

  return sysclockfreq;
 8008410:	69bb      	ldr	r3, [r7, #24]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3724      	adds	r7, #36	; 0x24
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	58024400 	.word	0x58024400
 8008424:	03d09000 	.word	0x03d09000
 8008428:	003d0900 	.word	0x003d0900
 800842c:	017d7840 	.word	0x017d7840
 8008430:	46000000 	.word	0x46000000
 8008434:	4c742400 	.word	0x4c742400
 8008438:	4a742400 	.word	0x4a742400
 800843c:	4bbebc20 	.word	0x4bbebc20

08008440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008446:	f7ff fe81 	bl	800814c <HAL_RCC_GetSysClockFreq>
 800844a:	4602      	mov	r2, r0
 800844c:	4b10      	ldr	r3, [pc, #64]	; (8008490 <HAL_RCC_GetHCLKFreq+0x50>)
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	0a1b      	lsrs	r3, r3, #8
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	490f      	ldr	r1, [pc, #60]	; (8008494 <HAL_RCC_GetHCLKFreq+0x54>)
 8008458:	5ccb      	ldrb	r3, [r1, r3]
 800845a:	f003 031f 	and.w	r3, r3, #31
 800845e:	fa22 f303 	lsr.w	r3, r2, r3
 8008462:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008464:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <HAL_RCC_GetHCLKFreq+0x50>)
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	4a09      	ldr	r2, [pc, #36]	; (8008494 <HAL_RCC_GetHCLKFreq+0x54>)
 800846e:	5cd3      	ldrb	r3, [r2, r3]
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	fa22 f303 	lsr.w	r3, r2, r3
 800847a:	4a07      	ldr	r2, [pc, #28]	; (8008498 <HAL_RCC_GetHCLKFreq+0x58>)
 800847c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800847e:	4a07      	ldr	r2, [pc, #28]	; (800849c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <HAL_RCC_GetHCLKFreq+0x58>)
 8008486:	681b      	ldr	r3, [r3, #0]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	58024400 	.word	0x58024400
 8008494:	0800f52c 	.word	0x0800f52c
 8008498:	24000020 	.word	0x24000020
 800849c:	2400001c 	.word	0x2400001c

080084a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80084a4:	f7ff ffcc 	bl	8008440 <HAL_RCC_GetHCLKFreq>
 80084a8:	4602      	mov	r2, r0
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	0a1b      	lsrs	r3, r3, #8
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	4904      	ldr	r1, [pc, #16]	; (80084c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80084b6:	5ccb      	ldrb	r3, [r1, r3]
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	58024400 	.word	0x58024400
 80084c8:	0800f52c 	.word	0x0800f52c

080084cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084d0:	b0ca      	sub	sp, #296	; 0x128
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084de:	2300      	movs	r3, #0
 80084e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80084f0:	2500      	movs	r5, #0
 80084f2:	ea54 0305 	orrs.w	r3, r4, r5
 80084f6:	d049      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80084f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008502:	d02f      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008504:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008508:	d828      	bhi.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800850a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800850e:	d01a      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008514:	d822      	bhi.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800851a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800851e:	d007      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008520:	e01c      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008522:	4bb8      	ldr	r3, [pc, #736]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	4ab7      	ldr	r2, [pc, #732]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800852c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800852e:	e01a      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008534:	3308      	adds	r3, #8
 8008536:	2102      	movs	r1, #2
 8008538:	4618      	mov	r0, r3
 800853a:	f001 f9d1 	bl	80098e0 <RCCEx_PLL2_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008544:	e00f      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854a:	3328      	adds	r3, #40	; 0x28
 800854c:	2102      	movs	r1, #2
 800854e:	4618      	mov	r0, r3
 8008550:	f001 fa78 	bl	8009a44 <RCCEx_PLL3_Config>
 8008554:	4603      	mov	r3, r0
 8008556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800855a:	e004      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008562:	e000      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800856e:	4ba5      	ldr	r3, [pc, #660]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008572:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800857c:	4aa1      	ldr	r2, [pc, #644]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800857e:	430b      	orrs	r3, r1
 8008580:	6513      	str	r3, [r2, #80]	; 0x50
 8008582:	e003      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008588:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800858c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008598:	f04f 0900 	mov.w	r9, #0
 800859c:	ea58 0309 	orrs.w	r3, r8, r9
 80085a0:	d047      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d82a      	bhi.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80085ac:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80085ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b2:	bf00      	nop
 80085b4:	080085c9 	.word	0x080085c9
 80085b8:	080085d7 	.word	0x080085d7
 80085bc:	080085ed 	.word	0x080085ed
 80085c0:	0800860b 	.word	0x0800860b
 80085c4:	0800860b 	.word	0x0800860b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c8:	4b8e      	ldr	r3, [pc, #568]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085cc:	4a8d      	ldr	r2, [pc, #564]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085d4:	e01a      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085da:	3308      	adds	r3, #8
 80085dc:	2100      	movs	r1, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 f97e 	bl	80098e0 <RCCEx_PLL2_Config>
 80085e4:	4603      	mov	r3, r0
 80085e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085ea:	e00f      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f0:	3328      	adds	r3, #40	; 0x28
 80085f2:	2100      	movs	r1, #0
 80085f4:	4618      	mov	r0, r3
 80085f6:	f001 fa25 	bl	8009a44 <RCCEx_PLL3_Config>
 80085fa:	4603      	mov	r3, r0
 80085fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008600:	e004      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008608:	e000      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800860a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800860c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008610:	2b00      	cmp	r3, #0
 8008612:	d10a      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008614:	4b7b      	ldr	r3, [pc, #492]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008618:	f023 0107 	bic.w	r1, r3, #7
 800861c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008622:	4a78      	ldr	r2, [pc, #480]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008624:	430b      	orrs	r3, r1
 8008626:	6513      	str	r3, [r2, #80]	; 0x50
 8008628:	e003      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800862e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800863e:	f04f 0b00 	mov.w	fp, #0
 8008642:	ea5a 030b 	orrs.w	r3, sl, fp
 8008646:	d04c      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008652:	d030      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008658:	d829      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800865a:	2bc0      	cmp	r3, #192	; 0xc0
 800865c:	d02d      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800865e:	2bc0      	cmp	r3, #192	; 0xc0
 8008660:	d825      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008662:	2b80      	cmp	r3, #128	; 0x80
 8008664:	d018      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008666:	2b80      	cmp	r3, #128	; 0x80
 8008668:	d821      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	d007      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008672:	e01c      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008674:	4b63      	ldr	r3, [pc, #396]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008678:	4a62      	ldr	r2, [pc, #392]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800867a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800867e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008680:	e01c      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008686:	3308      	adds	r3, #8
 8008688:	2100      	movs	r1, #0
 800868a:	4618      	mov	r0, r3
 800868c:	f001 f928 	bl	80098e0 <RCCEx_PLL2_Config>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008696:	e011      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869c:	3328      	adds	r3, #40	; 0x28
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 f9cf 	bl	8009a44 <RCCEx_PLL3_Config>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80086ac:	e006      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086b4:	e002      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80086b6:	bf00      	nop
 80086b8:	e000      	b.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80086ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80086c4:	4b4f      	ldr	r3, [pc, #316]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80086cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d2:	4a4c      	ldr	r2, [pc, #304]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086d4:	430b      	orrs	r3, r1
 80086d6:	6513      	str	r3, [r2, #80]	; 0x50
 80086d8:	e003      	b.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80086ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80086f2:	2300      	movs	r3, #0
 80086f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80086f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80086fc:	460b      	mov	r3, r1
 80086fe:	4313      	orrs	r3, r2
 8008700:	d053      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008706:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800870a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800870e:	d035      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008710:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008714:	d82e      	bhi.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008716:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800871a:	d031      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800871c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008720:	d828      	bhi.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008726:	d01a      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800872c:	d822      	bhi.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008736:	d007      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008738:	e01c      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800873a:	4b32      	ldr	r3, [pc, #200]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	4a31      	ldr	r2, [pc, #196]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008746:	e01c      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874c:	3308      	adds	r3, #8
 800874e:	2100      	movs	r1, #0
 8008750:	4618      	mov	r0, r3
 8008752:	f001 f8c5 	bl	80098e0 <RCCEx_PLL2_Config>
 8008756:	4603      	mov	r3, r0
 8008758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800875c:	e011      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800875e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008762:	3328      	adds	r3, #40	; 0x28
 8008764:	2100      	movs	r1, #0
 8008766:	4618      	mov	r0, r3
 8008768:	f001 f96c 	bl	8009a44 <RCCEx_PLL3_Config>
 800876c:	4603      	mov	r3, r0
 800876e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008772:	e006      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800877a:	e002      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800877c:	bf00      	nop
 800877e:	e000      	b.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10b      	bne.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800878a:	4b1e      	ldr	r3, [pc, #120]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800878c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008796:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800879a:	4a1a      	ldr	r2, [pc, #104]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800879c:	430b      	orrs	r3, r1
 800879e:	6593      	str	r3, [r2, #88]	; 0x58
 80087a0:	e003      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80087b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80087ba:	2300      	movs	r3, #0
 80087bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80087c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80087c4:	460b      	mov	r3, r1
 80087c6:	4313      	orrs	r3, r2
 80087c8:	d056      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80087d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087d6:	d038      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80087d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087dc:	d831      	bhi.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80087de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087e2:	d034      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80087e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80087e8:	d82b      	bhi.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80087ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087ee:	d01d      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80087f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087f4:	d825      	bhi.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d006      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80087fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087fe:	d00a      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008800:	e01f      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008802:	bf00      	nop
 8008804:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008808:	4ba2      	ldr	r3, [pc, #648]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	4aa1      	ldr	r2, [pc, #644]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800880e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008814:	e01c      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881a:	3308      	adds	r3, #8
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f001 f85e 	bl	80098e0 <RCCEx_PLL2_Config>
 8008824:	4603      	mov	r3, r0
 8008826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800882a:	e011      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800882c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008830:	3328      	adds	r3, #40	; 0x28
 8008832:	2100      	movs	r1, #0
 8008834:	4618      	mov	r0, r3
 8008836:	f001 f905 	bl	8009a44 <RCCEx_PLL3_Config>
 800883a:	4603      	mov	r3, r0
 800883c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008840:	e006      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008848:	e002      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800884a:	bf00      	nop
 800884c:	e000      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800884e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10b      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008858:	4b8e      	ldr	r3, [pc, #568]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800885a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008864:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008868:	4a8a      	ldr	r2, [pc, #552]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800886a:	430b      	orrs	r3, r1
 800886c:	6593      	str	r3, [r2, #88]	; 0x58
 800886e:	e003      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008874:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008884:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008888:	2300      	movs	r3, #0
 800888a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800888e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008892:	460b      	mov	r3, r1
 8008894:	4313      	orrs	r3, r2
 8008896:	d03a      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800889c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800889e:	2b30      	cmp	r3, #48	; 0x30
 80088a0:	d01f      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80088a2:	2b30      	cmp	r3, #48	; 0x30
 80088a4:	d819      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d00c      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d815      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d019      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80088b2:	2b10      	cmp	r3, #16
 80088b4:	d111      	bne.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b6:	4b77      	ldr	r3, [pc, #476]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	4a76      	ldr	r2, [pc, #472]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80088c2:	e011      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c8:	3308      	adds	r3, #8
 80088ca:	2102      	movs	r1, #2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 f807 	bl	80098e0 <RCCEx_PLL2_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80088d8:	e006      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088e0:	e002      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80088e2:	bf00      	nop
 80088e4:	e000      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80088e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80088f0:	4b68      	ldr	r3, [pc, #416]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80088f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088fe:	4a65      	ldr	r2, [pc, #404]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008900:	430b      	orrs	r3, r1
 8008902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008904:	e003      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800890a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800891a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800891e:	2300      	movs	r3, #0
 8008920:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008924:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008928:	460b      	mov	r3, r1
 800892a:	4313      	orrs	r3, r2
 800892c:	d051      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800892e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008938:	d035      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800893a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800893e:	d82e      	bhi.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008940:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008944:	d031      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008946:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800894a:	d828      	bhi.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800894c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008950:	d01a      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008956:	d822      	bhi.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800895c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008960:	d007      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008962:	e01c      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008964:	4b4b      	ldr	r3, [pc, #300]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	4a4a      	ldr	r2, [pc, #296]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800896a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800896e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008970:	e01c      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008976:	3308      	adds	r3, #8
 8008978:	2100      	movs	r1, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f000 ffb0 	bl	80098e0 <RCCEx_PLL2_Config>
 8008980:	4603      	mov	r3, r0
 8008982:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008986:	e011      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898c:	3328      	adds	r3, #40	; 0x28
 800898e:	2100      	movs	r1, #0
 8008990:	4618      	mov	r0, r3
 8008992:	f001 f857 	bl	8009a44 <RCCEx_PLL3_Config>
 8008996:	4603      	mov	r3, r0
 8008998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800899c:	e006      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089a4:	e002      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80089a6:	bf00      	nop
 80089a8:	e000      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80089aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10a      	bne.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80089b4:	4b37      	ldr	r3, [pc, #220]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80089bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c2:	4a34      	ldr	r2, [pc, #208]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089c4:	430b      	orrs	r3, r1
 80089c6:	6513      	str	r3, [r2, #80]	; 0x50
 80089c8:	e003      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80089d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80089de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089e2:	2300      	movs	r3, #0
 80089e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80089ec:	460b      	mov	r3, r1
 80089ee:	4313      	orrs	r3, r2
 80089f0:	d056      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089fc:	d033      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80089fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a02:	d82c      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a08:	d02f      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008a0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a0e:	d826      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a14:	d02b      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008a16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a1a:	d820      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a20:	d012      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a26:	d81a      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d022      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a30:	d115      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a36:	3308      	adds	r3, #8
 8008a38:	2101      	movs	r1, #1
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 ff50 	bl	80098e0 <RCCEx_PLL2_Config>
 8008a40:	4603      	mov	r3, r0
 8008a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008a46:	e015      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a4c:	3328      	adds	r3, #40	; 0x28
 8008a4e:	2101      	movs	r1, #1
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fff7 	bl	8009a44 <RCCEx_PLL3_Config>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008a5c:	e00a      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a64:	e006      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a66:	bf00      	nop
 8008a68:	e004      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a6a:	bf00      	nop
 8008a6c:	e002      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a6e:	bf00      	nop
 8008a70:	e000      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10d      	bne.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a80:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a8a:	4a02      	ldr	r2, [pc, #8]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	6513      	str	r3, [r2, #80]	; 0x50
 8008a90:	e006      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008a92:	bf00      	nop
 8008a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ab6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4313      	orrs	r3, r2
 8008abe:	d055      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008acc:	d033      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ad2:	d82c      	bhi.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad8:	d02f      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ade:	d826      	bhi.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008ae0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ae4:	d02b      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008ae6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008aea:	d820      	bhi.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af0:	d012      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af6:	d81a      	bhi.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d022      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b00:	d115      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b06:	3308      	adds	r3, #8
 8008b08:	2101      	movs	r1, #1
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fee8 	bl	80098e0 <RCCEx_PLL2_Config>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b16:	e015      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1c:	3328      	adds	r3, #40	; 0x28
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 ff8f 	bl	8009a44 <RCCEx_PLL3_Config>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b2c:	e00a      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b34:	e006      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b36:	bf00      	nop
 8008b38:	e004      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b3a:	bf00      	nop
 8008b3c:	e002      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b3e:	bf00      	nop
 8008b40:	e000      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008b4c:	4ba3      	ldr	r3, [pc, #652]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b50:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b5c:	4a9f      	ldr	r2, [pc, #636]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	6593      	str	r3, [r2, #88]	; 0x58
 8008b62:	e003      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008b78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b86:	460b      	mov	r3, r1
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	d037      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b96:	d00e      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b9c:	d816      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d018      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ba6:	d111      	bne.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ba8:	4b8c      	ldr	r3, [pc, #560]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	4a8b      	ldr	r2, [pc, #556]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008bb4:	e00f      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bba:	3308      	adds	r3, #8
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fe8e 	bl	80098e0 <RCCEx_PLL2_Config>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008bca:	e004      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bd2:	e000      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008bde:	4b7f      	ldr	r3, [pc, #508]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bec:	4a7b      	ldr	r2, [pc, #492]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	6513      	str	r3, [r2, #80]	; 0x50
 8008bf2:	e003      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c04:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008c12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	d039      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d81c      	bhi.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008c26:	a201      	add	r2, pc, #4	; (adr r2, 8008c2c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2c:	08008c69 	.word	0x08008c69
 8008c30:	08008c3d 	.word	0x08008c3d
 8008c34:	08008c4b 	.word	0x08008c4b
 8008c38:	08008c69 	.word	0x08008c69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c3c:	4b67      	ldr	r3, [pc, #412]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	4a66      	ldr	r2, [pc, #408]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008c48:	e00f      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c4e:	3308      	adds	r3, #8
 8008c50:	2102      	movs	r1, #2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fe44 	bl	80098e0 <RCCEx_PLL2_Config>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008c5e:	e004      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c66:	e000      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10a      	bne.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008c72:	4b5a      	ldr	r3, [pc, #360]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c76:	f023 0103 	bic.w	r1, r3, #3
 8008c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c80:	4a56      	ldr	r2, [pc, #344]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c82:	430b      	orrs	r3, r1
 8008c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c86:	e003      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ca6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008caa:	460b      	mov	r3, r1
 8008cac:	4313      	orrs	r3, r2
 8008cae:	f000 809f 	beq.w	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cb2:	4b4b      	ldr	r3, [pc, #300]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a4a      	ldr	r2, [pc, #296]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cbe:	f7fa fee9 	bl	8003a94 <HAL_GetTick>
 8008cc2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cc6:	e00b      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cc8:	f7fa fee4 	bl	8003a94 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	2b64      	cmp	r3, #100	; 0x64
 8008cd6:	d903      	bls.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cde:	e005      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ce0:	4b3f      	ldr	r3, [pc, #252]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0ed      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d179      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008cf4:	4b39      	ldr	r3, [pc, #228]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d00:	4053      	eors	r3, r2
 8008d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d015      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d0a:	4b34      	ldr	r3, [pc, #208]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d16:	4b31      	ldr	r3, [pc, #196]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1a:	4a30      	ldr	r2, [pc, #192]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d20:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d22:	4b2e      	ldr	r3, [pc, #184]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d26:	4a2d      	ldr	r2, [pc, #180]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d2c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d2e:	4a2b      	ldr	r2, [pc, #172]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008d34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d42:	d118      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d44:	f7fa fea6 	bl	8003a94 <HAL_GetTick>
 8008d48:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d4c:	e00d      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d4e:	f7fa fea1 	bl	8003a94 <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008d58:	1ad2      	subs	r2, r2, r3
 8008d5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d903      	bls.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008d68:	e005      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d6a:	4b1c      	ldr	r3, [pc, #112]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d0eb      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008d76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d129      	bne.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d8e:	d10e      	bne.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008d90:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008da0:	091a      	lsrs	r2, r3, #4
 8008da2:	4b10      	ldr	r3, [pc, #64]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	4a0d      	ldr	r2, [pc, #52]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008da8:	430b      	orrs	r3, r1
 8008daa:	6113      	str	r3, [r2, #16]
 8008dac:	e005      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008dae:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008db4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008db8:	6113      	str	r3, [r2, #16]
 8008dba:	4b08      	ldr	r3, [pc, #32]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dca:	4a04      	ldr	r2, [pc, #16]	; (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	6713      	str	r3, [r2, #112]	; 0x70
 8008dd0:	e00e      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008dda:	e009      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008ddc:	58024400 	.word	0x58024400
 8008de0:	58024800 	.word	0x58024800
 8008de4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f002 0301 	and.w	r3, r2, #1
 8008dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e00:	2300      	movs	r3, #0
 8008e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	f000 8089 	beq.w	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e18:	2b28      	cmp	r3, #40	; 0x28
 8008e1a:	d86b      	bhi.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008e1c:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e22:	bf00      	nop
 8008e24:	08008efd 	.word	0x08008efd
 8008e28:	08008ef5 	.word	0x08008ef5
 8008e2c:	08008ef5 	.word	0x08008ef5
 8008e30:	08008ef5 	.word	0x08008ef5
 8008e34:	08008ef5 	.word	0x08008ef5
 8008e38:	08008ef5 	.word	0x08008ef5
 8008e3c:	08008ef5 	.word	0x08008ef5
 8008e40:	08008ef5 	.word	0x08008ef5
 8008e44:	08008ec9 	.word	0x08008ec9
 8008e48:	08008ef5 	.word	0x08008ef5
 8008e4c:	08008ef5 	.word	0x08008ef5
 8008e50:	08008ef5 	.word	0x08008ef5
 8008e54:	08008ef5 	.word	0x08008ef5
 8008e58:	08008ef5 	.word	0x08008ef5
 8008e5c:	08008ef5 	.word	0x08008ef5
 8008e60:	08008ef5 	.word	0x08008ef5
 8008e64:	08008edf 	.word	0x08008edf
 8008e68:	08008ef5 	.word	0x08008ef5
 8008e6c:	08008ef5 	.word	0x08008ef5
 8008e70:	08008ef5 	.word	0x08008ef5
 8008e74:	08008ef5 	.word	0x08008ef5
 8008e78:	08008ef5 	.word	0x08008ef5
 8008e7c:	08008ef5 	.word	0x08008ef5
 8008e80:	08008ef5 	.word	0x08008ef5
 8008e84:	08008efd 	.word	0x08008efd
 8008e88:	08008ef5 	.word	0x08008ef5
 8008e8c:	08008ef5 	.word	0x08008ef5
 8008e90:	08008ef5 	.word	0x08008ef5
 8008e94:	08008ef5 	.word	0x08008ef5
 8008e98:	08008ef5 	.word	0x08008ef5
 8008e9c:	08008ef5 	.word	0x08008ef5
 8008ea0:	08008ef5 	.word	0x08008ef5
 8008ea4:	08008efd 	.word	0x08008efd
 8008ea8:	08008ef5 	.word	0x08008ef5
 8008eac:	08008ef5 	.word	0x08008ef5
 8008eb0:	08008ef5 	.word	0x08008ef5
 8008eb4:	08008ef5 	.word	0x08008ef5
 8008eb8:	08008ef5 	.word	0x08008ef5
 8008ebc:	08008ef5 	.word	0x08008ef5
 8008ec0:	08008ef5 	.word	0x08008ef5
 8008ec4:	08008efd 	.word	0x08008efd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ecc:	3308      	adds	r3, #8
 8008ece:	2101      	movs	r1, #1
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 fd05 	bl	80098e0 <RCCEx_PLL2_Config>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008edc:	e00f      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ee2:	3328      	adds	r3, #40	; 0x28
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fdac 	bl	8009a44 <RCCEx_PLL3_Config>
 8008eec:	4603      	mov	r3, r0
 8008eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008ef2:	e004      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008efa:	e000      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10a      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f06:	4bbf      	ldr	r3, [pc, #764]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f14:	4abb      	ldr	r2, [pc, #748]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f16:	430b      	orrs	r3, r1
 8008f18:	6553      	str	r3, [r2, #84]	; 0x54
 8008f1a:	e003      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f002 0302 	and.w	r3, r2, #2
 8008f30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f34:	2300      	movs	r3, #0
 8008f36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4313      	orrs	r3, r2
 8008f42:	d041      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f4a:	2b05      	cmp	r3, #5
 8008f4c:	d824      	bhi.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008fa1 	.word	0x08008fa1
 8008f58:	08008f6d 	.word	0x08008f6d
 8008f5c:	08008f83 	.word	0x08008f83
 8008f60:	08008fa1 	.word	0x08008fa1
 8008f64:	08008fa1 	.word	0x08008fa1
 8008f68:	08008fa1 	.word	0x08008fa1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f70:	3308      	adds	r3, #8
 8008f72:	2101      	movs	r1, #1
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 fcb3 	bl	80098e0 <RCCEx_PLL2_Config>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008f80:	e00f      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f86:	3328      	adds	r3, #40	; 0x28
 8008f88:	2101      	movs	r1, #1
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fd5a 	bl	8009a44 <RCCEx_PLL3_Config>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008f96:	e004      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f9e:	e000      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10a      	bne.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008faa:	4b96      	ldr	r3, [pc, #600]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fae:	f023 0107 	bic.w	r1, r3, #7
 8008fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fb8:	4a92      	ldr	r2, [pc, #584]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fba:	430b      	orrs	r3, r1
 8008fbc:	6553      	str	r3, [r2, #84]	; 0x54
 8008fbe:	e003      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	f002 0304 	and.w	r3, r2, #4
 8008fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fde:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	d044      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ff0:	2b05      	cmp	r3, #5
 8008ff2:	d825      	bhi.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	08009049 	.word	0x08009049
 8009000:	08009015 	.word	0x08009015
 8009004:	0800902b 	.word	0x0800902b
 8009008:	08009049 	.word	0x08009049
 800900c:	08009049 	.word	0x08009049
 8009010:	08009049 	.word	0x08009049
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009018:	3308      	adds	r3, #8
 800901a:	2101      	movs	r1, #1
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fc5f 	bl	80098e0 <RCCEx_PLL2_Config>
 8009022:	4603      	mov	r3, r0
 8009024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009028:	e00f      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800902a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800902e:	3328      	adds	r3, #40	; 0x28
 8009030:	2101      	movs	r1, #1
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fd06 	bl	8009a44 <RCCEx_PLL3_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800903e:	e004      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009046:	e000      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800904a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10b      	bne.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009052:	4b6c      	ldr	r3, [pc, #432]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009056:	f023 0107 	bic.w	r1, r3, #7
 800905a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800905e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009062:	4a68      	ldr	r2, [pc, #416]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009064:	430b      	orrs	r3, r1
 8009066:	6593      	str	r3, [r2, #88]	; 0x58
 8009068:	e003      	b.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800906e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	f002 0320 	and.w	r3, r2, #32
 800907e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009082:	2300      	movs	r3, #0
 8009084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800908c:	460b      	mov	r3, r1
 800908e:	4313      	orrs	r3, r2
 8009090:	d055      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800909e:	d033      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80090a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a4:	d82c      	bhi.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80090a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090aa:	d02f      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80090ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b0:	d826      	bhi.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80090b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090b6:	d02b      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80090b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090bc:	d820      	bhi.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80090be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c2:	d012      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80090c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c8:	d81a      	bhi.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d022      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80090ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090d2:	d115      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d8:	3308      	adds	r3, #8
 80090da:	2100      	movs	r1, #0
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fbff 	bl	80098e0 <RCCEx_PLL2_Config>
 80090e2:	4603      	mov	r3, r0
 80090e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80090e8:	e015      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ee:	3328      	adds	r3, #40	; 0x28
 80090f0:	2102      	movs	r1, #2
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fca6 	bl	8009a44 <RCCEx_PLL3_Config>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80090fe:	e00a      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009106:	e006      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009108:	bf00      	nop
 800910a:	e004      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800910c:	bf00      	nop
 800910e:	e002      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009110:	bf00      	nop
 8009112:	e000      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009116:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10b      	bne.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800911e:	4b39      	ldr	r3, [pc, #228]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009122:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800912a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800912e:	4a35      	ldr	r2, [pc, #212]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009130:	430b      	orrs	r3, r1
 8009132:	6553      	str	r3, [r2, #84]	; 0x54
 8009134:	e003      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800913a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800913e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800914a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800914e:	2300      	movs	r3, #0
 8009150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009154:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009158:	460b      	mov	r3, r1
 800915a:	4313      	orrs	r3, r2
 800915c:	d058      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009162:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009166:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800916a:	d033      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800916c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009170:	d82c      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009176:	d02f      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917c:	d826      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800917e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009182:	d02b      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009188:	d820      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800918a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800918e:	d012      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009194:	d81a      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009196:	2b00      	cmp	r3, #0
 8009198:	d022      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800919a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800919e:	d115      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a4:	3308      	adds	r3, #8
 80091a6:	2100      	movs	r1, #0
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fb99 	bl	80098e0 <RCCEx_PLL2_Config>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80091b4:	e015      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ba:	3328      	adds	r3, #40	; 0x28
 80091bc:	2102      	movs	r1, #2
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fc40 	bl	8009a44 <RCCEx_PLL3_Config>
 80091c4:	4603      	mov	r3, r0
 80091c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80091ca:	e00a      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091d2:	e006      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091d4:	bf00      	nop
 80091d6:	e004      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091d8:	bf00      	nop
 80091da:	e002      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091dc:	bf00      	nop
 80091de:	e000      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80091e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10e      	bne.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091ea:	4b06      	ldr	r3, [pc, #24]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80091f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091fa:	4a02      	ldr	r2, [pc, #8]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091fc:	430b      	orrs	r3, r1
 80091fe:	6593      	str	r3, [r2, #88]	; 0x58
 8009200:	e006      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009202:	bf00      	nop
 8009204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800920c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800921c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009220:	2300      	movs	r3, #0
 8009222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009226:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800922a:	460b      	mov	r3, r1
 800922c:	4313      	orrs	r3, r2
 800922e:	d055      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009238:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800923c:	d033      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800923e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009242:	d82c      	bhi.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009248:	d02f      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800924a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800924e:	d826      	bhi.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009250:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009254:	d02b      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009256:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800925a:	d820      	bhi.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800925c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009260:	d012      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009266:	d81a      	bhi.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d022      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800926c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009270:	d115      	bne.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009276:	3308      	adds	r3, #8
 8009278:	2100      	movs	r1, #0
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fb30 	bl	80098e0 <RCCEx_PLL2_Config>
 8009280:	4603      	mov	r3, r0
 8009282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009286:	e015      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800928c:	3328      	adds	r3, #40	; 0x28
 800928e:	2102      	movs	r1, #2
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fbd7 	bl	8009a44 <RCCEx_PLL3_Config>
 8009296:	4603      	mov	r3, r0
 8009298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800929c:	e00a      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092a4:	e006      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80092a6:	bf00      	nop
 80092a8:	e004      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80092aa:	bf00      	nop
 80092ac:	e002      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80092ae:	bf00      	nop
 80092b0:	e000      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80092b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80092bc:	4ba1      	ldr	r3, [pc, #644]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80092c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092cc:	4a9d      	ldr	r2, [pc, #628]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092ce:	430b      	orrs	r3, r1
 80092d0:	6593      	str	r3, [r2, #88]	; 0x58
 80092d2:	e003      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80092dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f002 0308 	and.w	r3, r2, #8
 80092e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092ec:	2300      	movs	r3, #0
 80092ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80092f6:	460b      	mov	r3, r1
 80092f8:	4313      	orrs	r3, r2
 80092fa:	d01e      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009308:	d10c      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800930a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800930e:	3328      	adds	r3, #40	; 0x28
 8009310:	2102      	movs	r1, #2
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fb96 	bl	8009a44 <RCCEx_PLL3_Config>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009324:	4b87      	ldr	r3, [pc, #540]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009328:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800932c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009334:	4a83      	ldr	r2, [pc, #524]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	f002 0310 	and.w	r3, r2, #16
 8009346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800934a:	2300      	movs	r3, #0
 800934c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009350:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009354:	460b      	mov	r3, r1
 8009356:	4313      	orrs	r3, r2
 8009358:	d01e      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800935a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800935e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009366:	d10c      	bne.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800936c:	3328      	adds	r3, #40	; 0x28
 800936e:	2102      	movs	r1, #2
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fb67 	bl	8009a44 <RCCEx_PLL3_Config>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009382:	4b70      	ldr	r3, [pc, #448]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009386:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800938a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009392:	4a6c      	ldr	r2, [pc, #432]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009394:	430b      	orrs	r3, r1
 8009396:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80093a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093a8:	2300      	movs	r3, #0
 80093aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80093b2:	460b      	mov	r3, r1
 80093b4:	4313      	orrs	r3, r2
 80093b6:	d03e      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80093b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093c4:	d022      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80093c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093ca:	d81b      	bhi.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80093d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093d4:	d00b      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80093d6:	e015      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093dc:	3308      	adds	r3, #8
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fa7d 	bl	80098e0 <RCCEx_PLL2_Config>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80093ec:	e00f      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f2:	3328      	adds	r3, #40	; 0x28
 80093f4:	2102      	movs	r1, #2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 fb24 	bl	8009a44 <RCCEx_PLL3_Config>
 80093fc:	4603      	mov	r3, r0
 80093fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009402:	e004      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800940a:	e000      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800940c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800940e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10b      	bne.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009416:	4b4b      	ldr	r3, [pc, #300]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800941e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009426:	4a47      	ldr	r2, [pc, #284]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009428:	430b      	orrs	r3, r1
 800942a:	6593      	str	r3, [r2, #88]	; 0x58
 800942c:	e003      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009442:	67bb      	str	r3, [r7, #120]	; 0x78
 8009444:	2300      	movs	r3, #0
 8009446:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009448:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800944c:	460b      	mov	r3, r1
 800944e:	4313      	orrs	r3, r2
 8009450:	d03b      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800945a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800945e:	d01f      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009460:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009464:	d818      	bhi.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800946a:	d003      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800946c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009470:	d007      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009472:	e011      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009474:	4b33      	ldr	r3, [pc, #204]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009478:	4a32      	ldr	r2, [pc, #200]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800947a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800947e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009480:	e00f      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009486:	3328      	adds	r3, #40	; 0x28
 8009488:	2101      	movs	r1, #1
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fada 	bl	8009a44 <RCCEx_PLL3_Config>
 8009490:	4603      	mov	r3, r0
 8009492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009496:	e004      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800949e:	e000      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80094a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10b      	bne.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094aa:	4b26      	ldr	r3, [pc, #152]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ba:	4a22      	ldr	r2, [pc, #136]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094bc:	430b      	orrs	r3, r1
 80094be:	6553      	str	r3, [r2, #84]	; 0x54
 80094c0:	e003      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80094ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80094d6:	673b      	str	r3, [r7, #112]	; 0x70
 80094d8:	2300      	movs	r3, #0
 80094da:	677b      	str	r3, [r7, #116]	; 0x74
 80094dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80094e0:	460b      	mov	r3, r1
 80094e2:	4313      	orrs	r3, r2
 80094e4:	d034      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80094f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f4:	d007      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80094f6:	e011      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094f8:	4b12      	ldr	r3, [pc, #72]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	4a11      	ldr	r2, [pc, #68]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009504:	e00e      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950a:	3308      	adds	r3, #8
 800950c:	2102      	movs	r1, #2
 800950e:	4618      	mov	r0, r3
 8009510:	f000 f9e6 	bl	80098e0 <RCCEx_PLL2_Config>
 8009514:	4603      	mov	r3, r0
 8009516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800951a:	e003      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10d      	bne.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800952e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009530:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800953a:	4a02      	ldr	r2, [pc, #8]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800953c:	430b      	orrs	r3, r1
 800953e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009540:	e006      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009542:	bf00      	nop
 8009544:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009548:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800954c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800955c:	66bb      	str	r3, [r7, #104]	; 0x68
 800955e:	2300      	movs	r3, #0
 8009560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009562:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009566:	460b      	mov	r3, r1
 8009568:	4313      	orrs	r3, r2
 800956a:	d00c      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009570:	3328      	adds	r3, #40	; 0x28
 8009572:	2102      	movs	r1, #2
 8009574:	4618      	mov	r0, r3
 8009576:	f000 fa65 	bl	8009a44 <RCCEx_PLL3_Config>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009592:	663b      	str	r3, [r7, #96]	; 0x60
 8009594:	2300      	movs	r3, #0
 8009596:	667b      	str	r3, [r7, #100]	; 0x64
 8009598:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800959c:	460b      	mov	r3, r1
 800959e:	4313      	orrs	r3, r2
 80095a0:	d038      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80095a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095ae:	d018      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80095b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095b4:	d811      	bhi.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80095b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ba:	d014      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80095bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c0:	d80b      	bhi.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d011      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80095c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ca:	d106      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095cc:	4bc3      	ldr	r3, [pc, #780]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	4ac2      	ldr	r2, [pc, #776]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80095d8:	e008      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095e0:	e004      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80095e2:	bf00      	nop
 80095e4:	e002      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80095e6:	bf00      	nop
 80095e8:	e000      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80095ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10b      	bne.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095f4:	4bb9      	ldr	r3, [pc, #740]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009604:	4ab5      	ldr	r2, [pc, #724]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009606:	430b      	orrs	r3, r1
 8009608:	6553      	str	r3, [r2, #84]	; 0x54
 800960a:	e003      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009610:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009620:	65bb      	str	r3, [r7, #88]	; 0x58
 8009622:	2300      	movs	r3, #0
 8009624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009626:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800962a:	460b      	mov	r3, r1
 800962c:	4313      	orrs	r3, r2
 800962e:	d009      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009630:	4baa      	ldr	r3, [pc, #680]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009634:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800963c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800963e:	4aa7      	ldr	r2, [pc, #668]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009640:	430b      	orrs	r3, r1
 8009642:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009650:	653b      	str	r3, [r7, #80]	; 0x50
 8009652:	2300      	movs	r3, #0
 8009654:	657b      	str	r3, [r7, #84]	; 0x54
 8009656:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800965a:	460b      	mov	r3, r1
 800965c:	4313      	orrs	r3, r2
 800965e:	d00a      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009660:	4b9e      	ldr	r3, [pc, #632]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800966c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009670:	4a9a      	ldr	r2, [pc, #616]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009672:	430b      	orrs	r3, r1
 8009674:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009682:	64bb      	str	r3, [r7, #72]	; 0x48
 8009684:	2300      	movs	r3, #0
 8009686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009688:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800968c:	460b      	mov	r3, r1
 800968e:	4313      	orrs	r3, r2
 8009690:	d009      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009692:	4b92      	ldr	r3, [pc, #584]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009696:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800969a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a0:	4a8e      	ldr	r2, [pc, #568]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096a2:	430b      	orrs	r3, r1
 80096a4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80096a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80096b2:	643b      	str	r3, [r7, #64]	; 0x40
 80096b4:	2300      	movs	r3, #0
 80096b6:	647b      	str	r3, [r7, #68]	; 0x44
 80096b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80096bc:	460b      	mov	r3, r1
 80096be:	4313      	orrs	r3, r2
 80096c0:	d00e      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80096c2:	4b86      	ldr	r3, [pc, #536]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	4a85      	ldr	r2, [pc, #532]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096cc:	6113      	str	r3, [r2, #16]
 80096ce:	4b83      	ldr	r3, [pc, #524]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096d0:	6919      	ldr	r1, [r3, #16]
 80096d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80096da:	4a80      	ldr	r2, [pc, #512]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096dc:	430b      	orrs	r3, r1
 80096de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80096e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80096ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80096ee:	2300      	movs	r3, #0
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80096f6:	460b      	mov	r3, r1
 80096f8:	4313      	orrs	r3, r2
 80096fa:	d009      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80096fc:	4b77      	ldr	r3, [pc, #476]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009700:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970a:	4a74      	ldr	r2, [pc, #464]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800970c:	430b      	orrs	r3, r1
 800970e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800971c:	633b      	str	r3, [r7, #48]	; 0x30
 800971e:	2300      	movs	r3, #0
 8009720:	637b      	str	r3, [r7, #52]	; 0x34
 8009722:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009726:	460b      	mov	r3, r1
 8009728:	4313      	orrs	r3, r2
 800972a:	d00a      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800972c:	4b6b      	ldr	r3, [pc, #428]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800972e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009730:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800973c:	4a67      	ldr	r2, [pc, #412]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800973e:	430b      	orrs	r3, r1
 8009740:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974a:	2100      	movs	r1, #0
 800974c:	62b9      	str	r1, [r7, #40]	; 0x28
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009754:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009758:	460b      	mov	r3, r1
 800975a:	4313      	orrs	r3, r2
 800975c:	d011      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800975e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009762:	3308      	adds	r3, #8
 8009764:	2100      	movs	r1, #0
 8009766:	4618      	mov	r0, r3
 8009768:	f000 f8ba 	bl	80098e0 <RCCEx_PLL2_Config>
 800976c:	4603      	mov	r3, r0
 800976e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800977a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800977e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	2100      	movs	r1, #0
 800978c:	6239      	str	r1, [r7, #32]
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	627b      	str	r3, [r7, #36]	; 0x24
 8009794:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009798:	460b      	mov	r3, r1
 800979a:	4313      	orrs	r3, r2
 800979c:	d011      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800979e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a2:	3308      	adds	r3, #8
 80097a4:	2101      	movs	r1, #1
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f89a 	bl	80098e0 <RCCEx_PLL2_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80097b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80097c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	2100      	movs	r1, #0
 80097cc:	61b9      	str	r1, [r7, #24]
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80097d8:	460b      	mov	r3, r1
 80097da:	4313      	orrs	r3, r2
 80097dc:	d011      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e2:	3308      	adds	r3, #8
 80097e4:	2102      	movs	r1, #2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f87a 	bl	80098e0 <RCCEx_PLL2_Config>
 80097ec:	4603      	mov	r3, r0
 80097ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80097f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	2100      	movs	r1, #0
 800980c:	6139      	str	r1, [r7, #16]
 800980e:	f003 0308 	and.w	r3, r3, #8
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009818:	460b      	mov	r3, r1
 800981a:	4313      	orrs	r3, r2
 800981c:	d011      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800981e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009822:	3328      	adds	r3, #40	; 0x28
 8009824:	2100      	movs	r1, #0
 8009826:	4618      	mov	r0, r3
 8009828:	f000 f90c 	bl	8009a44 <RCCEx_PLL3_Config>
 800982c:	4603      	mov	r3, r0
 800982e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800983e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	2100      	movs	r1, #0
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	f003 0310 	and.w	r3, r3, #16
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009858:	460b      	mov	r3, r1
 800985a:	4313      	orrs	r3, r2
 800985c:	d011      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800985e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009862:	3328      	adds	r3, #40	; 0x28
 8009864:	2101      	movs	r1, #1
 8009866:	4618      	mov	r0, r3
 8009868:	f000 f8ec 	bl	8009a44 <RCCEx_PLL3_Config>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800987e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	2100      	movs	r1, #0
 800988c:	6039      	str	r1, [r7, #0]
 800988e:	f003 0320 	and.w	r3, r3, #32
 8009892:	607b      	str	r3, [r7, #4]
 8009894:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009898:	460b      	mov	r3, r1
 800989a:	4313      	orrs	r3, r2
 800989c:	d011      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800989e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a2:	3328      	adds	r3, #40	; 0x28
 80098a4:	2102      	movs	r1, #2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 f8cc 	bl	8009a44 <RCCEx_PLL3_Config>
 80098ac:	4603      	mov	r3, r0
 80098ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80098b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80098c2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e000      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80098d6:	46bd      	mov	sp, r7
 80098d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098dc:	58024400 	.word	0x58024400

080098e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098ee:	4b53      	ldr	r3, [pc, #332]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d101      	bne.n	80098fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e099      	b.n	8009a32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098fe:	4b4f      	ldr	r3, [pc, #316]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a4e      	ldr	r2, [pc, #312]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009904:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800990a:	f7fa f8c3 	bl	8003a94 <HAL_GetTick>
 800990e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009910:	e008      	b.n	8009924 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009912:	f7fa f8bf 	bl	8003a94 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	2b02      	cmp	r3, #2
 800991e:	d901      	bls.n	8009924 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e086      	b.n	8009a32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009924:	4b45      	ldr	r3, [pc, #276]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1f0      	bne.n	8009912 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009930:	4b42      	ldr	r3, [pc, #264]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009934:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	031b      	lsls	r3, r3, #12
 800993e:	493f      	ldr	r1, [pc, #252]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009940:	4313      	orrs	r3, r2
 8009942:	628b      	str	r3, [r1, #40]	; 0x28
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	3b01      	subs	r3, #1
 800994a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	3b01      	subs	r3, #1
 8009954:	025b      	lsls	r3, r3, #9
 8009956:	b29b      	uxth	r3, r3
 8009958:	431a      	orrs	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	3b01      	subs	r3, #1
 8009960:	041b      	lsls	r3, r3, #16
 8009962:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009966:	431a      	orrs	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	3b01      	subs	r3, #1
 800996e:	061b      	lsls	r3, r3, #24
 8009970:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009974:	4931      	ldr	r1, [pc, #196]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009976:	4313      	orrs	r3, r2
 8009978:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800997a:	4b30      	ldr	r3, [pc, #192]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	492d      	ldr	r1, [pc, #180]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009988:	4313      	orrs	r3, r2
 800998a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800998c:	4b2b      	ldr	r3, [pc, #172]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	f023 0220 	bic.w	r2, r3, #32
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	4928      	ldr	r1, [pc, #160]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 800999a:	4313      	orrs	r3, r2
 800999c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800999e:	4b27      	ldr	r3, [pc, #156]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	4a26      	ldr	r2, [pc, #152]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099a4:	f023 0310 	bic.w	r3, r3, #16
 80099a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80099aa:	4b24      	ldr	r3, [pc, #144]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099ae:	4b24      	ldr	r3, [pc, #144]	; (8009a40 <RCCEx_PLL2_Config+0x160>)
 80099b0:	4013      	ands	r3, r2
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	69d2      	ldr	r2, [r2, #28]
 80099b6:	00d2      	lsls	r2, r2, #3
 80099b8:	4920      	ldr	r1, [pc, #128]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80099be:	4b1f      	ldr	r3, [pc, #124]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c2:	4a1e      	ldr	r2, [pc, #120]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099c4:	f043 0310 	orr.w	r3, r3, #16
 80099c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d106      	bne.n	80099de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80099d0:	4b1a      	ldr	r3, [pc, #104]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	4a19      	ldr	r2, [pc, #100]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099dc:	e00f      	b.n	80099fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d106      	bne.n	80099f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80099e4:	4b15      	ldr	r3, [pc, #84]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	4a14      	ldr	r2, [pc, #80]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099f0:	e005      	b.n	80099fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80099f2:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	4a11      	ldr	r2, [pc, #68]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 80099f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a0e      	ldr	r2, [pc, #56]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a0a:	f7fa f843 	bl	8003a94 <HAL_GetTick>
 8009a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a10:	e008      	b.n	8009a24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a12:	f7fa f83f 	bl	8003a94 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d901      	bls.n	8009a24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e006      	b.n	8009a32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <RCCEx_PLL2_Config+0x15c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d0f0      	beq.n	8009a12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	58024400 	.word	0x58024400
 8009a40:	ffff0007 	.word	0xffff0007

08009a44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a52:	4b53      	ldr	r3, [pc, #332]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d101      	bne.n	8009a62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e099      	b.n	8009b96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a62:	4b4f      	ldr	r3, [pc, #316]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a4e      	ldr	r2, [pc, #312]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a6e:	f7fa f811 	bl	8003a94 <HAL_GetTick>
 8009a72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a74:	e008      	b.n	8009a88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a76:	f7fa f80d 	bl	8003a94 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d901      	bls.n	8009a88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e086      	b.n	8009b96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a88:	4b45      	ldr	r3, [pc, #276]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f0      	bne.n	8009a76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a94:	4b42      	ldr	r3, [pc, #264]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	051b      	lsls	r3, r3, #20
 8009aa2:	493f      	ldr	r1, [pc, #252]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	628b      	str	r3, [r1, #40]	; 0x28
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	025b      	lsls	r3, r3, #9
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	431a      	orrs	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	041b      	lsls	r3, r3, #16
 8009ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009aca:	431a      	orrs	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	061b      	lsls	r3, r3, #24
 8009ad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ad8:	4931      	ldr	r1, [pc, #196]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ade:	4b30      	ldr	r3, [pc, #192]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	492d      	ldr	r1, [pc, #180]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009aec:	4313      	orrs	r3, r2
 8009aee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009af0:	4b2b      	ldr	r3, [pc, #172]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	4928      	ldr	r1, [pc, #160]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b02:	4b27      	ldr	r3, [pc, #156]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	4a26      	ldr	r2, [pc, #152]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b0e:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b12:	4b24      	ldr	r3, [pc, #144]	; (8009ba4 <RCCEx_PLL3_Config+0x160>)
 8009b14:	4013      	ands	r3, r2
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	69d2      	ldr	r2, [r2, #28]
 8009b1a:	00d2      	lsls	r2, r2, #3
 8009b1c:	4920      	ldr	r1, [pc, #128]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b22:	4b1f      	ldr	r3, [pc, #124]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b26:	4a1e      	ldr	r2, [pc, #120]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d106      	bne.n	8009b42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b34:	4b1a      	ldr	r3, [pc, #104]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b38:	4a19      	ldr	r2, [pc, #100]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b40:	e00f      	b.n	8009b62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d106      	bne.n	8009b56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b48:	4b15      	ldr	r3, [pc, #84]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	4a14      	ldr	r2, [pc, #80]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b54:	e005      	b.n	8009b62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b56:	4b12      	ldr	r3, [pc, #72]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5a:	4a11      	ldr	r2, [pc, #68]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b62:	4b0f      	ldr	r3, [pc, #60]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a0e      	ldr	r2, [pc, #56]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b6e:	f7f9 ff91 	bl	8003a94 <HAL_GetTick>
 8009b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b74:	e008      	b.n	8009b88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b76:	f7f9 ff8d 	bl	8003a94 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d901      	bls.n	8009b88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e006      	b.n	8009b96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b88:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <RCCEx_PLL3_Config+0x15c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0f0      	beq.n	8009b76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	58024400 	.word	0x58024400
 8009ba4:	ffff0007 	.word	0xffff0007

08009ba8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e02b      	b.n	8009c14 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d106      	bne.n	8009bd6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f825 	bl	8009c20 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3304      	adds	r3, #4
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f001 f9af 	bl	800af4c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	f001 fa03 	bl	800b004 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009bfe:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <HAL_SDRAM_Init+0x74>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a06      	ldr	r2, [pc, #24]	; (8009c1c <HAL_SDRAM_Init+0x74>)
 8009c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c08:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	52004000 	.word	0x52004000

08009c20 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c46:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d101      	bne.n	8009c52 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e021      	b.n	8009c96 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d002      	beq.n	8009c5e <HAL_SDRAM_SendCommand+0x2a>
 8009c58:	7dfb      	ldrb	r3, [r7, #23]
 8009c5a:	2b05      	cmp	r3, #5
 8009c5c:	d118      	bne.n	8009c90 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2202      	movs	r2, #2
 8009c62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	68b9      	ldr	r1, [r7, #8]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f001 fa32 	bl	800b0d8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d104      	bne.n	8009c86 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2205      	movs	r2, #5
 8009c80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c84:	e006      	b.n	8009c94 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c8e:	e001      	b.n	8009c94 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e000      	b.n	8009c96 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d101      	bne.n	8009cb8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	e016      	b.n	8009ce6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d10f      	bne.n	8009ce4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f001 fa24 	bl	800b120 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	e000      	b.n	8009ce6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d101      	bne.n	8009d00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e049      	b.n	8009d94 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d106      	bne.n	8009d1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f89d 	bl	8009e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	f000 f9f7 	bl	800a120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6a1a      	ldr	r2, [r3, #32]
 8009db2:	f241 1311 	movw	r3, #4369	; 0x1111
 8009db6:	4013      	ands	r3, r2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10f      	bne.n	8009ddc <HAL_TIM_PWM_DeInit+0x40>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6a1a      	ldr	r2, [r3, #32]
 8009dc2:	f240 4344 	movw	r3, #1092	; 0x444
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d107      	bne.n	8009ddc <HAL_TIM_PWM_DeInit+0x40>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 0201 	bic.w	r2, r2, #1
 8009dda:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f843 	bl	8009e68 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d122      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f003 0302 	and.w	r3, r3, #2
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d11b      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f06f 0202 	mvn.w	r2, #2
 8009ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	f003 0303 	and.w	r3, r3, #3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f90f 	bl	800a0e2 <HAL_TIM_IC_CaptureCallback>
 8009ec4:	e005      	b.n	8009ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f901 	bl	800a0ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f912 	bl	800a0f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	f003 0304 	and.w	r3, r3, #4
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d122      	bne.n	8009f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	d11b      	bne.n	8009f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f06f 0204 	mvn.w	r2, #4
 8009efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2202      	movs	r2, #2
 8009f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d003      	beq.n	8009f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f8e5 	bl	800a0e2 <HAL_TIM_IC_CaptureCallback>
 8009f18:	e005      	b.n	8009f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f8d7 	bl	800a0ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f8e8 	bl	800a0f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	f003 0308 	and.w	r3, r3, #8
 8009f36:	2b08      	cmp	r3, #8
 8009f38:	d122      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f003 0308 	and.w	r3, r3, #8
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d11b      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f06f 0208 	mvn.w	r2, #8
 8009f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2204      	movs	r2, #4
 8009f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	f003 0303 	and.w	r3, r3, #3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f8bb 	bl	800a0e2 <HAL_TIM_IC_CaptureCallback>
 8009f6c:	e005      	b.n	8009f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8ad 	bl	800a0ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f8be 	bl	800a0f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f003 0310 	and.w	r3, r3, #16
 8009f8a:	2b10      	cmp	r3, #16
 8009f8c:	d122      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f003 0310 	and.w	r3, r3, #16
 8009f98:	2b10      	cmp	r3, #16
 8009f9a:	d11b      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f06f 0210 	mvn.w	r2, #16
 8009fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2208      	movs	r2, #8
 8009faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f891 	bl	800a0e2 <HAL_TIM_IC_CaptureCallback>
 8009fc0:	e005      	b.n	8009fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f883 	bl	800a0ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f894 	bl	800a0f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d10e      	bne.n	800a000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d107      	bne.n	800a000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f06f 0201 	mvn.w	r2, #1
 8009ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f85d 	bl	800a0ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a00a:	2b80      	cmp	r3, #128	; 0x80
 800a00c:	d10e      	bne.n	800a02c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a018:	2b80      	cmp	r3, #128	; 0x80
 800a01a:	d107      	bne.n	800a02c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f91e 	bl	800a268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03a:	d10e      	bne.n	800a05a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a046:	2b80      	cmp	r3, #128	; 0x80
 800a048:	d107      	bne.n	800a05a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f911 	bl	800a27c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a064:	2b40      	cmp	r3, #64	; 0x40
 800a066:	d10e      	bne.n	800a086 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a072:	2b40      	cmp	r3, #64	; 0x40
 800a074:	d107      	bne.n	800a086 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a07e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f842 	bl	800a10a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f003 0320 	and.w	r3, r3, #32
 800a090:	2b20      	cmp	r3, #32
 800a092:	d10e      	bne.n	800a0b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f003 0320 	and.w	r3, r3, #32
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	d107      	bne.n	800a0b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f06f 0220 	mvn.w	r2, #32
 800a0aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f8d1 	bl	800a254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0d6:	bf00      	nop
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0ea:	bf00      	nop
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b083      	sub	sp, #12
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a112:	bf00      	nop
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
	...

0800a120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a40      	ldr	r2, [pc, #256]	; (800a234 <TIM_Base_SetConfig+0x114>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d013      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13e:	d00f      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a3d      	ldr	r2, [pc, #244]	; (800a238 <TIM_Base_SetConfig+0x118>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d00b      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a3c      	ldr	r2, [pc, #240]	; (800a23c <TIM_Base_SetConfig+0x11c>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d007      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a3b      	ldr	r2, [pc, #236]	; (800a240 <TIM_Base_SetConfig+0x120>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d003      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a3a      	ldr	r2, [pc, #232]	; (800a244 <TIM_Base_SetConfig+0x124>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d108      	bne.n	800a172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a2f      	ldr	r2, [pc, #188]	; (800a234 <TIM_Base_SetConfig+0x114>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d01f      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a180:	d01b      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a2c      	ldr	r2, [pc, #176]	; (800a238 <TIM_Base_SetConfig+0x118>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d017      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a2b      	ldr	r2, [pc, #172]	; (800a23c <TIM_Base_SetConfig+0x11c>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d013      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a2a      	ldr	r2, [pc, #168]	; (800a240 <TIM_Base_SetConfig+0x120>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00f      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a29      	ldr	r2, [pc, #164]	; (800a244 <TIM_Base_SetConfig+0x124>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d00b      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a28      	ldr	r2, [pc, #160]	; (800a248 <TIM_Base_SetConfig+0x128>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d007      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a27      	ldr	r2, [pc, #156]	; (800a24c <TIM_Base_SetConfig+0x12c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d003      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a26      	ldr	r2, [pc, #152]	; (800a250 <TIM_Base_SetConfig+0x130>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d108      	bne.n	800a1cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	689a      	ldr	r2, [r3, #8]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a10      	ldr	r2, [pc, #64]	; (800a234 <TIM_Base_SetConfig+0x114>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00f      	beq.n	800a218 <TIM_Base_SetConfig+0xf8>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a12      	ldr	r2, [pc, #72]	; (800a244 <TIM_Base_SetConfig+0x124>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d00b      	beq.n	800a218 <TIM_Base_SetConfig+0xf8>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a11      	ldr	r2, [pc, #68]	; (800a248 <TIM_Base_SetConfig+0x128>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d007      	beq.n	800a218 <TIM_Base_SetConfig+0xf8>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a10      	ldr	r2, [pc, #64]	; (800a24c <TIM_Base_SetConfig+0x12c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d003      	beq.n	800a218 <TIM_Base_SetConfig+0xf8>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a0f      	ldr	r2, [pc, #60]	; (800a250 <TIM_Base_SetConfig+0x130>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d103      	bne.n	800a220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	615a      	str	r2, [r3, #20]
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40010000 	.word	0x40010000
 800a238:	40000400 	.word	0x40000400
 800a23c:	40000800 	.word	0x40000800
 800a240:	40000c00 	.word	0x40000c00
 800a244:	40010400 	.word	0x40010400
 800a248:	40014000 	.word	0x40014000
 800a24c:	40014400 	.word	0x40014400
 800a250:	40014800 	.word	0x40014800

0800a254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08a      	sub	sp, #40	; 0x28
 800a294:	af02      	add	r7, sp, #8
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	4613      	mov	r3, r2
 800a29e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d17b      	bne.n	800a3a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <HAL_UART_Transmit+0x26>
 800a2b0:	88fb      	ldrh	r3, [r7, #6]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e074      	b.n	800a3a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2221      	movs	r2, #33	; 0x21
 800a2c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2ca:	f7f9 fbe3 	bl	8003a94 <HAL_GetTick>
 800a2ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	88fa      	ldrh	r2, [r7, #6]
 800a2d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	88fa      	ldrh	r2, [r7, #6]
 800a2dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e8:	d108      	bne.n	800a2fc <HAL_UART_Transmit+0x6c>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d104      	bne.n	800a2fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	61bb      	str	r3, [r7, #24]
 800a2fa:	e003      	b.n	800a304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a300:	2300      	movs	r3, #0
 800a302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a304:	e030      	b.n	800a368 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2200      	movs	r2, #0
 800a30e:	2180      	movs	r1, #128	; 0x80
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 fced 	bl	800acf0 <UART_WaitOnFlagUntilTimeout>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2220      	movs	r2, #32
 800a320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a324:	2303      	movs	r3, #3
 800a326:	e03d      	b.n	800a3a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10b      	bne.n	800a346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	461a      	mov	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a33c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	3302      	adds	r3, #2
 800a342:	61bb      	str	r3, [r7, #24]
 800a344:	e007      	b.n	800a356 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	781a      	ldrb	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	3301      	adds	r3, #1
 800a354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	3b01      	subs	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a36e:	b29b      	uxth	r3, r3
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1c8      	bne.n	800a306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2200      	movs	r2, #0
 800a37c:	2140      	movs	r1, #64	; 0x40
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 fcb6 	bl	800acf0 <UART_WaitOnFlagUntilTimeout>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d005      	beq.n	800a396 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e006      	b.n	800a3a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2220      	movs	r2, #32
 800a39a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e000      	b.n	800a3a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a3a2:	2302      	movs	r3, #2
  }
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3720      	adds	r7, #32
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08a      	sub	sp, #40	; 0x28
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	603b      	str	r3, [r7, #0]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3c2:	2b20      	cmp	r3, #32
 800a3c4:	f040 80b5 	bne.w	800a532 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <HAL_UART_Receive+0x28>
 800a3ce:	88fb      	ldrh	r3, [r7, #6]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e0ad      	b.n	800a534 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2222      	movs	r2, #34	; 0x22
 800a3e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3ee:	f7f9 fb51 	bl	8003a94 <HAL_GetTick>
 800a3f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	88fa      	ldrh	r2, [r7, #6]
 800a3f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	88fa      	ldrh	r2, [r7, #6]
 800a400:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a40c:	d10e      	bne.n	800a42c <HAL_UART_Receive+0x80>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d105      	bne.n	800a422 <HAL_UART_Receive+0x76>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a41c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a420:	e02d      	b.n	800a47e <HAL_UART_Receive+0xd2>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	22ff      	movs	r2, #255	; 0xff
 800a426:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a42a:	e028      	b.n	800a47e <HAL_UART_Receive+0xd2>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10d      	bne.n	800a450 <HAL_UART_Receive+0xa4>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d104      	bne.n	800a446 <HAL_UART_Receive+0x9a>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	22ff      	movs	r2, #255	; 0xff
 800a440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a444:	e01b      	b.n	800a47e <HAL_UART_Receive+0xd2>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	227f      	movs	r2, #127	; 0x7f
 800a44a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a44e:	e016      	b.n	800a47e <HAL_UART_Receive+0xd2>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a458:	d10d      	bne.n	800a476 <HAL_UART_Receive+0xca>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d104      	bne.n	800a46c <HAL_UART_Receive+0xc0>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	227f      	movs	r2, #127	; 0x7f
 800a466:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a46a:	e008      	b.n	800a47e <HAL_UART_Receive+0xd2>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	223f      	movs	r2, #63	; 0x3f
 800a470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a474:	e003      	b.n	800a47e <HAL_UART_Receive+0xd2>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a484:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a48e:	d108      	bne.n	800a4a2 <HAL_UART_Receive+0xf6>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d104      	bne.n	800a4a2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	61bb      	str	r3, [r7, #24]
 800a4a0:	e003      	b.n	800a4aa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a4aa:	e036      	b.n	800a51a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2120      	movs	r1, #32
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 fc1a 	bl	800acf0 <UART_WaitOnFlagUntilTimeout>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d005      	beq.n	800a4ce <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2220      	movs	r2, #32
 800a4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e032      	b.n	800a534 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10c      	bne.n	800a4ee <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	8a7b      	ldrh	r3, [r7, #18]
 800a4de:	4013      	ands	r3, r2
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	3302      	adds	r3, #2
 800a4ea:	61bb      	str	r3, [r7, #24]
 800a4ec:	e00c      	b.n	800a508 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	8a7b      	ldrh	r3, [r7, #18]
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	3301      	adds	r3, #1
 800a506:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a50e:	b29b      	uxth	r3, r3
 800a510:	3b01      	subs	r3, #1
 800a512:	b29a      	uxth	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a520:	b29b      	uxth	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1c2      	bne.n	800a4ac <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2220      	movs	r2, #32
 800a52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	e000      	b.n	800a534 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800a532:	2302      	movs	r3, #2
  }
}
 800a534:	4618      	mov	r0, r3
 800a536:	3720      	adds	r7, #32
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b0ba      	sub	sp, #232	; 0xe8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	69db      	ldr	r3, [r3, #28]
 800a54a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a566:	f640 030f 	movw	r3, #2063	; 0x80f
 800a56a:	4013      	ands	r3, r2
 800a56c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a574:	2b00      	cmp	r3, #0
 800a576:	d11b      	bne.n	800a5b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a57c:	f003 0320 	and.w	r3, r3, #32
 800a580:	2b00      	cmp	r3, #0
 800a582:	d015      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a588:	f003 0320 	and.w	r3, r3, #32
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d105      	bne.n	800a59c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d009      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 8377 	beq.w	800ac94 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
      }
      return;
 800a5ae:	e371      	b.n	800ac94 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a5b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 8123 	beq.w	800a800 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a5be:	4b8d      	ldr	r3, [pc, #564]	; (800a7f4 <HAL_UART_IRQHandler+0x2b8>)
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d106      	bne.n	800a5d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a5c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a5ca:	4b8b      	ldr	r3, [pc, #556]	; (800a7f8 <HAL_UART_IRQHandler+0x2bc>)
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 8116 	beq.w	800a800 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d011      	beq.n	800a604 <HAL_UART_IRQHandler+0xc8>
 800a5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00b      	beq.n	800a604 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5fa:	f043 0201 	orr.w	r2, r3, #1
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a608:	f003 0302 	and.w	r3, r3, #2
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d011      	beq.n	800a634 <HAL_UART_IRQHandler+0xf8>
 800a610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00b      	beq.n	800a634 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2202      	movs	r2, #2
 800a622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62a:	f043 0204 	orr.w	r2, r3, #4
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a638:	f003 0304 	and.w	r3, r3, #4
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d011      	beq.n	800a664 <HAL_UART_IRQHandler+0x128>
 800a640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2204      	movs	r2, #4
 800a652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65a:	f043 0202 	orr.w	r2, r3, #2
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a668:	f003 0308 	and.w	r3, r3, #8
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d017      	beq.n	800a6a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a674:	f003 0320 	and.w	r3, r3, #32
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d105      	bne.n	800a688 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a67c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a680:	4b5c      	ldr	r3, [pc, #368]	; (800a7f4 <HAL_UART_IRQHandler+0x2b8>)
 800a682:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00b      	beq.n	800a6a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2208      	movs	r2, #8
 800a68e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a696:	f043 0208 	orr.w	r2, r3, #8
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d012      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x196>
 800a6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00c      	beq.n	800a6d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6c8:	f043 0220 	orr.w	r2, r3, #32
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f000 82dd 	beq.w	800ac98 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d013      	beq.n	800a712 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ee:	f003 0320 	and.w	r3, r3, #32
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d105      	bne.n	800a702 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d007      	beq.n	800a712 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a726:	2b40      	cmp	r3, #64	; 0x40
 800a728:	d005      	beq.n	800a736 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a72a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a72e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a732:	2b00      	cmp	r3, #0
 800a734:	d054      	beq.n	800a7e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fb42 	bl	800adc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a746:	2b40      	cmp	r3, #64	; 0x40
 800a748:	d146      	bne.n	800a7d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3308      	adds	r3, #8
 800a750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a758:	e853 3f00 	ldrex	r3, [r3]
 800a75c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3308      	adds	r3, #8
 800a772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a776:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a77a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a786:	e841 2300 	strex	r3, r2, [r1]
 800a78a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a78e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1d9      	bne.n	800a74a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d017      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7a6:	4a15      	ldr	r2, [pc, #84]	; (800a7fc <HAL_UART_IRQHandler+0x2c0>)
 800a7a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7f9 fde9 	bl	8004388 <HAL_DMA_Abort_IT>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d019      	beq.n	800a7f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a7ca:	4610      	mov	r0, r2
 800a7cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ce:	e00f      	b.n	800a7f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fa77 	bl	800acc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d6:	e00b      	b.n	800a7f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fa73 	bl	800acc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7de:	e007      	b.n	800a7f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fa6f 	bl	800acc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a7ee:	e253      	b.n	800ac98 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7f0:	bf00      	nop
    return;
 800a7f2:	e251      	b.n	800ac98 <HAL_UART_IRQHandler+0x75c>
 800a7f4:	10000001 	.word	0x10000001
 800a7f8:	04000120 	.word	0x04000120
 800a7fc:	0800ae8d 	.word	0x0800ae8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a804:	2b01      	cmp	r3, #1
 800a806:	f040 81e7 	bne.w	800abd8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a80e:	f003 0310 	and.w	r3, r3, #16
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 81e0 	beq.w	800abd8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a81c:	f003 0310 	and.w	r3, r3, #16
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 81d9 	beq.w	800abd8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2210      	movs	r2, #16
 800a82c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a838:	2b40      	cmp	r3, #64	; 0x40
 800a83a:	f040 8151 	bne.w	800aae0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a96      	ldr	r2, [pc, #600]	; (800aaa0 <HAL_UART_IRQHandler+0x564>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d068      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a93      	ldr	r2, [pc, #588]	; (800aaa4 <HAL_UART_IRQHandler+0x568>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d061      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a91      	ldr	r2, [pc, #580]	; (800aaa8 <HAL_UART_IRQHandler+0x56c>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d05a      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a8e      	ldr	r2, [pc, #568]	; (800aaac <HAL_UART_IRQHandler+0x570>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d053      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a8c      	ldr	r2, [pc, #560]	; (800aab0 <HAL_UART_IRQHandler+0x574>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d04c      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a89      	ldr	r2, [pc, #548]	; (800aab4 <HAL_UART_IRQHandler+0x578>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d045      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a87      	ldr	r2, [pc, #540]	; (800aab8 <HAL_UART_IRQHandler+0x57c>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d03e      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a84      	ldr	r2, [pc, #528]	; (800aabc <HAL_UART_IRQHandler+0x580>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d037      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a82      	ldr	r2, [pc, #520]	; (800aac0 <HAL_UART_IRQHandler+0x584>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d030      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a7f      	ldr	r2, [pc, #508]	; (800aac4 <HAL_UART_IRQHandler+0x588>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d029      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a7d      	ldr	r2, [pc, #500]	; (800aac8 <HAL_UART_IRQHandler+0x58c>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d022      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a7a      	ldr	r2, [pc, #488]	; (800aacc <HAL_UART_IRQHandler+0x590>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d01b      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a78      	ldr	r2, [pc, #480]	; (800aad0 <HAL_UART_IRQHandler+0x594>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d014      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a75      	ldr	r2, [pc, #468]	; (800aad4 <HAL_UART_IRQHandler+0x598>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d00d      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a73      	ldr	r2, [pc, #460]	; (800aad8 <HAL_UART_IRQHandler+0x59c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d006      	beq.n	800a91e <HAL_UART_IRQHandler+0x3e2>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a70      	ldr	r2, [pc, #448]	; (800aadc <HAL_UART_IRQHandler+0x5a0>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d106      	bne.n	800a92c <HAL_UART_IRQHandler+0x3f0>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	e005      	b.n	800a938 <HAL_UART_IRQHandler+0x3fc>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	b29b      	uxth	r3, r3
 800a938:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a93c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 81ab 	beq.w	800ac9c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a94c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a950:	429a      	cmp	r2, r3
 800a952:	f080 81a3 	bcs.w	800ac9c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a95c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a96c:	f000 8087 	beq.w	800aa7e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a97c:	e853 3f00 	ldrex	r3, [r3]
 800a980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a98c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	461a      	mov	r2, r3
 800a996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a99a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a99e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a9a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a9b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1da      	bne.n	800a970 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3308      	adds	r3, #8
 800a9c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9c4:	e853 3f00 	ldrex	r3, [r3]
 800a9c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a9ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9cc:	f023 0301 	bic.w	r3, r3, #1
 800a9d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3308      	adds	r3, #8
 800a9da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a9de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a9e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9ea:	e841 2300 	strex	r3, r2, [r1]
 800a9ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a9f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e1      	bne.n	800a9ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa00:	e853 3f00 	ldrex	r3, [r3]
 800aa04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3308      	adds	r3, #8
 800aa16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa22:	e841 2300 	strex	r3, r2, [r1]
 800aa26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1e3      	bne.n	800a9f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2220      	movs	r2, #32
 800aa32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa44:	e853 3f00 	ldrex	r3, [r3]
 800aa48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa4c:	f023 0310 	bic.w	r3, r3, #16
 800aa50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e4      	bne.n	800aa3c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7f9 f967 	bl	8003d4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2202      	movs	r2, #2
 800aa82:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f91d 	bl	800acd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa9e:	e0fd      	b.n	800ac9c <HAL_UART_IRQHandler+0x760>
 800aaa0:	40020010 	.word	0x40020010
 800aaa4:	40020028 	.word	0x40020028
 800aaa8:	40020040 	.word	0x40020040
 800aaac:	40020058 	.word	0x40020058
 800aab0:	40020070 	.word	0x40020070
 800aab4:	40020088 	.word	0x40020088
 800aab8:	400200a0 	.word	0x400200a0
 800aabc:	400200b8 	.word	0x400200b8
 800aac0:	40020410 	.word	0x40020410
 800aac4:	40020428 	.word	0x40020428
 800aac8:	40020440 	.word	0x40020440
 800aacc:	40020458 	.word	0x40020458
 800aad0:	40020470 	.word	0x40020470
 800aad4:	40020488 	.word	0x40020488
 800aad8:	400204a0 	.word	0x400204a0
 800aadc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 80cf 	beq.w	800aca0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ab02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 80ca 	beq.w	800aca0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab14:	e853 3f00 	ldrex	r3, [r3]
 800ab18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab36:	e841 2300 	strex	r3, r2, [r1]
 800ab3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1e4      	bne.n	800ab0c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3308      	adds	r3, #8
 800ab48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	623b      	str	r3, [r7, #32]
   return(result);
 800ab52:	6a3a      	ldr	r2, [r7, #32]
 800ab54:	4b55      	ldr	r3, [pc, #340]	; (800acac <HAL_UART_IRQHandler+0x770>)
 800ab56:	4013      	ands	r3, r2
 800ab58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3308      	adds	r3, #8
 800ab62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ab66:	633a      	str	r2, [r7, #48]	; 0x30
 800ab68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e3      	bne.n	800ab42 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	e853 3f00 	ldrex	r3, [r3]
 800ab9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f023 0310 	bic.w	r3, r3, #16
 800aba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abb0:	61fb      	str	r3, [r7, #28]
 800abb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb4:	69b9      	ldr	r1, [r7, #24]
 800abb6:	69fa      	ldr	r2, [r7, #28]
 800abb8:	e841 2300 	strex	r3, r2, [r1]
 800abbc:	617b      	str	r3, [r7, #20]
   return(result);
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e4      	bne.n	800ab8e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2202      	movs	r2, #2
 800abc8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f881 	bl	800acd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abd6:	e063      	b.n	800aca0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00e      	beq.n	800ac02 <HAL_UART_IRQHandler+0x6c6>
 800abe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d008      	beq.n	800ac02 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800abf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f987 	bl	800af0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac00:	e051      	b.n	800aca6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ac02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d014      	beq.n	800ac38 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ac0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d105      	bne.n	800ac26 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ac1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d008      	beq.n	800ac38 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d03a      	beq.n	800aca4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	4798      	blx	r3
    }
    return;
 800ac36:	e035      	b.n	800aca4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d009      	beq.n	800ac58 <HAL_UART_IRQHandler+0x71c>
 800ac44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f931 	bl	800aeb8 <UART_EndTransmit_IT>
    return;
 800ac56:	e026      	b.n	800aca6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d009      	beq.n	800ac78 <HAL_UART_IRQHandler+0x73c>
 800ac64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f960 	bl	800af36 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac76:	e016      	b.n	800aca6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d010      	beq.n	800aca6 <HAL_UART_IRQHandler+0x76a>
 800ac84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	da0c      	bge.n	800aca6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f948 	bl	800af22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac92:	e008      	b.n	800aca6 <HAL_UART_IRQHandler+0x76a>
      return;
 800ac94:	bf00      	nop
 800ac96:	e006      	b.n	800aca6 <HAL_UART_IRQHandler+0x76a>
    return;
 800ac98:	bf00      	nop
 800ac9a:	e004      	b.n	800aca6 <HAL_UART_IRQHandler+0x76a>
      return;
 800ac9c:	bf00      	nop
 800ac9e:	e002      	b.n	800aca6 <HAL_UART_IRQHandler+0x76a>
      return;
 800aca0:	bf00      	nop
 800aca2:	e000      	b.n	800aca6 <HAL_UART_IRQHandler+0x76a>
    return;
 800aca4:	bf00      	nop
  }
}
 800aca6:	37e8      	adds	r7, #232	; 0xe8
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	effffffe 	.word	0xeffffffe

0800acb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	4613      	mov	r3, r2
 800acfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad00:	e049      	b.n	800ad96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad08:	d045      	beq.n	800ad96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0a:	f7f8 fec3 	bl	8003a94 <HAL_GetTick>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	69ba      	ldr	r2, [r7, #24]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d302      	bcc.n	800ad20 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e048      	b.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f003 0304 	and.w	r3, r3, #4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d031      	beq.n	800ad96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	69db      	ldr	r3, [r3, #28]
 800ad38:	f003 0308 	and.w	r3, r3, #8
 800ad3c:	2b08      	cmp	r3, #8
 800ad3e:	d110      	bne.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2208      	movs	r2, #8
 800ad46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f000 f839 	bl	800adc0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2208      	movs	r2, #8
 800ad52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e029      	b.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad70:	d111      	bne.n	800ad96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 f81f 	bl	800adc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e00f      	b.n	800adb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	69da      	ldr	r2, [r3, #28]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	4013      	ands	r3, r2
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	bf0c      	ite	eq
 800ada6:	2301      	moveq	r3, #1
 800ada8:	2300      	movne	r3, #0
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	461a      	mov	r2, r3
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d0a6      	beq.n	800ad02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b095      	sub	sp, #84	; 0x54
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add0:	e853 3f00 	ldrex	r3, [r3]
 800add4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800addc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ade6:	643b      	str	r3, [r7, #64]	; 0x40
 800ade8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adee:	e841 2300 	strex	r3, r2, [r1]
 800adf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e6      	bne.n	800adc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3308      	adds	r3, #8
 800ae00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	e853 3f00 	ldrex	r3, [r3]
 800ae08:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae0a:	69fa      	ldr	r2, [r7, #28]
 800ae0c:	4b1e      	ldr	r3, [pc, #120]	; (800ae88 <UART_EndRxTransfer+0xc8>)
 800ae0e:	4013      	ands	r3, r2
 800ae10:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3308      	adds	r3, #8
 800ae18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae22:	e841 2300 	strex	r3, r2, [r1]
 800ae26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1e5      	bne.n	800adfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d118      	bne.n	800ae68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	e853 3f00 	ldrex	r3, [r3]
 800ae42:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f023 0310 	bic.w	r3, r3, #16
 800ae4a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae54:	61bb      	str	r3, [r7, #24]
 800ae56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae58:	6979      	ldr	r1, [r7, #20]
 800ae5a:	69ba      	ldr	r2, [r7, #24]
 800ae5c:	e841 2300 	strex	r3, r2, [r1]
 800ae60:	613b      	str	r3, [r7, #16]
   return(result);
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1e6      	bne.n	800ae36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ae7c:	bf00      	nop
 800ae7e:	3754      	adds	r7, #84	; 0x54
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	effffffe 	.word	0xeffffffe

0800ae8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff ff0a 	bl	800acc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeb0:	bf00      	nop
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aed4:	61fb      	str	r3, [r7, #28]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	61bb      	str	r3, [r7, #24]
 800aee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	6979      	ldr	r1, [r7, #20]
 800aee4:	69ba      	ldr	r2, [r7, #24]
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	613b      	str	r3, [r7, #16]
   return(result);
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e6      	bne.n	800aec0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff fed5 	bl	800acb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af06:	bf00      	nop
 800af08:	3720      	adds	r7, #32
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af16:	bf00      	nop
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800af36:	b480      	push	{r7}
 800af38:	b083      	sub	sp, #12
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800af3e:	bf00      	nop
 800af40:	370c      	adds	r7, #12
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
	...

0800af4c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d121      	bne.n	800afa2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	4b27      	ldr	r3, [pc, #156]	; (800b000 <FMC_SDRAM_Init+0xb4>)
 800af64:	4013      	ands	r3, r2
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	6851      	ldr	r1, [r2, #4]
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	6892      	ldr	r2, [r2, #8]
 800af6e:	4311      	orrs	r1, r2
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	68d2      	ldr	r2, [r2, #12]
 800af74:	4311      	orrs	r1, r2
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	6912      	ldr	r2, [r2, #16]
 800af7a:	4311      	orrs	r1, r2
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	6952      	ldr	r2, [r2, #20]
 800af80:	4311      	orrs	r1, r2
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	6992      	ldr	r2, [r2, #24]
 800af86:	4311      	orrs	r1, r2
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	69d2      	ldr	r2, [r2, #28]
 800af8c:	4311      	orrs	r1, r2
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	6a12      	ldr	r2, [r2, #32]
 800af92:	4311      	orrs	r1, r2
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af98:	430a      	orrs	r2, r1
 800af9a:	431a      	orrs	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	e026      	b.n	800aff0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	69d9      	ldr	r1, [r3, #28]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	4319      	orrs	r1, r3
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb8:	430b      	orrs	r3, r1
 800afba:	431a      	orrs	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	4b0e      	ldr	r3, [pc, #56]	; (800b000 <FMC_SDRAM_Init+0xb4>)
 800afc6:	4013      	ands	r3, r2
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	6851      	ldr	r1, [r2, #4]
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	6892      	ldr	r2, [r2, #8]
 800afd0:	4311      	orrs	r1, r2
 800afd2:	683a      	ldr	r2, [r7, #0]
 800afd4:	68d2      	ldr	r2, [r2, #12]
 800afd6:	4311      	orrs	r1, r2
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	6912      	ldr	r2, [r2, #16]
 800afdc:	4311      	orrs	r1, r2
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	6952      	ldr	r2, [r2, #20]
 800afe2:	4311      	orrs	r1, r2
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	6992      	ldr	r2, [r2, #24]
 800afe8:	430a      	orrs	r2, r1
 800afea:	431a      	orrs	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	ffff8000 	.word	0xffff8000

0800b004 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d128      	bne.n	800b068 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	1e59      	subs	r1, r3, #1
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	3b01      	subs	r3, #1
 800b02a:	011b      	lsls	r3, r3, #4
 800b02c:	4319      	orrs	r1, r3
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	3b01      	subs	r3, #1
 800b034:	021b      	lsls	r3, r3, #8
 800b036:	4319      	orrs	r1, r3
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	031b      	lsls	r3, r3, #12
 800b040:	4319      	orrs	r1, r3
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	3b01      	subs	r3, #1
 800b048:	041b      	lsls	r3, r3, #16
 800b04a:	4319      	orrs	r1, r3
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	3b01      	subs	r3, #1
 800b052:	051b      	lsls	r3, r3, #20
 800b054:	4319      	orrs	r1, r3
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	061b      	lsls	r3, r3, #24
 800b05e:	430b      	orrs	r3, r1
 800b060:	431a      	orrs	r2, r3
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	609a      	str	r2, [r3, #8]
 800b066:	e02d      	b.n	800b0c4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	4b19      	ldr	r3, [pc, #100]	; (800b0d4 <FMC_SDRAM_Timing_Init+0xd0>)
 800b06e:	4013      	ands	r3, r2
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	68d2      	ldr	r2, [r2, #12]
 800b074:	3a01      	subs	r2, #1
 800b076:	0311      	lsls	r1, r2, #12
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	6952      	ldr	r2, [r2, #20]
 800b07c:	3a01      	subs	r2, #1
 800b07e:	0512      	lsls	r2, r2, #20
 800b080:	430a      	orrs	r2, r1
 800b082:	431a      	orrs	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	1e59      	subs	r1, r3, #1
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	4319      	orrs	r1, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	021b      	lsls	r3, r3, #8
 800b0a8:	4319      	orrs	r1, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	041b      	lsls	r3, r3, #16
 800b0b2:	4319      	orrs	r1, r3
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	699b      	ldr	r3, [r3, #24]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	061b      	lsls	r3, r3, #24
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	ff0f0fff 	.word	0xff0f0fff

0800b0d8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	691a      	ldr	r2, [r3, #16]
 800b0e8:	4b0c      	ldr	r3, [pc, #48]	; (800b11c <FMC_SDRAM_SendCommand+0x44>)
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	6811      	ldr	r1, [r2, #0]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	6852      	ldr	r2, [r2, #4]
 800b0f4:	4311      	orrs	r1, r2
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	6892      	ldr	r2, [r2, #8]
 800b0fa:	3a01      	subs	r2, #1
 800b0fc:	0152      	lsls	r2, r2, #5
 800b0fe:	4311      	orrs	r1, r2
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	68d2      	ldr	r2, [r2, #12]
 800b104:	0252      	lsls	r2, r2, #9
 800b106:	430a      	orrs	r2, r1
 800b108:	431a      	orrs	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	ffc00000 	.word	0xffc00000

0800b120 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	695a      	ldr	r2, [r3, #20]
 800b12e:	4b07      	ldr	r3, [pc, #28]	; (800b14c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b130:	4013      	ands	r3, r2
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	0052      	lsls	r2, r2, #1
 800b136:	431a      	orrs	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	370c      	adds	r7, #12
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	ffffc001 	.word	0xffffc001

0800b150 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	689a      	ldr	r2, [r3, #8]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	1c5a      	adds	r2, r3, #1
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	601a      	str	r2, [r3, #0]
}
 800b18c:	bf00      	nop
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	6892      	ldr	r2, [r2, #8]
 800b1ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	6852      	ldr	r2, [r2, #4]
 800b1b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d103      	bne.n	800b1cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689a      	ldr	r2, [r3, #8]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	1e5a      	subs	r2, r3, #1
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1f6:	4b4f      	ldr	r3, [pc, #316]	; (800b334 <xTaskIncrementTick+0x148>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f040 808f 	bne.w	800b31e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b200:	4b4d      	ldr	r3, [pc, #308]	; (800b338 <xTaskIncrementTick+0x14c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3301      	adds	r3, #1
 800b206:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b208:	4a4b      	ldr	r2, [pc, #300]	; (800b338 <xTaskIncrementTick+0x14c>)
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d120      	bne.n	800b256 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b214:	4b49      	ldr	r3, [pc, #292]	; (800b33c <xTaskIncrementTick+0x150>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00a      	beq.n	800b234 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b230:	bf00      	nop
 800b232:	e7fe      	b.n	800b232 <xTaskIncrementTick+0x46>
 800b234:	4b41      	ldr	r3, [pc, #260]	; (800b33c <xTaskIncrementTick+0x150>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	60fb      	str	r3, [r7, #12]
 800b23a:	4b41      	ldr	r3, [pc, #260]	; (800b340 <xTaskIncrementTick+0x154>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a3f      	ldr	r2, [pc, #252]	; (800b33c <xTaskIncrementTick+0x150>)
 800b240:	6013      	str	r3, [r2, #0]
 800b242:	4a3f      	ldr	r2, [pc, #252]	; (800b340 <xTaskIncrementTick+0x154>)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6013      	str	r3, [r2, #0]
 800b248:	4b3e      	ldr	r3, [pc, #248]	; (800b344 <xTaskIncrementTick+0x158>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3301      	adds	r3, #1
 800b24e:	4a3d      	ldr	r2, [pc, #244]	; (800b344 <xTaskIncrementTick+0x158>)
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	f000 f8e3 	bl	800b41c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b256:	4b3c      	ldr	r3, [pc, #240]	; (800b348 <xTaskIncrementTick+0x15c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d349      	bcc.n	800b2f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b260:	4b36      	ldr	r3, [pc, #216]	; (800b33c <xTaskIncrementTick+0x150>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d104      	bne.n	800b274 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b26a:	4b37      	ldr	r3, [pc, #220]	; (800b348 <xTaskIncrementTick+0x15c>)
 800b26c:	f04f 32ff 	mov.w	r2, #4294967295
 800b270:	601a      	str	r2, [r3, #0]
					break;
 800b272:	e03f      	b.n	800b2f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b274:	4b31      	ldr	r3, [pc, #196]	; (800b33c <xTaskIncrementTick+0x150>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d203      	bcs.n	800b294 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b28c:	4a2e      	ldr	r2, [pc, #184]	; (800b348 <xTaskIncrementTick+0x15c>)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b292:	e02f      	b.n	800b2f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	3304      	adds	r3, #4
 800b298:	4618      	mov	r0, r3
 800b29a:	f7ff ff7d 	bl	800b198 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d004      	beq.n	800b2b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	3318      	adds	r3, #24
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7ff ff74 	bl	800b198 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b4:	4b25      	ldr	r3, [pc, #148]	; (800b34c <xTaskIncrementTick+0x160>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d903      	bls.n	800b2c4 <xTaskIncrementTick+0xd8>
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	4a22      	ldr	r2, [pc, #136]	; (800b34c <xTaskIncrementTick+0x160>)
 800b2c2:	6013      	str	r3, [r2, #0]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4a1f      	ldr	r2, [pc, #124]	; (800b350 <xTaskIncrementTick+0x164>)
 800b2d2:	441a      	add	r2, r3
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4610      	mov	r0, r2
 800b2dc:	f7ff ff38 	bl	800b150 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e4:	4b1b      	ldr	r3, [pc, #108]	; (800b354 <xTaskIncrementTick+0x168>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d3b8      	bcc.n	800b260 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2f2:	e7b5      	b.n	800b260 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2f4:	4b17      	ldr	r3, [pc, #92]	; (800b354 <xTaskIncrementTick+0x168>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fa:	4915      	ldr	r1, [pc, #84]	; (800b350 <xTaskIncrementTick+0x164>)
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	440b      	add	r3, r1
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d901      	bls.n	800b310 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b30c:	2301      	movs	r3, #1
 800b30e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b310:	4b11      	ldr	r3, [pc, #68]	; (800b358 <xTaskIncrementTick+0x16c>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d007      	beq.n	800b328 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b318:	2301      	movs	r3, #1
 800b31a:	617b      	str	r3, [r7, #20]
 800b31c:	e004      	b.n	800b328 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b31e:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <xTaskIncrementTick+0x170>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	4a0d      	ldr	r2, [pc, #52]	; (800b35c <xTaskIncrementTick+0x170>)
 800b326:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b328:	697b      	ldr	r3, [r7, #20]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	240014b0 	.word	0x240014b0
 800b338:	24001494 	.word	0x24001494
 800b33c:	2400148c 	.word	0x2400148c
 800b340:	24001490 	.word	0x24001490
 800b344:	240014a8 	.word	0x240014a8
 800b348:	240014ac 	.word	0x240014ac
 800b34c:	24001498 	.word	0x24001498
 800b350:	2400102c 	.word	0x2400102c
 800b354:	24001028 	.word	0x24001028
 800b358:	240014a4 	.word	0x240014a4
 800b35c:	240014a0 	.word	0x240014a0

0800b360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b366:	4b28      	ldr	r3, [pc, #160]	; (800b408 <vTaskSwitchContext+0xa8>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b36e:	4b27      	ldr	r3, [pc, #156]	; (800b40c <vTaskSwitchContext+0xac>)
 800b370:	2201      	movs	r2, #1
 800b372:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b374:	e041      	b.n	800b3fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b376:	4b25      	ldr	r3, [pc, #148]	; (800b40c <vTaskSwitchContext+0xac>)
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b37c:	4b24      	ldr	r3, [pc, #144]	; (800b410 <vTaskSwitchContext+0xb0>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	e010      	b.n	800b3a6 <vTaskSwitchContext+0x46>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10a      	bne.n	800b3a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800b38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	607b      	str	r3, [r7, #4]
}
 800b39c:	bf00      	nop
 800b39e:	e7fe      	b.n	800b39e <vTaskSwitchContext+0x3e>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	60fb      	str	r3, [r7, #12]
 800b3a6:	491b      	ldr	r1, [pc, #108]	; (800b414 <vTaskSwitchContext+0xb4>)
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	440b      	add	r3, r1
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0e4      	beq.n	800b384 <vTaskSwitchContext+0x24>
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4a13      	ldr	r2, [pc, #76]	; (800b414 <vTaskSwitchContext+0xb4>)
 800b3c6:	4413      	add	r3, r2
 800b3c8:	60bb      	str	r3, [r7, #8]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	605a      	str	r2, [r3, #4]
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	685a      	ldr	r2, [r3, #4]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d104      	bne.n	800b3ea <vTaskSwitchContext+0x8a>
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	605a      	str	r2, [r3, #4]
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	4a09      	ldr	r2, [pc, #36]	; (800b418 <vTaskSwitchContext+0xb8>)
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	4a06      	ldr	r2, [pc, #24]	; (800b410 <vTaskSwitchContext+0xb0>)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6013      	str	r3, [r2, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	240014b0 	.word	0x240014b0
 800b40c:	240014a4 	.word	0x240014a4
 800b410:	24001498 	.word	0x24001498
 800b414:	2400102c 	.word	0x2400102c
 800b418:	24001028 	.word	0x24001028

0800b41c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b422:	4b0c      	ldr	r3, [pc, #48]	; (800b454 <prvResetNextTaskUnblockTime+0x38>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b42c:	4b0a      	ldr	r3, [pc, #40]	; (800b458 <prvResetNextTaskUnblockTime+0x3c>)
 800b42e:	f04f 32ff 	mov.w	r2, #4294967295
 800b432:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b434:	e008      	b.n	800b448 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b436:	4b07      	ldr	r3, [pc, #28]	; (800b454 <prvResetNextTaskUnblockTime+0x38>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	4a04      	ldr	r2, [pc, #16]	; (800b458 <prvResetNextTaskUnblockTime+0x3c>)
 800b446:	6013      	str	r3, [r2, #0]
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	2400148c 	.word	0x2400148c
 800b458:	240014ac 	.word	0x240014ac

0800b45c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b462:	4b0b      	ldr	r3, [pc, #44]	; (800b490 <xTaskGetSchedulerState+0x34>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d102      	bne.n	800b470 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b46a:	2301      	movs	r3, #1
 800b46c:	607b      	str	r3, [r7, #4]
 800b46e:	e008      	b.n	800b482 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b470:	4b08      	ldr	r3, [pc, #32]	; (800b494 <xTaskGetSchedulerState+0x38>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d102      	bne.n	800b47e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b478:	2302      	movs	r3, #2
 800b47a:	607b      	str	r3, [r7, #4]
 800b47c:	e001      	b.n	800b482 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b47e:	2300      	movs	r3, #0
 800b480:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b482:	687b      	ldr	r3, [r7, #4]
	}
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	2400149c 	.word	0x2400149c
 800b494:	240014b0 	.word	0x240014b0
	...

0800b4a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4a0:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <pxCurrentTCBConst2>)
 800b4a2:	6819      	ldr	r1, [r3, #0]
 800b4a4:	6808      	ldr	r0, [r1, #0]
 800b4a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4aa:	f380 8809 	msr	PSP, r0
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f04f 0000 	mov.w	r0, #0
 800b4b6:	f380 8811 	msr	BASEPRI, r0
 800b4ba:	4770      	bx	lr
 800b4bc:	f3af 8000 	nop.w

0800b4c0 <pxCurrentTCBConst2>:
 800b4c0:	24001028 	.word	0x24001028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop
	...

0800b4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4d0:	f3ef 8009 	mrs	r0, PSP
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	4b15      	ldr	r3, [pc, #84]	; (800b530 <pxCurrentTCBConst>)
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	f01e 0f10 	tst.w	lr, #16
 800b4e0:	bf08      	it	eq
 800b4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ea:	6010      	str	r0, [r2, #0]
 800b4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4f4:	f380 8811 	msr	BASEPRI, r0
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f7ff ff2e 	bl	800b360 <vTaskSwitchContext>
 800b504:	f04f 0000 	mov.w	r0, #0
 800b508:	f380 8811 	msr	BASEPRI, r0
 800b50c:	bc09      	pop	{r0, r3}
 800b50e:	6819      	ldr	r1, [r3, #0]
 800b510:	6808      	ldr	r0, [r1, #0]
 800b512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b516:	f01e 0f10 	tst.w	lr, #16
 800b51a:	bf08      	it	eq
 800b51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b520:	f380 8809 	msr	PSP, r0
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	f3af 8000 	nop.w

0800b530 <pxCurrentTCBConst>:
 800b530:	24001028 	.word	0x24001028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop

0800b538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	607b      	str	r3, [r7, #4]
}
 800b550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b552:	f7ff fe4b 	bl	800b1ec <xTaskIncrementTick>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b55c:	4b06      	ldr	r3, [pc, #24]	; (800b578 <xPortSysTickHandler+0x40>)
 800b55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	2300      	movs	r3, #0
 800b566:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <malloc>:
 800b57c:	4b02      	ldr	r3, [pc, #8]	; (800b588 <malloc+0xc>)
 800b57e:	4601      	mov	r1, r0
 800b580:	6818      	ldr	r0, [r3, #0]
 800b582:	f000 b82b 	b.w	800b5dc <_malloc_r>
 800b586:	bf00      	nop
 800b588:	24000098 	.word	0x24000098

0800b58c <free>:
 800b58c:	4b02      	ldr	r3, [pc, #8]	; (800b598 <free+0xc>)
 800b58e:	4601      	mov	r1, r0
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	f000 bb25 	b.w	800bbe0 <_free_r>
 800b596:	bf00      	nop
 800b598:	24000098 	.word	0x24000098

0800b59c <sbrk_aligned>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	4e0e      	ldr	r6, [pc, #56]	; (800b5d8 <sbrk_aligned+0x3c>)
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	6831      	ldr	r1, [r6, #0]
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	b911      	cbnz	r1, 800b5ae <sbrk_aligned+0x12>
 800b5a8:	f000 fa9e 	bl	800bae8 <_sbrk_r>
 800b5ac:	6030      	str	r0, [r6, #0]
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	f000 fa99 	bl	800bae8 <_sbrk_r>
 800b5b6:	1c43      	adds	r3, r0, #1
 800b5b8:	d00a      	beq.n	800b5d0 <sbrk_aligned+0x34>
 800b5ba:	1cc4      	adds	r4, r0, #3
 800b5bc:	f024 0403 	bic.w	r4, r4, #3
 800b5c0:	42a0      	cmp	r0, r4
 800b5c2:	d007      	beq.n	800b5d4 <sbrk_aligned+0x38>
 800b5c4:	1a21      	subs	r1, r4, r0
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f000 fa8e 	bl	800bae8 <_sbrk_r>
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d101      	bne.n	800b5d4 <sbrk_aligned+0x38>
 800b5d0:	f04f 34ff 	mov.w	r4, #4294967295
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}
 800b5d8:	240014b8 	.word	0x240014b8

0800b5dc <_malloc_r>:
 800b5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e0:	1ccd      	adds	r5, r1, #3
 800b5e2:	f025 0503 	bic.w	r5, r5, #3
 800b5e6:	3508      	adds	r5, #8
 800b5e8:	2d0c      	cmp	r5, #12
 800b5ea:	bf38      	it	cc
 800b5ec:	250c      	movcc	r5, #12
 800b5ee:	2d00      	cmp	r5, #0
 800b5f0:	4607      	mov	r7, r0
 800b5f2:	db01      	blt.n	800b5f8 <_malloc_r+0x1c>
 800b5f4:	42a9      	cmp	r1, r5
 800b5f6:	d905      	bls.n	800b604 <_malloc_r+0x28>
 800b5f8:	230c      	movs	r3, #12
 800b5fa:	603b      	str	r3, [r7, #0]
 800b5fc:	2600      	movs	r6, #0
 800b5fe:	4630      	mov	r0, r6
 800b600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b6d8 <_malloc_r+0xfc>
 800b608:	f000 f868 	bl	800b6dc <__malloc_lock>
 800b60c:	f8d8 3000 	ldr.w	r3, [r8]
 800b610:	461c      	mov	r4, r3
 800b612:	bb5c      	cbnz	r4, 800b66c <_malloc_r+0x90>
 800b614:	4629      	mov	r1, r5
 800b616:	4638      	mov	r0, r7
 800b618:	f7ff ffc0 	bl	800b59c <sbrk_aligned>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	4604      	mov	r4, r0
 800b620:	d155      	bne.n	800b6ce <_malloc_r+0xf2>
 800b622:	f8d8 4000 	ldr.w	r4, [r8]
 800b626:	4626      	mov	r6, r4
 800b628:	2e00      	cmp	r6, #0
 800b62a:	d145      	bne.n	800b6b8 <_malloc_r+0xdc>
 800b62c:	2c00      	cmp	r4, #0
 800b62e:	d048      	beq.n	800b6c2 <_malloc_r+0xe6>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	4631      	mov	r1, r6
 800b634:	4638      	mov	r0, r7
 800b636:	eb04 0903 	add.w	r9, r4, r3
 800b63a:	f000 fa55 	bl	800bae8 <_sbrk_r>
 800b63e:	4581      	cmp	r9, r0
 800b640:	d13f      	bne.n	800b6c2 <_malloc_r+0xe6>
 800b642:	6821      	ldr	r1, [r4, #0]
 800b644:	1a6d      	subs	r5, r5, r1
 800b646:	4629      	mov	r1, r5
 800b648:	4638      	mov	r0, r7
 800b64a:	f7ff ffa7 	bl	800b59c <sbrk_aligned>
 800b64e:	3001      	adds	r0, #1
 800b650:	d037      	beq.n	800b6c2 <_malloc_r+0xe6>
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	442b      	add	r3, r5
 800b656:	6023      	str	r3, [r4, #0]
 800b658:	f8d8 3000 	ldr.w	r3, [r8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d038      	beq.n	800b6d2 <_malloc_r+0xf6>
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	42a2      	cmp	r2, r4
 800b664:	d12b      	bne.n	800b6be <_malloc_r+0xe2>
 800b666:	2200      	movs	r2, #0
 800b668:	605a      	str	r2, [r3, #4]
 800b66a:	e00f      	b.n	800b68c <_malloc_r+0xb0>
 800b66c:	6822      	ldr	r2, [r4, #0]
 800b66e:	1b52      	subs	r2, r2, r5
 800b670:	d41f      	bmi.n	800b6b2 <_malloc_r+0xd6>
 800b672:	2a0b      	cmp	r2, #11
 800b674:	d917      	bls.n	800b6a6 <_malloc_r+0xca>
 800b676:	1961      	adds	r1, r4, r5
 800b678:	42a3      	cmp	r3, r4
 800b67a:	6025      	str	r5, [r4, #0]
 800b67c:	bf18      	it	ne
 800b67e:	6059      	strne	r1, [r3, #4]
 800b680:	6863      	ldr	r3, [r4, #4]
 800b682:	bf08      	it	eq
 800b684:	f8c8 1000 	streq.w	r1, [r8]
 800b688:	5162      	str	r2, [r4, r5]
 800b68a:	604b      	str	r3, [r1, #4]
 800b68c:	4638      	mov	r0, r7
 800b68e:	f104 060b 	add.w	r6, r4, #11
 800b692:	f000 f829 	bl	800b6e8 <__malloc_unlock>
 800b696:	f026 0607 	bic.w	r6, r6, #7
 800b69a:	1d23      	adds	r3, r4, #4
 800b69c:	1af2      	subs	r2, r6, r3
 800b69e:	d0ae      	beq.n	800b5fe <_malloc_r+0x22>
 800b6a0:	1b9b      	subs	r3, r3, r6
 800b6a2:	50a3      	str	r3, [r4, r2]
 800b6a4:	e7ab      	b.n	800b5fe <_malloc_r+0x22>
 800b6a6:	42a3      	cmp	r3, r4
 800b6a8:	6862      	ldr	r2, [r4, #4]
 800b6aa:	d1dd      	bne.n	800b668 <_malloc_r+0x8c>
 800b6ac:	f8c8 2000 	str.w	r2, [r8]
 800b6b0:	e7ec      	b.n	800b68c <_malloc_r+0xb0>
 800b6b2:	4623      	mov	r3, r4
 800b6b4:	6864      	ldr	r4, [r4, #4]
 800b6b6:	e7ac      	b.n	800b612 <_malloc_r+0x36>
 800b6b8:	4634      	mov	r4, r6
 800b6ba:	6876      	ldr	r6, [r6, #4]
 800b6bc:	e7b4      	b.n	800b628 <_malloc_r+0x4c>
 800b6be:	4613      	mov	r3, r2
 800b6c0:	e7cc      	b.n	800b65c <_malloc_r+0x80>
 800b6c2:	230c      	movs	r3, #12
 800b6c4:	603b      	str	r3, [r7, #0]
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	f000 f80e 	bl	800b6e8 <__malloc_unlock>
 800b6cc:	e797      	b.n	800b5fe <_malloc_r+0x22>
 800b6ce:	6025      	str	r5, [r4, #0]
 800b6d0:	e7dc      	b.n	800b68c <_malloc_r+0xb0>
 800b6d2:	605b      	str	r3, [r3, #4]
 800b6d4:	deff      	udf	#255	; 0xff
 800b6d6:	bf00      	nop
 800b6d8:	240014b4 	.word	0x240014b4

0800b6dc <__malloc_lock>:
 800b6dc:	4801      	ldr	r0, [pc, #4]	; (800b6e4 <__malloc_lock+0x8>)
 800b6de:	f000 ba50 	b.w	800bb82 <__retarget_lock_acquire_recursive>
 800b6e2:	bf00      	nop
 800b6e4:	240015fc 	.word	0x240015fc

0800b6e8 <__malloc_unlock>:
 800b6e8:	4801      	ldr	r0, [pc, #4]	; (800b6f0 <__malloc_unlock+0x8>)
 800b6ea:	f000 ba4b 	b.w	800bb84 <__retarget_lock_release_recursive>
 800b6ee:	bf00      	nop
 800b6f0:	240015fc 	.word	0x240015fc

0800b6f4 <srand>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4b10      	ldr	r3, [pc, #64]	; (800b738 <srand+0x44>)
 800b6f8:	681d      	ldr	r5, [r3, #0]
 800b6fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	b9b3      	cbnz	r3, 800b72e <srand+0x3a>
 800b700:	2018      	movs	r0, #24
 800b702:	f7ff ff3b 	bl	800b57c <malloc>
 800b706:	4602      	mov	r2, r0
 800b708:	6328      	str	r0, [r5, #48]	; 0x30
 800b70a:	b920      	cbnz	r0, 800b716 <srand+0x22>
 800b70c:	4b0b      	ldr	r3, [pc, #44]	; (800b73c <srand+0x48>)
 800b70e:	480c      	ldr	r0, [pc, #48]	; (800b740 <srand+0x4c>)
 800b710:	2146      	movs	r1, #70	; 0x46
 800b712:	f000 fa47 	bl	800bba4 <__assert_func>
 800b716:	490b      	ldr	r1, [pc, #44]	; (800b744 <srand+0x50>)
 800b718:	4b0b      	ldr	r3, [pc, #44]	; (800b748 <srand+0x54>)
 800b71a:	e9c0 1300 	strd	r1, r3, [r0]
 800b71e:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <srand+0x58>)
 800b720:	6083      	str	r3, [r0, #8]
 800b722:	230b      	movs	r3, #11
 800b724:	8183      	strh	r3, [r0, #12]
 800b726:	2100      	movs	r1, #0
 800b728:	2001      	movs	r0, #1
 800b72a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b72e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b730:	2200      	movs	r2, #0
 800b732:	611c      	str	r4, [r3, #16]
 800b734:	615a      	str	r2, [r3, #20]
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	24000098 	.word	0x24000098
 800b73c:	0800f5f8 	.word	0x0800f5f8
 800b740:	0800f60f 	.word	0x0800f60f
 800b744:	abcd330e 	.word	0xabcd330e
 800b748:	e66d1234 	.word	0xe66d1234
 800b74c:	0005deec 	.word	0x0005deec

0800b750 <rand>:
 800b750:	4b16      	ldr	r3, [pc, #88]	; (800b7ac <rand+0x5c>)
 800b752:	b510      	push	{r4, lr}
 800b754:	681c      	ldr	r4, [r3, #0]
 800b756:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b758:	b9b3      	cbnz	r3, 800b788 <rand+0x38>
 800b75a:	2018      	movs	r0, #24
 800b75c:	f7ff ff0e 	bl	800b57c <malloc>
 800b760:	4602      	mov	r2, r0
 800b762:	6320      	str	r0, [r4, #48]	; 0x30
 800b764:	b920      	cbnz	r0, 800b770 <rand+0x20>
 800b766:	4b12      	ldr	r3, [pc, #72]	; (800b7b0 <rand+0x60>)
 800b768:	4812      	ldr	r0, [pc, #72]	; (800b7b4 <rand+0x64>)
 800b76a:	2152      	movs	r1, #82	; 0x52
 800b76c:	f000 fa1a 	bl	800bba4 <__assert_func>
 800b770:	4911      	ldr	r1, [pc, #68]	; (800b7b8 <rand+0x68>)
 800b772:	4b12      	ldr	r3, [pc, #72]	; (800b7bc <rand+0x6c>)
 800b774:	e9c0 1300 	strd	r1, r3, [r0]
 800b778:	4b11      	ldr	r3, [pc, #68]	; (800b7c0 <rand+0x70>)
 800b77a:	6083      	str	r3, [r0, #8]
 800b77c:	230b      	movs	r3, #11
 800b77e:	8183      	strh	r3, [r0, #12]
 800b780:	2100      	movs	r1, #0
 800b782:	2001      	movs	r0, #1
 800b784:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b788:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b78a:	480e      	ldr	r0, [pc, #56]	; (800b7c4 <rand+0x74>)
 800b78c:	690b      	ldr	r3, [r1, #16]
 800b78e:	694c      	ldr	r4, [r1, #20]
 800b790:	4a0d      	ldr	r2, [pc, #52]	; (800b7c8 <rand+0x78>)
 800b792:	4358      	muls	r0, r3
 800b794:	fb02 0004 	mla	r0, r2, r4, r0
 800b798:	fba3 3202 	umull	r3, r2, r3, r2
 800b79c:	3301      	adds	r3, #1
 800b79e:	eb40 0002 	adc.w	r0, r0, r2
 800b7a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b7a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b7aa:	bd10      	pop	{r4, pc}
 800b7ac:	24000098 	.word	0x24000098
 800b7b0:	0800f5f8 	.word	0x0800f5f8
 800b7b4:	0800f60f 	.word	0x0800f60f
 800b7b8:	abcd330e 	.word	0xabcd330e
 800b7bc:	e66d1234 	.word	0xe66d1234
 800b7c0:	0005deec 	.word	0x0005deec
 800b7c4:	5851f42d 	.word	0x5851f42d
 800b7c8:	4c957f2d 	.word	0x4c957f2d

0800b7cc <std>:
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b7d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7da:	6083      	str	r3, [r0, #8]
 800b7dc:	8181      	strh	r1, [r0, #12]
 800b7de:	6643      	str	r3, [r0, #100]	; 0x64
 800b7e0:	81c2      	strh	r2, [r0, #14]
 800b7e2:	6183      	str	r3, [r0, #24]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	2208      	movs	r2, #8
 800b7e8:	305c      	adds	r0, #92	; 0x5c
 800b7ea:	f000 f914 	bl	800ba16 <memset>
 800b7ee:	4b0d      	ldr	r3, [pc, #52]	; (800b824 <std+0x58>)
 800b7f0:	6263      	str	r3, [r4, #36]	; 0x24
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	; (800b828 <std+0x5c>)
 800b7f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7f6:	4b0d      	ldr	r3, [pc, #52]	; (800b82c <std+0x60>)
 800b7f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	; (800b830 <std+0x64>)
 800b7fc:	6323      	str	r3, [r4, #48]	; 0x30
 800b7fe:	4b0d      	ldr	r3, [pc, #52]	; (800b834 <std+0x68>)
 800b800:	6224      	str	r4, [r4, #32]
 800b802:	429c      	cmp	r4, r3
 800b804:	d006      	beq.n	800b814 <std+0x48>
 800b806:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b80a:	4294      	cmp	r4, r2
 800b80c:	d002      	beq.n	800b814 <std+0x48>
 800b80e:	33d0      	adds	r3, #208	; 0xd0
 800b810:	429c      	cmp	r4, r3
 800b812:	d105      	bne.n	800b820 <std+0x54>
 800b814:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b81c:	f000 b9b0 	b.w	800bb80 <__retarget_lock_init_recursive>
 800b820:	bd10      	pop	{r4, pc}
 800b822:	bf00      	nop
 800b824:	0800b991 	.word	0x0800b991
 800b828:	0800b9b3 	.word	0x0800b9b3
 800b82c:	0800b9eb 	.word	0x0800b9eb
 800b830:	0800ba0f 	.word	0x0800ba0f
 800b834:	240014bc 	.word	0x240014bc

0800b838 <stdio_exit_handler>:
 800b838:	4a02      	ldr	r2, [pc, #8]	; (800b844 <stdio_exit_handler+0xc>)
 800b83a:	4903      	ldr	r1, [pc, #12]	; (800b848 <stdio_exit_handler+0x10>)
 800b83c:	4803      	ldr	r0, [pc, #12]	; (800b84c <stdio_exit_handler+0x14>)
 800b83e:	f000 b869 	b.w	800b914 <_fwalk_sglue>
 800b842:	bf00      	nop
 800b844:	24000040 	.word	0x24000040
 800b848:	0800c355 	.word	0x0800c355
 800b84c:	2400004c 	.word	0x2400004c

0800b850 <cleanup_stdio>:
 800b850:	6841      	ldr	r1, [r0, #4]
 800b852:	4b0c      	ldr	r3, [pc, #48]	; (800b884 <cleanup_stdio+0x34>)
 800b854:	4299      	cmp	r1, r3
 800b856:	b510      	push	{r4, lr}
 800b858:	4604      	mov	r4, r0
 800b85a:	d001      	beq.n	800b860 <cleanup_stdio+0x10>
 800b85c:	f000 fd7a 	bl	800c354 <_fflush_r>
 800b860:	68a1      	ldr	r1, [r4, #8]
 800b862:	4b09      	ldr	r3, [pc, #36]	; (800b888 <cleanup_stdio+0x38>)
 800b864:	4299      	cmp	r1, r3
 800b866:	d002      	beq.n	800b86e <cleanup_stdio+0x1e>
 800b868:	4620      	mov	r0, r4
 800b86a:	f000 fd73 	bl	800c354 <_fflush_r>
 800b86e:	68e1      	ldr	r1, [r4, #12]
 800b870:	4b06      	ldr	r3, [pc, #24]	; (800b88c <cleanup_stdio+0x3c>)
 800b872:	4299      	cmp	r1, r3
 800b874:	d004      	beq.n	800b880 <cleanup_stdio+0x30>
 800b876:	4620      	mov	r0, r4
 800b878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b87c:	f000 bd6a 	b.w	800c354 <_fflush_r>
 800b880:	bd10      	pop	{r4, pc}
 800b882:	bf00      	nop
 800b884:	240014bc 	.word	0x240014bc
 800b888:	24001524 	.word	0x24001524
 800b88c:	2400158c 	.word	0x2400158c

0800b890 <global_stdio_init.part.0>:
 800b890:	b510      	push	{r4, lr}
 800b892:	4b0b      	ldr	r3, [pc, #44]	; (800b8c0 <global_stdio_init.part.0+0x30>)
 800b894:	4c0b      	ldr	r4, [pc, #44]	; (800b8c4 <global_stdio_init.part.0+0x34>)
 800b896:	4a0c      	ldr	r2, [pc, #48]	; (800b8c8 <global_stdio_init.part.0+0x38>)
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	4620      	mov	r0, r4
 800b89c:	2200      	movs	r2, #0
 800b89e:	2104      	movs	r1, #4
 800b8a0:	f7ff ff94 	bl	800b7cc <std>
 800b8a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	2109      	movs	r1, #9
 800b8ac:	f7ff ff8e 	bl	800b7cc <std>
 800b8b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ba:	2112      	movs	r1, #18
 800b8bc:	f7ff bf86 	b.w	800b7cc <std>
 800b8c0:	240015f4 	.word	0x240015f4
 800b8c4:	240014bc 	.word	0x240014bc
 800b8c8:	0800b839 	.word	0x0800b839

0800b8cc <__sfp_lock_acquire>:
 800b8cc:	4801      	ldr	r0, [pc, #4]	; (800b8d4 <__sfp_lock_acquire+0x8>)
 800b8ce:	f000 b958 	b.w	800bb82 <__retarget_lock_acquire_recursive>
 800b8d2:	bf00      	nop
 800b8d4:	240015fd 	.word	0x240015fd

0800b8d8 <__sfp_lock_release>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__sfp_lock_release+0x8>)
 800b8da:	f000 b953 	b.w	800bb84 <__retarget_lock_release_recursive>
 800b8de:	bf00      	nop
 800b8e0:	240015fd 	.word	0x240015fd

0800b8e4 <__sinit>:
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	f7ff fff0 	bl	800b8cc <__sfp_lock_acquire>
 800b8ec:	6a23      	ldr	r3, [r4, #32]
 800b8ee:	b11b      	cbz	r3, 800b8f8 <__sinit+0x14>
 800b8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f4:	f7ff bff0 	b.w	800b8d8 <__sfp_lock_release>
 800b8f8:	4b04      	ldr	r3, [pc, #16]	; (800b90c <__sinit+0x28>)
 800b8fa:	6223      	str	r3, [r4, #32]
 800b8fc:	4b04      	ldr	r3, [pc, #16]	; (800b910 <__sinit+0x2c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1f5      	bne.n	800b8f0 <__sinit+0xc>
 800b904:	f7ff ffc4 	bl	800b890 <global_stdio_init.part.0>
 800b908:	e7f2      	b.n	800b8f0 <__sinit+0xc>
 800b90a:	bf00      	nop
 800b90c:	0800b851 	.word	0x0800b851
 800b910:	240015f4 	.word	0x240015f4

0800b914 <_fwalk_sglue>:
 800b914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b918:	4607      	mov	r7, r0
 800b91a:	4688      	mov	r8, r1
 800b91c:	4614      	mov	r4, r2
 800b91e:	2600      	movs	r6, #0
 800b920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b924:	f1b9 0901 	subs.w	r9, r9, #1
 800b928:	d505      	bpl.n	800b936 <_fwalk_sglue+0x22>
 800b92a:	6824      	ldr	r4, [r4, #0]
 800b92c:	2c00      	cmp	r4, #0
 800b92e:	d1f7      	bne.n	800b920 <_fwalk_sglue+0xc>
 800b930:	4630      	mov	r0, r6
 800b932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b936:	89ab      	ldrh	r3, [r5, #12]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d907      	bls.n	800b94c <_fwalk_sglue+0x38>
 800b93c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b940:	3301      	adds	r3, #1
 800b942:	d003      	beq.n	800b94c <_fwalk_sglue+0x38>
 800b944:	4629      	mov	r1, r5
 800b946:	4638      	mov	r0, r7
 800b948:	47c0      	blx	r8
 800b94a:	4306      	orrs	r6, r0
 800b94c:	3568      	adds	r5, #104	; 0x68
 800b94e:	e7e9      	b.n	800b924 <_fwalk_sglue+0x10>

0800b950 <siprintf>:
 800b950:	b40e      	push	{r1, r2, r3}
 800b952:	b500      	push	{lr}
 800b954:	b09c      	sub	sp, #112	; 0x70
 800b956:	ab1d      	add	r3, sp, #116	; 0x74
 800b958:	9002      	str	r0, [sp, #8]
 800b95a:	9006      	str	r0, [sp, #24]
 800b95c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b960:	4809      	ldr	r0, [pc, #36]	; (800b988 <siprintf+0x38>)
 800b962:	9107      	str	r1, [sp, #28]
 800b964:	9104      	str	r1, [sp, #16]
 800b966:	4909      	ldr	r1, [pc, #36]	; (800b98c <siprintf+0x3c>)
 800b968:	f853 2b04 	ldr.w	r2, [r3], #4
 800b96c:	9105      	str	r1, [sp, #20]
 800b96e:	6800      	ldr	r0, [r0, #0]
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	a902      	add	r1, sp, #8
 800b974:	f000 f9da 	bl	800bd2c <_svfiprintf_r>
 800b978:	9b02      	ldr	r3, [sp, #8]
 800b97a:	2200      	movs	r2, #0
 800b97c:	701a      	strb	r2, [r3, #0]
 800b97e:	b01c      	add	sp, #112	; 0x70
 800b980:	f85d eb04 	ldr.w	lr, [sp], #4
 800b984:	b003      	add	sp, #12
 800b986:	4770      	bx	lr
 800b988:	24000098 	.word	0x24000098
 800b98c:	ffff0208 	.word	0xffff0208

0800b990 <__sread>:
 800b990:	b510      	push	{r4, lr}
 800b992:	460c      	mov	r4, r1
 800b994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b998:	f000 f894 	bl	800bac4 <_read_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	bfab      	itete	ge
 800b9a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9a4:	181b      	addge	r3, r3, r0
 800b9a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9aa:	bfac      	ite	ge
 800b9ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9ae:	81a3      	strhlt	r3, [r4, #12]
 800b9b0:	bd10      	pop	{r4, pc}

0800b9b2 <__swrite>:
 800b9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b6:	461f      	mov	r7, r3
 800b9b8:	898b      	ldrh	r3, [r1, #12]
 800b9ba:	05db      	lsls	r3, r3, #23
 800b9bc:	4605      	mov	r5, r0
 800b9be:	460c      	mov	r4, r1
 800b9c0:	4616      	mov	r6, r2
 800b9c2:	d505      	bpl.n	800b9d0 <__swrite+0x1e>
 800b9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f000 f868 	bl	800baa0 <_lseek_r>
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9da:	81a3      	strh	r3, [r4, #12]
 800b9dc:	4632      	mov	r2, r6
 800b9de:	463b      	mov	r3, r7
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e6:	f000 b88f 	b.w	800bb08 <_write_r>

0800b9ea <__sseek>:
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	460c      	mov	r4, r1
 800b9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f2:	f000 f855 	bl	800baa0 <_lseek_r>
 800b9f6:	1c43      	adds	r3, r0, #1
 800b9f8:	89a3      	ldrh	r3, [r4, #12]
 800b9fa:	bf15      	itete	ne
 800b9fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba06:	81a3      	strheq	r3, [r4, #12]
 800ba08:	bf18      	it	ne
 800ba0a:	81a3      	strhne	r3, [r4, #12]
 800ba0c:	bd10      	pop	{r4, pc}

0800ba0e <__sclose>:
 800ba0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba12:	f000 b823 	b.w	800ba5c <_close_r>

0800ba16 <memset>:
 800ba16:	4402      	add	r2, r0
 800ba18:	4603      	mov	r3, r0
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d100      	bne.n	800ba20 <memset+0xa>
 800ba1e:	4770      	bx	lr
 800ba20:	f803 1b01 	strb.w	r1, [r3], #1
 800ba24:	e7f9      	b.n	800ba1a <memset+0x4>
	...

0800ba28 <time>:
 800ba28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba2a:	4b0b      	ldr	r3, [pc, #44]	; (800ba58 <time+0x30>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	4669      	mov	r1, sp
 800ba30:	4604      	mov	r4, r0
 800ba32:	6818      	ldr	r0, [r3, #0]
 800ba34:	f000 f822 	bl	800ba7c <_gettimeofday_r>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	bfbe      	ittt	lt
 800ba3c:	f04f 32ff 	movlt.w	r2, #4294967295
 800ba40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba44:	e9cd 2300 	strdlt	r2, r3, [sp]
 800ba48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba4c:	b10c      	cbz	r4, 800ba52 <time+0x2a>
 800ba4e:	e9c4 0100 	strd	r0, r1, [r4]
 800ba52:	b004      	add	sp, #16
 800ba54:	bd10      	pop	{r4, pc}
 800ba56:	bf00      	nop
 800ba58:	24000098 	.word	0x24000098

0800ba5c <_close_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4d06      	ldr	r5, [pc, #24]	; (800ba78 <_close_r+0x1c>)
 800ba60:	2300      	movs	r3, #0
 800ba62:	4604      	mov	r4, r0
 800ba64:	4608      	mov	r0, r1
 800ba66:	602b      	str	r3, [r5, #0]
 800ba68:	f7f5 f9e6 	bl	8000e38 <_close>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_close_r+0x1a>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_close_r+0x1a>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	240015f8 	.word	0x240015f8

0800ba7c <_gettimeofday_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4d07      	ldr	r5, [pc, #28]	; (800ba9c <_gettimeofday_r+0x20>)
 800ba80:	2300      	movs	r3, #0
 800ba82:	4604      	mov	r4, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	4611      	mov	r1, r2
 800ba88:	602b      	str	r3, [r5, #0]
 800ba8a:	f000 ff97 	bl	800c9bc <_gettimeofday>
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	d102      	bne.n	800ba98 <_gettimeofday_r+0x1c>
 800ba92:	682b      	ldr	r3, [r5, #0]
 800ba94:	b103      	cbz	r3, 800ba98 <_gettimeofday_r+0x1c>
 800ba96:	6023      	str	r3, [r4, #0]
 800ba98:	bd38      	pop	{r3, r4, r5, pc}
 800ba9a:	bf00      	nop
 800ba9c:	240015f8 	.word	0x240015f8

0800baa0 <_lseek_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4d07      	ldr	r5, [pc, #28]	; (800bac0 <_lseek_r+0x20>)
 800baa4:	4604      	mov	r4, r0
 800baa6:	4608      	mov	r0, r1
 800baa8:	4611      	mov	r1, r2
 800baaa:	2200      	movs	r2, #0
 800baac:	602a      	str	r2, [r5, #0]
 800baae:	461a      	mov	r2, r3
 800bab0:	f7f5 f9d9 	bl	8000e66 <_lseek>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d102      	bne.n	800babe <_lseek_r+0x1e>
 800bab8:	682b      	ldr	r3, [r5, #0]
 800baba:	b103      	cbz	r3, 800babe <_lseek_r+0x1e>
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	bd38      	pop	{r3, r4, r5, pc}
 800bac0:	240015f8 	.word	0x240015f8

0800bac4 <_read_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d07      	ldr	r5, [pc, #28]	; (800bae4 <_read_r+0x20>)
 800bac8:	4604      	mov	r4, r0
 800baca:	4608      	mov	r0, r1
 800bacc:	4611      	mov	r1, r2
 800bace:	2200      	movs	r2, #0
 800bad0:	602a      	str	r2, [r5, #0]
 800bad2:	461a      	mov	r2, r3
 800bad4:	f7f5 f9f4 	bl	8000ec0 <_read>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d102      	bne.n	800bae2 <_read_r+0x1e>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	b103      	cbz	r3, 800bae2 <_read_r+0x1e>
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	240015f8 	.word	0x240015f8

0800bae8 <_sbrk_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d06      	ldr	r5, [pc, #24]	; (800bb04 <_sbrk_r+0x1c>)
 800baec:	2300      	movs	r3, #0
 800baee:	4604      	mov	r4, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	602b      	str	r3, [r5, #0]
 800baf4:	f7f5 feea 	bl	80018cc <_sbrk>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <_sbrk_r+0x1a>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	b103      	cbz	r3, 800bb02 <_sbrk_r+0x1a>
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	240015f8 	.word	0x240015f8

0800bb08 <_write_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4d07      	ldr	r5, [pc, #28]	; (800bb28 <_write_r+0x20>)
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	4608      	mov	r0, r1
 800bb10:	4611      	mov	r1, r2
 800bb12:	2200      	movs	r2, #0
 800bb14:	602a      	str	r2, [r5, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	f7f5 f9fa 	bl	8000f10 <_write>
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	d102      	bne.n	800bb26 <_write_r+0x1e>
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	b103      	cbz	r3, 800bb26 <_write_r+0x1e>
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	bd38      	pop	{r3, r4, r5, pc}
 800bb28:	240015f8 	.word	0x240015f8

0800bb2c <__errno>:
 800bb2c:	4b01      	ldr	r3, [pc, #4]	; (800bb34 <__errno+0x8>)
 800bb2e:	6818      	ldr	r0, [r3, #0]
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	24000098 	.word	0x24000098

0800bb38 <__libc_init_array>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	4d0d      	ldr	r5, [pc, #52]	; (800bb70 <__libc_init_array+0x38>)
 800bb3c:	4c0d      	ldr	r4, [pc, #52]	; (800bb74 <__libc_init_array+0x3c>)
 800bb3e:	1b64      	subs	r4, r4, r5
 800bb40:	10a4      	asrs	r4, r4, #2
 800bb42:	2600      	movs	r6, #0
 800bb44:	42a6      	cmp	r6, r4
 800bb46:	d109      	bne.n	800bb5c <__libc_init_array+0x24>
 800bb48:	4d0b      	ldr	r5, [pc, #44]	; (800bb78 <__libc_init_array+0x40>)
 800bb4a:	4c0c      	ldr	r4, [pc, #48]	; (800bb7c <__libc_init_array+0x44>)
 800bb4c:	f000 ff3e 	bl	800c9cc <_init>
 800bb50:	1b64      	subs	r4, r4, r5
 800bb52:	10a4      	asrs	r4, r4, #2
 800bb54:	2600      	movs	r6, #0
 800bb56:	42a6      	cmp	r6, r4
 800bb58:	d105      	bne.n	800bb66 <__libc_init_array+0x2e>
 800bb5a:	bd70      	pop	{r4, r5, r6, pc}
 800bb5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb60:	4798      	blx	r3
 800bb62:	3601      	adds	r6, #1
 800bb64:	e7ee      	b.n	800bb44 <__libc_init_array+0xc>
 800bb66:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb6a:	4798      	blx	r3
 800bb6c:	3601      	adds	r6, #1
 800bb6e:	e7f2      	b.n	800bb56 <__libc_init_array+0x1e>
 800bb70:	0800f6d8 	.word	0x0800f6d8
 800bb74:	0800f6d8 	.word	0x0800f6d8
 800bb78:	0800f6d8 	.word	0x0800f6d8
 800bb7c:	0800f6dc 	.word	0x0800f6dc

0800bb80 <__retarget_lock_init_recursive>:
 800bb80:	4770      	bx	lr

0800bb82 <__retarget_lock_acquire_recursive>:
 800bb82:	4770      	bx	lr

0800bb84 <__retarget_lock_release_recursive>:
 800bb84:	4770      	bx	lr

0800bb86 <memcpy>:
 800bb86:	440a      	add	r2, r1
 800bb88:	4291      	cmp	r1, r2
 800bb8a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb8e:	d100      	bne.n	800bb92 <memcpy+0xc>
 800bb90:	4770      	bx	lr
 800bb92:	b510      	push	{r4, lr}
 800bb94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb9c:	4291      	cmp	r1, r2
 800bb9e:	d1f9      	bne.n	800bb94 <memcpy+0xe>
 800bba0:	bd10      	pop	{r4, pc}
	...

0800bba4 <__assert_func>:
 800bba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bba6:	4614      	mov	r4, r2
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <__assert_func+0x2c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	68d8      	ldr	r0, [r3, #12]
 800bbb2:	b14c      	cbz	r4, 800bbc8 <__assert_func+0x24>
 800bbb4:	4b07      	ldr	r3, [pc, #28]	; (800bbd4 <__assert_func+0x30>)
 800bbb6:	9100      	str	r1, [sp, #0]
 800bbb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbbc:	4906      	ldr	r1, [pc, #24]	; (800bbd8 <__assert_func+0x34>)
 800bbbe:	462b      	mov	r3, r5
 800bbc0:	f000 fbf0 	bl	800c3a4 <fiprintf>
 800bbc4:	f000 fc9e 	bl	800c504 <abort>
 800bbc8:	4b04      	ldr	r3, [pc, #16]	; (800bbdc <__assert_func+0x38>)
 800bbca:	461c      	mov	r4, r3
 800bbcc:	e7f3      	b.n	800bbb6 <__assert_func+0x12>
 800bbce:	bf00      	nop
 800bbd0:	24000098 	.word	0x24000098
 800bbd4:	0800f667 	.word	0x0800f667
 800bbd8:	0800f674 	.word	0x0800f674
 800bbdc:	0800f6a2 	.word	0x0800f6a2

0800bbe0 <_free_r>:
 800bbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbe2:	2900      	cmp	r1, #0
 800bbe4:	d044      	beq.n	800bc70 <_free_r+0x90>
 800bbe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbea:	9001      	str	r0, [sp, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f1a1 0404 	sub.w	r4, r1, #4
 800bbf2:	bfb8      	it	lt
 800bbf4:	18e4      	addlt	r4, r4, r3
 800bbf6:	f7ff fd71 	bl	800b6dc <__malloc_lock>
 800bbfa:	4a1e      	ldr	r2, [pc, #120]	; (800bc74 <_free_r+0x94>)
 800bbfc:	9801      	ldr	r0, [sp, #4]
 800bbfe:	6813      	ldr	r3, [r2, #0]
 800bc00:	b933      	cbnz	r3, 800bc10 <_free_r+0x30>
 800bc02:	6063      	str	r3, [r4, #4]
 800bc04:	6014      	str	r4, [r2, #0]
 800bc06:	b003      	add	sp, #12
 800bc08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc0c:	f7ff bd6c 	b.w	800b6e8 <__malloc_unlock>
 800bc10:	42a3      	cmp	r3, r4
 800bc12:	d908      	bls.n	800bc26 <_free_r+0x46>
 800bc14:	6825      	ldr	r5, [r4, #0]
 800bc16:	1961      	adds	r1, r4, r5
 800bc18:	428b      	cmp	r3, r1
 800bc1a:	bf01      	itttt	eq
 800bc1c:	6819      	ldreq	r1, [r3, #0]
 800bc1e:	685b      	ldreq	r3, [r3, #4]
 800bc20:	1949      	addeq	r1, r1, r5
 800bc22:	6021      	streq	r1, [r4, #0]
 800bc24:	e7ed      	b.n	800bc02 <_free_r+0x22>
 800bc26:	461a      	mov	r2, r3
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	b10b      	cbz	r3, 800bc30 <_free_r+0x50>
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	d9fa      	bls.n	800bc26 <_free_r+0x46>
 800bc30:	6811      	ldr	r1, [r2, #0]
 800bc32:	1855      	adds	r5, r2, r1
 800bc34:	42a5      	cmp	r5, r4
 800bc36:	d10b      	bne.n	800bc50 <_free_r+0x70>
 800bc38:	6824      	ldr	r4, [r4, #0]
 800bc3a:	4421      	add	r1, r4
 800bc3c:	1854      	adds	r4, r2, r1
 800bc3e:	42a3      	cmp	r3, r4
 800bc40:	6011      	str	r1, [r2, #0]
 800bc42:	d1e0      	bne.n	800bc06 <_free_r+0x26>
 800bc44:	681c      	ldr	r4, [r3, #0]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	6053      	str	r3, [r2, #4]
 800bc4a:	440c      	add	r4, r1
 800bc4c:	6014      	str	r4, [r2, #0]
 800bc4e:	e7da      	b.n	800bc06 <_free_r+0x26>
 800bc50:	d902      	bls.n	800bc58 <_free_r+0x78>
 800bc52:	230c      	movs	r3, #12
 800bc54:	6003      	str	r3, [r0, #0]
 800bc56:	e7d6      	b.n	800bc06 <_free_r+0x26>
 800bc58:	6825      	ldr	r5, [r4, #0]
 800bc5a:	1961      	adds	r1, r4, r5
 800bc5c:	428b      	cmp	r3, r1
 800bc5e:	bf04      	itt	eq
 800bc60:	6819      	ldreq	r1, [r3, #0]
 800bc62:	685b      	ldreq	r3, [r3, #4]
 800bc64:	6063      	str	r3, [r4, #4]
 800bc66:	bf04      	itt	eq
 800bc68:	1949      	addeq	r1, r1, r5
 800bc6a:	6021      	streq	r1, [r4, #0]
 800bc6c:	6054      	str	r4, [r2, #4]
 800bc6e:	e7ca      	b.n	800bc06 <_free_r+0x26>
 800bc70:	b003      	add	sp, #12
 800bc72:	bd30      	pop	{r4, r5, pc}
 800bc74:	240014b4 	.word	0x240014b4

0800bc78 <__ssputs_r>:
 800bc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc7c:	688e      	ldr	r6, [r1, #8]
 800bc7e:	461f      	mov	r7, r3
 800bc80:	42be      	cmp	r6, r7
 800bc82:	680b      	ldr	r3, [r1, #0]
 800bc84:	4682      	mov	sl, r0
 800bc86:	460c      	mov	r4, r1
 800bc88:	4690      	mov	r8, r2
 800bc8a:	d82c      	bhi.n	800bce6 <__ssputs_r+0x6e>
 800bc8c:	898a      	ldrh	r2, [r1, #12]
 800bc8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc92:	d026      	beq.n	800bce2 <__ssputs_r+0x6a>
 800bc94:	6965      	ldr	r5, [r4, #20]
 800bc96:	6909      	ldr	r1, [r1, #16]
 800bc98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc9c:	eba3 0901 	sub.w	r9, r3, r1
 800bca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bca4:	1c7b      	adds	r3, r7, #1
 800bca6:	444b      	add	r3, r9
 800bca8:	106d      	asrs	r5, r5, #1
 800bcaa:	429d      	cmp	r5, r3
 800bcac:	bf38      	it	cc
 800bcae:	461d      	movcc	r5, r3
 800bcb0:	0553      	lsls	r3, r2, #21
 800bcb2:	d527      	bpl.n	800bd04 <__ssputs_r+0x8c>
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	f7ff fc91 	bl	800b5dc <_malloc_r>
 800bcba:	4606      	mov	r6, r0
 800bcbc:	b360      	cbz	r0, 800bd18 <__ssputs_r+0xa0>
 800bcbe:	6921      	ldr	r1, [r4, #16]
 800bcc0:	464a      	mov	r2, r9
 800bcc2:	f7ff ff60 	bl	800bb86 <memcpy>
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd0:	81a3      	strh	r3, [r4, #12]
 800bcd2:	6126      	str	r6, [r4, #16]
 800bcd4:	6165      	str	r5, [r4, #20]
 800bcd6:	444e      	add	r6, r9
 800bcd8:	eba5 0509 	sub.w	r5, r5, r9
 800bcdc:	6026      	str	r6, [r4, #0]
 800bcde:	60a5      	str	r5, [r4, #8]
 800bce0:	463e      	mov	r6, r7
 800bce2:	42be      	cmp	r6, r7
 800bce4:	d900      	bls.n	800bce8 <__ssputs_r+0x70>
 800bce6:	463e      	mov	r6, r7
 800bce8:	6820      	ldr	r0, [r4, #0]
 800bcea:	4632      	mov	r2, r6
 800bcec:	4641      	mov	r1, r8
 800bcee:	f000 fbcd 	bl	800c48c <memmove>
 800bcf2:	68a3      	ldr	r3, [r4, #8]
 800bcf4:	1b9b      	subs	r3, r3, r6
 800bcf6:	60a3      	str	r3, [r4, #8]
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	4433      	add	r3, r6
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	2000      	movs	r0, #0
 800bd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd04:	462a      	mov	r2, r5
 800bd06:	f000 fc04 	bl	800c512 <_realloc_r>
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d1e0      	bne.n	800bcd2 <__ssputs_r+0x5a>
 800bd10:	6921      	ldr	r1, [r4, #16]
 800bd12:	4650      	mov	r0, sl
 800bd14:	f7ff ff64 	bl	800bbe0 <_free_r>
 800bd18:	230c      	movs	r3, #12
 800bd1a:	f8ca 3000 	str.w	r3, [sl]
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd24:	81a3      	strh	r3, [r4, #12]
 800bd26:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2a:	e7e9      	b.n	800bd00 <__ssputs_r+0x88>

0800bd2c <_svfiprintf_r>:
 800bd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd30:	4698      	mov	r8, r3
 800bd32:	898b      	ldrh	r3, [r1, #12]
 800bd34:	061b      	lsls	r3, r3, #24
 800bd36:	b09d      	sub	sp, #116	; 0x74
 800bd38:	4607      	mov	r7, r0
 800bd3a:	460d      	mov	r5, r1
 800bd3c:	4614      	mov	r4, r2
 800bd3e:	d50e      	bpl.n	800bd5e <_svfiprintf_r+0x32>
 800bd40:	690b      	ldr	r3, [r1, #16]
 800bd42:	b963      	cbnz	r3, 800bd5e <_svfiprintf_r+0x32>
 800bd44:	2140      	movs	r1, #64	; 0x40
 800bd46:	f7ff fc49 	bl	800b5dc <_malloc_r>
 800bd4a:	6028      	str	r0, [r5, #0]
 800bd4c:	6128      	str	r0, [r5, #16]
 800bd4e:	b920      	cbnz	r0, 800bd5a <_svfiprintf_r+0x2e>
 800bd50:	230c      	movs	r3, #12
 800bd52:	603b      	str	r3, [r7, #0]
 800bd54:	f04f 30ff 	mov.w	r0, #4294967295
 800bd58:	e0d0      	b.n	800befc <_svfiprintf_r+0x1d0>
 800bd5a:	2340      	movs	r3, #64	; 0x40
 800bd5c:	616b      	str	r3, [r5, #20]
 800bd5e:	2300      	movs	r3, #0
 800bd60:	9309      	str	r3, [sp, #36]	; 0x24
 800bd62:	2320      	movs	r3, #32
 800bd64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd68:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd6c:	2330      	movs	r3, #48	; 0x30
 800bd6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf14 <_svfiprintf_r+0x1e8>
 800bd72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd76:	f04f 0901 	mov.w	r9, #1
 800bd7a:	4623      	mov	r3, r4
 800bd7c:	469a      	mov	sl, r3
 800bd7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd82:	b10a      	cbz	r2, 800bd88 <_svfiprintf_r+0x5c>
 800bd84:	2a25      	cmp	r2, #37	; 0x25
 800bd86:	d1f9      	bne.n	800bd7c <_svfiprintf_r+0x50>
 800bd88:	ebba 0b04 	subs.w	fp, sl, r4
 800bd8c:	d00b      	beq.n	800bda6 <_svfiprintf_r+0x7a>
 800bd8e:	465b      	mov	r3, fp
 800bd90:	4622      	mov	r2, r4
 800bd92:	4629      	mov	r1, r5
 800bd94:	4638      	mov	r0, r7
 800bd96:	f7ff ff6f 	bl	800bc78 <__ssputs_r>
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	f000 80a9 	beq.w	800bef2 <_svfiprintf_r+0x1c6>
 800bda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda2:	445a      	add	r2, fp
 800bda4:	9209      	str	r2, [sp, #36]	; 0x24
 800bda6:	f89a 3000 	ldrb.w	r3, [sl]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80a1 	beq.w	800bef2 <_svfiprintf_r+0x1c6>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdba:	f10a 0a01 	add.w	sl, sl, #1
 800bdbe:	9304      	str	r3, [sp, #16]
 800bdc0:	9307      	str	r3, [sp, #28]
 800bdc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdc6:	931a      	str	r3, [sp, #104]	; 0x68
 800bdc8:	4654      	mov	r4, sl
 800bdca:	2205      	movs	r2, #5
 800bdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd0:	4850      	ldr	r0, [pc, #320]	; (800bf14 <_svfiprintf_r+0x1e8>)
 800bdd2:	f7f4 fa85 	bl	80002e0 <memchr>
 800bdd6:	9a04      	ldr	r2, [sp, #16]
 800bdd8:	b9d8      	cbnz	r0, 800be12 <_svfiprintf_r+0xe6>
 800bdda:	06d0      	lsls	r0, r2, #27
 800bddc:	bf44      	itt	mi
 800bdde:	2320      	movmi	r3, #32
 800bde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bde4:	0711      	lsls	r1, r2, #28
 800bde6:	bf44      	itt	mi
 800bde8:	232b      	movmi	r3, #43	; 0x2b
 800bdea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdee:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf2:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf4:	d015      	beq.n	800be22 <_svfiprintf_r+0xf6>
 800bdf6:	9a07      	ldr	r2, [sp, #28]
 800bdf8:	4654      	mov	r4, sl
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	f04f 0c0a 	mov.w	ip, #10
 800be00:	4621      	mov	r1, r4
 800be02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be06:	3b30      	subs	r3, #48	; 0x30
 800be08:	2b09      	cmp	r3, #9
 800be0a:	d94d      	bls.n	800bea8 <_svfiprintf_r+0x17c>
 800be0c:	b1b0      	cbz	r0, 800be3c <_svfiprintf_r+0x110>
 800be0e:	9207      	str	r2, [sp, #28]
 800be10:	e014      	b.n	800be3c <_svfiprintf_r+0x110>
 800be12:	eba0 0308 	sub.w	r3, r0, r8
 800be16:	fa09 f303 	lsl.w	r3, r9, r3
 800be1a:	4313      	orrs	r3, r2
 800be1c:	9304      	str	r3, [sp, #16]
 800be1e:	46a2      	mov	sl, r4
 800be20:	e7d2      	b.n	800bdc8 <_svfiprintf_r+0x9c>
 800be22:	9b03      	ldr	r3, [sp, #12]
 800be24:	1d19      	adds	r1, r3, #4
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	9103      	str	r1, [sp, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	bfbb      	ittet	lt
 800be2e:	425b      	neglt	r3, r3
 800be30:	f042 0202 	orrlt.w	r2, r2, #2
 800be34:	9307      	strge	r3, [sp, #28]
 800be36:	9307      	strlt	r3, [sp, #28]
 800be38:	bfb8      	it	lt
 800be3a:	9204      	strlt	r2, [sp, #16]
 800be3c:	7823      	ldrb	r3, [r4, #0]
 800be3e:	2b2e      	cmp	r3, #46	; 0x2e
 800be40:	d10c      	bne.n	800be5c <_svfiprintf_r+0x130>
 800be42:	7863      	ldrb	r3, [r4, #1]
 800be44:	2b2a      	cmp	r3, #42	; 0x2a
 800be46:	d134      	bne.n	800beb2 <_svfiprintf_r+0x186>
 800be48:	9b03      	ldr	r3, [sp, #12]
 800be4a:	1d1a      	adds	r2, r3, #4
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	9203      	str	r2, [sp, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	bfb8      	it	lt
 800be54:	f04f 33ff 	movlt.w	r3, #4294967295
 800be58:	3402      	adds	r4, #2
 800be5a:	9305      	str	r3, [sp, #20]
 800be5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bf24 <_svfiprintf_r+0x1f8>
 800be60:	7821      	ldrb	r1, [r4, #0]
 800be62:	2203      	movs	r2, #3
 800be64:	4650      	mov	r0, sl
 800be66:	f7f4 fa3b 	bl	80002e0 <memchr>
 800be6a:	b138      	cbz	r0, 800be7c <_svfiprintf_r+0x150>
 800be6c:	9b04      	ldr	r3, [sp, #16]
 800be6e:	eba0 000a 	sub.w	r0, r0, sl
 800be72:	2240      	movs	r2, #64	; 0x40
 800be74:	4082      	lsls	r2, r0
 800be76:	4313      	orrs	r3, r2
 800be78:	3401      	adds	r4, #1
 800be7a:	9304      	str	r3, [sp, #16]
 800be7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be80:	4825      	ldr	r0, [pc, #148]	; (800bf18 <_svfiprintf_r+0x1ec>)
 800be82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be86:	2206      	movs	r2, #6
 800be88:	f7f4 fa2a 	bl	80002e0 <memchr>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d038      	beq.n	800bf02 <_svfiprintf_r+0x1d6>
 800be90:	4b22      	ldr	r3, [pc, #136]	; (800bf1c <_svfiprintf_r+0x1f0>)
 800be92:	bb1b      	cbnz	r3, 800bedc <_svfiprintf_r+0x1b0>
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	3307      	adds	r3, #7
 800be98:	f023 0307 	bic.w	r3, r3, #7
 800be9c:	3308      	adds	r3, #8
 800be9e:	9303      	str	r3, [sp, #12]
 800bea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea2:	4433      	add	r3, r6
 800bea4:	9309      	str	r3, [sp, #36]	; 0x24
 800bea6:	e768      	b.n	800bd7a <_svfiprintf_r+0x4e>
 800bea8:	fb0c 3202 	mla	r2, ip, r2, r3
 800beac:	460c      	mov	r4, r1
 800beae:	2001      	movs	r0, #1
 800beb0:	e7a6      	b.n	800be00 <_svfiprintf_r+0xd4>
 800beb2:	2300      	movs	r3, #0
 800beb4:	3401      	adds	r4, #1
 800beb6:	9305      	str	r3, [sp, #20]
 800beb8:	4619      	mov	r1, r3
 800beba:	f04f 0c0a 	mov.w	ip, #10
 800bebe:	4620      	mov	r0, r4
 800bec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bec4:	3a30      	subs	r2, #48	; 0x30
 800bec6:	2a09      	cmp	r2, #9
 800bec8:	d903      	bls.n	800bed2 <_svfiprintf_r+0x1a6>
 800beca:	2b00      	cmp	r3, #0
 800becc:	d0c6      	beq.n	800be5c <_svfiprintf_r+0x130>
 800bece:	9105      	str	r1, [sp, #20]
 800bed0:	e7c4      	b.n	800be5c <_svfiprintf_r+0x130>
 800bed2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bed6:	4604      	mov	r4, r0
 800bed8:	2301      	movs	r3, #1
 800beda:	e7f0      	b.n	800bebe <_svfiprintf_r+0x192>
 800bedc:	ab03      	add	r3, sp, #12
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	462a      	mov	r2, r5
 800bee2:	4b0f      	ldr	r3, [pc, #60]	; (800bf20 <_svfiprintf_r+0x1f4>)
 800bee4:	a904      	add	r1, sp, #16
 800bee6:	4638      	mov	r0, r7
 800bee8:	f3af 8000 	nop.w
 800beec:	1c42      	adds	r2, r0, #1
 800beee:	4606      	mov	r6, r0
 800bef0:	d1d6      	bne.n	800bea0 <_svfiprintf_r+0x174>
 800bef2:	89ab      	ldrh	r3, [r5, #12]
 800bef4:	065b      	lsls	r3, r3, #25
 800bef6:	f53f af2d 	bmi.w	800bd54 <_svfiprintf_r+0x28>
 800befa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800befc:	b01d      	add	sp, #116	; 0x74
 800befe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf02:	ab03      	add	r3, sp, #12
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	462a      	mov	r2, r5
 800bf08:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <_svfiprintf_r+0x1f4>)
 800bf0a:	a904      	add	r1, sp, #16
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	f000 f879 	bl	800c004 <_printf_i>
 800bf12:	e7eb      	b.n	800beec <_svfiprintf_r+0x1c0>
 800bf14:	0800f6a3 	.word	0x0800f6a3
 800bf18:	0800f6ad 	.word	0x0800f6ad
 800bf1c:	00000000 	.word	0x00000000
 800bf20:	0800bc79 	.word	0x0800bc79
 800bf24:	0800f6a9 	.word	0x0800f6a9

0800bf28 <_printf_common>:
 800bf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2c:	4616      	mov	r6, r2
 800bf2e:	4699      	mov	r9, r3
 800bf30:	688a      	ldr	r2, [r1, #8]
 800bf32:	690b      	ldr	r3, [r1, #16]
 800bf34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	bfb8      	it	lt
 800bf3c:	4613      	movlt	r3, r2
 800bf3e:	6033      	str	r3, [r6, #0]
 800bf40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf44:	4607      	mov	r7, r0
 800bf46:	460c      	mov	r4, r1
 800bf48:	b10a      	cbz	r2, 800bf4e <_printf_common+0x26>
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	6033      	str	r3, [r6, #0]
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	0699      	lsls	r1, r3, #26
 800bf52:	bf42      	ittt	mi
 800bf54:	6833      	ldrmi	r3, [r6, #0]
 800bf56:	3302      	addmi	r3, #2
 800bf58:	6033      	strmi	r3, [r6, #0]
 800bf5a:	6825      	ldr	r5, [r4, #0]
 800bf5c:	f015 0506 	ands.w	r5, r5, #6
 800bf60:	d106      	bne.n	800bf70 <_printf_common+0x48>
 800bf62:	f104 0a19 	add.w	sl, r4, #25
 800bf66:	68e3      	ldr	r3, [r4, #12]
 800bf68:	6832      	ldr	r2, [r6, #0]
 800bf6a:	1a9b      	subs	r3, r3, r2
 800bf6c:	42ab      	cmp	r3, r5
 800bf6e:	dc26      	bgt.n	800bfbe <_printf_common+0x96>
 800bf70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf74:	1e13      	subs	r3, r2, #0
 800bf76:	6822      	ldr	r2, [r4, #0]
 800bf78:	bf18      	it	ne
 800bf7a:	2301      	movne	r3, #1
 800bf7c:	0692      	lsls	r2, r2, #26
 800bf7e:	d42b      	bmi.n	800bfd8 <_printf_common+0xb0>
 800bf80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf84:	4649      	mov	r1, r9
 800bf86:	4638      	mov	r0, r7
 800bf88:	47c0      	blx	r8
 800bf8a:	3001      	adds	r0, #1
 800bf8c:	d01e      	beq.n	800bfcc <_printf_common+0xa4>
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	6922      	ldr	r2, [r4, #16]
 800bf92:	f003 0306 	and.w	r3, r3, #6
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	bf02      	ittt	eq
 800bf9a:	68e5      	ldreq	r5, [r4, #12]
 800bf9c:	6833      	ldreq	r3, [r6, #0]
 800bf9e:	1aed      	subeq	r5, r5, r3
 800bfa0:	68a3      	ldr	r3, [r4, #8]
 800bfa2:	bf0c      	ite	eq
 800bfa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfa8:	2500      	movne	r5, #0
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	bfc4      	itt	gt
 800bfae:	1a9b      	subgt	r3, r3, r2
 800bfb0:	18ed      	addgt	r5, r5, r3
 800bfb2:	2600      	movs	r6, #0
 800bfb4:	341a      	adds	r4, #26
 800bfb6:	42b5      	cmp	r5, r6
 800bfb8:	d11a      	bne.n	800bff0 <_printf_common+0xc8>
 800bfba:	2000      	movs	r0, #0
 800bfbc:	e008      	b.n	800bfd0 <_printf_common+0xa8>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	4652      	mov	r2, sl
 800bfc2:	4649      	mov	r1, r9
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	47c0      	blx	r8
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d103      	bne.n	800bfd4 <_printf_common+0xac>
 800bfcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd4:	3501      	adds	r5, #1
 800bfd6:	e7c6      	b.n	800bf66 <_printf_common+0x3e>
 800bfd8:	18e1      	adds	r1, r4, r3
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	2030      	movs	r0, #48	; 0x30
 800bfde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfe2:	4422      	add	r2, r4
 800bfe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfec:	3302      	adds	r3, #2
 800bfee:	e7c7      	b.n	800bf80 <_printf_common+0x58>
 800bff0:	2301      	movs	r3, #1
 800bff2:	4622      	mov	r2, r4
 800bff4:	4649      	mov	r1, r9
 800bff6:	4638      	mov	r0, r7
 800bff8:	47c0      	blx	r8
 800bffa:	3001      	adds	r0, #1
 800bffc:	d0e6      	beq.n	800bfcc <_printf_common+0xa4>
 800bffe:	3601      	adds	r6, #1
 800c000:	e7d9      	b.n	800bfb6 <_printf_common+0x8e>
	...

0800c004 <_printf_i>:
 800c004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c008:	7e0f      	ldrb	r7, [r1, #24]
 800c00a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c00c:	2f78      	cmp	r7, #120	; 0x78
 800c00e:	4691      	mov	r9, r2
 800c010:	4680      	mov	r8, r0
 800c012:	460c      	mov	r4, r1
 800c014:	469a      	mov	sl, r3
 800c016:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c01a:	d807      	bhi.n	800c02c <_printf_i+0x28>
 800c01c:	2f62      	cmp	r7, #98	; 0x62
 800c01e:	d80a      	bhi.n	800c036 <_printf_i+0x32>
 800c020:	2f00      	cmp	r7, #0
 800c022:	f000 80d4 	beq.w	800c1ce <_printf_i+0x1ca>
 800c026:	2f58      	cmp	r7, #88	; 0x58
 800c028:	f000 80c0 	beq.w	800c1ac <_printf_i+0x1a8>
 800c02c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c034:	e03a      	b.n	800c0ac <_printf_i+0xa8>
 800c036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c03a:	2b15      	cmp	r3, #21
 800c03c:	d8f6      	bhi.n	800c02c <_printf_i+0x28>
 800c03e:	a101      	add	r1, pc, #4	; (adr r1, 800c044 <_printf_i+0x40>)
 800c040:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c044:	0800c09d 	.word	0x0800c09d
 800c048:	0800c0b1 	.word	0x0800c0b1
 800c04c:	0800c02d 	.word	0x0800c02d
 800c050:	0800c02d 	.word	0x0800c02d
 800c054:	0800c02d 	.word	0x0800c02d
 800c058:	0800c02d 	.word	0x0800c02d
 800c05c:	0800c0b1 	.word	0x0800c0b1
 800c060:	0800c02d 	.word	0x0800c02d
 800c064:	0800c02d 	.word	0x0800c02d
 800c068:	0800c02d 	.word	0x0800c02d
 800c06c:	0800c02d 	.word	0x0800c02d
 800c070:	0800c1b5 	.word	0x0800c1b5
 800c074:	0800c0dd 	.word	0x0800c0dd
 800c078:	0800c16f 	.word	0x0800c16f
 800c07c:	0800c02d 	.word	0x0800c02d
 800c080:	0800c02d 	.word	0x0800c02d
 800c084:	0800c1d7 	.word	0x0800c1d7
 800c088:	0800c02d 	.word	0x0800c02d
 800c08c:	0800c0dd 	.word	0x0800c0dd
 800c090:	0800c02d 	.word	0x0800c02d
 800c094:	0800c02d 	.word	0x0800c02d
 800c098:	0800c177 	.word	0x0800c177
 800c09c:	682b      	ldr	r3, [r5, #0]
 800c09e:	1d1a      	adds	r2, r3, #4
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	602a      	str	r2, [r5, #0]
 800c0a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e09f      	b.n	800c1f0 <_printf_i+0x1ec>
 800c0b0:	6820      	ldr	r0, [r4, #0]
 800c0b2:	682b      	ldr	r3, [r5, #0]
 800c0b4:	0607      	lsls	r7, r0, #24
 800c0b6:	f103 0104 	add.w	r1, r3, #4
 800c0ba:	6029      	str	r1, [r5, #0]
 800c0bc:	d501      	bpl.n	800c0c2 <_printf_i+0xbe>
 800c0be:	681e      	ldr	r6, [r3, #0]
 800c0c0:	e003      	b.n	800c0ca <_printf_i+0xc6>
 800c0c2:	0646      	lsls	r6, r0, #25
 800c0c4:	d5fb      	bpl.n	800c0be <_printf_i+0xba>
 800c0c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c0ca:	2e00      	cmp	r6, #0
 800c0cc:	da03      	bge.n	800c0d6 <_printf_i+0xd2>
 800c0ce:	232d      	movs	r3, #45	; 0x2d
 800c0d0:	4276      	negs	r6, r6
 800c0d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0d6:	485a      	ldr	r0, [pc, #360]	; (800c240 <_printf_i+0x23c>)
 800c0d8:	230a      	movs	r3, #10
 800c0da:	e012      	b.n	800c102 <_printf_i+0xfe>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	6820      	ldr	r0, [r4, #0]
 800c0e0:	1d19      	adds	r1, r3, #4
 800c0e2:	6029      	str	r1, [r5, #0]
 800c0e4:	0605      	lsls	r5, r0, #24
 800c0e6:	d501      	bpl.n	800c0ec <_printf_i+0xe8>
 800c0e8:	681e      	ldr	r6, [r3, #0]
 800c0ea:	e002      	b.n	800c0f2 <_printf_i+0xee>
 800c0ec:	0641      	lsls	r1, r0, #25
 800c0ee:	d5fb      	bpl.n	800c0e8 <_printf_i+0xe4>
 800c0f0:	881e      	ldrh	r6, [r3, #0]
 800c0f2:	4853      	ldr	r0, [pc, #332]	; (800c240 <_printf_i+0x23c>)
 800c0f4:	2f6f      	cmp	r7, #111	; 0x6f
 800c0f6:	bf0c      	ite	eq
 800c0f8:	2308      	moveq	r3, #8
 800c0fa:	230a      	movne	r3, #10
 800c0fc:	2100      	movs	r1, #0
 800c0fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c102:	6865      	ldr	r5, [r4, #4]
 800c104:	60a5      	str	r5, [r4, #8]
 800c106:	2d00      	cmp	r5, #0
 800c108:	bfa2      	ittt	ge
 800c10a:	6821      	ldrge	r1, [r4, #0]
 800c10c:	f021 0104 	bicge.w	r1, r1, #4
 800c110:	6021      	strge	r1, [r4, #0]
 800c112:	b90e      	cbnz	r6, 800c118 <_printf_i+0x114>
 800c114:	2d00      	cmp	r5, #0
 800c116:	d04b      	beq.n	800c1b0 <_printf_i+0x1ac>
 800c118:	4615      	mov	r5, r2
 800c11a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c11e:	fb03 6711 	mls	r7, r3, r1, r6
 800c122:	5dc7      	ldrb	r7, [r0, r7]
 800c124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c128:	4637      	mov	r7, r6
 800c12a:	42bb      	cmp	r3, r7
 800c12c:	460e      	mov	r6, r1
 800c12e:	d9f4      	bls.n	800c11a <_printf_i+0x116>
 800c130:	2b08      	cmp	r3, #8
 800c132:	d10b      	bne.n	800c14c <_printf_i+0x148>
 800c134:	6823      	ldr	r3, [r4, #0]
 800c136:	07de      	lsls	r6, r3, #31
 800c138:	d508      	bpl.n	800c14c <_printf_i+0x148>
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	6861      	ldr	r1, [r4, #4]
 800c13e:	4299      	cmp	r1, r3
 800c140:	bfde      	ittt	le
 800c142:	2330      	movle	r3, #48	; 0x30
 800c144:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c148:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c14c:	1b52      	subs	r2, r2, r5
 800c14e:	6122      	str	r2, [r4, #16]
 800c150:	f8cd a000 	str.w	sl, [sp]
 800c154:	464b      	mov	r3, r9
 800c156:	aa03      	add	r2, sp, #12
 800c158:	4621      	mov	r1, r4
 800c15a:	4640      	mov	r0, r8
 800c15c:	f7ff fee4 	bl	800bf28 <_printf_common>
 800c160:	3001      	adds	r0, #1
 800c162:	d14a      	bne.n	800c1fa <_printf_i+0x1f6>
 800c164:	f04f 30ff 	mov.w	r0, #4294967295
 800c168:	b004      	add	sp, #16
 800c16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	f043 0320 	orr.w	r3, r3, #32
 800c174:	6023      	str	r3, [r4, #0]
 800c176:	4833      	ldr	r0, [pc, #204]	; (800c244 <_printf_i+0x240>)
 800c178:	2778      	movs	r7, #120	; 0x78
 800c17a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	6829      	ldr	r1, [r5, #0]
 800c182:	061f      	lsls	r7, r3, #24
 800c184:	f851 6b04 	ldr.w	r6, [r1], #4
 800c188:	d402      	bmi.n	800c190 <_printf_i+0x18c>
 800c18a:	065f      	lsls	r7, r3, #25
 800c18c:	bf48      	it	mi
 800c18e:	b2b6      	uxthmi	r6, r6
 800c190:	07df      	lsls	r7, r3, #31
 800c192:	bf48      	it	mi
 800c194:	f043 0320 	orrmi.w	r3, r3, #32
 800c198:	6029      	str	r1, [r5, #0]
 800c19a:	bf48      	it	mi
 800c19c:	6023      	strmi	r3, [r4, #0]
 800c19e:	b91e      	cbnz	r6, 800c1a8 <_printf_i+0x1a4>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	f023 0320 	bic.w	r3, r3, #32
 800c1a6:	6023      	str	r3, [r4, #0]
 800c1a8:	2310      	movs	r3, #16
 800c1aa:	e7a7      	b.n	800c0fc <_printf_i+0xf8>
 800c1ac:	4824      	ldr	r0, [pc, #144]	; (800c240 <_printf_i+0x23c>)
 800c1ae:	e7e4      	b.n	800c17a <_printf_i+0x176>
 800c1b0:	4615      	mov	r5, r2
 800c1b2:	e7bd      	b.n	800c130 <_printf_i+0x12c>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	6826      	ldr	r6, [r4, #0]
 800c1b8:	6961      	ldr	r1, [r4, #20]
 800c1ba:	1d18      	adds	r0, r3, #4
 800c1bc:	6028      	str	r0, [r5, #0]
 800c1be:	0635      	lsls	r5, r6, #24
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	d501      	bpl.n	800c1c8 <_printf_i+0x1c4>
 800c1c4:	6019      	str	r1, [r3, #0]
 800c1c6:	e002      	b.n	800c1ce <_printf_i+0x1ca>
 800c1c8:	0670      	lsls	r0, r6, #25
 800c1ca:	d5fb      	bpl.n	800c1c4 <_printf_i+0x1c0>
 800c1cc:	8019      	strh	r1, [r3, #0]
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	6123      	str	r3, [r4, #16]
 800c1d2:	4615      	mov	r5, r2
 800c1d4:	e7bc      	b.n	800c150 <_printf_i+0x14c>
 800c1d6:	682b      	ldr	r3, [r5, #0]
 800c1d8:	1d1a      	adds	r2, r3, #4
 800c1da:	602a      	str	r2, [r5, #0]
 800c1dc:	681d      	ldr	r5, [r3, #0]
 800c1de:	6862      	ldr	r2, [r4, #4]
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f7f4 f87c 	bl	80002e0 <memchr>
 800c1e8:	b108      	cbz	r0, 800c1ee <_printf_i+0x1ea>
 800c1ea:	1b40      	subs	r0, r0, r5
 800c1ec:	6060      	str	r0, [r4, #4]
 800c1ee:	6863      	ldr	r3, [r4, #4]
 800c1f0:	6123      	str	r3, [r4, #16]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1f8:	e7aa      	b.n	800c150 <_printf_i+0x14c>
 800c1fa:	6923      	ldr	r3, [r4, #16]
 800c1fc:	462a      	mov	r2, r5
 800c1fe:	4649      	mov	r1, r9
 800c200:	4640      	mov	r0, r8
 800c202:	47d0      	blx	sl
 800c204:	3001      	adds	r0, #1
 800c206:	d0ad      	beq.n	800c164 <_printf_i+0x160>
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	079b      	lsls	r3, r3, #30
 800c20c:	d413      	bmi.n	800c236 <_printf_i+0x232>
 800c20e:	68e0      	ldr	r0, [r4, #12]
 800c210:	9b03      	ldr	r3, [sp, #12]
 800c212:	4298      	cmp	r0, r3
 800c214:	bfb8      	it	lt
 800c216:	4618      	movlt	r0, r3
 800c218:	e7a6      	b.n	800c168 <_printf_i+0x164>
 800c21a:	2301      	movs	r3, #1
 800c21c:	4632      	mov	r2, r6
 800c21e:	4649      	mov	r1, r9
 800c220:	4640      	mov	r0, r8
 800c222:	47d0      	blx	sl
 800c224:	3001      	adds	r0, #1
 800c226:	d09d      	beq.n	800c164 <_printf_i+0x160>
 800c228:	3501      	adds	r5, #1
 800c22a:	68e3      	ldr	r3, [r4, #12]
 800c22c:	9903      	ldr	r1, [sp, #12]
 800c22e:	1a5b      	subs	r3, r3, r1
 800c230:	42ab      	cmp	r3, r5
 800c232:	dcf2      	bgt.n	800c21a <_printf_i+0x216>
 800c234:	e7eb      	b.n	800c20e <_printf_i+0x20a>
 800c236:	2500      	movs	r5, #0
 800c238:	f104 0619 	add.w	r6, r4, #25
 800c23c:	e7f5      	b.n	800c22a <_printf_i+0x226>
 800c23e:	bf00      	nop
 800c240:	0800f6b4 	.word	0x0800f6b4
 800c244:	0800f6c5 	.word	0x0800f6c5

0800c248 <__sflush_r>:
 800c248:	898a      	ldrh	r2, [r1, #12]
 800c24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24e:	4605      	mov	r5, r0
 800c250:	0710      	lsls	r0, r2, #28
 800c252:	460c      	mov	r4, r1
 800c254:	d458      	bmi.n	800c308 <__sflush_r+0xc0>
 800c256:	684b      	ldr	r3, [r1, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	dc05      	bgt.n	800c268 <__sflush_r+0x20>
 800c25c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c25e:	2b00      	cmp	r3, #0
 800c260:	dc02      	bgt.n	800c268 <__sflush_r+0x20>
 800c262:	2000      	movs	r0, #0
 800c264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c26a:	2e00      	cmp	r6, #0
 800c26c:	d0f9      	beq.n	800c262 <__sflush_r+0x1a>
 800c26e:	2300      	movs	r3, #0
 800c270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c274:	682f      	ldr	r7, [r5, #0]
 800c276:	6a21      	ldr	r1, [r4, #32]
 800c278:	602b      	str	r3, [r5, #0]
 800c27a:	d032      	beq.n	800c2e2 <__sflush_r+0x9a>
 800c27c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	075a      	lsls	r2, r3, #29
 800c282:	d505      	bpl.n	800c290 <__sflush_r+0x48>
 800c284:	6863      	ldr	r3, [r4, #4]
 800c286:	1ac0      	subs	r0, r0, r3
 800c288:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c28a:	b10b      	cbz	r3, 800c290 <__sflush_r+0x48>
 800c28c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c28e:	1ac0      	subs	r0, r0, r3
 800c290:	2300      	movs	r3, #0
 800c292:	4602      	mov	r2, r0
 800c294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c296:	6a21      	ldr	r1, [r4, #32]
 800c298:	4628      	mov	r0, r5
 800c29a:	47b0      	blx	r6
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	d106      	bne.n	800c2b0 <__sflush_r+0x68>
 800c2a2:	6829      	ldr	r1, [r5, #0]
 800c2a4:	291d      	cmp	r1, #29
 800c2a6:	d82b      	bhi.n	800c300 <__sflush_r+0xb8>
 800c2a8:	4a29      	ldr	r2, [pc, #164]	; (800c350 <__sflush_r+0x108>)
 800c2aa:	410a      	asrs	r2, r1
 800c2ac:	07d6      	lsls	r6, r2, #31
 800c2ae:	d427      	bmi.n	800c300 <__sflush_r+0xb8>
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	6062      	str	r2, [r4, #4]
 800c2b4:	04d9      	lsls	r1, r3, #19
 800c2b6:	6922      	ldr	r2, [r4, #16]
 800c2b8:	6022      	str	r2, [r4, #0]
 800c2ba:	d504      	bpl.n	800c2c6 <__sflush_r+0x7e>
 800c2bc:	1c42      	adds	r2, r0, #1
 800c2be:	d101      	bne.n	800c2c4 <__sflush_r+0x7c>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b903      	cbnz	r3, 800c2c6 <__sflush_r+0x7e>
 800c2c4:	6560      	str	r0, [r4, #84]	; 0x54
 800c2c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2c8:	602f      	str	r7, [r5, #0]
 800c2ca:	2900      	cmp	r1, #0
 800c2cc:	d0c9      	beq.n	800c262 <__sflush_r+0x1a>
 800c2ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2d2:	4299      	cmp	r1, r3
 800c2d4:	d002      	beq.n	800c2dc <__sflush_r+0x94>
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f7ff fc82 	bl	800bbe0 <_free_r>
 800c2dc:	2000      	movs	r0, #0
 800c2de:	6360      	str	r0, [r4, #52]	; 0x34
 800c2e0:	e7c0      	b.n	800c264 <__sflush_r+0x1c>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	47b0      	blx	r6
 800c2e8:	1c41      	adds	r1, r0, #1
 800c2ea:	d1c8      	bne.n	800c27e <__sflush_r+0x36>
 800c2ec:	682b      	ldr	r3, [r5, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0c5      	beq.n	800c27e <__sflush_r+0x36>
 800c2f2:	2b1d      	cmp	r3, #29
 800c2f4:	d001      	beq.n	800c2fa <__sflush_r+0xb2>
 800c2f6:	2b16      	cmp	r3, #22
 800c2f8:	d101      	bne.n	800c2fe <__sflush_r+0xb6>
 800c2fa:	602f      	str	r7, [r5, #0]
 800c2fc:	e7b1      	b.n	800c262 <__sflush_r+0x1a>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c304:	81a3      	strh	r3, [r4, #12]
 800c306:	e7ad      	b.n	800c264 <__sflush_r+0x1c>
 800c308:	690f      	ldr	r7, [r1, #16]
 800c30a:	2f00      	cmp	r7, #0
 800c30c:	d0a9      	beq.n	800c262 <__sflush_r+0x1a>
 800c30e:	0793      	lsls	r3, r2, #30
 800c310:	680e      	ldr	r6, [r1, #0]
 800c312:	bf08      	it	eq
 800c314:	694b      	ldreq	r3, [r1, #20]
 800c316:	600f      	str	r7, [r1, #0]
 800c318:	bf18      	it	ne
 800c31a:	2300      	movne	r3, #0
 800c31c:	eba6 0807 	sub.w	r8, r6, r7
 800c320:	608b      	str	r3, [r1, #8]
 800c322:	f1b8 0f00 	cmp.w	r8, #0
 800c326:	dd9c      	ble.n	800c262 <__sflush_r+0x1a>
 800c328:	6a21      	ldr	r1, [r4, #32]
 800c32a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c32c:	4643      	mov	r3, r8
 800c32e:	463a      	mov	r2, r7
 800c330:	4628      	mov	r0, r5
 800c332:	47b0      	blx	r6
 800c334:	2800      	cmp	r0, #0
 800c336:	dc06      	bgt.n	800c346 <__sflush_r+0xfe>
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	f04f 30ff 	mov.w	r0, #4294967295
 800c344:	e78e      	b.n	800c264 <__sflush_r+0x1c>
 800c346:	4407      	add	r7, r0
 800c348:	eba8 0800 	sub.w	r8, r8, r0
 800c34c:	e7e9      	b.n	800c322 <__sflush_r+0xda>
 800c34e:	bf00      	nop
 800c350:	dfbffffe 	.word	0xdfbffffe

0800c354 <_fflush_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	690b      	ldr	r3, [r1, #16]
 800c358:	4605      	mov	r5, r0
 800c35a:	460c      	mov	r4, r1
 800c35c:	b913      	cbnz	r3, 800c364 <_fflush_r+0x10>
 800c35e:	2500      	movs	r5, #0
 800c360:	4628      	mov	r0, r5
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	b118      	cbz	r0, 800c36e <_fflush_r+0x1a>
 800c366:	6a03      	ldr	r3, [r0, #32]
 800c368:	b90b      	cbnz	r3, 800c36e <_fflush_r+0x1a>
 800c36a:	f7ff fabb 	bl	800b8e4 <__sinit>
 800c36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0f3      	beq.n	800c35e <_fflush_r+0xa>
 800c376:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c378:	07d0      	lsls	r0, r2, #31
 800c37a:	d404      	bmi.n	800c386 <_fflush_r+0x32>
 800c37c:	0599      	lsls	r1, r3, #22
 800c37e:	d402      	bmi.n	800c386 <_fflush_r+0x32>
 800c380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c382:	f7ff fbfe 	bl	800bb82 <__retarget_lock_acquire_recursive>
 800c386:	4628      	mov	r0, r5
 800c388:	4621      	mov	r1, r4
 800c38a:	f7ff ff5d 	bl	800c248 <__sflush_r>
 800c38e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c390:	07da      	lsls	r2, r3, #31
 800c392:	4605      	mov	r5, r0
 800c394:	d4e4      	bmi.n	800c360 <_fflush_r+0xc>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	059b      	lsls	r3, r3, #22
 800c39a:	d4e1      	bmi.n	800c360 <_fflush_r+0xc>
 800c39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c39e:	f7ff fbf1 	bl	800bb84 <__retarget_lock_release_recursive>
 800c3a2:	e7dd      	b.n	800c360 <_fflush_r+0xc>

0800c3a4 <fiprintf>:
 800c3a4:	b40e      	push	{r1, r2, r3}
 800c3a6:	b503      	push	{r0, r1, lr}
 800c3a8:	4601      	mov	r1, r0
 800c3aa:	ab03      	add	r3, sp, #12
 800c3ac:	4805      	ldr	r0, [pc, #20]	; (800c3c4 <fiprintf+0x20>)
 800c3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b2:	6800      	ldr	r0, [r0, #0]
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	f000 f905 	bl	800c5c4 <_vfiprintf_r>
 800c3ba:	b002      	add	sp, #8
 800c3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3c0:	b003      	add	sp, #12
 800c3c2:	4770      	bx	lr
 800c3c4:	24000098 	.word	0x24000098

0800c3c8 <__swhatbuf_r>:
 800c3c8:	b570      	push	{r4, r5, r6, lr}
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d0:	2900      	cmp	r1, #0
 800c3d2:	b096      	sub	sp, #88	; 0x58
 800c3d4:	4615      	mov	r5, r2
 800c3d6:	461e      	mov	r6, r3
 800c3d8:	da0d      	bge.n	800c3f6 <__swhatbuf_r+0x2e>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c3e0:	f04f 0100 	mov.w	r1, #0
 800c3e4:	bf0c      	ite	eq
 800c3e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c3ea:	2340      	movne	r3, #64	; 0x40
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	6031      	str	r1, [r6, #0]
 800c3f0:	602b      	str	r3, [r5, #0]
 800c3f2:	b016      	add	sp, #88	; 0x58
 800c3f4:	bd70      	pop	{r4, r5, r6, pc}
 800c3f6:	466a      	mov	r2, sp
 800c3f8:	f000 f862 	bl	800c4c0 <_fstat_r>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	dbec      	blt.n	800c3da <__swhatbuf_r+0x12>
 800c400:	9901      	ldr	r1, [sp, #4]
 800c402:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c406:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c40a:	4259      	negs	r1, r3
 800c40c:	4159      	adcs	r1, r3
 800c40e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c412:	e7eb      	b.n	800c3ec <__swhatbuf_r+0x24>

0800c414 <__smakebuf_r>:
 800c414:	898b      	ldrh	r3, [r1, #12]
 800c416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c418:	079d      	lsls	r5, r3, #30
 800c41a:	4606      	mov	r6, r0
 800c41c:	460c      	mov	r4, r1
 800c41e:	d507      	bpl.n	800c430 <__smakebuf_r+0x1c>
 800c420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	6123      	str	r3, [r4, #16]
 800c428:	2301      	movs	r3, #1
 800c42a:	6163      	str	r3, [r4, #20]
 800c42c:	b002      	add	sp, #8
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
 800c430:	ab01      	add	r3, sp, #4
 800c432:	466a      	mov	r2, sp
 800c434:	f7ff ffc8 	bl	800c3c8 <__swhatbuf_r>
 800c438:	9900      	ldr	r1, [sp, #0]
 800c43a:	4605      	mov	r5, r0
 800c43c:	4630      	mov	r0, r6
 800c43e:	f7ff f8cd 	bl	800b5dc <_malloc_r>
 800c442:	b948      	cbnz	r0, 800c458 <__smakebuf_r+0x44>
 800c444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c448:	059a      	lsls	r2, r3, #22
 800c44a:	d4ef      	bmi.n	800c42c <__smakebuf_r+0x18>
 800c44c:	f023 0303 	bic.w	r3, r3, #3
 800c450:	f043 0302 	orr.w	r3, r3, #2
 800c454:	81a3      	strh	r3, [r4, #12]
 800c456:	e7e3      	b.n	800c420 <__smakebuf_r+0xc>
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	6020      	str	r0, [r4, #0]
 800c45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c460:	81a3      	strh	r3, [r4, #12]
 800c462:	9b00      	ldr	r3, [sp, #0]
 800c464:	6163      	str	r3, [r4, #20]
 800c466:	9b01      	ldr	r3, [sp, #4]
 800c468:	6120      	str	r0, [r4, #16]
 800c46a:	b15b      	cbz	r3, 800c484 <__smakebuf_r+0x70>
 800c46c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c470:	4630      	mov	r0, r6
 800c472:	f000 f837 	bl	800c4e4 <_isatty_r>
 800c476:	b128      	cbz	r0, 800c484 <__smakebuf_r+0x70>
 800c478:	89a3      	ldrh	r3, [r4, #12]
 800c47a:	f023 0303 	bic.w	r3, r3, #3
 800c47e:	f043 0301 	orr.w	r3, r3, #1
 800c482:	81a3      	strh	r3, [r4, #12]
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	431d      	orrs	r5, r3
 800c488:	81a5      	strh	r5, [r4, #12]
 800c48a:	e7cf      	b.n	800c42c <__smakebuf_r+0x18>

0800c48c <memmove>:
 800c48c:	4288      	cmp	r0, r1
 800c48e:	b510      	push	{r4, lr}
 800c490:	eb01 0402 	add.w	r4, r1, r2
 800c494:	d902      	bls.n	800c49c <memmove+0x10>
 800c496:	4284      	cmp	r4, r0
 800c498:	4623      	mov	r3, r4
 800c49a:	d807      	bhi.n	800c4ac <memmove+0x20>
 800c49c:	1e43      	subs	r3, r0, #1
 800c49e:	42a1      	cmp	r1, r4
 800c4a0:	d008      	beq.n	800c4b4 <memmove+0x28>
 800c4a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4aa:	e7f8      	b.n	800c49e <memmove+0x12>
 800c4ac:	4402      	add	r2, r0
 800c4ae:	4601      	mov	r1, r0
 800c4b0:	428a      	cmp	r2, r1
 800c4b2:	d100      	bne.n	800c4b6 <memmove+0x2a>
 800c4b4:	bd10      	pop	{r4, pc}
 800c4b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4be:	e7f7      	b.n	800c4b0 <memmove+0x24>

0800c4c0 <_fstat_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	4d07      	ldr	r5, [pc, #28]	; (800c4e0 <_fstat_r+0x20>)
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	602b      	str	r3, [r5, #0]
 800c4ce:	f7f4 fcdb 	bl	8000e88 <_fstat>
 800c4d2:	1c43      	adds	r3, r0, #1
 800c4d4:	d102      	bne.n	800c4dc <_fstat_r+0x1c>
 800c4d6:	682b      	ldr	r3, [r5, #0]
 800c4d8:	b103      	cbz	r3, 800c4dc <_fstat_r+0x1c>
 800c4da:	6023      	str	r3, [r4, #0]
 800c4dc:	bd38      	pop	{r3, r4, r5, pc}
 800c4de:	bf00      	nop
 800c4e0:	240015f8 	.word	0x240015f8

0800c4e4 <_isatty_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4d06      	ldr	r5, [pc, #24]	; (800c500 <_isatty_r+0x1c>)
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	4608      	mov	r0, r1
 800c4ee:	602b      	str	r3, [r5, #0]
 800c4f0:	f7f4 fc8c 	bl	8000e0c <_isatty>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_isatty_r+0x1a>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_isatty_r+0x1a>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	240015f8 	.word	0x240015f8

0800c504 <abort>:
 800c504:	b508      	push	{r3, lr}
 800c506:	2006      	movs	r0, #6
 800c508:	f000 fa34 	bl	800c974 <raise>
 800c50c:	2001      	movs	r0, #1
 800c50e:	f7f5 f9d2 	bl	80018b6 <_exit>

0800c512 <_realloc_r>:
 800c512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c516:	4680      	mov	r8, r0
 800c518:	4614      	mov	r4, r2
 800c51a:	460e      	mov	r6, r1
 800c51c:	b921      	cbnz	r1, 800c528 <_realloc_r+0x16>
 800c51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c522:	4611      	mov	r1, r2
 800c524:	f7ff b85a 	b.w	800b5dc <_malloc_r>
 800c528:	b92a      	cbnz	r2, 800c536 <_realloc_r+0x24>
 800c52a:	f7ff fb59 	bl	800bbe0 <_free_r>
 800c52e:	4625      	mov	r5, r4
 800c530:	4628      	mov	r0, r5
 800c532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c536:	f000 fa39 	bl	800c9ac <_malloc_usable_size_r>
 800c53a:	4284      	cmp	r4, r0
 800c53c:	4607      	mov	r7, r0
 800c53e:	d802      	bhi.n	800c546 <_realloc_r+0x34>
 800c540:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c544:	d812      	bhi.n	800c56c <_realloc_r+0x5a>
 800c546:	4621      	mov	r1, r4
 800c548:	4640      	mov	r0, r8
 800c54a:	f7ff f847 	bl	800b5dc <_malloc_r>
 800c54e:	4605      	mov	r5, r0
 800c550:	2800      	cmp	r0, #0
 800c552:	d0ed      	beq.n	800c530 <_realloc_r+0x1e>
 800c554:	42bc      	cmp	r4, r7
 800c556:	4622      	mov	r2, r4
 800c558:	4631      	mov	r1, r6
 800c55a:	bf28      	it	cs
 800c55c:	463a      	movcs	r2, r7
 800c55e:	f7ff fb12 	bl	800bb86 <memcpy>
 800c562:	4631      	mov	r1, r6
 800c564:	4640      	mov	r0, r8
 800c566:	f7ff fb3b 	bl	800bbe0 <_free_r>
 800c56a:	e7e1      	b.n	800c530 <_realloc_r+0x1e>
 800c56c:	4635      	mov	r5, r6
 800c56e:	e7df      	b.n	800c530 <_realloc_r+0x1e>

0800c570 <__sfputc_r>:
 800c570:	6893      	ldr	r3, [r2, #8]
 800c572:	3b01      	subs	r3, #1
 800c574:	2b00      	cmp	r3, #0
 800c576:	b410      	push	{r4}
 800c578:	6093      	str	r3, [r2, #8]
 800c57a:	da08      	bge.n	800c58e <__sfputc_r+0x1e>
 800c57c:	6994      	ldr	r4, [r2, #24]
 800c57e:	42a3      	cmp	r3, r4
 800c580:	db01      	blt.n	800c586 <__sfputc_r+0x16>
 800c582:	290a      	cmp	r1, #10
 800c584:	d103      	bne.n	800c58e <__sfputc_r+0x1e>
 800c586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c58a:	f000 b935 	b.w	800c7f8 <__swbuf_r>
 800c58e:	6813      	ldr	r3, [r2, #0]
 800c590:	1c58      	adds	r0, r3, #1
 800c592:	6010      	str	r0, [r2, #0]
 800c594:	7019      	strb	r1, [r3, #0]
 800c596:	4608      	mov	r0, r1
 800c598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c59c:	4770      	bx	lr

0800c59e <__sfputs_r>:
 800c59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	460f      	mov	r7, r1
 800c5a4:	4614      	mov	r4, r2
 800c5a6:	18d5      	adds	r5, r2, r3
 800c5a8:	42ac      	cmp	r4, r5
 800c5aa:	d101      	bne.n	800c5b0 <__sfputs_r+0x12>
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	e007      	b.n	800c5c0 <__sfputs_r+0x22>
 800c5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b4:	463a      	mov	r2, r7
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f7ff ffda 	bl	800c570 <__sfputc_r>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d1f3      	bne.n	800c5a8 <__sfputs_r+0xa>
 800c5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5c4 <_vfiprintf_r>:
 800c5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c8:	460d      	mov	r5, r1
 800c5ca:	b09d      	sub	sp, #116	; 0x74
 800c5cc:	4614      	mov	r4, r2
 800c5ce:	4698      	mov	r8, r3
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	b118      	cbz	r0, 800c5dc <_vfiprintf_r+0x18>
 800c5d4:	6a03      	ldr	r3, [r0, #32]
 800c5d6:	b90b      	cbnz	r3, 800c5dc <_vfiprintf_r+0x18>
 800c5d8:	f7ff f984 	bl	800b8e4 <__sinit>
 800c5dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5de:	07d9      	lsls	r1, r3, #31
 800c5e0:	d405      	bmi.n	800c5ee <_vfiprintf_r+0x2a>
 800c5e2:	89ab      	ldrh	r3, [r5, #12]
 800c5e4:	059a      	lsls	r2, r3, #22
 800c5e6:	d402      	bmi.n	800c5ee <_vfiprintf_r+0x2a>
 800c5e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5ea:	f7ff faca 	bl	800bb82 <__retarget_lock_acquire_recursive>
 800c5ee:	89ab      	ldrh	r3, [r5, #12]
 800c5f0:	071b      	lsls	r3, r3, #28
 800c5f2:	d501      	bpl.n	800c5f8 <_vfiprintf_r+0x34>
 800c5f4:	692b      	ldr	r3, [r5, #16]
 800c5f6:	b99b      	cbnz	r3, 800c620 <_vfiprintf_r+0x5c>
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	f000 f93a 	bl	800c874 <__swsetup_r>
 800c600:	b170      	cbz	r0, 800c620 <_vfiprintf_r+0x5c>
 800c602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c604:	07dc      	lsls	r4, r3, #31
 800c606:	d504      	bpl.n	800c612 <_vfiprintf_r+0x4e>
 800c608:	f04f 30ff 	mov.w	r0, #4294967295
 800c60c:	b01d      	add	sp, #116	; 0x74
 800c60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c612:	89ab      	ldrh	r3, [r5, #12]
 800c614:	0598      	lsls	r0, r3, #22
 800c616:	d4f7      	bmi.n	800c608 <_vfiprintf_r+0x44>
 800c618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c61a:	f7ff fab3 	bl	800bb84 <__retarget_lock_release_recursive>
 800c61e:	e7f3      	b.n	800c608 <_vfiprintf_r+0x44>
 800c620:	2300      	movs	r3, #0
 800c622:	9309      	str	r3, [sp, #36]	; 0x24
 800c624:	2320      	movs	r3, #32
 800c626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c62a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c62e:	2330      	movs	r3, #48	; 0x30
 800c630:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7e4 <_vfiprintf_r+0x220>
 800c634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c638:	f04f 0901 	mov.w	r9, #1
 800c63c:	4623      	mov	r3, r4
 800c63e:	469a      	mov	sl, r3
 800c640:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c644:	b10a      	cbz	r2, 800c64a <_vfiprintf_r+0x86>
 800c646:	2a25      	cmp	r2, #37	; 0x25
 800c648:	d1f9      	bne.n	800c63e <_vfiprintf_r+0x7a>
 800c64a:	ebba 0b04 	subs.w	fp, sl, r4
 800c64e:	d00b      	beq.n	800c668 <_vfiprintf_r+0xa4>
 800c650:	465b      	mov	r3, fp
 800c652:	4622      	mov	r2, r4
 800c654:	4629      	mov	r1, r5
 800c656:	4630      	mov	r0, r6
 800c658:	f7ff ffa1 	bl	800c59e <__sfputs_r>
 800c65c:	3001      	adds	r0, #1
 800c65e:	f000 80a9 	beq.w	800c7b4 <_vfiprintf_r+0x1f0>
 800c662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c664:	445a      	add	r2, fp
 800c666:	9209      	str	r2, [sp, #36]	; 0x24
 800c668:	f89a 3000 	ldrb.w	r3, [sl]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 80a1 	beq.w	800c7b4 <_vfiprintf_r+0x1f0>
 800c672:	2300      	movs	r3, #0
 800c674:	f04f 32ff 	mov.w	r2, #4294967295
 800c678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c67c:	f10a 0a01 	add.w	sl, sl, #1
 800c680:	9304      	str	r3, [sp, #16]
 800c682:	9307      	str	r3, [sp, #28]
 800c684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c688:	931a      	str	r3, [sp, #104]	; 0x68
 800c68a:	4654      	mov	r4, sl
 800c68c:	2205      	movs	r2, #5
 800c68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c692:	4854      	ldr	r0, [pc, #336]	; (800c7e4 <_vfiprintf_r+0x220>)
 800c694:	f7f3 fe24 	bl	80002e0 <memchr>
 800c698:	9a04      	ldr	r2, [sp, #16]
 800c69a:	b9d8      	cbnz	r0, 800c6d4 <_vfiprintf_r+0x110>
 800c69c:	06d1      	lsls	r1, r2, #27
 800c69e:	bf44      	itt	mi
 800c6a0:	2320      	movmi	r3, #32
 800c6a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6a6:	0713      	lsls	r3, r2, #28
 800c6a8:	bf44      	itt	mi
 800c6aa:	232b      	movmi	r3, #43	; 0x2b
 800c6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6b6:	d015      	beq.n	800c6e4 <_vfiprintf_r+0x120>
 800c6b8:	9a07      	ldr	r2, [sp, #28]
 800c6ba:	4654      	mov	r4, sl
 800c6bc:	2000      	movs	r0, #0
 800c6be:	f04f 0c0a 	mov.w	ip, #10
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6c8:	3b30      	subs	r3, #48	; 0x30
 800c6ca:	2b09      	cmp	r3, #9
 800c6cc:	d94d      	bls.n	800c76a <_vfiprintf_r+0x1a6>
 800c6ce:	b1b0      	cbz	r0, 800c6fe <_vfiprintf_r+0x13a>
 800c6d0:	9207      	str	r2, [sp, #28]
 800c6d2:	e014      	b.n	800c6fe <_vfiprintf_r+0x13a>
 800c6d4:	eba0 0308 	sub.w	r3, r0, r8
 800c6d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	9304      	str	r3, [sp, #16]
 800c6e0:	46a2      	mov	sl, r4
 800c6e2:	e7d2      	b.n	800c68a <_vfiprintf_r+0xc6>
 800c6e4:	9b03      	ldr	r3, [sp, #12]
 800c6e6:	1d19      	adds	r1, r3, #4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	9103      	str	r1, [sp, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	bfbb      	ittet	lt
 800c6f0:	425b      	neglt	r3, r3
 800c6f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c6f6:	9307      	strge	r3, [sp, #28]
 800c6f8:	9307      	strlt	r3, [sp, #28]
 800c6fa:	bfb8      	it	lt
 800c6fc:	9204      	strlt	r2, [sp, #16]
 800c6fe:	7823      	ldrb	r3, [r4, #0]
 800c700:	2b2e      	cmp	r3, #46	; 0x2e
 800c702:	d10c      	bne.n	800c71e <_vfiprintf_r+0x15a>
 800c704:	7863      	ldrb	r3, [r4, #1]
 800c706:	2b2a      	cmp	r3, #42	; 0x2a
 800c708:	d134      	bne.n	800c774 <_vfiprintf_r+0x1b0>
 800c70a:	9b03      	ldr	r3, [sp, #12]
 800c70c:	1d1a      	adds	r2, r3, #4
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	9203      	str	r2, [sp, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	bfb8      	it	lt
 800c716:	f04f 33ff 	movlt.w	r3, #4294967295
 800c71a:	3402      	adds	r4, #2
 800c71c:	9305      	str	r3, [sp, #20]
 800c71e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7f4 <_vfiprintf_r+0x230>
 800c722:	7821      	ldrb	r1, [r4, #0]
 800c724:	2203      	movs	r2, #3
 800c726:	4650      	mov	r0, sl
 800c728:	f7f3 fdda 	bl	80002e0 <memchr>
 800c72c:	b138      	cbz	r0, 800c73e <_vfiprintf_r+0x17a>
 800c72e:	9b04      	ldr	r3, [sp, #16]
 800c730:	eba0 000a 	sub.w	r0, r0, sl
 800c734:	2240      	movs	r2, #64	; 0x40
 800c736:	4082      	lsls	r2, r0
 800c738:	4313      	orrs	r3, r2
 800c73a:	3401      	adds	r4, #1
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c742:	4829      	ldr	r0, [pc, #164]	; (800c7e8 <_vfiprintf_r+0x224>)
 800c744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c748:	2206      	movs	r2, #6
 800c74a:	f7f3 fdc9 	bl	80002e0 <memchr>
 800c74e:	2800      	cmp	r0, #0
 800c750:	d03f      	beq.n	800c7d2 <_vfiprintf_r+0x20e>
 800c752:	4b26      	ldr	r3, [pc, #152]	; (800c7ec <_vfiprintf_r+0x228>)
 800c754:	bb1b      	cbnz	r3, 800c79e <_vfiprintf_r+0x1da>
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	3307      	adds	r3, #7
 800c75a:	f023 0307 	bic.w	r3, r3, #7
 800c75e:	3308      	adds	r3, #8
 800c760:	9303      	str	r3, [sp, #12]
 800c762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c764:	443b      	add	r3, r7
 800c766:	9309      	str	r3, [sp, #36]	; 0x24
 800c768:	e768      	b.n	800c63c <_vfiprintf_r+0x78>
 800c76a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c76e:	460c      	mov	r4, r1
 800c770:	2001      	movs	r0, #1
 800c772:	e7a6      	b.n	800c6c2 <_vfiprintf_r+0xfe>
 800c774:	2300      	movs	r3, #0
 800c776:	3401      	adds	r4, #1
 800c778:	9305      	str	r3, [sp, #20]
 800c77a:	4619      	mov	r1, r3
 800c77c:	f04f 0c0a 	mov.w	ip, #10
 800c780:	4620      	mov	r0, r4
 800c782:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c786:	3a30      	subs	r2, #48	; 0x30
 800c788:	2a09      	cmp	r2, #9
 800c78a:	d903      	bls.n	800c794 <_vfiprintf_r+0x1d0>
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0c6      	beq.n	800c71e <_vfiprintf_r+0x15a>
 800c790:	9105      	str	r1, [sp, #20]
 800c792:	e7c4      	b.n	800c71e <_vfiprintf_r+0x15a>
 800c794:	fb0c 2101 	mla	r1, ip, r1, r2
 800c798:	4604      	mov	r4, r0
 800c79a:	2301      	movs	r3, #1
 800c79c:	e7f0      	b.n	800c780 <_vfiprintf_r+0x1bc>
 800c79e:	ab03      	add	r3, sp, #12
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	462a      	mov	r2, r5
 800c7a4:	4b12      	ldr	r3, [pc, #72]	; (800c7f0 <_vfiprintf_r+0x22c>)
 800c7a6:	a904      	add	r1, sp, #16
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f3af 8000 	nop.w
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	1c78      	adds	r0, r7, #1
 800c7b2:	d1d6      	bne.n	800c762 <_vfiprintf_r+0x19e>
 800c7b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7b6:	07d9      	lsls	r1, r3, #31
 800c7b8:	d405      	bmi.n	800c7c6 <_vfiprintf_r+0x202>
 800c7ba:	89ab      	ldrh	r3, [r5, #12]
 800c7bc:	059a      	lsls	r2, r3, #22
 800c7be:	d402      	bmi.n	800c7c6 <_vfiprintf_r+0x202>
 800c7c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7c2:	f7ff f9df 	bl	800bb84 <__retarget_lock_release_recursive>
 800c7c6:	89ab      	ldrh	r3, [r5, #12]
 800c7c8:	065b      	lsls	r3, r3, #25
 800c7ca:	f53f af1d 	bmi.w	800c608 <_vfiprintf_r+0x44>
 800c7ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7d0:	e71c      	b.n	800c60c <_vfiprintf_r+0x48>
 800c7d2:	ab03      	add	r3, sp, #12
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	462a      	mov	r2, r5
 800c7d8:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <_vfiprintf_r+0x22c>)
 800c7da:	a904      	add	r1, sp, #16
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f7ff fc11 	bl	800c004 <_printf_i>
 800c7e2:	e7e4      	b.n	800c7ae <_vfiprintf_r+0x1ea>
 800c7e4:	0800f6a3 	.word	0x0800f6a3
 800c7e8:	0800f6ad 	.word	0x0800f6ad
 800c7ec:	00000000 	.word	0x00000000
 800c7f0:	0800c59f 	.word	0x0800c59f
 800c7f4:	0800f6a9 	.word	0x0800f6a9

0800c7f8 <__swbuf_r>:
 800c7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fa:	460e      	mov	r6, r1
 800c7fc:	4614      	mov	r4, r2
 800c7fe:	4605      	mov	r5, r0
 800c800:	b118      	cbz	r0, 800c80a <__swbuf_r+0x12>
 800c802:	6a03      	ldr	r3, [r0, #32]
 800c804:	b90b      	cbnz	r3, 800c80a <__swbuf_r+0x12>
 800c806:	f7ff f86d 	bl	800b8e4 <__sinit>
 800c80a:	69a3      	ldr	r3, [r4, #24]
 800c80c:	60a3      	str	r3, [r4, #8]
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	071a      	lsls	r2, r3, #28
 800c812:	d525      	bpl.n	800c860 <__swbuf_r+0x68>
 800c814:	6923      	ldr	r3, [r4, #16]
 800c816:	b31b      	cbz	r3, 800c860 <__swbuf_r+0x68>
 800c818:	6823      	ldr	r3, [r4, #0]
 800c81a:	6922      	ldr	r2, [r4, #16]
 800c81c:	1a98      	subs	r0, r3, r2
 800c81e:	6963      	ldr	r3, [r4, #20]
 800c820:	b2f6      	uxtb	r6, r6
 800c822:	4283      	cmp	r3, r0
 800c824:	4637      	mov	r7, r6
 800c826:	dc04      	bgt.n	800c832 <__swbuf_r+0x3a>
 800c828:	4621      	mov	r1, r4
 800c82a:	4628      	mov	r0, r5
 800c82c:	f7ff fd92 	bl	800c354 <_fflush_r>
 800c830:	b9e0      	cbnz	r0, 800c86c <__swbuf_r+0x74>
 800c832:	68a3      	ldr	r3, [r4, #8]
 800c834:	3b01      	subs	r3, #1
 800c836:	60a3      	str	r3, [r4, #8]
 800c838:	6823      	ldr	r3, [r4, #0]
 800c83a:	1c5a      	adds	r2, r3, #1
 800c83c:	6022      	str	r2, [r4, #0]
 800c83e:	701e      	strb	r6, [r3, #0]
 800c840:	6962      	ldr	r2, [r4, #20]
 800c842:	1c43      	adds	r3, r0, #1
 800c844:	429a      	cmp	r2, r3
 800c846:	d004      	beq.n	800c852 <__swbuf_r+0x5a>
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	07db      	lsls	r3, r3, #31
 800c84c:	d506      	bpl.n	800c85c <__swbuf_r+0x64>
 800c84e:	2e0a      	cmp	r6, #10
 800c850:	d104      	bne.n	800c85c <__swbuf_r+0x64>
 800c852:	4621      	mov	r1, r4
 800c854:	4628      	mov	r0, r5
 800c856:	f7ff fd7d 	bl	800c354 <_fflush_r>
 800c85a:	b938      	cbnz	r0, 800c86c <__swbuf_r+0x74>
 800c85c:	4638      	mov	r0, r7
 800c85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c860:	4621      	mov	r1, r4
 800c862:	4628      	mov	r0, r5
 800c864:	f000 f806 	bl	800c874 <__swsetup_r>
 800c868:	2800      	cmp	r0, #0
 800c86a:	d0d5      	beq.n	800c818 <__swbuf_r+0x20>
 800c86c:	f04f 37ff 	mov.w	r7, #4294967295
 800c870:	e7f4      	b.n	800c85c <__swbuf_r+0x64>
	...

0800c874 <__swsetup_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4b2a      	ldr	r3, [pc, #168]	; (800c920 <__swsetup_r+0xac>)
 800c878:	4605      	mov	r5, r0
 800c87a:	6818      	ldr	r0, [r3, #0]
 800c87c:	460c      	mov	r4, r1
 800c87e:	b118      	cbz	r0, 800c888 <__swsetup_r+0x14>
 800c880:	6a03      	ldr	r3, [r0, #32]
 800c882:	b90b      	cbnz	r3, 800c888 <__swsetup_r+0x14>
 800c884:	f7ff f82e 	bl	800b8e4 <__sinit>
 800c888:	89a3      	ldrh	r3, [r4, #12]
 800c88a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c88e:	0718      	lsls	r0, r3, #28
 800c890:	d422      	bmi.n	800c8d8 <__swsetup_r+0x64>
 800c892:	06d9      	lsls	r1, r3, #27
 800c894:	d407      	bmi.n	800c8a6 <__swsetup_r+0x32>
 800c896:	2309      	movs	r3, #9
 800c898:	602b      	str	r3, [r5, #0]
 800c89a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c89e:	81a3      	strh	r3, [r4, #12]
 800c8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a4:	e034      	b.n	800c910 <__swsetup_r+0x9c>
 800c8a6:	0758      	lsls	r0, r3, #29
 800c8a8:	d512      	bpl.n	800c8d0 <__swsetup_r+0x5c>
 800c8aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8ac:	b141      	cbz	r1, 800c8c0 <__swsetup_r+0x4c>
 800c8ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b2:	4299      	cmp	r1, r3
 800c8b4:	d002      	beq.n	800c8bc <__swsetup_r+0x48>
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	f7ff f992 	bl	800bbe0 <_free_r>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	6363      	str	r3, [r4, #52]	; 0x34
 800c8c0:	89a3      	ldrh	r3, [r4, #12]
 800c8c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	6063      	str	r3, [r4, #4]
 800c8cc:	6923      	ldr	r3, [r4, #16]
 800c8ce:	6023      	str	r3, [r4, #0]
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	f043 0308 	orr.w	r3, r3, #8
 800c8d6:	81a3      	strh	r3, [r4, #12]
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	b94b      	cbnz	r3, 800c8f0 <__swsetup_r+0x7c>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8e6:	d003      	beq.n	800c8f0 <__swsetup_r+0x7c>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7ff fd92 	bl	800c414 <__smakebuf_r>
 800c8f0:	89a0      	ldrh	r0, [r4, #12]
 800c8f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8f6:	f010 0301 	ands.w	r3, r0, #1
 800c8fa:	d00a      	beq.n	800c912 <__swsetup_r+0x9e>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	60a3      	str	r3, [r4, #8]
 800c900:	6963      	ldr	r3, [r4, #20]
 800c902:	425b      	negs	r3, r3
 800c904:	61a3      	str	r3, [r4, #24]
 800c906:	6923      	ldr	r3, [r4, #16]
 800c908:	b943      	cbnz	r3, 800c91c <__swsetup_r+0xa8>
 800c90a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c90e:	d1c4      	bne.n	800c89a <__swsetup_r+0x26>
 800c910:	bd38      	pop	{r3, r4, r5, pc}
 800c912:	0781      	lsls	r1, r0, #30
 800c914:	bf58      	it	pl
 800c916:	6963      	ldrpl	r3, [r4, #20]
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	e7f4      	b.n	800c906 <__swsetup_r+0x92>
 800c91c:	2000      	movs	r0, #0
 800c91e:	e7f7      	b.n	800c910 <__swsetup_r+0x9c>
 800c920:	24000098 	.word	0x24000098

0800c924 <_raise_r>:
 800c924:	291f      	cmp	r1, #31
 800c926:	b538      	push	{r3, r4, r5, lr}
 800c928:	4604      	mov	r4, r0
 800c92a:	460d      	mov	r5, r1
 800c92c:	d904      	bls.n	800c938 <_raise_r+0x14>
 800c92e:	2316      	movs	r3, #22
 800c930:	6003      	str	r3, [r0, #0]
 800c932:	f04f 30ff 	mov.w	r0, #4294967295
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c93a:	b112      	cbz	r2, 800c942 <_raise_r+0x1e>
 800c93c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c940:	b94b      	cbnz	r3, 800c956 <_raise_r+0x32>
 800c942:	4620      	mov	r0, r4
 800c944:	f000 f830 	bl	800c9a8 <_getpid_r>
 800c948:	462a      	mov	r2, r5
 800c94a:	4601      	mov	r1, r0
 800c94c:	4620      	mov	r0, r4
 800c94e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c952:	f000 b817 	b.w	800c984 <_kill_r>
 800c956:	2b01      	cmp	r3, #1
 800c958:	d00a      	beq.n	800c970 <_raise_r+0x4c>
 800c95a:	1c59      	adds	r1, r3, #1
 800c95c:	d103      	bne.n	800c966 <_raise_r+0x42>
 800c95e:	2316      	movs	r3, #22
 800c960:	6003      	str	r3, [r0, #0]
 800c962:	2001      	movs	r0, #1
 800c964:	e7e7      	b.n	800c936 <_raise_r+0x12>
 800c966:	2400      	movs	r4, #0
 800c968:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c96c:	4628      	mov	r0, r5
 800c96e:	4798      	blx	r3
 800c970:	2000      	movs	r0, #0
 800c972:	e7e0      	b.n	800c936 <_raise_r+0x12>

0800c974 <raise>:
 800c974:	4b02      	ldr	r3, [pc, #8]	; (800c980 <raise+0xc>)
 800c976:	4601      	mov	r1, r0
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	f7ff bfd3 	b.w	800c924 <_raise_r>
 800c97e:	bf00      	nop
 800c980:	24000098 	.word	0x24000098

0800c984 <_kill_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	4d07      	ldr	r5, [pc, #28]	; (800c9a4 <_kill_r+0x20>)
 800c988:	2300      	movs	r3, #0
 800c98a:	4604      	mov	r4, r0
 800c98c:	4608      	mov	r0, r1
 800c98e:	4611      	mov	r1, r2
 800c990:	602b      	str	r3, [r5, #0]
 800c992:	f7f4 ff80 	bl	8001896 <_kill>
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	d102      	bne.n	800c9a0 <_kill_r+0x1c>
 800c99a:	682b      	ldr	r3, [r5, #0]
 800c99c:	b103      	cbz	r3, 800c9a0 <_kill_r+0x1c>
 800c99e:	6023      	str	r3, [r4, #0]
 800c9a0:	bd38      	pop	{r3, r4, r5, pc}
 800c9a2:	bf00      	nop
 800c9a4:	240015f8 	.word	0x240015f8

0800c9a8 <_getpid_r>:
 800c9a8:	f7f4 bf6d 	b.w	8001886 <_getpid>

0800c9ac <_malloc_usable_size_r>:
 800c9ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b0:	1f18      	subs	r0, r3, #4
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bfbc      	itt	lt
 800c9b6:	580b      	ldrlt	r3, [r1, r0]
 800c9b8:	18c0      	addlt	r0, r0, r3
 800c9ba:	4770      	bx	lr

0800c9bc <_gettimeofday>:
 800c9bc:	4b02      	ldr	r3, [pc, #8]	; (800c9c8 <_gettimeofday+0xc>)
 800c9be:	2258      	movs	r2, #88	; 0x58
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c6:	4770      	bx	lr
 800c9c8:	240015f8 	.word	0x240015f8

0800c9cc <_init>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	bf00      	nop
 800c9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d2:	bc08      	pop	{r3}
 800c9d4:	469e      	mov	lr, r3
 800c9d6:	4770      	bx	lr

0800c9d8 <_fini>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	bf00      	nop
 800c9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9de:	bc08      	pop	{r3}
 800c9e0:	469e      	mov	lr, r3
 800c9e2:	4770      	bx	lr
